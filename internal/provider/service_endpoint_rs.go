package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=8)
// | Computed Resource Name=serviceendpoints
// +-----------------------------------------------------------------
// | SaseServiceEndpointProperties HasID=false
// | HttpProbe HasID=false
// | IcmpPingProbe HasID=false
// | SEPLivelinessProbeV2N2 HasID=false
// | Location HasID=false
// | Address HasID=false
// | ServiceLinkPeers HasID=false
// | ServiceEndpointV3 HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &serviceEndpointResource{}
	_ resource.ResourceWithConfigure   = &serviceEndpointResource{}
	_ resource.ResourceWithImportState = &serviceEndpointResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewServiceEndpointResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewServiceEndpointResource() resource.Resource {
	return &serviceEndpointResource{}
}

type serviceEndpointResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *serviceEndpointResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_service_endpoint"
}

// Schema defines the schema for this data source.
func (r *serviceEndpointResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=ServiceEndpointV3
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=address, type=REFERENCE macro=rss_schema
			"address": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=city, type=STRING macro=rss_schema
					"city": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=city, type=STRING macro=rss_schema
					// property: name=country, type=STRING macro=rss_schema
					"country": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=country, type=STRING macro=rss_schema
					// property: name=post_code, type=STRING macro=rss_schema
					"post_code": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=post_code, type=STRING macro=rss_schema
					// property: name=state, type=STRING macro=rss_schema
					"state": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=state, type=STRING macro=rss_schema
					// property: name=street, type=STRING macro=rss_schema
					"street": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=street, type=STRING macro=rss_schema
					// property: name=street2, type=STRING macro=rss_schema
					"street2": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=street2, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=street2, type=STRING macro=rss_schema
			// property: name=admin_up, type=BOOLEAN macro=rss_schema
			"admin_up": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=admin_up, type=BOOLEAN macro=rss_schema
			// property: name=allow_enterprise_traffic, type=BOOLEAN macro=rss_schema
			"allow_enterprise_traffic": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=allow_enterprise_traffic, type=BOOLEAN macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=disable_tunnel_reoptimization, type=BOOLEAN macro=rss_schema
			"disable_tunnel_reoptimization": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disable_tunnel_reoptimization, type=BOOLEAN macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=is_sase, type=BOOLEAN macro=rss_schema
			"is_sase": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_sase, type=BOOLEAN macro=rss_schema
			// property: name=liveliness_probe, type=REFERENCE macro=rss_schema
			"liveliness_probe": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=http, type=ARRAY_REFERENCE macro=rss_schema
					"http": rsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// property: name=failure_count, type=INTEGER macro=rss_schema
								"failure_count": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=failure_count, type=INTEGER macro=rss_schema
								// property: name=http_status_codes, type=ARRAY_PRIMITIVE macro=rss_schema
								"http_status_codes": rsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.Int64Type,
								},
								// key name holder for attribute: name=http_status_codes, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=interval, type=INTEGER macro=rss_schema
								"interval": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=interval, type=INTEGER macro=rss_schema
								// property: name=url, type=STRING macro=rss_schema
								"url": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=url, type=STRING macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=url, type=STRING macro=rss_schema
					// property: name=icmp_ping, type=ARRAY_REFERENCE macro=rss_schema
					"icmp_ping": rsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// property: name=failure_count, type=INTEGER macro=rss_schema
								"failure_count": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=failure_count, type=INTEGER macro=rss_schema
								// property: name=interval, type=INTEGER macro=rss_schema
								"interval": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=interval, type=INTEGER macro=rss_schema
								// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=rss_schema
								"ip_addresses": rsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=ip_addresses, type=ARRAY_PRIMITIVE macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=ip_addresses, type=ARRAY_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=ip_addresses, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=location, type=REFERENCE macro=rss_schema
			"location": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=description, type=STRING macro=rss_schema
					"description": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=latitude, type=NUMBER macro=rss_schema
					"latitude": rsschema.Float64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=latitude, type=NUMBER macro=rss_schema
					// property: name=longitude, type=NUMBER macro=rss_schema
					"longitude": rsschema.Float64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=longitude, type=NUMBER macro=rss_schema
				},
			},
			// key name holder for attribute: name=longitude, type=NUMBER macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=sase_properties, type=REFERENCE macro=rss_schema
			"sase_properties": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=active, type=BOOLEAN macro=rss_schema
					"active": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=active, type=BOOLEAN macro=rss_schema
					// property: name=lqm_enabled, type=BOOLEAN macro=rss_schema
					"lqm_enabled": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=lqm_enabled, type=BOOLEAN macro=rss_schema
				},
			},
			// key name holder for attribute: name=lqm_enabled, type=BOOLEAN macro=rss_schema
			// property: name=service_link_peers, type=REFERENCE macro=rss_schema
			"service_link_peers": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=hostnames, type=ARRAY_PRIMITIVE macro=rss_schema
					"hostnames": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=hostnames, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=rss_schema
					"ip_addresses": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=ip_addresses, type=ARRAY_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=ip_addresses, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=site_id, type=STRING macro=rss_schema
			"site_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=site_id, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=type, type=STRING macro=rss_schema
			"type": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=type, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *serviceEndpointResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *serviceEndpointResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *serviceEndpointResource) doPost(ctx context.Context, plan *rsModelServiceEndpointV3, state *rsModelServiceEndpointV3, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_service_endpoint")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_service_endpoint",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_service_endpoint"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v3.0/api/serviceendpoints"

	// copy parameters from plan always
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.ServiceEndpointV3{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=17
	tflog.Debug(ctx, "copy_from_plan body=body prefix=rsModel plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=address, type=REFERENCE macro=copy_from_plan
	if plan.Address != nil {
		body.Address = &sdwan_schema.Address{}
		// copy_from_plan: body=body.Address prefix=rsModel plan=plan.Address properties=6
		tflog.Debug(ctx, "copy_from_plan body=body.Address prefix=rsModel plan=plan.Address")
		// property: name=city, type=STRING macro=copy_from_plan
		body.Address.City = StringValueOrNil(plan.Address.City)
		// property: name=country, type=STRING macro=copy_from_plan
		body.Address.Country = StringValueOrNil(plan.Address.Country)
		// property: name=post_code, type=STRING macro=copy_from_plan
		body.Address.PostCode = StringValueOrNil(plan.Address.PostCode)
		// property: name=state, type=STRING macro=copy_from_plan
		body.Address.State = StringValueOrNil(plan.Address.State)
		// property: name=street, type=STRING macro=copy_from_plan
		body.Address.Street = StringValueOrNil(plan.Address.Street)
		// property: name=street2, type=STRING macro=copy_from_plan
		body.Address.Street2 = StringValueOrNil(plan.Address.Street2)
	}
	// property: name=admin_up, type=BOOLEAN macro=copy_from_plan
	body.AdminUp = BoolValueOrNil(plan.AdminUp)
	// property: name=allow_enterprise_traffic, type=BOOLEAN macro=copy_from_plan
	body.AllowEnterpriseTraffic = BoolValueOrNil(plan.AllowEnterpriseTraffic)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=disable_tunnel_reoptimization, type=BOOLEAN macro=copy_from_plan
	body.DisableTunnelReoptimization = BoolValueOrNil(plan.DisableTunnelReoptimization)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=is_sase, type=BOOLEAN macro=copy_from_plan
	body.IsSase = BoolValueOrNil(plan.IsSase)
	// property: name=liveliness_probe, type=REFERENCE macro=copy_from_plan
	if plan.LivelinessProbe != nil {
		body.LivelinessProbe = &sdwan_schema.SEPLivelinessProbeV2N2{}
		// copy_from_plan: body=body.LivelinessProbe prefix=rsModel plan=plan.LivelinessProbe properties=2
		tflog.Debug(ctx, "copy_from_plan body=body.LivelinessProbe prefix=rsModel plan=plan.LivelinessProbe")
		// property: name=http, type=ARRAY_REFERENCE macro=copy_from_plan
		if plan.LivelinessProbe.Http == nil {
			body.LivelinessProbe.Http = nil
		} else if len(plan.LivelinessProbe.Http) == 0 {
			body.LivelinessProbe.Http = []sdwan_schema.HttpProbe{}
		} else {
			body.LivelinessProbe.Http = make([]sdwan_schema.HttpProbe, 0, len(plan.LivelinessProbe.Http))
			for varLoopHttpIndex, varLoopHttp := range plan.LivelinessProbe.Http {
				// add a new item
				body.LivelinessProbe.Http = append(body.LivelinessProbe.Http, sdwan_schema.HttpProbe{})
				// copy_from_plan: body=body.LivelinessProbe.Http[varLoopHttpIndex] prefix=rsModel plan=varLoopHttp properties=4
				tflog.Debug(ctx, "copy_from_plan body=body.LivelinessProbe.Http[varLoopHttpIndex] prefix=rsModel plan=varLoopHttp")
				// property: name=failure_count, type=INTEGER macro=copy_from_plan
				body.LivelinessProbe.Http[varLoopHttpIndex].FailureCount = Int64ValueOrNil(varLoopHttp.FailureCount)
				// property: name=http_status_codes, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.LivelinessProbe.Http[varLoopHttpIndex].HttpStatusCodes = ListInt64ValueOrNil(ctx, varLoopHttp.HttpStatusCodes)
				// property: name=interval, type=INTEGER macro=copy_from_plan
				body.LivelinessProbe.Http[varLoopHttpIndex].Interval = Int64ValueOrNil(varLoopHttp.Interval)
				// property: name=url, type=STRING macro=copy_from_plan
				body.LivelinessProbe.Http[varLoopHttpIndex].Url = StringValueOrNil(varLoopHttp.Url)
			}
		}
		// property: name=icmp_ping, type=ARRAY_REFERENCE macro=copy_from_plan
		if plan.LivelinessProbe.IcmpPing == nil {
			body.LivelinessProbe.IcmpPing = nil
		} else if len(plan.LivelinessProbe.IcmpPing) == 0 {
			body.LivelinessProbe.IcmpPing = []sdwan_schema.IcmpPingProbe{}
		} else {
			body.LivelinessProbe.IcmpPing = make([]sdwan_schema.IcmpPingProbe, 0, len(plan.LivelinessProbe.IcmpPing))
			for varLoopIcmpPingIndex, varLoopIcmpPing := range plan.LivelinessProbe.IcmpPing {
				// add a new item
				body.LivelinessProbe.IcmpPing = append(body.LivelinessProbe.IcmpPing, sdwan_schema.IcmpPingProbe{})
				// copy_from_plan: body=body.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex] prefix=rsModel plan=varLoopIcmpPing properties=3
				tflog.Debug(ctx, "copy_from_plan body=body.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex] prefix=rsModel plan=varLoopIcmpPing")
				// property: name=failure_count, type=INTEGER macro=copy_from_plan
				body.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].FailureCount = Int64ValueOrNil(varLoopIcmpPing.FailureCount)
				// property: name=interval, type=INTEGER macro=copy_from_plan
				body.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].Interval = Int64ValueOrNil(varLoopIcmpPing.Interval)
				// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].IpAddresses = ListStringValueOrNil(ctx, varLoopIcmpPing.IpAddresses)
			}
		}
	}
	// property: name=location, type=REFERENCE macro=copy_from_plan
	if plan.Location != nil {
		body.Location = &sdwan_schema.Location{}
		// copy_from_plan: body=body.Location prefix=rsModel plan=plan.Location properties=3
		tflog.Debug(ctx, "copy_from_plan body=body.Location prefix=rsModel plan=plan.Location")
		// property: name=description, type=STRING macro=copy_from_plan
		body.Location.Description = StringValueOrNil(plan.Location.Description)
		// property: name=latitude, type=NUMBER macro=copy_from_plan
		body.Location.Latitude = Float64ValueOrNil(plan.Location.Latitude)
		// property: name=longitude, type=NUMBER macro=copy_from_plan
		body.Location.Longitude = Float64ValueOrNil(plan.Location.Longitude)
	}
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=sase_properties, type=REFERENCE macro=copy_from_plan
	if plan.SaseProperties != nil {
		body.SaseProperties = &sdwan_schema.SaseServiceEndpointProperties{}
		// copy_from_plan: body=body.SaseProperties prefix=rsModel plan=plan.SaseProperties properties=2
		tflog.Debug(ctx, "copy_from_plan body=body.SaseProperties prefix=rsModel plan=plan.SaseProperties")
		// property: name=active, type=BOOLEAN macro=copy_from_plan
		body.SaseProperties.Active = BoolValueOrNil(plan.SaseProperties.Active)
		// property: name=lqm_enabled, type=BOOLEAN macro=copy_from_plan
		body.SaseProperties.LqmEnabled = BoolValueOrNil(plan.SaseProperties.LqmEnabled)
	}
	// property: name=service_link_peers, type=REFERENCE macro=copy_from_plan
	if plan.ServiceLinkPeers != nil {
		body.ServiceLinkPeers = &sdwan_schema.ServiceLinkPeers{}
		// copy_from_plan: body=body.ServiceLinkPeers prefix=rsModel plan=plan.ServiceLinkPeers properties=2
		tflog.Debug(ctx, "copy_from_plan body=body.ServiceLinkPeers prefix=rsModel plan=plan.ServiceLinkPeers")
		// property: name=hostnames, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.ServiceLinkPeers.Hostnames = ListStringValueOrNil(ctx, plan.ServiceLinkPeers.Hostnames)
		// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.ServiceLinkPeers.IpAddresses = ListStringValueOrNil(ctx, plan.ServiceLinkPeers.IpAddresses)
	}
	// property: name=site_id, type=STRING macro=copy_from_plan
	body.SiteId = StringValueOrNil(plan.SiteId)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=type, type=STRING macro=copy_from_plan
	body.Type = StringValueOrNil(plan.Type)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct ServiceEndpointV3 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete request_body_string::id")
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	tflog.Debug(ctx, "http json override: delete request_body_string::_etag")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	tflog.Debug(ctx, "http json override: set request_body_string::_schema")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_service_endpoint", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_service_endpoint",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_service_endpoint", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_service_endpoint",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_service_endpoint", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.ServiceEndpointV3
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to ServiceEndpointV3 in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_service_endpoint with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=ServiceEndpointV3
	// copy_to_state: state=state prefix=rsModel ans=ans properties=17
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=address, type=REFERENCE macro=copy_to_state
	if ans.Address == nil {
		state.Address = nil
	} else {
		state.Address = &rsModelAddress{}
		// copy_to_state: state=state.Address prefix=rsModel ans=ans.Address properties=6
		tflog.Debug(ctx, "copy_to_state state=state.Address prefix=rsModel ans=ans.Address")
		// property: name=city, type=STRING macro=copy_to_state
		state.Address.City = types.StringPointerValue(ans.Address.City)
		// property: name=country, type=STRING macro=copy_to_state
		state.Address.Country = types.StringPointerValue(ans.Address.Country)
		// property: name=post_code, type=STRING macro=copy_to_state
		state.Address.PostCode = types.StringPointerValue(ans.Address.PostCode)
		// property: name=state, type=STRING macro=copy_to_state
		state.Address.State = types.StringPointerValue(ans.Address.State)
		// property: name=street, type=STRING macro=copy_to_state
		state.Address.Street = types.StringPointerValue(ans.Address.Street)
		// property: name=street2, type=STRING macro=copy_to_state
		state.Address.Street2 = types.StringPointerValue(ans.Address.Street2)
	}
	// property: name=admin_up, type=BOOLEAN macro=copy_to_state
	state.AdminUp = types.BoolPointerValue(ans.AdminUp)
	// property: name=allow_enterprise_traffic, type=BOOLEAN macro=copy_to_state
	state.AllowEnterpriseTraffic = types.BoolPointerValue(ans.AllowEnterpriseTraffic)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disable_tunnel_reoptimization, type=BOOLEAN macro=copy_to_state
	state.DisableTunnelReoptimization = types.BoolPointerValue(ans.DisableTunnelReoptimization)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=is_sase, type=BOOLEAN macro=copy_to_state
	state.IsSase = types.BoolPointerValue(ans.IsSase)
	// property: name=liveliness_probe, type=REFERENCE macro=copy_to_state
	if ans.LivelinessProbe == nil {
		state.LivelinessProbe = nil
	} else {
		state.LivelinessProbe = &rsModelSEPLivelinessProbeV2N2{}
		// copy_to_state: state=state.LivelinessProbe prefix=rsModel ans=ans.LivelinessProbe properties=2
		tflog.Debug(ctx, "copy_to_state state=state.LivelinessProbe prefix=rsModel ans=ans.LivelinessProbe")
		// property: name=http, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.LivelinessProbe.Http == nil {
			state.LivelinessProbe.Http = nil
		} else if len(ans.LivelinessProbe.Http) == 0 {
			state.LivelinessProbe.Http = []rsModelHttpProbe{}
		} else {
			state.LivelinessProbe.Http = make([]rsModelHttpProbe, 0, len(ans.LivelinessProbe.Http))
			for varLoopHttpIndex, varLoopHttp := range ans.LivelinessProbe.Http {
				// add a new item
				state.LivelinessProbe.Http = append(state.LivelinessProbe.Http, rsModelHttpProbe{})
				// copy_to_state: state=state.LivelinessProbe.Http[varLoopHttpIndex] prefix=rsModel ans=varLoopHttp properties=4
				tflog.Debug(ctx, "copy_to_state state=state.LivelinessProbe.Http[varLoopHttpIndex] prefix=rsModel ans=varLoopHttp")
				// property: name=failure_count, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.Http[varLoopHttpIndex].FailureCount = types.Int64PointerValue(varLoopHttp.FailureCount)
				// property: name=http_status_codes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varHttpStatusCodes, errHttpStatusCodes := types.ListValueFrom(ctx, types.Int64Type, varLoopHttp.HttpStatusCodes)
				state.LivelinessProbe.Http[varLoopHttpIndex].HttpStatusCodes = varHttpStatusCodes
				resp.Diagnostics.Append(errHttpStatusCodes.Errors()...)
				// property: name=interval, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.Http[varLoopHttpIndex].Interval = types.Int64PointerValue(varLoopHttp.Interval)
				// property: name=url, type=STRING macro=copy_to_state
				state.LivelinessProbe.Http[varLoopHttpIndex].Url = types.StringPointerValue(varLoopHttp.Url)
			}
		}
		// property: name=icmp_ping, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.LivelinessProbe.IcmpPing == nil {
			state.LivelinessProbe.IcmpPing = nil
		} else if len(ans.LivelinessProbe.IcmpPing) == 0 {
			state.LivelinessProbe.IcmpPing = []rsModelIcmpPingProbe{}
		} else {
			state.LivelinessProbe.IcmpPing = make([]rsModelIcmpPingProbe, 0, len(ans.LivelinessProbe.IcmpPing))
			for varLoopIcmpPingIndex, varLoopIcmpPing := range ans.LivelinessProbe.IcmpPing {
				// add a new item
				state.LivelinessProbe.IcmpPing = append(state.LivelinessProbe.IcmpPing, rsModelIcmpPingProbe{})
				// copy_to_state: state=state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex] prefix=rsModel ans=varLoopIcmpPing properties=3
				tflog.Debug(ctx, "copy_to_state state=state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex] prefix=rsModel ans=varLoopIcmpPing")
				// property: name=failure_count, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].FailureCount = types.Int64PointerValue(varLoopIcmpPing.FailureCount)
				// property: name=interval, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].Interval = types.Int64PointerValue(varLoopIcmpPing.Interval)
				// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpAddresses, errIpAddresses := types.ListValueFrom(ctx, types.StringType, varLoopIcmpPing.IpAddresses)
				state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].IpAddresses = varIpAddresses
				resp.Diagnostics.Append(errIpAddresses.Errors()...)
			}
		}
	}
	// property: name=location, type=REFERENCE macro=copy_to_state
	if ans.Location == nil {
		state.Location = nil
	} else {
		state.Location = &rsModelLocation{}
		// copy_to_state: state=state.Location prefix=rsModel ans=ans.Location properties=3
		tflog.Debug(ctx, "copy_to_state state=state.Location prefix=rsModel ans=ans.Location")
		// property: name=description, type=STRING macro=copy_to_state
		state.Location.Description = types.StringPointerValue(ans.Location.Description)
		// property: name=latitude, type=NUMBER macro=copy_to_state
		state.Location.Latitude = types.Float64PointerValue(ans.Location.Latitude)
		// property: name=longitude, type=NUMBER macro=copy_to_state
		state.Location.Longitude = types.Float64PointerValue(ans.Location.Longitude)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=sase_properties, type=REFERENCE macro=copy_to_state
	if ans.SaseProperties == nil {
		state.SaseProperties = nil
	} else {
		state.SaseProperties = &rsModelSaseServiceEndpointProperties{}
		// copy_to_state: state=state.SaseProperties prefix=rsModel ans=ans.SaseProperties properties=2
		tflog.Debug(ctx, "copy_to_state state=state.SaseProperties prefix=rsModel ans=ans.SaseProperties")
		// property: name=active, type=BOOLEAN macro=copy_to_state
		state.SaseProperties.Active = types.BoolPointerValue(ans.SaseProperties.Active)
		// property: name=lqm_enabled, type=BOOLEAN macro=copy_to_state
		state.SaseProperties.LqmEnabled = types.BoolPointerValue(ans.SaseProperties.LqmEnabled)
	}
	// property: name=service_link_peers, type=REFERENCE macro=copy_to_state
	if ans.ServiceLinkPeers == nil {
		state.ServiceLinkPeers = nil
	} else {
		state.ServiceLinkPeers = &rsModelServiceLinkPeers{}
		// copy_to_state: state=state.ServiceLinkPeers prefix=rsModel ans=ans.ServiceLinkPeers properties=2
		tflog.Debug(ctx, "copy_to_state state=state.ServiceLinkPeers prefix=rsModel ans=ans.ServiceLinkPeers")
		// property: name=hostnames, type=ARRAY_PRIMITIVE macro=copy_to_state
		varHostnames, errHostnames := types.ListValueFrom(ctx, types.StringType, ans.ServiceLinkPeers.Hostnames)
		state.ServiceLinkPeers.Hostnames = varHostnames
		resp.Diagnostics.Append(errHostnames.Errors()...)
		// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpAddresses, errIpAddresses := types.ListValueFrom(ctx, types.StringType, ans.ServiceLinkPeers.IpAddresses)
		state.ServiceLinkPeers.IpAddresses = varIpAddresses
		resp.Diagnostics.Append(errIpAddresses.Errors()...)
	}
	// property: name=site_id, type=STRING macro=copy_to_state
	state.SiteId = types.StringPointerValue(ans.SiteId)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=type, type=STRING macro=copy_to_state
	state.Type = types.StringPointerValue(ans.Type)
	return true
}

func (r *serviceEndpointResource) doGet(ctx context.Context, state *rsModelServiceEndpointV3, savestate *rsModelServiceEndpointV3, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_service_endpoint",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 1 {
		resp.Diagnostics.AddError("error in prismasdwan_service_endpoint ID format", "Expected 1 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_service_endpoint"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v3.0/api/serviceendpoints/{service_endpoint_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["service_endpoint_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_service_endpoint", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_service_endpoint",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_service_endpoint from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=ServiceEndpointV3
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.ServiceEndpointV3
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to ServiceEndpointV3 in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=17
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=address, type=REFERENCE macro=copy_to_state
	if ans.Address == nil {
		state.Address = nil
	} else {
		state.Address = &rsModelAddress{}
		// copy_to_state: state=state.Address prefix=rsModel ans=ans.Address properties=6
		tflog.Debug(ctx, "copy_to_state state=state.Address prefix=rsModel ans=ans.Address")
		// property: name=city, type=STRING macro=copy_to_state
		state.Address.City = types.StringPointerValue(ans.Address.City)
		// property: name=country, type=STRING macro=copy_to_state
		state.Address.Country = types.StringPointerValue(ans.Address.Country)
		// property: name=post_code, type=STRING macro=copy_to_state
		state.Address.PostCode = types.StringPointerValue(ans.Address.PostCode)
		// property: name=state, type=STRING macro=copy_to_state
		state.Address.State = types.StringPointerValue(ans.Address.State)
		// property: name=street, type=STRING macro=copy_to_state
		state.Address.Street = types.StringPointerValue(ans.Address.Street)
		// property: name=street2, type=STRING macro=copy_to_state
		state.Address.Street2 = types.StringPointerValue(ans.Address.Street2)
	}
	// property: name=admin_up, type=BOOLEAN macro=copy_to_state
	state.AdminUp = types.BoolPointerValue(ans.AdminUp)
	// property: name=allow_enterprise_traffic, type=BOOLEAN macro=copy_to_state
	state.AllowEnterpriseTraffic = types.BoolPointerValue(ans.AllowEnterpriseTraffic)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disable_tunnel_reoptimization, type=BOOLEAN macro=copy_to_state
	state.DisableTunnelReoptimization = types.BoolPointerValue(ans.DisableTunnelReoptimization)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=is_sase, type=BOOLEAN macro=copy_to_state
	state.IsSase = types.BoolPointerValue(ans.IsSase)
	// property: name=liveliness_probe, type=REFERENCE macro=copy_to_state
	if ans.LivelinessProbe == nil {
		state.LivelinessProbe = nil
	} else {
		state.LivelinessProbe = &rsModelSEPLivelinessProbeV2N2{}
		// copy_to_state: state=state.LivelinessProbe prefix=rsModel ans=ans.LivelinessProbe properties=2
		tflog.Debug(ctx, "copy_to_state state=state.LivelinessProbe prefix=rsModel ans=ans.LivelinessProbe")
		// property: name=http, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.LivelinessProbe.Http == nil {
			state.LivelinessProbe.Http = nil
		} else if len(ans.LivelinessProbe.Http) == 0 {
			state.LivelinessProbe.Http = []rsModelHttpProbe{}
		} else {
			state.LivelinessProbe.Http = make([]rsModelHttpProbe, 0, len(ans.LivelinessProbe.Http))
			for varLoopHttpIndex, varLoopHttp := range ans.LivelinessProbe.Http {
				// add a new item
				state.LivelinessProbe.Http = append(state.LivelinessProbe.Http, rsModelHttpProbe{})
				// copy_to_state: state=state.LivelinessProbe.Http[varLoopHttpIndex] prefix=rsModel ans=varLoopHttp properties=4
				tflog.Debug(ctx, "copy_to_state state=state.LivelinessProbe.Http[varLoopHttpIndex] prefix=rsModel ans=varLoopHttp")
				// property: name=failure_count, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.Http[varLoopHttpIndex].FailureCount = types.Int64PointerValue(varLoopHttp.FailureCount)
				// property: name=http_status_codes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varHttpStatusCodes, errHttpStatusCodes := types.ListValueFrom(ctx, types.Int64Type, varLoopHttp.HttpStatusCodes)
				state.LivelinessProbe.Http[varLoopHttpIndex].HttpStatusCodes = varHttpStatusCodes
				resp.Diagnostics.Append(errHttpStatusCodes.Errors()...)
				// property: name=interval, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.Http[varLoopHttpIndex].Interval = types.Int64PointerValue(varLoopHttp.Interval)
				// property: name=url, type=STRING macro=copy_to_state
				state.LivelinessProbe.Http[varLoopHttpIndex].Url = types.StringPointerValue(varLoopHttp.Url)
			}
		}
		// property: name=icmp_ping, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.LivelinessProbe.IcmpPing == nil {
			state.LivelinessProbe.IcmpPing = nil
		} else if len(ans.LivelinessProbe.IcmpPing) == 0 {
			state.LivelinessProbe.IcmpPing = []rsModelIcmpPingProbe{}
		} else {
			state.LivelinessProbe.IcmpPing = make([]rsModelIcmpPingProbe, 0, len(ans.LivelinessProbe.IcmpPing))
			for varLoopIcmpPingIndex, varLoopIcmpPing := range ans.LivelinessProbe.IcmpPing {
				// add a new item
				state.LivelinessProbe.IcmpPing = append(state.LivelinessProbe.IcmpPing, rsModelIcmpPingProbe{})
				// copy_to_state: state=state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex] prefix=rsModel ans=varLoopIcmpPing properties=3
				tflog.Debug(ctx, "copy_to_state state=state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex] prefix=rsModel ans=varLoopIcmpPing")
				// property: name=failure_count, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].FailureCount = types.Int64PointerValue(varLoopIcmpPing.FailureCount)
				// property: name=interval, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].Interval = types.Int64PointerValue(varLoopIcmpPing.Interval)
				// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpAddresses, errIpAddresses := types.ListValueFrom(ctx, types.StringType, varLoopIcmpPing.IpAddresses)
				state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].IpAddresses = varIpAddresses
				resp.Diagnostics.Append(errIpAddresses.Errors()...)
			}
		}
	}
	// property: name=location, type=REFERENCE macro=copy_to_state
	if ans.Location == nil {
		state.Location = nil
	} else {
		state.Location = &rsModelLocation{}
		// copy_to_state: state=state.Location prefix=rsModel ans=ans.Location properties=3
		tflog.Debug(ctx, "copy_to_state state=state.Location prefix=rsModel ans=ans.Location")
		// property: name=description, type=STRING macro=copy_to_state
		state.Location.Description = types.StringPointerValue(ans.Location.Description)
		// property: name=latitude, type=NUMBER macro=copy_to_state
		state.Location.Latitude = types.Float64PointerValue(ans.Location.Latitude)
		// property: name=longitude, type=NUMBER macro=copy_to_state
		state.Location.Longitude = types.Float64PointerValue(ans.Location.Longitude)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=sase_properties, type=REFERENCE macro=copy_to_state
	if ans.SaseProperties == nil {
		state.SaseProperties = nil
	} else {
		state.SaseProperties = &rsModelSaseServiceEndpointProperties{}
		// copy_to_state: state=state.SaseProperties prefix=rsModel ans=ans.SaseProperties properties=2
		tflog.Debug(ctx, "copy_to_state state=state.SaseProperties prefix=rsModel ans=ans.SaseProperties")
		// property: name=active, type=BOOLEAN macro=copy_to_state
		state.SaseProperties.Active = types.BoolPointerValue(ans.SaseProperties.Active)
		// property: name=lqm_enabled, type=BOOLEAN macro=copy_to_state
		state.SaseProperties.LqmEnabled = types.BoolPointerValue(ans.SaseProperties.LqmEnabled)
	}
	// property: name=service_link_peers, type=REFERENCE macro=copy_to_state
	if ans.ServiceLinkPeers == nil {
		state.ServiceLinkPeers = nil
	} else {
		state.ServiceLinkPeers = &rsModelServiceLinkPeers{}
		// copy_to_state: state=state.ServiceLinkPeers prefix=rsModel ans=ans.ServiceLinkPeers properties=2
		tflog.Debug(ctx, "copy_to_state state=state.ServiceLinkPeers prefix=rsModel ans=ans.ServiceLinkPeers")
		// property: name=hostnames, type=ARRAY_PRIMITIVE macro=copy_to_state
		varHostnames, errHostnames := types.ListValueFrom(ctx, types.StringType, ans.ServiceLinkPeers.Hostnames)
		state.ServiceLinkPeers.Hostnames = varHostnames
		resp.Diagnostics.Append(errHostnames.Errors()...)
		// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpAddresses, errIpAddresses := types.ListValueFrom(ctx, types.StringType, ans.ServiceLinkPeers.IpAddresses)
		state.ServiceLinkPeers.IpAddresses = varIpAddresses
		resp.Diagnostics.Append(errIpAddresses.Errors()...)
	}
	// property: name=site_id, type=STRING macro=copy_to_state
	state.SiteId = types.StringPointerValue(ans.SiteId)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=type, type=STRING macro=copy_to_state
	state.Type = types.StringPointerValue(ans.Type)
	return true
}

func (r *serviceEndpointResource) doPut(ctx context.Context, plan *rsModelServiceEndpointV3, state *rsModelServiceEndpointV3, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_service_endpoint",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_service_endpoint", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) < 1 {
		resp.Diagnostics.AddError("error in prismasdwan_service_endpoint ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_service_endpoint"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v3.0/api/serviceendpoints/{service_endpoint_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["service_endpoint_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.ServiceEndpointV3{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=17
	tflog.Debug(ctx, "copy_from_plan_or_state body=body prefix=rsModel state=state plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=address, type=REFERENCE macro=copy_from_plan_or_state
	if plan.Address == nil {
		body.Address = nil
	} else {
		body.Address = &sdwan_schema.Address{}
		// copy_from_plan_or_state: body=body.Address prefix=rsModel state=state.Address plan=plan.Address properties=6
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.Address prefix=rsModel state=state.Address plan=plan.Address")
		// property: name=city, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.City = ValueStringPointerFromPlanOrState(plan.Address.City, state.Address.City)
		} else {
			body.Address.City = StringValueOrNil(plan.Address.City)
		}
		// property: name=country, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.Country = ValueStringPointerFromPlanOrState(plan.Address.Country, state.Address.Country)
		} else {
			body.Address.Country = StringValueOrNil(plan.Address.Country)
		}
		// property: name=post_code, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.PostCode = ValueStringPointerFromPlanOrState(plan.Address.PostCode, state.Address.PostCode)
		} else {
			body.Address.PostCode = StringValueOrNil(plan.Address.PostCode)
		}
		// property: name=state, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.State = ValueStringPointerFromPlanOrState(plan.Address.State, state.Address.State)
		} else {
			body.Address.State = StringValueOrNil(plan.Address.State)
		}
		// property: name=street, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.Street = ValueStringPointerFromPlanOrState(plan.Address.Street, state.Address.Street)
		} else {
			body.Address.Street = StringValueOrNil(plan.Address.Street)
		}
		// property: name=street2, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.Street2 = ValueStringPointerFromPlanOrState(plan.Address.Street2, state.Address.Street2)
		} else {
			body.Address.Street2 = StringValueOrNil(plan.Address.Street2)
		}
	}
	// property: name=admin_up, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.AdminUp = ValueBoolPointerFromPlanOrState(plan.AdminUp, state.AdminUp)
	} else {
		body.AdminUp = BoolValueOrNil(plan.AdminUp)
	}
	// property: name=allow_enterprise_traffic, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.AllowEnterpriseTraffic = ValueBoolPointerFromPlanOrState(plan.AllowEnterpriseTraffic, state.AllowEnterpriseTraffic)
	} else {
		body.AllowEnterpriseTraffic = BoolValueOrNil(plan.AllowEnterpriseTraffic)
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=disable_tunnel_reoptimization, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.DisableTunnelReoptimization = ValueBoolPointerFromPlanOrState(plan.DisableTunnelReoptimization, state.DisableTunnelReoptimization)
	} else {
		body.DisableTunnelReoptimization = BoolValueOrNil(plan.DisableTunnelReoptimization)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=is_sase, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.IsSase = ValueBoolPointerFromPlanOrState(plan.IsSase, state.IsSase)
	} else {
		body.IsSase = BoolValueOrNil(plan.IsSase)
	}
	// property: name=liveliness_probe, type=REFERENCE macro=copy_from_plan_or_state
	if plan.LivelinessProbe == nil {
		body.LivelinessProbe = nil
	} else {
		body.LivelinessProbe = &sdwan_schema.SEPLivelinessProbeV2N2{}
		// copy_from_plan_or_state: body=body.LivelinessProbe prefix=rsModel state=state.LivelinessProbe plan=plan.LivelinessProbe properties=2
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.LivelinessProbe prefix=rsModel state=state.LivelinessProbe plan=plan.LivelinessProbe")
		// property: name=http, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
		if plan.LivelinessProbe.Http == nil && (state.LivelinessProbe == nil || state.LivelinessProbe.Http == nil) {
			body.LivelinessProbe.Http = nil
		} else if len(plan.LivelinessProbe.Http) == 0 && (state.LivelinessProbe == nil || len(state.LivelinessProbe.Http) == 0) {
			body.LivelinessProbe.Http = []sdwan_schema.HttpProbe{}
		} else if len(plan.LivelinessProbe.Http) != 0 || (state.LivelinessProbe != nil && len(state.LivelinessProbe.Http) != 0) {
			HttpToUse := plan.LivelinessProbe.Http
			if len(plan.LivelinessProbe.Http) == 0 {
				HttpToUse = state.LivelinessProbe.Http
			}
			body.LivelinessProbe.Http = make([]sdwan_schema.HttpProbe, 0, len(HttpToUse))
			for varLoopHttpIndex, varLoopHttp := range HttpToUse {
				// add a new item
				body.LivelinessProbe.Http = append(body.LivelinessProbe.Http, sdwan_schema.HttpProbe{})
				// since we have chosen to stick with either the plan or state, we need to simply copy child properties
				// copy_from_plan: body=body.LivelinessProbe.Http[varLoopHttpIndex] prefix=rsModel plan=varLoopHttp properties=4
				tflog.Debug(ctx, "copy_from_plan body=body.LivelinessProbe.Http[varLoopHttpIndex] prefix=rsModel plan=varLoopHttp")
				// property: name=failure_count, type=INTEGER macro=copy_from_plan
				body.LivelinessProbe.Http[varLoopHttpIndex].FailureCount = Int64ValueOrNil(varLoopHttp.FailureCount)
				// property: name=http_status_codes, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.LivelinessProbe.Http[varLoopHttpIndex].HttpStatusCodes = ListInt64ValueOrNil(ctx, varLoopHttp.HttpStatusCodes)
				// property: name=interval, type=INTEGER macro=copy_from_plan
				body.LivelinessProbe.Http[varLoopHttpIndex].Interval = Int64ValueOrNil(varLoopHttp.Interval)
				// property: name=url, type=STRING macro=copy_from_plan
				body.LivelinessProbe.Http[varLoopHttpIndex].Url = StringValueOrNil(varLoopHttp.Url)
			}
		}
		// property: name=icmp_ping, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
		if plan.LivelinessProbe.IcmpPing == nil && (state.LivelinessProbe == nil || state.LivelinessProbe.IcmpPing == nil) {
			body.LivelinessProbe.IcmpPing = nil
		} else if len(plan.LivelinessProbe.IcmpPing) == 0 && (state.LivelinessProbe == nil || len(state.LivelinessProbe.IcmpPing) == 0) {
			body.LivelinessProbe.IcmpPing = []sdwan_schema.IcmpPingProbe{}
		} else if len(plan.LivelinessProbe.IcmpPing) != 0 || (state.LivelinessProbe != nil && len(state.LivelinessProbe.IcmpPing) != 0) {
			IcmpPingToUse := plan.LivelinessProbe.IcmpPing
			if len(plan.LivelinessProbe.IcmpPing) == 0 {
				IcmpPingToUse = state.LivelinessProbe.IcmpPing
			}
			body.LivelinessProbe.IcmpPing = make([]sdwan_schema.IcmpPingProbe, 0, len(IcmpPingToUse))
			for varLoopIcmpPingIndex, varLoopIcmpPing := range IcmpPingToUse {
				// add a new item
				body.LivelinessProbe.IcmpPing = append(body.LivelinessProbe.IcmpPing, sdwan_schema.IcmpPingProbe{})
				// since we have chosen to stick with either the plan or state, we need to simply copy child properties
				// copy_from_plan: body=body.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex] prefix=rsModel plan=varLoopIcmpPing properties=3
				tflog.Debug(ctx, "copy_from_plan body=body.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex] prefix=rsModel plan=varLoopIcmpPing")
				// property: name=failure_count, type=INTEGER macro=copy_from_plan
				body.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].FailureCount = Int64ValueOrNil(varLoopIcmpPing.FailureCount)
				// property: name=interval, type=INTEGER macro=copy_from_plan
				body.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].Interval = Int64ValueOrNil(varLoopIcmpPing.Interval)
				// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].IpAddresses = ListStringValueOrNil(ctx, varLoopIcmpPing.IpAddresses)
			}
		}
	}
	// property: name=location, type=REFERENCE macro=copy_from_plan_or_state
	if plan.Location == nil {
		body.Location = nil
	} else {
		body.Location = &sdwan_schema.Location{}
		// copy_from_plan_or_state: body=body.Location prefix=rsModel state=state.Location plan=plan.Location properties=3
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.Location prefix=rsModel state=state.Location plan=plan.Location")
		// property: name=description, type=STRING macro=copy_from_plan_or_state
		if state.Location != nil {
			body.Location.Description = ValueStringPointerFromPlanOrState(plan.Location.Description, state.Location.Description)
		} else {
			body.Location.Description = StringValueOrNil(plan.Location.Description)
		}
		// property: name=latitude, type=NUMBER macro=copy_from_plan_or_state
		if state.Location != nil {
			body.Location.Latitude = ValueFloat64PointerFromPlanOrState(plan.Location.Latitude, state.Location.Latitude)
		} else {
			body.Location.Latitude = Float64ValueOrNil(plan.Location.Latitude)
		}
		// property: name=longitude, type=NUMBER macro=copy_from_plan_or_state
		if state.Location != nil {
			body.Location.Longitude = ValueFloat64PointerFromPlanOrState(plan.Location.Longitude, state.Location.Longitude)
		} else {
			body.Location.Longitude = Float64ValueOrNil(plan.Location.Longitude)
		}
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=sase_properties, type=REFERENCE macro=copy_from_plan_or_state
	if plan.SaseProperties == nil {
		body.SaseProperties = nil
	} else {
		body.SaseProperties = &sdwan_schema.SaseServiceEndpointProperties{}
		// copy_from_plan_or_state: body=body.SaseProperties prefix=rsModel state=state.SaseProperties plan=plan.SaseProperties properties=2
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.SaseProperties prefix=rsModel state=state.SaseProperties plan=plan.SaseProperties")
		// property: name=active, type=BOOLEAN macro=copy_from_plan_or_state
		if state.SaseProperties != nil {
			body.SaseProperties.Active = ValueBoolPointerFromPlanOrState(plan.SaseProperties.Active, state.SaseProperties.Active)
		} else {
			body.SaseProperties.Active = BoolValueOrNil(plan.SaseProperties.Active)
		}
		// property: name=lqm_enabled, type=BOOLEAN macro=copy_from_plan_or_state
		if state.SaseProperties != nil {
			body.SaseProperties.LqmEnabled = ValueBoolPointerFromPlanOrState(plan.SaseProperties.LqmEnabled, state.SaseProperties.LqmEnabled)
		} else {
			body.SaseProperties.LqmEnabled = BoolValueOrNil(plan.SaseProperties.LqmEnabled)
		}
	}
	// property: name=service_link_peers, type=REFERENCE macro=copy_from_plan_or_state
	if plan.ServiceLinkPeers == nil {
		body.ServiceLinkPeers = nil
	} else {
		body.ServiceLinkPeers = &sdwan_schema.ServiceLinkPeers{}
		// copy_from_plan_or_state: body=body.ServiceLinkPeers prefix=rsModel state=state.ServiceLinkPeers plan=plan.ServiceLinkPeers properties=2
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.ServiceLinkPeers prefix=rsModel state=state.ServiceLinkPeers plan=plan.ServiceLinkPeers")
		// property: name=hostnames, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.ServiceLinkPeers.Hostnames = ListStringValueOrNil(ctx, plan.ServiceLinkPeers.Hostnames)
		// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.ServiceLinkPeers.IpAddresses = ListStringValueOrNil(ctx, plan.ServiceLinkPeers.IpAddresses)
	}
	// property: name=site_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.SiteId = ValueStringPointerFromPlanOrState(plan.SiteId, state.SiteId)
	} else {
		body.SiteId = StringValueOrNil(plan.SiteId)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=type, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Type = ValueStringPointerFromPlanOrState(plan.Type, state.Type)
	} else {
		body.Type = StringValueOrNil(plan.Type)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct ServiceEndpointV3 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_service_endpoint", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_service_endpoint",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_service_endpoint", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_service_endpoint",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_service_endpoint", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.ServiceEndpointV3
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to ServiceEndpointV3 in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=ServiceEndpointV3
	// copy_to_state: state=state prefix=rsModel ans=ans properties=17
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=address, type=REFERENCE macro=copy_to_state
	if ans.Address == nil {
		state.Address = nil
	} else {
		state.Address = &rsModelAddress{}
		// copy_to_state: state=state.Address prefix=rsModel ans=ans.Address properties=6
		tflog.Debug(ctx, "copy_to_state state=state.Address prefix=rsModel ans=ans.Address")
		// property: name=city, type=STRING macro=copy_to_state
		state.Address.City = types.StringPointerValue(ans.Address.City)
		// property: name=country, type=STRING macro=copy_to_state
		state.Address.Country = types.StringPointerValue(ans.Address.Country)
		// property: name=post_code, type=STRING macro=copy_to_state
		state.Address.PostCode = types.StringPointerValue(ans.Address.PostCode)
		// property: name=state, type=STRING macro=copy_to_state
		state.Address.State = types.StringPointerValue(ans.Address.State)
		// property: name=street, type=STRING macro=copy_to_state
		state.Address.Street = types.StringPointerValue(ans.Address.Street)
		// property: name=street2, type=STRING macro=copy_to_state
		state.Address.Street2 = types.StringPointerValue(ans.Address.Street2)
	}
	// property: name=admin_up, type=BOOLEAN macro=copy_to_state
	state.AdminUp = types.BoolPointerValue(ans.AdminUp)
	// property: name=allow_enterprise_traffic, type=BOOLEAN macro=copy_to_state
	state.AllowEnterpriseTraffic = types.BoolPointerValue(ans.AllowEnterpriseTraffic)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disable_tunnel_reoptimization, type=BOOLEAN macro=copy_to_state
	state.DisableTunnelReoptimization = types.BoolPointerValue(ans.DisableTunnelReoptimization)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=is_sase, type=BOOLEAN macro=copy_to_state
	state.IsSase = types.BoolPointerValue(ans.IsSase)
	// property: name=liveliness_probe, type=REFERENCE macro=copy_to_state
	if ans.LivelinessProbe == nil {
		state.LivelinessProbe = nil
	} else {
		state.LivelinessProbe = &rsModelSEPLivelinessProbeV2N2{}
		// copy_to_state: state=state.LivelinessProbe prefix=rsModel ans=ans.LivelinessProbe properties=2
		tflog.Debug(ctx, "copy_to_state state=state.LivelinessProbe prefix=rsModel ans=ans.LivelinessProbe")
		// property: name=http, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.LivelinessProbe.Http == nil {
			state.LivelinessProbe.Http = nil
		} else if len(ans.LivelinessProbe.Http) == 0 {
			state.LivelinessProbe.Http = []rsModelHttpProbe{}
		} else {
			state.LivelinessProbe.Http = make([]rsModelHttpProbe, 0, len(ans.LivelinessProbe.Http))
			for varLoopHttpIndex, varLoopHttp := range ans.LivelinessProbe.Http {
				// add a new item
				state.LivelinessProbe.Http = append(state.LivelinessProbe.Http, rsModelHttpProbe{})
				// copy_to_state: state=state.LivelinessProbe.Http[varLoopHttpIndex] prefix=rsModel ans=varLoopHttp properties=4
				tflog.Debug(ctx, "copy_to_state state=state.LivelinessProbe.Http[varLoopHttpIndex] prefix=rsModel ans=varLoopHttp")
				// property: name=failure_count, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.Http[varLoopHttpIndex].FailureCount = types.Int64PointerValue(varLoopHttp.FailureCount)
				// property: name=http_status_codes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varHttpStatusCodes, errHttpStatusCodes := types.ListValueFrom(ctx, types.Int64Type, varLoopHttp.HttpStatusCodes)
				state.LivelinessProbe.Http[varLoopHttpIndex].HttpStatusCodes = varHttpStatusCodes
				resp.Diagnostics.Append(errHttpStatusCodes.Errors()...)
				// property: name=interval, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.Http[varLoopHttpIndex].Interval = types.Int64PointerValue(varLoopHttp.Interval)
				// property: name=url, type=STRING macro=copy_to_state
				state.LivelinessProbe.Http[varLoopHttpIndex].Url = types.StringPointerValue(varLoopHttp.Url)
			}
		}
		// property: name=icmp_ping, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.LivelinessProbe.IcmpPing == nil {
			state.LivelinessProbe.IcmpPing = nil
		} else if len(ans.LivelinessProbe.IcmpPing) == 0 {
			state.LivelinessProbe.IcmpPing = []rsModelIcmpPingProbe{}
		} else {
			state.LivelinessProbe.IcmpPing = make([]rsModelIcmpPingProbe, 0, len(ans.LivelinessProbe.IcmpPing))
			for varLoopIcmpPingIndex, varLoopIcmpPing := range ans.LivelinessProbe.IcmpPing {
				// add a new item
				state.LivelinessProbe.IcmpPing = append(state.LivelinessProbe.IcmpPing, rsModelIcmpPingProbe{})
				// copy_to_state: state=state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex] prefix=rsModel ans=varLoopIcmpPing properties=3
				tflog.Debug(ctx, "copy_to_state state=state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex] prefix=rsModel ans=varLoopIcmpPing")
				// property: name=failure_count, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].FailureCount = types.Int64PointerValue(varLoopIcmpPing.FailureCount)
				// property: name=interval, type=INTEGER macro=copy_to_state
				state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].Interval = types.Int64PointerValue(varLoopIcmpPing.Interval)
				// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpAddresses, errIpAddresses := types.ListValueFrom(ctx, types.StringType, varLoopIcmpPing.IpAddresses)
				state.LivelinessProbe.IcmpPing[varLoopIcmpPingIndex].IpAddresses = varIpAddresses
				resp.Diagnostics.Append(errIpAddresses.Errors()...)
			}
		}
	}
	// property: name=location, type=REFERENCE macro=copy_to_state
	if ans.Location == nil {
		state.Location = nil
	} else {
		state.Location = &rsModelLocation{}
		// copy_to_state: state=state.Location prefix=rsModel ans=ans.Location properties=3
		tflog.Debug(ctx, "copy_to_state state=state.Location prefix=rsModel ans=ans.Location")
		// property: name=description, type=STRING macro=copy_to_state
		state.Location.Description = types.StringPointerValue(ans.Location.Description)
		// property: name=latitude, type=NUMBER macro=copy_to_state
		state.Location.Latitude = types.Float64PointerValue(ans.Location.Latitude)
		// property: name=longitude, type=NUMBER macro=copy_to_state
		state.Location.Longitude = types.Float64PointerValue(ans.Location.Longitude)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=sase_properties, type=REFERENCE macro=copy_to_state
	if ans.SaseProperties == nil {
		state.SaseProperties = nil
	} else {
		state.SaseProperties = &rsModelSaseServiceEndpointProperties{}
		// copy_to_state: state=state.SaseProperties prefix=rsModel ans=ans.SaseProperties properties=2
		tflog.Debug(ctx, "copy_to_state state=state.SaseProperties prefix=rsModel ans=ans.SaseProperties")
		// property: name=active, type=BOOLEAN macro=copy_to_state
		state.SaseProperties.Active = types.BoolPointerValue(ans.SaseProperties.Active)
		// property: name=lqm_enabled, type=BOOLEAN macro=copy_to_state
		state.SaseProperties.LqmEnabled = types.BoolPointerValue(ans.SaseProperties.LqmEnabled)
	}
	// property: name=service_link_peers, type=REFERENCE macro=copy_to_state
	if ans.ServiceLinkPeers == nil {
		state.ServiceLinkPeers = nil
	} else {
		state.ServiceLinkPeers = &rsModelServiceLinkPeers{}
		// copy_to_state: state=state.ServiceLinkPeers prefix=rsModel ans=ans.ServiceLinkPeers properties=2
		tflog.Debug(ctx, "copy_to_state state=state.ServiceLinkPeers prefix=rsModel ans=ans.ServiceLinkPeers")
		// property: name=hostnames, type=ARRAY_PRIMITIVE macro=copy_to_state
		varHostnames, errHostnames := types.ListValueFrom(ctx, types.StringType, ans.ServiceLinkPeers.Hostnames)
		state.ServiceLinkPeers.Hostnames = varHostnames
		resp.Diagnostics.Append(errHostnames.Errors()...)
		// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpAddresses, errIpAddresses := types.ListValueFrom(ctx, types.StringType, ans.ServiceLinkPeers.IpAddresses)
		state.ServiceLinkPeers.IpAddresses = varIpAddresses
		resp.Diagnostics.Append(errIpAddresses.Errors()...)
	}
	// property: name=site_id, type=STRING macro=copy_to_state
	state.SiteId = types.StringPointerValue(ans.SiteId)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=type, type=STRING macro=copy_to_state
	state.Type = types.StringPointerValue(ans.Type)
	return true
}

func (r *serviceEndpointResource) doDelete(ctx context.Context, state *rsModelServiceEndpointV3, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_service_endpoint",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 1 {
		resp.Diagnostics.AddError("error in prismasdwan_service_endpoint ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_service_endpoint"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v3.0/api/serviceendpoints/{service_endpoint_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["service_endpoint_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_service_endpoint", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *serviceEndpointResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_service_endpoint")
	var plan rsModelServiceEndpointV3
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelServiceEndpointV3
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *serviceEndpointResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_service_endpoint")
	var savestate, state rsModelServiceEndpointV3
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *serviceEndpointResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_service_endpoint")
	var plan, state rsModelServiceEndpointV3
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *serviceEndpointResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_service_endpoint")
	var state rsModelServiceEndpointV3
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *serviceEndpointResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
