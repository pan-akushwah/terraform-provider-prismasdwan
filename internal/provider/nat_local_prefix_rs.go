package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=1)
// | Computed Resource Name=natlocalprefixes
// +-----------------------------------------------------------------
// | NATLocalPrefix HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &natLocalPrefixResource{}
	_ resource.ResourceWithConfigure   = &natLocalPrefixResource{}
	_ resource.ResourceWithImportState = &natLocalPrefixResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewNatLocalPrefixResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewNatLocalPrefixResource() resource.Resource {
	return &natLocalPrefixResource{}
}

type natLocalPrefixResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *natLocalPrefixResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_nat_local_prefix"
}

// Schema defines the schema for this data source.
func (r *natLocalPrefixResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=NATLocalPrefix
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// property: name=tags, type=ARRAY_PRIMITIVE macro=rss_schema
			"tags": rsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (r *natLocalPrefixResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *natLocalPrefixResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	case "LOCAL_PREFIX_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

// Create resource.
func (r *natLocalPrefixResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var plan rsModelNATLocalPrefix
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_nat_local_prefix",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.0/api/natlocalprefixes"

	// @TODO copy parameters from plan for POST Call
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.NATLocalPrefix{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=6
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=tags, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.Tags = ListStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		fmt.Println("error marshaling struct NATLocalPrefix to JSON:", err)
		return
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		json_data, json_err := json.Marshal(create_request)
		if json_err != nil {
			fmt.Println("error marshaling JSON:", json_err)
		} else {
			resp.Diagnostics.AddError("RequestBody", string(json_data))
		}
		if IsObjectNotFound(*create_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error creating prismasdwan_nat_local_prefix", (*create_request.ResponseErr).Error())
		}
		return
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)

	// start copying attributes
	var ans sdwan_schema.NATLocalPrefix
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATLocalPrefix in create", json_err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}
	// set the tf id for the resource created
	plan.Tfid = types.StringValue(idBuilder.String())
	// Store the answer to state. schema=NATLocalPrefix
	// copy_to_state: state=plan prefix=rsModel ans=ans properties=6
	// property: name=_etag, type=INTEGER macro=copy_to_state
	plan.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	plan.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	plan.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	plan.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	plan.Name = types.StringPointerValue(ans.Name)
	// property: name=tags, type=ARRAY_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	plan.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}

// Read performs Read for the struct.
func (r *natLocalPrefixResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state rsModelNATLocalPrefix
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_nat_local_prefix",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_local_prefix ID format", "Expected 1 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/natlocalprefixes/{prefix_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["prefix_id"] = &tokens[0]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_nat_local_prefix from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=NATLocalPrefix
	state.Tfid = savestate.Tfid
	// start copying attributes
	var ans sdwan_schema.NATLocalPrefix
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATLocalPrefix in read", json_err.Error())
		return
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=6
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=tags, type=ARRAY_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *natLocalPrefixResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state rsModelNATLocalPrefix
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_local_prefix ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_nat_local_prefix",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.0/api/natlocalprefixes/{prefix_id}"

	// handle parameters
	params := make(map[string]*string)
	put_request.PathParameters = &params
	params["prefix_id"] = &tokens[0]

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.NATLocalPrefix{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=6
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	// property: name=tags, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = ListStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		fmt.Println("error marshaling struct NATLocalPrefix to JSON:", err)
		return
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		json_data, json_err := json.Marshal(put_request)
		if json_err != nil {
			fmt.Println("error marshaling JSON:", json_err)
		} else {
			resp.Diagnostics.AddError("RequestBody", string(json_data))
		}
		if IsObjectNotFound(*put_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error updating prismasdwan_nat_local_prefix", (*put_request.ResponseErr).Error())
		}
		return
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)

	// start copying attributes
	var ans sdwan_schema.NATLocalPrefix
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATLocalPrefix in update", json_err.Error())
		return
	}

	// Store the answer to state. schema=NATLocalPrefix
	// copy_to_state: state=state prefix=rsModel ans=ans properties=6
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=tags, type=ARRAY_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)

	// update the state in TF
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *natLocalPrefixResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_local_prefix ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_nat_local_prefix",
		"locMap":                      map[string]int{"prefix_id": 0},
		"tokens":                      tokens,
	})

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.0/api/natlocalprefixes/{prefix_id}"

	// handle parameters
	params := make(map[string]*string)
	delete_request.PathParameters = &params
	params["prefix_id"] = &tokens[0]

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if IsObjectNotFound(*delete_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error deleting prismasdwan_nat_local_prefix", (*delete_request.ResponseErr).Error())
		}
		return
	}
}

func (r *natLocalPrefixResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
