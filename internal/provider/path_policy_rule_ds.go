package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=6)
// | Computed Resource Name=networkpolicysets_networkpolicyrules
// +-----------------------------------------------------------------
// | BestPathConfig HasID=false
// | UserGroup HasID=false
// | WANPath HasID=false
// | PathsAllowedV2N1 HasID=false
// | ServiceContext HasID=false
// | NetworkPolicyRuleScreenV2N4 HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &pathPolicyRuleDataSource{}
	_ datasource.DataSourceWithConfigure = &pathPolicyRuleDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewPathPolicyRuleDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewPathPolicyRuleDataSource() datasource.DataSource {
	return &pathPolicyRuleDataSource{}
}

type pathPolicyRuleDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *pathPolicyRuleDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_path_policy_rule"
}

// Schema defines the schema for this data source.
func (d *pathPolicyRuleDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=NetworkPolicyRuleScreenV2N4
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			"app_def_ids": dsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=best_path_config, type=REFERENCE macro=rss_schema
			"best_path_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=metric, type=STRING macro=rss_schema
					"metric": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=metric, type=STRING macro=rss_schema
					// property: name=metric_type, type=STRING macro=rss_schema
					"metric_type": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=metric_type, type=STRING macro=rss_schema
					// property: name=probe_config_id, type=STRING macro=rss_schema
					"probe_config_id": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=probe_config_id, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=probe_config_id, type=STRING macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=dest_device_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			"dest_device_ids": dsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=dest_device_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=destination_prefixes_id, type=STRING macro=rss_schema
			"destination_prefixes_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=destination_prefixes_id, type=STRING macro=rss_schema
			// property: name=enabled, type=BOOLEAN macro=rss_schema
			"enabled": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=network_context_id, type=STRING macro=rss_schema
			"network_context_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=network_context_id, type=STRING macro=rss_schema
			// property: name=order_number, type=INTEGER macro=rss_schema
			"order_number": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=order_number, type=INTEGER macro=rss_schema
			// property: name=paths_allowed, type=REFERENCE macro=rss_schema
			"paths_allowed": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=active_paths, type=ARRAY_REFERENCE macro=rss_schema
					"active_paths": dsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// property: name=label, type=STRING macro=rss_schema
								"label": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=label, type=STRING macro=rss_schema
								// property: name=path_type, type=STRING macro=rss_schema
								"path_type": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
					// property: name=backup_paths, type=ARRAY_REFERENCE macro=rss_schema
					"backup_paths": dsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// property: name=label, type=STRING macro=rss_schema
								"label": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=label, type=STRING macro=rss_schema
								// property: name=path_type, type=STRING macro=rss_schema
								"path_type": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
					// property: name=l3_failure_paths, type=ARRAY_REFERENCE macro=rss_schema
					"l3_failure_paths": dsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// property: name=label, type=STRING macro=rss_schema
								"label": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=label, type=STRING macro=rss_schema
								// property: name=path_type, type=STRING macro=rss_schema
								"path_type": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
			// property: name=service_context, type=REFERENCE macro=rss_schema
			"service_context": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=active_service_label_id, type=STRING macro=rss_schema
					"active_service_label_id": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=active_service_label_id, type=STRING macro=rss_schema
					// property: name=active_service_label_type, type=STRING macro=rss_schema
					"active_service_label_type": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=active_service_label_type, type=STRING macro=rss_schema
					// property: name=backup_service_label_id, type=STRING macro=rss_schema
					"backup_service_label_id": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=backup_service_label_id, type=STRING macro=rss_schema
					// property: name=backup_service_label_type, type=STRING macro=rss_schema
					"backup_service_label_type": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=backup_service_label_type, type=STRING macro=rss_schema
					// property: name=type, type=STRING macro=rss_schema
					"type": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=type, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=type, type=STRING macro=rss_schema
			// property: name=source_prefixes_id, type=STRING macro=rss_schema
			"source_prefixes_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=source_prefixes_id, type=STRING macro=rss_schema
			// property: name=src_device_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			"src_device_ids": dsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=src_device_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=user_or_group, type=REFERENCE macro=rss_schema
			"user_or_group": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=user_group_ids, type=ARRAY_PRIMITIVE macro=rss_schema
					"user_group_ids": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=user_group_ids, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=user_ids, type=ARRAY_PRIMITIVE macro=rss_schema
					"user_ids": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=user_ids, type=ARRAY_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=user_ids, type=ARRAY_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *pathPolicyRuleDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *pathPolicyRuleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelNetworkPolicyRuleScreenV2N4
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_path_policy_rule",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_path_policy_rule ID format", "Expected 2 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.4/api/networkpolicysets/{policy_set_id}/networkpolicyrules/{policy_rule_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["policy_set_id"] = &tokens[0]
	params["policy_rule_id"] = &tokens[1]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_path_policy_rule", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.NetworkPolicyRuleScreenV2N4
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NetworkPolicyRuleScreenV2N4", json_err.Error())
		return
	}

	// lets copy all items into state schema=NetworkPolicyRuleScreenV2N4
	// copy_to_state: state=state prefix=dsModel ans=ans properties=18
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, ans.AppDefIds)
	state.AppDefIds = varAppDefIds
	resp.Diagnostics.Append(errAppDefIds.Errors()...)
	// property: name=best_path_config, type=REFERENCE macro=copy_to_state
	if ans.BestPathConfig == nil {
		state.BestPathConfig = nil
	} else {
		state.BestPathConfig = &dsModelBestPathConfig{}
		// copy_to_state: state=state.BestPathConfig prefix=dsModel ans=ans.BestPathConfig properties=3
		// property: name=metric, type=STRING macro=copy_to_state
		state.BestPathConfig.Metric = types.StringPointerValue(ans.BestPathConfig.Metric)
		// property: name=metric_type, type=STRING macro=copy_to_state
		state.BestPathConfig.MetricType = types.StringPointerValue(ans.BestPathConfig.MetricType)
		// property: name=probe_config_id, type=STRING macro=copy_to_state
		state.BestPathConfig.ProbeConfigId = types.StringPointerValue(ans.BestPathConfig.ProbeConfigId)
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=dest_device_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDestDeviceIds, errDestDeviceIds := types.ListValueFrom(ctx, types.StringType, ans.DestDeviceIds)
	state.DestDeviceIds = varDestDeviceIds
	resp.Diagnostics.Append(errDestDeviceIds.Errors()...)
	// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
	state.DestinationPrefixesId = types.StringPointerValue(ans.DestinationPrefixesId)
	// property: name=enabled, type=BOOLEAN macro=copy_to_state
	state.Enabled = types.BoolPointerValue(ans.Enabled)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=network_context_id, type=STRING macro=copy_to_state
	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)
	// property: name=order_number, type=INTEGER macro=copy_to_state
	state.OrderNumber = types.Int64PointerValue(ans.OrderNumber)
	// property: name=paths_allowed, type=REFERENCE macro=copy_to_state
	if ans.PathsAllowed == nil {
		state.PathsAllowed = nil
	} else {
		state.PathsAllowed = &dsModelPathsAllowedV2N1{}
		// copy_to_state: state=state.PathsAllowed prefix=dsModel ans=ans.PathsAllowed properties=3
		// property: name=active_paths, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.PathsAllowed.ActivePaths == nil {
			state.PathsAllowed.ActivePaths = nil
		} else if len(ans.PathsAllowed.ActivePaths) == 0 {
			state.PathsAllowed.ActivePaths = []dsModelWANPath{}
		} else {
			state.PathsAllowed.ActivePaths = make([]dsModelWANPath, 0, len(ans.PathsAllowed.ActivePaths))
			for varLoopActivePathsIndex, varLoopActivePaths := range ans.PathsAllowed.ActivePaths {
				// add a new item
				state.PathsAllowed.ActivePaths = append(state.PathsAllowed.ActivePaths, dsModelWANPath{})
				// copy_to_state: state=state.PathsAllowed.ActivePaths[varLoopActivePathsIndex] prefix=dsModel ans=varLoopActivePaths properties=2
				// property: name=label, type=STRING macro=copy_to_state
				state.PathsAllowed.ActivePaths[varLoopActivePathsIndex].Label = types.StringPointerValue(varLoopActivePaths.Label)
				// property: name=path_type, type=STRING macro=copy_to_state
				state.PathsAllowed.ActivePaths[varLoopActivePathsIndex].PathType = types.StringPointerValue(varLoopActivePaths.PathType)
			}
		}
		// property: name=backup_paths, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.PathsAllowed.BackupPaths == nil {
			state.PathsAllowed.BackupPaths = nil
		} else if len(ans.PathsAllowed.BackupPaths) == 0 {
			state.PathsAllowed.BackupPaths = []dsModelWANPath{}
		} else {
			state.PathsAllowed.BackupPaths = make([]dsModelWANPath, 0, len(ans.PathsAllowed.BackupPaths))
			for varLoopBackupPathsIndex, varLoopBackupPaths := range ans.PathsAllowed.BackupPaths {
				// add a new item
				state.PathsAllowed.BackupPaths = append(state.PathsAllowed.BackupPaths, dsModelWANPath{})
				// copy_to_state: state=state.PathsAllowed.BackupPaths[varLoopBackupPathsIndex] prefix=dsModel ans=varLoopBackupPaths properties=2
				// property: name=label, type=STRING macro=copy_to_state
				state.PathsAllowed.BackupPaths[varLoopBackupPathsIndex].Label = types.StringPointerValue(varLoopBackupPaths.Label)
				// property: name=path_type, type=STRING macro=copy_to_state
				state.PathsAllowed.BackupPaths[varLoopBackupPathsIndex].PathType = types.StringPointerValue(varLoopBackupPaths.PathType)
			}
		}
		// property: name=l3_failure_paths, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.PathsAllowed.L3FailurePaths == nil {
			state.PathsAllowed.L3FailurePaths = nil
		} else if len(ans.PathsAllowed.L3FailurePaths) == 0 {
			state.PathsAllowed.L3FailurePaths = []dsModelWANPath{}
		} else {
			state.PathsAllowed.L3FailurePaths = make([]dsModelWANPath, 0, len(ans.PathsAllowed.L3FailurePaths))
			for varLoopL3FailurePathsIndex, varLoopL3FailurePaths := range ans.PathsAllowed.L3FailurePaths {
				// add a new item
				state.PathsAllowed.L3FailurePaths = append(state.PathsAllowed.L3FailurePaths, dsModelWANPath{})
				// copy_to_state: state=state.PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex] prefix=dsModel ans=varLoopL3FailurePaths properties=2
				// property: name=label, type=STRING macro=copy_to_state
				state.PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].Label = types.StringPointerValue(varLoopL3FailurePaths.Label)
				// property: name=path_type, type=STRING macro=copy_to_state
				state.PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].PathType = types.StringPointerValue(varLoopL3FailurePaths.PathType)
			}
		}
	}
	// property: name=service_context, type=REFERENCE macro=copy_to_state
	if ans.ServiceContext == nil {
		state.ServiceContext = nil
	} else {
		state.ServiceContext = &dsModelServiceContext{}
		// copy_to_state: state=state.ServiceContext prefix=dsModel ans=ans.ServiceContext properties=5
		// property: name=active_service_label_id, type=STRING macro=copy_to_state
		state.ServiceContext.ActiveServiceLabelId = types.StringPointerValue(ans.ServiceContext.ActiveServiceLabelId)
		// property: name=active_service_label_type, type=STRING macro=copy_to_state
		state.ServiceContext.ActiveServiceLabelType = types.StringPointerValue(ans.ServiceContext.ActiveServiceLabelType)
		// property: name=backup_service_label_id, type=STRING macro=copy_to_state
		state.ServiceContext.BackupServiceLabelId = types.StringPointerValue(ans.ServiceContext.BackupServiceLabelId)
		// property: name=backup_service_label_type, type=STRING macro=copy_to_state
		state.ServiceContext.BackupServiceLabelType = types.StringPointerValue(ans.ServiceContext.BackupServiceLabelType)
		// property: name=type, type=STRING macro=copy_to_state
		state.ServiceContext.Type = types.StringPointerValue(ans.ServiceContext.Type)
	}
	// property: name=source_prefixes_id, type=STRING macro=copy_to_state
	state.SourcePrefixesId = types.StringPointerValue(ans.SourcePrefixesId)
	// property: name=src_device_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varSrcDeviceIds, errSrcDeviceIds := types.ListValueFrom(ctx, types.StringType, ans.SrcDeviceIds)
	state.SrcDeviceIds = varSrcDeviceIds
	resp.Diagnostics.Append(errSrcDeviceIds.Errors()...)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=user_or_group, type=REFERENCE macro=copy_to_state
	if ans.UserOrGroup == nil {
		state.UserOrGroup = nil
	} else {
		state.UserOrGroup = &dsModelUserGroup{}
		// copy_to_state: state=state.UserOrGroup prefix=dsModel ans=ans.UserOrGroup properties=2
		// property: name=user_group_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
		varUserGroupIds, errUserGroupIds := types.ListValueFrom(ctx, types.StringType, ans.UserOrGroup.UserGroupIds)
		state.UserOrGroup.UserGroupIds = varUserGroupIds
		resp.Diagnostics.Append(errUserGroupIds.Errors()...)
		// property: name=user_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
		varUserIds, errUserIds := types.ListValueFrom(ctx, types.StringType, ans.UserOrGroup.UserIds)
		state.UserOrGroup.UserIds = varUserIds
		resp.Diagnostics.Append(errUserIds.Errors()...)
	}

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
