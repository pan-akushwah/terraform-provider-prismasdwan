package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=8)
// | Computed Resource Name=perfmgmtpolicysets
// +-----------------------------------------------------------------
// | PerfMgmtHealthThresholds HasID=false
// | PerfMgmtActionParameters HasID=false
// | PerfMgmtAction HasID=false
// | PathFilter HasID=false
// | ApplicationFilter HasID=false
// | PerfMgmtPolicyRule HasID=true
// | BasePolicyRule HasID=true
// | PerfMgmtPolicySet HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &performancePolicySetResource{}
	_ resource.ResourceWithConfigure   = &performancePolicySetResource{}
	_ resource.ResourceWithImportState = &performancePolicySetResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewPerformancePolicySetResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewPerformancePolicySetResource() resource.Resource {
	return &performancePolicySetResource{}
}

type performancePolicySetResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *performancePolicySetResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_performance_policy_set"
}

// Schema defines the schema for this data source.
func (r *performancePolicySetResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=PerfMgmtPolicySet
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=clone_from, type=STRING macro=rss_schema
			"clone_from": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=clone_from, type=STRING macro=rss_schema
			// property: name=defaultrule_policyset, type=BOOLEAN macro=rss_schema
			"defaultrule_policyset": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=defaultrule_policyset, type=BOOLEAN macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=link_health_policyrule_order, type=ARRAY_PRIMITIVE macro=rss_schema
			"link_health_policyrule_order": rsschema.ListAttribute{
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=link_health_policyrule_order, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=link_health_rules, type=ARRAY_REFERENCE macro=rss_schema
			"link_health_rules": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": rsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=actions, type=ARRAY_REFERENCE macro=rss_schema
						"actions": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=action_type, type=STRING macro=rss_schema
									"action_type": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=action_type, type=STRING macro=rss_schema
									// property: name=always_on, type=BOOLEAN macro=rss_schema
									"always_on": rsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=always_on, type=BOOLEAN macro=rss_schema
									// property: name=app_perf, type=REFERENCE macro=rss_schema
									"app_perf": rsschema.SingleNestedAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
										Attributes: map[string]rsschema.Attribute{
											// property: name=bad_health_thresholds, type=REFERENCE macro=rss_schema
											"bad_health_thresholds": rsschema.SingleNestedAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
												Attributes: map[string]rsschema.Attribute{
													// property: name=clear_below, type=INTEGER macro=rss_schema
													"clear_below": rsschema.Int64Attribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=clear_below, type=INTEGER macro=rss_schema
													// property: name=raise_above, type=INTEGER macro=rss_schema
													"raise_above": rsschema.Int64Attribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=raise_above, type=INTEGER macro=rss_schema
												},
											},
											// key name holder for attribute: name=raise_above, type=INTEGER macro=rss_schema
											// property: name=monitoring_approach, type=STRING macro=rss_schema
											"monitoring_approach": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
										},
									},
									// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
									// property: name=circuit_utilization_perf, type=REFERENCE macro=rss_schema
									"circuit_utilization_perf": rsschema.SingleNestedAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
										Attributes: map[string]rsschema.Attribute{
											// property: name=bad_health_thresholds, type=REFERENCE macro=rss_schema
											"bad_health_thresholds": rsschema.SingleNestedAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
												Attributes: map[string]rsschema.Attribute{
													// property: name=clear_below, type=INTEGER macro=rss_schema
													"clear_below": rsschema.Int64Attribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=clear_below, type=INTEGER macro=rss_schema
													// property: name=raise_above, type=INTEGER macro=rss_schema
													"raise_above": rsschema.Int64Attribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=raise_above, type=INTEGER macro=rss_schema
												},
											},
											// key name holder for attribute: name=raise_above, type=INTEGER macro=rss_schema
											// property: name=monitoring_approach, type=STRING macro=rss_schema
											"monitoring_approach": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
										},
									},
									// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
									// property: name=lqm_perf, type=REFERENCE macro=rss_schema
									"lqm_perf": rsschema.SingleNestedAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
										Attributes: map[string]rsschema.Attribute{
											// property: name=bad_health_thresholds, type=REFERENCE macro=rss_schema
											"bad_health_thresholds": rsschema.SingleNestedAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
												Attributes: map[string]rsschema.Attribute{
													// property: name=clear_below, type=INTEGER macro=rss_schema
													"clear_below": rsschema.Int64Attribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=clear_below, type=INTEGER macro=rss_schema
													// property: name=raise_above, type=INTEGER macro=rss_schema
													"raise_above": rsschema.Int64Attribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=raise_above, type=INTEGER macro=rss_schema
												},
											},
											// key name holder for attribute: name=raise_above, type=INTEGER macro=rss_schema
											// property: name=monitoring_approach, type=STRING macro=rss_schema
											"monitoring_approach": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
										},
									},
									// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
									// property: name=probe_perf, type=REFERENCE macro=rss_schema
									"probe_perf": rsschema.SingleNestedAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
										Attributes: map[string]rsschema.Attribute{
											// property: name=bad_health_thresholds, type=REFERENCE macro=rss_schema
											"bad_health_thresholds": rsschema.SingleNestedAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
												Attributes: map[string]rsschema.Attribute{
													// property: name=clear_below, type=INTEGER macro=rss_schema
													"clear_below": rsschema.Int64Attribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=clear_below, type=INTEGER macro=rss_schema
													// property: name=raise_above, type=INTEGER macro=rss_schema
													"raise_above": rsschema.Int64Attribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=raise_above, type=INTEGER macro=rss_schema
												},
											},
											// key name holder for attribute: name=raise_above, type=INTEGER macro=rss_schema
											// property: name=monitoring_approach, type=STRING macro=rss_schema
											"monitoring_approach": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
										},
									},
									// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
									// property: name=sys_perf, type=REFERENCE macro=rss_schema
									"sys_perf": rsschema.SingleNestedAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
										Attributes: map[string]rsschema.Attribute{
											// property: name=bad_health_thresholds, type=REFERENCE macro=rss_schema
											"bad_health_thresholds": rsschema.SingleNestedAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
												Attributes: map[string]rsschema.Attribute{
													// property: name=clear_below, type=INTEGER macro=rss_schema
													"clear_below": rsschema.Int64Attribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=clear_below, type=INTEGER macro=rss_schema
													// property: name=raise_above, type=INTEGER macro=rss_schema
													"raise_above": rsschema.Int64Attribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=raise_above, type=INTEGER macro=rss_schema
												},
											},
											// key name holder for attribute: name=raise_above, type=INTEGER macro=rss_schema
											// property: name=monitoring_approach, type=STRING macro=rss_schema
											"monitoring_approach": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
										},
									},
									// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=monitoring_approach, type=STRING macro=rss_schema
						// property: name=app_filters, type=REFERENCE macro=rss_schema
						"app_filters": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// property: name=app_transfer_types, type=ARRAY_PRIMITIVE macro=rss_schema
								"app_transfer_types": rsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=app_transfer_types, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=application_ids, type=ARRAY_PRIMITIVE macro=rss_schema
								"application_ids": rsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=application_ids, type=ARRAY_PRIMITIVE macro=rss_schema
							},
						},
						// key name holder for attribute: name=application_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=description, type=STRING macro=rss_schema
						"description": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=description, type=STRING macro=rss_schema
						// property: name=enabled, type=BOOLEAN macro=rss_schema
						"enabled": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": rsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=path_filters, type=ARRAY_REFERENCE macro=rss_schema
						"path_filters": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=label, type=STRING macro=rss_schema
									"label": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=label, type=STRING macro=rss_schema
									// property: name=path_type, type=STRING macro=rss_schema
									"path_type": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
						// property: name=service_label_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						"service_label_ids": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=service_label_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
						"tags": rsschema.SetAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=thresholdprofile_id, type=STRING macro=rss_schema
						"thresholdprofile_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=thresholdprofile_id, type=STRING macro=rss_schema
						// property: name=type, type=STRING macro=rss_schema
						"type": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=type, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=type, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=policy_rules, type=ARRAY_REFERENCE macro=rss_schema
			"policy_rules": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": rsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=description, type=STRING macro=rss_schema
						"description": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=description, type=STRING macro=rss_schema
						// property: name=disabled, type=BOOLEAN macro=rss_schema
						"disabled": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
						// property: name=disabled_reason, type=STRING macro=rss_schema
						"disabled_reason": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": rsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=inactive, type=BOOLEAN macro=rss_schema
						"inactive": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
						// property: name=inactive_reason, type=STRING macro=rss_schema
						"inactive_reason": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=policyset_id, type=STRING macro=rss_schema
						"policyset_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=policyset_id, type=STRING macro=rss_schema
						// property: name=region, type=STRING macro=rss_schema
						"region": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=region, type=STRING macro=rss_schema
						// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
						"tags": rsschema.SetAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=send_to_element, type=BOOLEAN macro=rss_schema
			"send_to_element": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=send_to_element, type=BOOLEAN macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *performancePolicySetResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *performancePolicySetResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *performancePolicySetResource) doPost(ctx context.Context, plan *rsModelPerfMgmtPolicySet, state *rsModelPerfMgmtPolicySet, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_performance_policy_set")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_performance_policy_set",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_performance_policy_set"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.0/api/perfmgmtpolicysets"

	// copy parameters from plan always
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.PerfMgmtPolicySet{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=17
	tflog.Debug(ctx, "copy_from_plan body=body prefix=rsModel plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=clone_from, type=STRING macro=copy_from_plan
	body.CloneFrom = StringValueOrNil(plan.CloneFrom)
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_from_plan
	body.DefaultrulePolicyset = BoolValueOrNil(plan.DefaultrulePolicyset)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan
	body.Disabled = BoolValueOrNil(plan.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_from_plan
	body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan
	body.Inactive = BoolValueOrNil(plan.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_from_plan
	body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	// property: name=link_health_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.LinkHealthPolicyruleOrder = ListStringValueOrNil(ctx, plan.LinkHealthPolicyruleOrder)
	// property: name=link_health_rules, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.LinkHealthRules == nil {
		body.LinkHealthRules = nil
	} else if len(plan.LinkHealthRules) == 0 {
		body.LinkHealthRules = []sdwan_schema.PerfMgmtPolicyRule{}
	} else {
		body.LinkHealthRules = make([]sdwan_schema.PerfMgmtPolicyRule, 0, len(plan.LinkHealthRules))
		for varLoopLinkHealthRulesIndex, varLoopLinkHealthRules := range plan.LinkHealthRules {
			// add a new item
			body.LinkHealthRules = append(body.LinkHealthRules, sdwan_schema.PerfMgmtPolicyRule{})
			// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex] prefix=rsModel plan=varLoopLinkHealthRules properties=13
			tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex] prefix=rsModel plan=varLoopLinkHealthRules")
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Etag = Int64ValueOrNil(varLoopLinkHealthRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Schema = Int64ValueOrNil(varLoopLinkHealthRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopLinkHealthRules.Actions == nil {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = nil
			} else if len(varLoopLinkHealthRules.Actions) == 0 {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = []sdwan_schema.PerfMgmtAction{}
			} else {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = make([]sdwan_schema.PerfMgmtAction, 0, len(varLoopLinkHealthRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopLinkHealthRules.Actions {
					// add a new item
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = append(body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions, sdwan_schema.PerfMgmtAction{})
					// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel plan=varLoopActions properties=7
					tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel plan=varLoopActions")
					// property: name=action_type, type=STRING macro=copy_from_plan
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ActionType = StringValueOrNil(varLoopActions.ActionType)
					// property: name=always_on, type=BOOLEAN macro=copy_from_plan
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AlwaysOn = BoolValueOrNil(varLoopActions.AlwaysOn)
					// property: name=app_perf, type=REFERENCE macro=copy_from_plan
					if varLoopActions.AppPerf != nil {
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf = &sdwan_schema.PerfMgmtActionParameters{}
						// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf prefix=rsModel plan=varLoopActions.AppPerf properties=2
						tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf prefix=rsModel plan=varLoopActions.AppPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_from_plan
						if varLoopActions.AppPerf.BadHealthThresholds != nil {
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds = &sdwan_schema.PerfMgmtHealthThresholds{}
							// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.AppPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.AppPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds.ClearBelow = Int64ValueOrNil(varLoopActions.AppPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds.RaiseAbove = Int64ValueOrNil(varLoopActions.AppPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_from_plan
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.MonitoringApproach = StringValueOrNil(varLoopActions.AppPerf.MonitoringApproach)
					}
					// property: name=circuit_utilization_perf, type=REFERENCE macro=copy_from_plan
					if varLoopActions.CircuitUtilizationPerf != nil {
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf = &sdwan_schema.PerfMgmtActionParameters{}
						// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf prefix=rsModel plan=varLoopActions.CircuitUtilizationPerf properties=2
						tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf prefix=rsModel plan=varLoopActions.CircuitUtilizationPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_from_plan
						if varLoopActions.CircuitUtilizationPerf.BadHealthThresholds != nil {
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds = &sdwan_schema.PerfMgmtHealthThresholds{}
							// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.CircuitUtilizationPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.CircuitUtilizationPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds.ClearBelow = Int64ValueOrNil(varLoopActions.CircuitUtilizationPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds.RaiseAbove = Int64ValueOrNil(varLoopActions.CircuitUtilizationPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_from_plan
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.MonitoringApproach = StringValueOrNil(varLoopActions.CircuitUtilizationPerf.MonitoringApproach)
					}
					// property: name=lqm_perf, type=REFERENCE macro=copy_from_plan
					if varLoopActions.LqmPerf != nil {
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf = &sdwan_schema.PerfMgmtActionParameters{}
						// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf prefix=rsModel plan=varLoopActions.LqmPerf properties=2
						tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf prefix=rsModel plan=varLoopActions.LqmPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_from_plan
						if varLoopActions.LqmPerf.BadHealthThresholds != nil {
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds = &sdwan_schema.PerfMgmtHealthThresholds{}
							// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.LqmPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.LqmPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds.ClearBelow = Int64ValueOrNil(varLoopActions.LqmPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds.RaiseAbove = Int64ValueOrNil(varLoopActions.LqmPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_from_plan
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.MonitoringApproach = StringValueOrNil(varLoopActions.LqmPerf.MonitoringApproach)
					}
					// property: name=probe_perf, type=REFERENCE macro=copy_from_plan
					if varLoopActions.ProbePerf != nil {
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf = &sdwan_schema.PerfMgmtActionParameters{}
						// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf prefix=rsModel plan=varLoopActions.ProbePerf properties=2
						tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf prefix=rsModel plan=varLoopActions.ProbePerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_from_plan
						if varLoopActions.ProbePerf.BadHealthThresholds != nil {
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds = &sdwan_schema.PerfMgmtHealthThresholds{}
							// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.ProbePerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.ProbePerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds.ClearBelow = Int64ValueOrNil(varLoopActions.ProbePerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds.RaiseAbove = Int64ValueOrNil(varLoopActions.ProbePerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_from_plan
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.MonitoringApproach = StringValueOrNil(varLoopActions.ProbePerf.MonitoringApproach)
					}
					// property: name=sys_perf, type=REFERENCE macro=copy_from_plan
					if varLoopActions.SysPerf != nil {
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf = &sdwan_schema.PerfMgmtActionParameters{}
						// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf prefix=rsModel plan=varLoopActions.SysPerf properties=2
						tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf prefix=rsModel plan=varLoopActions.SysPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_from_plan
						if varLoopActions.SysPerf.BadHealthThresholds != nil {
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds = &sdwan_schema.PerfMgmtHealthThresholds{}
							// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.SysPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.SysPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds.ClearBelow = Int64ValueOrNil(varLoopActions.SysPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds.RaiseAbove = Int64ValueOrNil(varLoopActions.SysPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_from_plan
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.MonitoringApproach = StringValueOrNil(varLoopActions.SysPerf.MonitoringApproach)
					}
				}
			}
			// property: name=app_filters, type=REFERENCE macro=copy_from_plan
			if varLoopLinkHealthRules.AppFilters != nil {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters = &sdwan_schema.ApplicationFilter{}
				// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters prefix=rsModel plan=varLoopLinkHealthRules.AppFilters properties=2
				tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters prefix=rsModel plan=varLoopLinkHealthRules.AppFilters")
				// property: name=app_transfer_types, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters.AppTransferTypes = ListStringValueOrNil(ctx, varLoopLinkHealthRules.AppFilters.AppTransferTypes)
				// property: name=application_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters.ApplicationIds = ListStringValueOrNil(ctx, varLoopLinkHealthRules.AppFilters.ApplicationIds)
			}
			// property: name=description, type=STRING macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Description = StringValueOrNil(varLoopLinkHealthRules.Description)
			// property: name=enabled, type=BOOLEAN macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Enabled = BoolValueOrNil(varLoopLinkHealthRules.Enabled)
			// property: name=id, type=STRING macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Id = StringValueOrNil(varLoopLinkHealthRules.Id)
			// property: name=name, type=STRING macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Name = StringValueOrNil(varLoopLinkHealthRules.Name)
			// property: name=path_filters, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopLinkHealthRules.PathFilters == nil {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = nil
			} else if len(varLoopLinkHealthRules.PathFilters) == 0 {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = []sdwan_schema.PathFilter{}
			} else {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = make([]sdwan_schema.PathFilter, 0, len(varLoopLinkHealthRules.PathFilters))
				for varLoopPathFiltersIndex, varLoopPathFilters := range varLoopLinkHealthRules.PathFilters {
					// add a new item
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = append(body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters, sdwan_schema.PathFilter{})
					// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex] prefix=rsModel plan=varLoopPathFilters properties=2
					tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex] prefix=rsModel plan=varLoopPathFilters")
					// property: name=label, type=STRING macro=copy_from_plan
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex].Label = StringValueOrNil(varLoopPathFilters.Label)
					// property: name=path_type, type=STRING macro=copy_from_plan
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex].PathType = StringValueOrNil(varLoopPathFilters.PathType)
				}
			}
			// property: name=service_label_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].ServiceLabelIds = ListStringValueOrNil(ctx, varLoopLinkHealthRules.ServiceLabelIds)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Tags = SetStringValueOrNil(ctx, varLoopLinkHealthRules.Tags)
			// property: name=thresholdprofile_id, type=STRING macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].ThresholdprofileId = StringValueOrNil(varLoopLinkHealthRules.ThresholdprofileId)
			// property: name=type, type=STRING macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Type = StringValueOrNil(varLoopLinkHealthRules.Type)
		}
	}
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.PolicyRules == nil {
		body.PolicyRules = nil
	} else if len(plan.PolicyRules) == 0 {
		body.PolicyRules = []sdwan_schema.BasePolicyRule{}
	} else {
		body.PolicyRules = make([]sdwan_schema.BasePolicyRule, 0, len(plan.PolicyRules))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range plan.PolicyRules {
			// add a new item
			body.PolicyRules = append(body.PolicyRules, sdwan_schema.BasePolicyRule{})
			// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel plan=varLoopPolicyRules properties=12
			tflog.Debug(ctx, "copy_from_plan body=body.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel plan=varLoopPolicyRules")
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Etag = Int64ValueOrNil(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Schema = Int64ValueOrNil(varLoopPolicyRules.Schema)
			// property: name=description, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Description = StringValueOrNil(varLoopPolicyRules.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Disabled = BoolValueOrNil(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = StringValueOrNil(varLoopPolicyRules.DisabledReason)
			// property: name=id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Id = StringValueOrNil(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Inactive = BoolValueOrNil(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = StringValueOrNil(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Name = StringValueOrNil(varLoopPolicyRules.Name)
			// property: name=policyset_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = StringValueOrNil(varLoopPolicyRules.PolicysetId)
			// property: name=region, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Region = StringValueOrNil(varLoopPolicyRules.Region)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.Tags)
		}
	}
	// property: name=region, type=STRING macro=copy_from_plan
	body.Region = StringValueOrNil(plan.Region)
	// property: name=send_to_element, type=BOOLEAN macro=copy_from_plan
	body.SendToElement = BoolValueOrNil(plan.SendToElement)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct PerfMgmtPolicySet to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete request_body_string::id")
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	tflog.Debug(ctx, "http json override: delete request_body_string::_etag")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	tflog.Debug(ctx, "http json override: set request_body_string::_schema")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete request_body_string::disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	tflog.Debug(ctx, "http json override: delete request_body_string::disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	tflog.Debug(ctx, "http json override: delete request_body_string::inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	tflog.Debug(ctx, "http json override: delete request_body_string::inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	tflog.Debug(ctx, "http json override: delete request_body_string::region")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	tflog.Debug(ctx, "http json override: delete request_body_string::policy_req_version")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_req_version")
	tflog.Debug(ctx, "http json override: delete request_body_string::policy_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_rules")
	tflog.Debug(ctx, "http json override: delete request_body_string::send_to_element")
	request_body_string, _ = sjson.Delete(request_body_string, "send_to_element")
	tflog.Debug(ctx, "http json override: delete request_body_string::update_order")
	request_body_string, _ = sjson.Delete(request_body_string, "update_order")
	tflog.Debug(ctx, "http json override: delete request_body_string::link_health_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "link_health_rules")
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_performance_policy_set", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_performance_policy_set",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_performance_policy_set", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_performance_policy_set",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_performance_policy_set", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.PerfMgmtPolicySet
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PerfMgmtPolicySet in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_performance_policy_set with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=PerfMgmtPolicySet
	// copy_to_state: state=state prefix=rsModel ans=ans properties=17
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_to_state
	state.DefaultrulePolicyset = types.BoolPointerValue(ans.DefaultrulePolicyset)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=link_health_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varLinkHealthPolicyruleOrder, errLinkHealthPolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.LinkHealthPolicyruleOrder)
	state.LinkHealthPolicyruleOrder = varLinkHealthPolicyruleOrder
	resp.Diagnostics.Append(errLinkHealthPolicyruleOrder.Errors()...)
	// property: name=link_health_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.LinkHealthRules == nil {
		state.LinkHealthRules = nil
	} else if len(ans.LinkHealthRules) == 0 {
		state.LinkHealthRules = []rsModelPerfMgmtPolicyRule{}
	} else {
		state.LinkHealthRules = make([]rsModelPerfMgmtPolicyRule, 0, len(ans.LinkHealthRules))
		for varLoopLinkHealthRulesIndex, varLoopLinkHealthRules := range ans.LinkHealthRules {
			// add a new item
			state.LinkHealthRules = append(state.LinkHealthRules, rsModelPerfMgmtPolicyRule{})
			// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex] prefix=rsModel ans=varLoopLinkHealthRules properties=13
			tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex] prefix=rsModel ans=varLoopLinkHealthRules")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Etag = types.Int64PointerValue(varLoopLinkHealthRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Schema = types.Int64PointerValue(varLoopLinkHealthRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopLinkHealthRules.Actions == nil {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = nil
			} else if len(varLoopLinkHealthRules.Actions) == 0 {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = []rsModelPerfMgmtAction{}
			} else {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = make([]rsModelPerfMgmtAction, 0, len(varLoopLinkHealthRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopLinkHealthRules.Actions {
					// add a new item
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = append(state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions, rsModelPerfMgmtAction{})
					// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions properties=7
					tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions")
					// property: name=action_type, type=STRING macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ActionType = types.StringPointerValue(varLoopActions.ActionType)
					// property: name=always_on, type=BOOLEAN macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AlwaysOn = types.BoolPointerValue(varLoopActions.AlwaysOn)
					// property: name=app_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.AppPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf prefix=rsModel ans=varLoopActions.AppPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf prefix=rsModel ans=varLoopActions.AppPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.AppPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.AppPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.AppPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.AppPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.AppPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.AppPerf.MonitoringApproach)
					}
					// property: name=circuit_utilization_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.CircuitUtilizationPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.CircuitUtilizationPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.CircuitUtilizationPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.CircuitUtilizationPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.CircuitUtilizationPerf.MonitoringApproach)
					}
					// property: name=lqm_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.LqmPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf prefix=rsModel ans=varLoopActions.LqmPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf prefix=rsModel ans=varLoopActions.LqmPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.LqmPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.LqmPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.LqmPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.LqmPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.LqmPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.LqmPerf.MonitoringApproach)
					}
					// property: name=probe_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.ProbePerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf prefix=rsModel ans=varLoopActions.ProbePerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf prefix=rsModel ans=varLoopActions.ProbePerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.ProbePerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.ProbePerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.ProbePerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.ProbePerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.ProbePerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.MonitoringApproach = types.StringPointerValue(varLoopActions.ProbePerf.MonitoringApproach)
					}
					// property: name=sys_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.SysPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf prefix=rsModel ans=varLoopActions.SysPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf prefix=rsModel ans=varLoopActions.SysPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.SysPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.SysPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.SysPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.SysPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.SysPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.SysPerf.MonitoringApproach)
					}
				}
			}
			// property: name=app_filters, type=REFERENCE macro=copy_to_state
			if varLoopLinkHealthRules.AppFilters == nil {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters = nil
			} else {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters = &rsModelApplicationFilter{}
				// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters prefix=rsModel ans=varLoopLinkHealthRules.AppFilters properties=2
				tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters prefix=rsModel ans=varLoopLinkHealthRules.AppFilters")
				// property: name=app_transfer_types, type=ARRAY_PRIMITIVE macro=copy_to_state
				varAppTransferTypes, errAppTransferTypes := types.ListValueFrom(ctx, types.StringType, varLoopLinkHealthRules.AppFilters.AppTransferTypes)
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters.AppTransferTypes = varAppTransferTypes
				resp.Diagnostics.Append(errAppTransferTypes.Errors()...)
				// property: name=application_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
				varApplicationIds, errApplicationIds := types.ListValueFrom(ctx, types.StringType, varLoopLinkHealthRules.AppFilters.ApplicationIds)
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters.ApplicationIds = varApplicationIds
				resp.Diagnostics.Append(errApplicationIds.Errors()...)
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Description = types.StringPointerValue(varLoopLinkHealthRules.Description)
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Enabled = types.BoolPointerValue(varLoopLinkHealthRules.Enabled)
			// property: name=id, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Id = types.StringPointerValue(varLoopLinkHealthRules.Id)
			// property: name=name, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Name = types.StringPointerValue(varLoopLinkHealthRules.Name)
			// property: name=path_filters, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopLinkHealthRules.PathFilters == nil {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = nil
			} else if len(varLoopLinkHealthRules.PathFilters) == 0 {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = []rsModelPathFilter{}
			} else {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = make([]rsModelPathFilter, 0, len(varLoopLinkHealthRules.PathFilters))
				for varLoopPathFiltersIndex, varLoopPathFilters := range varLoopLinkHealthRules.PathFilters {
					// add a new item
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = append(state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters, rsModelPathFilter{})
					// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex] prefix=rsModel ans=varLoopPathFilters properties=2
					tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex] prefix=rsModel ans=varLoopPathFilters")
					// property: name=label, type=STRING macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex].Label = types.StringPointerValue(varLoopPathFilters.Label)
					// property: name=path_type, type=STRING macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex].PathType = types.StringPointerValue(varLoopPathFilters.PathType)
				}
			}
			// property: name=service_label_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServiceLabelIds, errServiceLabelIds := types.ListValueFrom(ctx, types.StringType, varLoopLinkHealthRules.ServiceLabelIds)
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].ServiceLabelIds = varServiceLabelIds
			resp.Diagnostics.Append(errServiceLabelIds.Errors()...)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopLinkHealthRules.Tags)
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
			// property: name=thresholdprofile_id, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].ThresholdprofileId = types.StringPointerValue(varLoopLinkHealthRules.ThresholdprofileId)
			// property: name=type, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Type = types.StringPointerValue(varLoopLinkHealthRules.Type)
		}
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PolicyRules == nil {
		state.PolicyRules = nil
	} else if len(ans.PolicyRules) == 0 {
		state.PolicyRules = []rsModelBasePolicyRule{}
	} else {
		state.PolicyRules = make([]rsModelBasePolicyRule, 0, len(ans.PolicyRules))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.PolicyRules {
			// add a new item
			state.PolicyRules = append(state.PolicyRules, rsModelBasePolicyRule{})
			// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=12
			tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
			// property: name=description, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Disabled = types.BoolPointerValue(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = types.StringPointerValue(varLoopPolicyRules.DisabledReason)
			// property: name=id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Inactive = types.BoolPointerValue(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = types.StringPointerValue(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
			// property: name=policyset_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = types.StringPointerValue(varLoopPolicyRules.PolicysetId)
			// property: name=region, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Region = types.StringPointerValue(varLoopPolicyRules.Region)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
			state.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
	state.SendToElement = types.BoolPointerValue(ans.SendToElement)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *performancePolicySetResource) doGet(ctx context.Context, state *rsModelPerfMgmtPolicySet, savestate *rsModelPerfMgmtPolicySet, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_performance_policy_set",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 1 {
		resp.Diagnostics.AddError("error in prismasdwan_performance_policy_set ID format", "Expected 1 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_performance_policy_set"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/perfmgmtpolicysets/{perfmgmtpolicyset_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["perfmgmtpolicyset_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_performance_policy_set", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_performance_policy_set",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_performance_policy_set from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=PerfMgmtPolicySet
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.PerfMgmtPolicySet
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PerfMgmtPolicySet in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=17
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_to_state
	state.DefaultrulePolicyset = types.BoolPointerValue(ans.DefaultrulePolicyset)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=link_health_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varLinkHealthPolicyruleOrder, errLinkHealthPolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.LinkHealthPolicyruleOrder)
	state.LinkHealthPolicyruleOrder = varLinkHealthPolicyruleOrder
	resp.Diagnostics.Append(errLinkHealthPolicyruleOrder.Errors()...)
	// property: name=link_health_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.LinkHealthRules == nil {
		state.LinkHealthRules = nil
	} else if len(ans.LinkHealthRules) == 0 {
		state.LinkHealthRules = []rsModelPerfMgmtPolicyRule{}
	} else {
		state.LinkHealthRules = make([]rsModelPerfMgmtPolicyRule, 0, len(ans.LinkHealthRules))
		for varLoopLinkHealthRulesIndex, varLoopLinkHealthRules := range ans.LinkHealthRules {
			// add a new item
			state.LinkHealthRules = append(state.LinkHealthRules, rsModelPerfMgmtPolicyRule{})
			// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex] prefix=rsModel ans=varLoopLinkHealthRules properties=13
			tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex] prefix=rsModel ans=varLoopLinkHealthRules")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Etag = types.Int64PointerValue(varLoopLinkHealthRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Schema = types.Int64PointerValue(varLoopLinkHealthRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopLinkHealthRules.Actions == nil {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = nil
			} else if len(varLoopLinkHealthRules.Actions) == 0 {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = []rsModelPerfMgmtAction{}
			} else {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = make([]rsModelPerfMgmtAction, 0, len(varLoopLinkHealthRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopLinkHealthRules.Actions {
					// add a new item
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = append(state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions, rsModelPerfMgmtAction{})
					// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions properties=7
					tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions")
					// property: name=action_type, type=STRING macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ActionType = types.StringPointerValue(varLoopActions.ActionType)
					// property: name=always_on, type=BOOLEAN macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AlwaysOn = types.BoolPointerValue(varLoopActions.AlwaysOn)
					// property: name=app_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.AppPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf prefix=rsModel ans=varLoopActions.AppPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf prefix=rsModel ans=varLoopActions.AppPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.AppPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.AppPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.AppPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.AppPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.AppPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.AppPerf.MonitoringApproach)
					}
					// property: name=circuit_utilization_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.CircuitUtilizationPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.CircuitUtilizationPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.CircuitUtilizationPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.CircuitUtilizationPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.CircuitUtilizationPerf.MonitoringApproach)
					}
					// property: name=lqm_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.LqmPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf prefix=rsModel ans=varLoopActions.LqmPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf prefix=rsModel ans=varLoopActions.LqmPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.LqmPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.LqmPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.LqmPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.LqmPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.LqmPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.LqmPerf.MonitoringApproach)
					}
					// property: name=probe_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.ProbePerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf prefix=rsModel ans=varLoopActions.ProbePerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf prefix=rsModel ans=varLoopActions.ProbePerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.ProbePerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.ProbePerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.ProbePerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.ProbePerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.ProbePerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.MonitoringApproach = types.StringPointerValue(varLoopActions.ProbePerf.MonitoringApproach)
					}
					// property: name=sys_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.SysPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf prefix=rsModel ans=varLoopActions.SysPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf prefix=rsModel ans=varLoopActions.SysPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.SysPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.SysPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.SysPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.SysPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.SysPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.SysPerf.MonitoringApproach)
					}
				}
			}
			// property: name=app_filters, type=REFERENCE macro=copy_to_state
			if varLoopLinkHealthRules.AppFilters == nil {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters = nil
			} else {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters = &rsModelApplicationFilter{}
				// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters prefix=rsModel ans=varLoopLinkHealthRules.AppFilters properties=2
				tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters prefix=rsModel ans=varLoopLinkHealthRules.AppFilters")
				// property: name=app_transfer_types, type=ARRAY_PRIMITIVE macro=copy_to_state
				varAppTransferTypes, errAppTransferTypes := types.ListValueFrom(ctx, types.StringType, varLoopLinkHealthRules.AppFilters.AppTransferTypes)
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters.AppTransferTypes = varAppTransferTypes
				resp.Diagnostics.Append(errAppTransferTypes.Errors()...)
				// property: name=application_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
				varApplicationIds, errApplicationIds := types.ListValueFrom(ctx, types.StringType, varLoopLinkHealthRules.AppFilters.ApplicationIds)
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters.ApplicationIds = varApplicationIds
				resp.Diagnostics.Append(errApplicationIds.Errors()...)
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Description = types.StringPointerValue(varLoopLinkHealthRules.Description)
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Enabled = types.BoolPointerValue(varLoopLinkHealthRules.Enabled)
			// property: name=id, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Id = types.StringPointerValue(varLoopLinkHealthRules.Id)
			// property: name=name, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Name = types.StringPointerValue(varLoopLinkHealthRules.Name)
			// property: name=path_filters, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopLinkHealthRules.PathFilters == nil {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = nil
			} else if len(varLoopLinkHealthRules.PathFilters) == 0 {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = []rsModelPathFilter{}
			} else {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = make([]rsModelPathFilter, 0, len(varLoopLinkHealthRules.PathFilters))
				for varLoopPathFiltersIndex, varLoopPathFilters := range varLoopLinkHealthRules.PathFilters {
					// add a new item
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = append(state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters, rsModelPathFilter{})
					// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex] prefix=rsModel ans=varLoopPathFilters properties=2
					tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex] prefix=rsModel ans=varLoopPathFilters")
					// property: name=label, type=STRING macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex].Label = types.StringPointerValue(varLoopPathFilters.Label)
					// property: name=path_type, type=STRING macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex].PathType = types.StringPointerValue(varLoopPathFilters.PathType)
				}
			}
			// property: name=service_label_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServiceLabelIds, errServiceLabelIds := types.ListValueFrom(ctx, types.StringType, varLoopLinkHealthRules.ServiceLabelIds)
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].ServiceLabelIds = varServiceLabelIds
			resp.Diagnostics.Append(errServiceLabelIds.Errors()...)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopLinkHealthRules.Tags)
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
			// property: name=thresholdprofile_id, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].ThresholdprofileId = types.StringPointerValue(varLoopLinkHealthRules.ThresholdprofileId)
			// property: name=type, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Type = types.StringPointerValue(varLoopLinkHealthRules.Type)
		}
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PolicyRules == nil {
		state.PolicyRules = nil
	} else if len(ans.PolicyRules) == 0 {
		state.PolicyRules = []rsModelBasePolicyRule{}
	} else {
		state.PolicyRules = make([]rsModelBasePolicyRule, 0, len(ans.PolicyRules))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.PolicyRules {
			// add a new item
			state.PolicyRules = append(state.PolicyRules, rsModelBasePolicyRule{})
			// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=12
			tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
			// property: name=description, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Disabled = types.BoolPointerValue(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = types.StringPointerValue(varLoopPolicyRules.DisabledReason)
			// property: name=id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Inactive = types.BoolPointerValue(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = types.StringPointerValue(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
			// property: name=policyset_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = types.StringPointerValue(varLoopPolicyRules.PolicysetId)
			// property: name=region, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Region = types.StringPointerValue(varLoopPolicyRules.Region)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
			state.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
	state.SendToElement = types.BoolPointerValue(ans.SendToElement)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *performancePolicySetResource) doPut(ctx context.Context, plan *rsModelPerfMgmtPolicySet, state *rsModelPerfMgmtPolicySet, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_performance_policy_set",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_performance_policy_set", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) < 1 {
		resp.Diagnostics.AddError("error in prismasdwan_performance_policy_set ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_performance_policy_set"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.0/api/perfmgmtpolicysets/{perfmgmtpolicyset_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["perfmgmtpolicyset_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.PerfMgmtPolicySet{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=17
	tflog.Debug(ctx, "copy_from_plan_or_state body=body prefix=rsModel state=state plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=clone_from, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.CloneFrom = ValueStringPointerFromPlanOrState(plan.CloneFrom, state.CloneFrom)
	} else {
		body.CloneFrom = StringValueOrNil(plan.CloneFrom)
	}
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.DefaultrulePolicyset = ValueBoolPointerFromPlanOrState(plan.DefaultrulePolicyset, state.DefaultrulePolicyset)
	} else {
		body.DefaultrulePolicyset = BoolValueOrNil(plan.DefaultrulePolicyset)
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Disabled = ValueBoolPointerFromPlanOrState(plan.Disabled, state.Disabled)
	} else {
		body.Disabled = BoolValueOrNil(plan.Disabled)
	}
	// property: name=disabled_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.DisabledReason = ValueStringPointerFromPlanOrState(plan.DisabledReason, state.DisabledReason)
	} else {
		body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Inactive = ValueBoolPointerFromPlanOrState(plan.Inactive, state.Inactive)
	} else {
		body.Inactive = BoolValueOrNil(plan.Inactive)
	}
	// property: name=inactive_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.InactiveReason = ValueStringPointerFromPlanOrState(plan.InactiveReason, state.InactiveReason)
	} else {
		body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	}
	// property: name=link_health_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.LinkHealthPolicyruleOrder = ListStringValueOrNil(ctx, plan.LinkHealthPolicyruleOrder)
	// property: name=link_health_rules, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.LinkHealthRules == nil && (state == nil || state.LinkHealthRules == nil) {
		body.LinkHealthRules = nil
	} else if len(plan.LinkHealthRules) == 0 && (state == nil || len(state.LinkHealthRules) == 0) {
		body.LinkHealthRules = []sdwan_schema.PerfMgmtPolicyRule{}
	} else if len(plan.LinkHealthRules) != 0 || (state != nil && len(state.LinkHealthRules) != 0) {
		LinkHealthRulesToUse := plan.LinkHealthRules
		if len(plan.LinkHealthRules) == 0 {
			LinkHealthRulesToUse = state.LinkHealthRules
		}
		body.LinkHealthRules = make([]sdwan_schema.PerfMgmtPolicyRule, 0, len(LinkHealthRulesToUse))
		for varLoopLinkHealthRulesIndex, varLoopLinkHealthRules := range LinkHealthRulesToUse {
			// add a new item
			body.LinkHealthRules = append(body.LinkHealthRules, sdwan_schema.PerfMgmtPolicyRule{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex] prefix=rsModel plan=varLoopLinkHealthRules properties=13
			tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex] prefix=rsModel plan=varLoopLinkHealthRules")
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Etag = Int64ValueOrNil(varLoopLinkHealthRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Schema = Int64ValueOrNil(varLoopLinkHealthRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopLinkHealthRules.Actions == nil {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = nil
			} else if len(varLoopLinkHealthRules.Actions) == 0 {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = []sdwan_schema.PerfMgmtAction{}
			} else {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = make([]sdwan_schema.PerfMgmtAction, 0, len(varLoopLinkHealthRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopLinkHealthRules.Actions {
					// add a new item
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = append(body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions, sdwan_schema.PerfMgmtAction{})
					// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel plan=varLoopActions properties=7
					tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel plan=varLoopActions")
					// property: name=action_type, type=STRING macro=copy_from_plan
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ActionType = StringValueOrNil(varLoopActions.ActionType)
					// property: name=always_on, type=BOOLEAN macro=copy_from_plan
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AlwaysOn = BoolValueOrNil(varLoopActions.AlwaysOn)
					// property: name=app_perf, type=REFERENCE macro=copy_from_plan
					if varLoopActions.AppPerf != nil {
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf = &sdwan_schema.PerfMgmtActionParameters{}
						// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf prefix=rsModel plan=varLoopActions.AppPerf properties=2
						tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf prefix=rsModel plan=varLoopActions.AppPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_from_plan
						if varLoopActions.AppPerf.BadHealthThresholds != nil {
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds = &sdwan_schema.PerfMgmtHealthThresholds{}
							// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.AppPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.AppPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds.ClearBelow = Int64ValueOrNil(varLoopActions.AppPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds.RaiseAbove = Int64ValueOrNil(varLoopActions.AppPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_from_plan
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.MonitoringApproach = StringValueOrNil(varLoopActions.AppPerf.MonitoringApproach)
					}
					// property: name=circuit_utilization_perf, type=REFERENCE macro=copy_from_plan
					if varLoopActions.CircuitUtilizationPerf != nil {
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf = &sdwan_schema.PerfMgmtActionParameters{}
						// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf prefix=rsModel plan=varLoopActions.CircuitUtilizationPerf properties=2
						tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf prefix=rsModel plan=varLoopActions.CircuitUtilizationPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_from_plan
						if varLoopActions.CircuitUtilizationPerf.BadHealthThresholds != nil {
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds = &sdwan_schema.PerfMgmtHealthThresholds{}
							// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.CircuitUtilizationPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.CircuitUtilizationPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds.ClearBelow = Int64ValueOrNil(varLoopActions.CircuitUtilizationPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds.RaiseAbove = Int64ValueOrNil(varLoopActions.CircuitUtilizationPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_from_plan
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.MonitoringApproach = StringValueOrNil(varLoopActions.CircuitUtilizationPerf.MonitoringApproach)
					}
					// property: name=lqm_perf, type=REFERENCE macro=copy_from_plan
					if varLoopActions.LqmPerf != nil {
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf = &sdwan_schema.PerfMgmtActionParameters{}
						// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf prefix=rsModel plan=varLoopActions.LqmPerf properties=2
						tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf prefix=rsModel plan=varLoopActions.LqmPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_from_plan
						if varLoopActions.LqmPerf.BadHealthThresholds != nil {
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds = &sdwan_schema.PerfMgmtHealthThresholds{}
							// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.LqmPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.LqmPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds.ClearBelow = Int64ValueOrNil(varLoopActions.LqmPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds.RaiseAbove = Int64ValueOrNil(varLoopActions.LqmPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_from_plan
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.MonitoringApproach = StringValueOrNil(varLoopActions.LqmPerf.MonitoringApproach)
					}
					// property: name=probe_perf, type=REFERENCE macro=copy_from_plan
					if varLoopActions.ProbePerf != nil {
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf = &sdwan_schema.PerfMgmtActionParameters{}
						// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf prefix=rsModel plan=varLoopActions.ProbePerf properties=2
						tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf prefix=rsModel plan=varLoopActions.ProbePerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_from_plan
						if varLoopActions.ProbePerf.BadHealthThresholds != nil {
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds = &sdwan_schema.PerfMgmtHealthThresholds{}
							// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.ProbePerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.ProbePerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds.ClearBelow = Int64ValueOrNil(varLoopActions.ProbePerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds.RaiseAbove = Int64ValueOrNil(varLoopActions.ProbePerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_from_plan
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.MonitoringApproach = StringValueOrNil(varLoopActions.ProbePerf.MonitoringApproach)
					}
					// property: name=sys_perf, type=REFERENCE macro=copy_from_plan
					if varLoopActions.SysPerf != nil {
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf = &sdwan_schema.PerfMgmtActionParameters{}
						// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf prefix=rsModel plan=varLoopActions.SysPerf properties=2
						tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf prefix=rsModel plan=varLoopActions.SysPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_from_plan
						if varLoopActions.SysPerf.BadHealthThresholds != nil {
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds = &sdwan_schema.PerfMgmtHealthThresholds{}
							// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.SysPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds prefix=rsModel plan=varLoopActions.SysPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds.ClearBelow = Int64ValueOrNil(varLoopActions.SysPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_from_plan
							body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds.RaiseAbove = Int64ValueOrNil(varLoopActions.SysPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_from_plan
						body.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.MonitoringApproach = StringValueOrNil(varLoopActions.SysPerf.MonitoringApproach)
					}
				}
			}
			// property: name=app_filters, type=REFERENCE macro=copy_from_plan
			if varLoopLinkHealthRules.AppFilters != nil {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters = &sdwan_schema.ApplicationFilter{}
				// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters prefix=rsModel plan=varLoopLinkHealthRules.AppFilters properties=2
				tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters prefix=rsModel plan=varLoopLinkHealthRules.AppFilters")
				// property: name=app_transfer_types, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters.AppTransferTypes = ListStringValueOrNil(ctx, varLoopLinkHealthRules.AppFilters.AppTransferTypes)
				// property: name=application_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters.ApplicationIds = ListStringValueOrNil(ctx, varLoopLinkHealthRules.AppFilters.ApplicationIds)
			}
			// property: name=description, type=STRING macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Description = StringValueOrNil(varLoopLinkHealthRules.Description)
			// property: name=enabled, type=BOOLEAN macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Enabled = BoolValueOrNil(varLoopLinkHealthRules.Enabled)
			// property: name=id, type=STRING macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Id = StringValueOrNil(varLoopLinkHealthRules.Id)
			// property: name=name, type=STRING macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Name = StringValueOrNil(varLoopLinkHealthRules.Name)
			// property: name=path_filters, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopLinkHealthRules.PathFilters == nil {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = nil
			} else if len(varLoopLinkHealthRules.PathFilters) == 0 {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = []sdwan_schema.PathFilter{}
			} else {
				body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = make([]sdwan_schema.PathFilter, 0, len(varLoopLinkHealthRules.PathFilters))
				for varLoopPathFiltersIndex, varLoopPathFilters := range varLoopLinkHealthRules.PathFilters {
					// add a new item
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = append(body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters, sdwan_schema.PathFilter{})
					// copy_from_plan: body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex] prefix=rsModel plan=varLoopPathFilters properties=2
					tflog.Debug(ctx, "copy_from_plan body=body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex] prefix=rsModel plan=varLoopPathFilters")
					// property: name=label, type=STRING macro=copy_from_plan
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex].Label = StringValueOrNil(varLoopPathFilters.Label)
					// property: name=path_type, type=STRING macro=copy_from_plan
					body.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex].PathType = StringValueOrNil(varLoopPathFilters.PathType)
				}
			}
			// property: name=service_label_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].ServiceLabelIds = ListStringValueOrNil(ctx, varLoopLinkHealthRules.ServiceLabelIds)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Tags = SetStringValueOrNil(ctx, varLoopLinkHealthRules.Tags)
			// property: name=thresholdprofile_id, type=STRING macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].ThresholdprofileId = StringValueOrNil(varLoopLinkHealthRules.ThresholdprofileId)
			// property: name=type, type=STRING macro=copy_from_plan
			body.LinkHealthRules[varLoopLinkHealthRulesIndex].Type = StringValueOrNil(varLoopLinkHealthRules.Type)
		}
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.PolicyRules == nil && (state == nil || state.PolicyRules == nil) {
		body.PolicyRules = nil
	} else if len(plan.PolicyRules) == 0 && (state == nil || len(state.PolicyRules) == 0) {
		body.PolicyRules = []sdwan_schema.BasePolicyRule{}
	} else if len(plan.PolicyRules) != 0 || (state != nil && len(state.PolicyRules) != 0) {
		PolicyRulesToUse := plan.PolicyRules
		if len(plan.PolicyRules) == 0 {
			PolicyRulesToUse = state.PolicyRules
		}
		body.PolicyRules = make([]sdwan_schema.BasePolicyRule, 0, len(PolicyRulesToUse))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range PolicyRulesToUse {
			// add a new item
			body.PolicyRules = append(body.PolicyRules, sdwan_schema.BasePolicyRule{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel plan=varLoopPolicyRules properties=12
			tflog.Debug(ctx, "copy_from_plan body=body.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel plan=varLoopPolicyRules")
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Etag = Int64ValueOrNil(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Schema = Int64ValueOrNil(varLoopPolicyRules.Schema)
			// property: name=description, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Description = StringValueOrNil(varLoopPolicyRules.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Disabled = BoolValueOrNil(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = StringValueOrNil(varLoopPolicyRules.DisabledReason)
			// property: name=id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Id = StringValueOrNil(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Inactive = BoolValueOrNil(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = StringValueOrNil(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Name = StringValueOrNil(varLoopPolicyRules.Name)
			// property: name=policyset_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = StringValueOrNil(varLoopPolicyRules.PolicysetId)
			// property: name=region, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Region = StringValueOrNil(varLoopPolicyRules.Region)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.Tags)
		}
	}
	// property: name=region, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Region = ValueStringPointerFromPlanOrState(plan.Region, state.Region)
	} else {
		body.Region = StringValueOrNil(plan.Region)
	}
	// property: name=send_to_element, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.SendToElement = ValueBoolPointerFromPlanOrState(plan.SendToElement, state.SendToElement)
	} else {
		body.SendToElement = BoolValueOrNil(plan.SendToElement)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct PerfMgmtPolicySet to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete request_body_string::disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	tflog.Debug(ctx, "http json override: delete request_body_string::disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	tflog.Debug(ctx, "http json override: delete request_body_string::inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	tflog.Debug(ctx, "http json override: delete request_body_string::inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	tflog.Debug(ctx, "http json override: delete request_body_string::region")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	tflog.Debug(ctx, "http json override: delete request_body_string::policy_req_version")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_req_version")
	tflog.Debug(ctx, "http json override: delete request_body_string::policy_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_rules")
	tflog.Debug(ctx, "http json override: delete request_body_string::send_to_element")
	request_body_string, _ = sjson.Delete(request_body_string, "send_to_element")
	tflog.Debug(ctx, "http json override: delete request_body_string::update_order")
	request_body_string, _ = sjson.Delete(request_body_string, "update_order")
	tflog.Debug(ctx, "http json override: delete request_body_string::link_health_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "link_health_rules")
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_performance_policy_set", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_performance_policy_set",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_performance_policy_set", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_performance_policy_set",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_performance_policy_set", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.PerfMgmtPolicySet
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PerfMgmtPolicySet in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=PerfMgmtPolicySet
	// copy_to_state: state=state prefix=rsModel ans=ans properties=17
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_to_state
	state.DefaultrulePolicyset = types.BoolPointerValue(ans.DefaultrulePolicyset)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=link_health_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varLinkHealthPolicyruleOrder, errLinkHealthPolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.LinkHealthPolicyruleOrder)
	state.LinkHealthPolicyruleOrder = varLinkHealthPolicyruleOrder
	resp.Diagnostics.Append(errLinkHealthPolicyruleOrder.Errors()...)
	// property: name=link_health_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.LinkHealthRules == nil {
		state.LinkHealthRules = nil
	} else if len(ans.LinkHealthRules) == 0 {
		state.LinkHealthRules = []rsModelPerfMgmtPolicyRule{}
	} else {
		state.LinkHealthRules = make([]rsModelPerfMgmtPolicyRule, 0, len(ans.LinkHealthRules))
		for varLoopLinkHealthRulesIndex, varLoopLinkHealthRules := range ans.LinkHealthRules {
			// add a new item
			state.LinkHealthRules = append(state.LinkHealthRules, rsModelPerfMgmtPolicyRule{})
			// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex] prefix=rsModel ans=varLoopLinkHealthRules properties=13
			tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex] prefix=rsModel ans=varLoopLinkHealthRules")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Etag = types.Int64PointerValue(varLoopLinkHealthRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Schema = types.Int64PointerValue(varLoopLinkHealthRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopLinkHealthRules.Actions == nil {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = nil
			} else if len(varLoopLinkHealthRules.Actions) == 0 {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = []rsModelPerfMgmtAction{}
			} else {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = make([]rsModelPerfMgmtAction, 0, len(varLoopLinkHealthRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopLinkHealthRules.Actions {
					// add a new item
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions = append(state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions, rsModelPerfMgmtAction{})
					// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions properties=7
					tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions")
					// property: name=action_type, type=STRING macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ActionType = types.StringPointerValue(varLoopActions.ActionType)
					// property: name=always_on, type=BOOLEAN macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AlwaysOn = types.BoolPointerValue(varLoopActions.AlwaysOn)
					// property: name=app_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.AppPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf prefix=rsModel ans=varLoopActions.AppPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf prefix=rsModel ans=varLoopActions.AppPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.AppPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.AppPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.AppPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.AppPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.AppPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].AppPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.AppPerf.MonitoringApproach)
					}
					// property: name=circuit_utilization_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.CircuitUtilizationPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.CircuitUtilizationPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.CircuitUtilizationPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.CircuitUtilizationPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.CircuitUtilizationPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].CircuitUtilizationPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.CircuitUtilizationPerf.MonitoringApproach)
					}
					// property: name=lqm_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.LqmPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf prefix=rsModel ans=varLoopActions.LqmPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf prefix=rsModel ans=varLoopActions.LqmPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.LqmPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.LqmPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.LqmPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.LqmPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.LqmPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].LqmPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.LqmPerf.MonitoringApproach)
					}
					// property: name=probe_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.ProbePerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf prefix=rsModel ans=varLoopActions.ProbePerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf prefix=rsModel ans=varLoopActions.ProbePerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.ProbePerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.ProbePerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.ProbePerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.ProbePerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.ProbePerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].ProbePerf.MonitoringApproach = types.StringPointerValue(varLoopActions.ProbePerf.MonitoringApproach)
					}
					// property: name=sys_perf, type=REFERENCE macro=copy_to_state
					if varLoopActions.SysPerf == nil {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf = nil
					} else {
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf = &rsModelPerfMgmtActionParameters{}
						// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf prefix=rsModel ans=varLoopActions.SysPerf properties=2
						tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf prefix=rsModel ans=varLoopActions.SysPerf")
						// property: name=bad_health_thresholds, type=REFERENCE macro=copy_to_state
						if varLoopActions.SysPerf.BadHealthThresholds == nil {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds = nil
						} else {
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds = &rsModelPerfMgmtHealthThresholds{}
							// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.SysPerf.BadHealthThresholds properties=2
							tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds prefix=rsModel ans=varLoopActions.SysPerf.BadHealthThresholds")
							// property: name=clear_below, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds.ClearBelow = types.Int64PointerValue(varLoopActions.SysPerf.BadHealthThresholds.ClearBelow)
							// property: name=raise_above, type=INTEGER macro=copy_to_state
							state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.BadHealthThresholds.RaiseAbove = types.Int64PointerValue(varLoopActions.SysPerf.BadHealthThresholds.RaiseAbove)
						}
						// property: name=monitoring_approach, type=STRING macro=copy_to_state
						state.LinkHealthRules[varLoopLinkHealthRulesIndex].Actions[varLoopActionsIndex].SysPerf.MonitoringApproach = types.StringPointerValue(varLoopActions.SysPerf.MonitoringApproach)
					}
				}
			}
			// property: name=app_filters, type=REFERENCE macro=copy_to_state
			if varLoopLinkHealthRules.AppFilters == nil {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters = nil
			} else {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters = &rsModelApplicationFilter{}
				// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters prefix=rsModel ans=varLoopLinkHealthRules.AppFilters properties=2
				tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters prefix=rsModel ans=varLoopLinkHealthRules.AppFilters")
				// property: name=app_transfer_types, type=ARRAY_PRIMITIVE macro=copy_to_state
				varAppTransferTypes, errAppTransferTypes := types.ListValueFrom(ctx, types.StringType, varLoopLinkHealthRules.AppFilters.AppTransferTypes)
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters.AppTransferTypes = varAppTransferTypes
				resp.Diagnostics.Append(errAppTransferTypes.Errors()...)
				// property: name=application_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
				varApplicationIds, errApplicationIds := types.ListValueFrom(ctx, types.StringType, varLoopLinkHealthRules.AppFilters.ApplicationIds)
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].AppFilters.ApplicationIds = varApplicationIds
				resp.Diagnostics.Append(errApplicationIds.Errors()...)
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Description = types.StringPointerValue(varLoopLinkHealthRules.Description)
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Enabled = types.BoolPointerValue(varLoopLinkHealthRules.Enabled)
			// property: name=id, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Id = types.StringPointerValue(varLoopLinkHealthRules.Id)
			// property: name=name, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Name = types.StringPointerValue(varLoopLinkHealthRules.Name)
			// property: name=path_filters, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopLinkHealthRules.PathFilters == nil {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = nil
			} else if len(varLoopLinkHealthRules.PathFilters) == 0 {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = []rsModelPathFilter{}
			} else {
				state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = make([]rsModelPathFilter, 0, len(varLoopLinkHealthRules.PathFilters))
				for varLoopPathFiltersIndex, varLoopPathFilters := range varLoopLinkHealthRules.PathFilters {
					// add a new item
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters = append(state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters, rsModelPathFilter{})
					// copy_to_state: state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex] prefix=rsModel ans=varLoopPathFilters properties=2
					tflog.Debug(ctx, "copy_to_state state=state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex] prefix=rsModel ans=varLoopPathFilters")
					// property: name=label, type=STRING macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex].Label = types.StringPointerValue(varLoopPathFilters.Label)
					// property: name=path_type, type=STRING macro=copy_to_state
					state.LinkHealthRules[varLoopLinkHealthRulesIndex].PathFilters[varLoopPathFiltersIndex].PathType = types.StringPointerValue(varLoopPathFilters.PathType)
				}
			}
			// property: name=service_label_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServiceLabelIds, errServiceLabelIds := types.ListValueFrom(ctx, types.StringType, varLoopLinkHealthRules.ServiceLabelIds)
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].ServiceLabelIds = varServiceLabelIds
			resp.Diagnostics.Append(errServiceLabelIds.Errors()...)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopLinkHealthRules.Tags)
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
			// property: name=thresholdprofile_id, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].ThresholdprofileId = types.StringPointerValue(varLoopLinkHealthRules.ThresholdprofileId)
			// property: name=type, type=STRING macro=copy_to_state
			state.LinkHealthRules[varLoopLinkHealthRulesIndex].Type = types.StringPointerValue(varLoopLinkHealthRules.Type)
		}
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PolicyRules == nil {
		state.PolicyRules = nil
	} else if len(ans.PolicyRules) == 0 {
		state.PolicyRules = []rsModelBasePolicyRule{}
	} else {
		state.PolicyRules = make([]rsModelBasePolicyRule, 0, len(ans.PolicyRules))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.PolicyRules {
			// add a new item
			state.PolicyRules = append(state.PolicyRules, rsModelBasePolicyRule{})
			// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=12
			tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
			// property: name=description, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Disabled = types.BoolPointerValue(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = types.StringPointerValue(varLoopPolicyRules.DisabledReason)
			// property: name=id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Inactive = types.BoolPointerValue(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = types.StringPointerValue(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
			// property: name=policyset_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = types.StringPointerValue(varLoopPolicyRules.PolicysetId)
			// property: name=region, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Region = types.StringPointerValue(varLoopPolicyRules.Region)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
			state.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
	state.SendToElement = types.BoolPointerValue(ans.SendToElement)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *performancePolicySetResource) doDelete(ctx context.Context, state *rsModelPerfMgmtPolicySet, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_performance_policy_set",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 1 {
		resp.Diagnostics.AddError("error in prismasdwan_performance_policy_set ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_performance_policy_set"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.0/api/perfmgmtpolicysets/{perfmgmtpolicyset_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["perfmgmtpolicyset_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_performance_policy_set", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *performancePolicySetResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_performance_policy_set")
	var plan rsModelPerfMgmtPolicySet
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelPerfMgmtPolicySet
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *performancePolicySetResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_performance_policy_set")
	var savestate, state rsModelPerfMgmtPolicySet
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *performancePolicySetResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_performance_policy_set")
	var plan, state rsModelPerfMgmtPolicySet
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *performancePolicySetResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_performance_policy_set")
	var state rsModelPerfMgmtPolicySet
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *performancePolicySetResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
