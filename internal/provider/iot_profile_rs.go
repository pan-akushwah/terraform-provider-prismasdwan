package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=3)
// | Computed Resource Name=deviceidprofiles
// +-----------------------------------------------------------------
// | DeviceIdSNMPV3Config HasID=false
// | DeviceIdSNMPV2Config HasID=false
// | DeviceIdProfile HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &iotProfileResource{}
	_ resource.ResourceWithConfigure   = &iotProfileResource{}
	_ resource.ResourceWithImportState = &iotProfileResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewIotProfileResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewIotProfileResource() resource.Resource {
	return &iotProfileResource{}
}

type iotProfileResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *iotProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_iot_profile"
}

// Schema defines the schema for this data source.
func (r *iotProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=DeviceIdProfile
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=num_associated_sites, type=INTEGER macro=rss_schema
			"num_associated_sites": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=num_associated_sites, type=INTEGER macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=snmp_discovery_device_refresh_frequency, type=INTEGER macro=rss_schema
			"snmp_discovery_device_refresh_frequency": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=snmp_discovery_device_refresh_frequency, type=INTEGER macro=rss_schema
			// property: name=snmp_discovery_enabled, type=BOOLEAN macro=rss_schema
			"snmp_discovery_enabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=snmp_discovery_enabled, type=BOOLEAN macro=rss_schema
			// property: name=snmp_discovery_network_refresh_frequency, type=INTEGER macro=rss_schema
			"snmp_discovery_network_refresh_frequency": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=snmp_discovery_network_refresh_frequency, type=INTEGER macro=rss_schema
			// property: name=snmp_discovery_use_local_neighbours, type=BOOLEAN macro=rss_schema
			"snmp_discovery_use_local_neighbours": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=snmp_discovery_use_local_neighbours, type=BOOLEAN macro=rss_schema
			// property: name=snmp_version, type=STRING macro=rss_schema
			"snmp_version": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=snmp_version, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=v2_config, type=REFERENCE macro=rss_schema
			"v2_config": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=snmp_community_string, type=STRING macro=rss_schema
					"snmp_community_string": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=snmp_community_string, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=snmp_community_string, type=STRING macro=rss_schema
			// property: name=v3_config, type=REFERENCE macro=rss_schema
			"v3_config": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=snmp_auth_password, type=STRING macro=rss_schema
					"snmp_auth_password": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: true,
					},
					// key name holder for attribute: name=snmp_auth_password, type=STRING macro=rss_schema
					"snmp_auth_password_internal_key_name": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// property: name=snmp_auth_password_encrypted, type=STRING macro=rss_schema
					"snmp_auth_password_encrypted": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: true,
					},
					// key name holder for attribute: name=snmp_auth_password_encrypted, type=STRING macro=rss_schema
					"snmp_auth_password_encrypted_internal_key_name": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// property: name=snmp_auth_protocol, type=STRING macro=rss_schema
					"snmp_auth_protocol": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=snmp_auth_protocol, type=STRING macro=rss_schema
					// property: name=snmp_privacy_password, type=STRING macro=rss_schema
					"snmp_privacy_password": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=snmp_privacy_password, type=STRING macro=rss_schema
					// property: name=snmp_privacy_password_encrypted, type=STRING macro=rss_schema
					"snmp_privacy_password_encrypted": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=snmp_privacy_password_encrypted, type=STRING macro=rss_schema
					// property: name=snmp_privacy_protocol, type=STRING macro=rss_schema
					"snmp_privacy_protocol": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=snmp_privacy_protocol, type=STRING macro=rss_schema
					// property: name=snmp_security_level, type=STRING macro=rss_schema
					"snmp_security_level": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=snmp_security_level, type=STRING macro=rss_schema
					// property: name=snmp_username, type=STRING macro=rss_schema
					"snmp_username": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=snmp_username, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=snmp_username, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *iotProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *iotProfileResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *iotProfileResource) doPost(ctx context.Context, plan *rsModelDeviceIdProfile, state *rsModelDeviceIdProfile, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_iot_profile")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_iot_profile",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_iot_profile"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.0/api/deviceidprofiles"

	// copy parameters from plan always
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.DeviceIdProfile{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=19
	tflog.Debug(ctx, "copy_from_plan body=body prefix=rsModel plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan
	body.Disabled = BoolValueOrNil(plan.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_from_plan
	body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan
	body.Inactive = BoolValueOrNil(plan.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_from_plan
	body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=num_associated_sites, type=INTEGER macro=copy_from_plan
	body.NumAssociatedSites = Int64ValueOrNil(plan.NumAssociatedSites)
	// property: name=region, type=STRING macro=copy_from_plan
	body.Region = StringValueOrNil(plan.Region)
	// property: name=snmp_discovery_device_refresh_frequency, type=INTEGER macro=copy_from_plan
	body.SnmpDiscoveryDeviceRefreshFrequency = Int64ValueOrNil(plan.SnmpDiscoveryDeviceRefreshFrequency)
	// property: name=snmp_discovery_enabled, type=BOOLEAN macro=copy_from_plan
	body.SnmpDiscoveryEnabled = BoolValueOrNil(plan.SnmpDiscoveryEnabled)
	// property: name=snmp_discovery_network_refresh_frequency, type=INTEGER macro=copy_from_plan
	body.SnmpDiscoveryNetworkRefreshFrequency = Int64ValueOrNil(plan.SnmpDiscoveryNetworkRefreshFrequency)
	// property: name=snmp_discovery_use_local_neighbours, type=BOOLEAN macro=copy_from_plan
	body.SnmpDiscoveryUseLocalNeighbours = BoolValueOrNil(plan.SnmpDiscoveryUseLocalNeighbours)
	// property: name=snmp_version, type=STRING macro=copy_from_plan
	body.SnmpVersion = StringValueOrNil(plan.SnmpVersion)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=v2_config, type=REFERENCE macro=copy_from_plan
	if plan.V2Config != nil {
		body.V2Config = &sdwan_schema.DeviceIdSNMPV2Config{}
		// copy_from_plan: body=body.V2Config prefix=rsModel plan=plan.V2Config properties=1
		tflog.Debug(ctx, "copy_from_plan body=body.V2Config prefix=rsModel plan=plan.V2Config")
		// property: name=snmp_community_string, type=STRING macro=copy_from_plan
		body.V2Config.SnmpCommunityString = StringValueOrNil(plan.V2Config.SnmpCommunityString)
	}
	// property: name=v3_config, type=REFERENCE macro=copy_from_plan
	if plan.V3Config != nil {
		body.V3Config = &sdwan_schema.DeviceIdSNMPV3Config{}
		// copy_from_plan: body=body.V3Config prefix=rsModel plan=plan.V3Config properties=8
		tflog.Debug(ctx, "copy_from_plan body=body.V3Config prefix=rsModel plan=plan.V3Config")
		// property: name=snmp_auth_password, type=STRING macro=copy_from_plan
		body.V3Config.SnmpAuthPassword = StringValueOrNil(plan.V3Config.SnmpAuthPassword)
		// property: name=snmp_auth_password_encrypted, type=STRING macro=copy_from_plan
		body.V3Config.SnmpAuthPasswordEncrypted = StringValueOrNil(plan.V3Config.SnmpAuthPasswordEncrypted)
		// property: name=snmp_auth_protocol, type=STRING macro=copy_from_plan
		body.V3Config.SnmpAuthProtocol = StringValueOrNil(plan.V3Config.SnmpAuthProtocol)
		// property: name=snmp_privacy_password, type=STRING macro=copy_from_plan
		body.V3Config.SnmpPrivacyPassword = StringValueOrNil(plan.V3Config.SnmpPrivacyPassword)
		// property: name=snmp_privacy_password_encrypted, type=STRING macro=copy_from_plan
		body.V3Config.SnmpPrivacyPasswordEncrypted = StringValueOrNil(plan.V3Config.SnmpPrivacyPasswordEncrypted)
		// property: name=snmp_privacy_protocol, type=STRING macro=copy_from_plan
		body.V3Config.SnmpPrivacyProtocol = StringValueOrNil(plan.V3Config.SnmpPrivacyProtocol)
		// property: name=snmp_security_level, type=STRING macro=copy_from_plan
		body.V3Config.SnmpSecurityLevel = StringValueOrNil(plan.V3Config.SnmpSecurityLevel)
		// property: name=snmp_username, type=STRING macro=copy_from_plan
		body.V3Config.SnmpUsername = StringValueOrNil(plan.V3Config.SnmpUsername)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct DeviceIdProfile to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete request_body_string::id")
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	tflog.Debug(ctx, "http json override: delete request_body_string::_etag")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	tflog.Debug(ctx, "http json override: set request_body_string::_schema")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_iot_profile", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_iot_profile",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_iot_profile", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_iot_profile",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_iot_profile", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.DeviceIdProfile
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to DeviceIdProfile in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_iot_profile with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=DeviceIdProfile
	// copy_to_state: state=state prefix=rsModel ans=ans properties=19
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=num_associated_sites, type=INTEGER macro=copy_to_state
	state.NumAssociatedSites = types.Int64PointerValue(ans.NumAssociatedSites)
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=snmp_discovery_device_refresh_frequency, type=INTEGER macro=copy_to_state
	state.SnmpDiscoveryDeviceRefreshFrequency = types.Int64PointerValue(ans.SnmpDiscoveryDeviceRefreshFrequency)
	// property: name=snmp_discovery_enabled, type=BOOLEAN macro=copy_to_state
	state.SnmpDiscoveryEnabled = types.BoolPointerValue(ans.SnmpDiscoveryEnabled)
	// property: name=snmp_discovery_network_refresh_frequency, type=INTEGER macro=copy_to_state
	state.SnmpDiscoveryNetworkRefreshFrequency = types.Int64PointerValue(ans.SnmpDiscoveryNetworkRefreshFrequency)
	// property: name=snmp_discovery_use_local_neighbours, type=BOOLEAN macro=copy_to_state
	state.SnmpDiscoveryUseLocalNeighbours = types.BoolPointerValue(ans.SnmpDiscoveryUseLocalNeighbours)
	// property: name=snmp_version, type=STRING macro=copy_to_state
	state.SnmpVersion = types.StringPointerValue(ans.SnmpVersion)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=v2_config, type=REFERENCE macro=copy_to_state
	if ans.V2Config == nil {
		state.V2Config = nil
	} else {
		state.V2Config = &rsModelDeviceIdSNMPV2Config{}
		// copy_to_state: state=state.V2Config prefix=rsModel ans=ans.V2Config properties=1
		tflog.Debug(ctx, "copy_to_state state=state.V2Config prefix=rsModel ans=ans.V2Config")
		// property: name=snmp_community_string, type=STRING macro=copy_to_state
		state.V2Config.SnmpCommunityString = types.StringPointerValue(ans.V2Config.SnmpCommunityString)
	}
	// property: name=v3_config, type=REFERENCE macro=copy_to_state
	if ans.V3Config == nil {
		state.V3Config = nil
	} else {
		state.V3Config = &rsModelDeviceIdSNMPV3Config{}
		// copy_to_state: state=state.V3Config prefix=rsModel ans=ans.V3Config properties=8
		tflog.Debug(ctx, "copy_to_state state=state.V3Config prefix=rsModel ans=ans.V3Config")
		// property: name=snmp_auth_password, type=STRING macro=copy_to_state
		state.V3Config.SnmpAuthPassword = types.StringPointerValue(plan.V3Config.SnmpAuthPassword.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.V3Config.SnmpAuthPasswordInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.V3Config.SnmpAuthPassword.IsNull() {
			encryptedSnmpAuthPassword, _ := Encrypt([]byte(state.V3Config.SnmpAuthPassword.String()))
			resp.Private.SetKey(ctx, state.V3Config.SnmpAuthPasswordInternalKeyName.String(), []byte(encryptedSnmpAuthPassword))
		}
		// property: name=snmp_auth_password_encrypted, type=STRING macro=copy_to_state
		state.V3Config.SnmpAuthPasswordEncrypted = types.StringPointerValue(plan.V3Config.SnmpAuthPasswordEncrypted.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.V3Config.SnmpAuthPasswordEncryptedInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.V3Config.SnmpAuthPasswordEncrypted.IsNull() {
			encryptedSnmpAuthPasswordEncrypted, _ := Encrypt([]byte(state.V3Config.SnmpAuthPasswordEncrypted.String()))
			resp.Private.SetKey(ctx, state.V3Config.SnmpAuthPasswordEncryptedInternalKeyName.String(), []byte(encryptedSnmpAuthPasswordEncrypted))
		}
		// property: name=snmp_auth_protocol, type=STRING macro=copy_to_state
		state.V3Config.SnmpAuthProtocol = types.StringPointerValue(ans.V3Config.SnmpAuthProtocol)
		// property: name=snmp_privacy_password, type=STRING macro=copy_to_state
		state.V3Config.SnmpPrivacyPassword = types.StringPointerValue(ans.V3Config.SnmpPrivacyPassword)
		// property: name=snmp_privacy_password_encrypted, type=STRING macro=copy_to_state
		state.V3Config.SnmpPrivacyPasswordEncrypted = types.StringPointerValue(ans.V3Config.SnmpPrivacyPasswordEncrypted)
		// property: name=snmp_privacy_protocol, type=STRING macro=copy_to_state
		state.V3Config.SnmpPrivacyProtocol = types.StringPointerValue(ans.V3Config.SnmpPrivacyProtocol)
		// property: name=snmp_security_level, type=STRING macro=copy_to_state
		state.V3Config.SnmpSecurityLevel = types.StringPointerValue(ans.V3Config.SnmpSecurityLevel)
		// property: name=snmp_username, type=STRING macro=copy_to_state
		state.V3Config.SnmpUsername = types.StringPointerValue(ans.V3Config.SnmpUsername)
	}
	return true
}

func (r *iotProfileResource) doGet(ctx context.Context, state *rsModelDeviceIdProfile, savestate *rsModelDeviceIdProfile, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_iot_profile",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_iot_profile ID format", "Expected 1 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_iot_profile"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/deviceidprofiles/{profile_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["profile_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_iot_profile", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_iot_profile",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_iot_profile from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=DeviceIdProfile
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.DeviceIdProfile
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to DeviceIdProfile in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=19
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=num_associated_sites, type=INTEGER macro=copy_to_state
	state.NumAssociatedSites = types.Int64PointerValue(ans.NumAssociatedSites)
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=snmp_discovery_device_refresh_frequency, type=INTEGER macro=copy_to_state
	state.SnmpDiscoveryDeviceRefreshFrequency = types.Int64PointerValue(ans.SnmpDiscoveryDeviceRefreshFrequency)
	// property: name=snmp_discovery_enabled, type=BOOLEAN macro=copy_to_state
	state.SnmpDiscoveryEnabled = types.BoolPointerValue(ans.SnmpDiscoveryEnabled)
	// property: name=snmp_discovery_network_refresh_frequency, type=INTEGER macro=copy_to_state
	state.SnmpDiscoveryNetworkRefreshFrequency = types.Int64PointerValue(ans.SnmpDiscoveryNetworkRefreshFrequency)
	// property: name=snmp_discovery_use_local_neighbours, type=BOOLEAN macro=copy_to_state
	state.SnmpDiscoveryUseLocalNeighbours = types.BoolPointerValue(ans.SnmpDiscoveryUseLocalNeighbours)
	// property: name=snmp_version, type=STRING macro=copy_to_state
	state.SnmpVersion = types.StringPointerValue(ans.SnmpVersion)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=v2_config, type=REFERENCE macro=copy_to_state
	if ans.V2Config == nil {
		state.V2Config = nil
	} else {
		state.V2Config = &rsModelDeviceIdSNMPV2Config{}
		// copy_to_state: state=state.V2Config prefix=rsModel ans=ans.V2Config properties=1
		tflog.Debug(ctx, "copy_to_state state=state.V2Config prefix=rsModel ans=ans.V2Config")
		// property: name=snmp_community_string, type=STRING macro=copy_to_state
		state.V2Config.SnmpCommunityString = types.StringPointerValue(ans.V2Config.SnmpCommunityString)
	}
	// property: name=v3_config, type=REFERENCE macro=copy_to_state
	if ans.V3Config == nil {
		state.V3Config = nil
	} else {
		state.V3Config = &rsModelDeviceIdSNMPV3Config{}
		// copy_to_state: state=state.V3Config prefix=rsModel ans=ans.V3Config properties=8
		tflog.Debug(ctx, "copy_to_state state=state.V3Config prefix=rsModel ans=ans.V3Config")
		// property: name=snmp_auth_password, type=STRING macro=copy_to_state
		encryptedSnmpAuthPasswordKeyName := state.V3Config.SnmpAuthPasswordInternalKeyName.String()
		encryptedSnmpAuthPasswordValueBytes, _ := resp.Private.GetKey(ctx, encryptedSnmpAuthPasswordKeyName)
		if encryptedSnmpAuthPasswordValueBytes != nil {
			decryptedSnmpAuthPassword, _ := Decrypt(string(encryptedSnmpAuthPasswordValueBytes))
			state.V3Config.SnmpAuthPassword = types.StringValue(decryptedSnmpAuthPassword)
		}
		// property: name=snmp_auth_password_encrypted, type=STRING macro=copy_to_state
		encryptedSnmpAuthPasswordEncryptedKeyName := state.V3Config.SnmpAuthPasswordEncryptedInternalKeyName.String()
		encryptedSnmpAuthPasswordEncryptedValueBytes, _ := resp.Private.GetKey(ctx, encryptedSnmpAuthPasswordEncryptedKeyName)
		if encryptedSnmpAuthPasswordEncryptedValueBytes != nil {
			decryptedSnmpAuthPasswordEncrypted, _ := Decrypt(string(encryptedSnmpAuthPasswordEncryptedValueBytes))
			state.V3Config.SnmpAuthPasswordEncrypted = types.StringValue(decryptedSnmpAuthPasswordEncrypted)
		}
		// property: name=snmp_auth_protocol, type=STRING macro=copy_to_state
		state.V3Config.SnmpAuthProtocol = types.StringPointerValue(ans.V3Config.SnmpAuthProtocol)
		// property: name=snmp_privacy_password, type=STRING macro=copy_to_state
		state.V3Config.SnmpPrivacyPassword = types.StringPointerValue(ans.V3Config.SnmpPrivacyPassword)
		// property: name=snmp_privacy_password_encrypted, type=STRING macro=copy_to_state
		state.V3Config.SnmpPrivacyPasswordEncrypted = types.StringPointerValue(ans.V3Config.SnmpPrivacyPasswordEncrypted)
		// property: name=snmp_privacy_protocol, type=STRING macro=copy_to_state
		state.V3Config.SnmpPrivacyProtocol = types.StringPointerValue(ans.V3Config.SnmpPrivacyProtocol)
		// property: name=snmp_security_level, type=STRING macro=copy_to_state
		state.V3Config.SnmpSecurityLevel = types.StringPointerValue(ans.V3Config.SnmpSecurityLevel)
		// property: name=snmp_username, type=STRING macro=copy_to_state
		state.V3Config.SnmpUsername = types.StringPointerValue(ans.V3Config.SnmpUsername)
	}
	return true
}

func (r *iotProfileResource) doPut(ctx context.Context, plan *rsModelDeviceIdProfile, state *rsModelDeviceIdProfile, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_iot_profile",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_iot_profile", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_iot_profile ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_iot_profile"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.0/api/deviceidprofiles/{profile_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["profile_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.DeviceIdProfile{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=19
	tflog.Debug(ctx, "copy_from_plan_or_state body=body prefix=rsModel state=state plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Disabled = ValueBoolPointerFromPlanOrState(plan.Disabled, state.Disabled)
	} else {
		body.Disabled = BoolValueOrNil(plan.Disabled)
	}
	// property: name=disabled_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.DisabledReason = ValueStringPointerFromPlanOrState(plan.DisabledReason, state.DisabledReason)
	} else {
		body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Inactive = ValueBoolPointerFromPlanOrState(plan.Inactive, state.Inactive)
	} else {
		body.Inactive = BoolValueOrNil(plan.Inactive)
	}
	// property: name=inactive_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.InactiveReason = ValueStringPointerFromPlanOrState(plan.InactiveReason, state.InactiveReason)
	} else {
		body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=num_associated_sites, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.NumAssociatedSites = ValueInt64PointerFromPlanOrState(plan.NumAssociatedSites, state.NumAssociatedSites)
	} else {
		body.NumAssociatedSites = Int64ValueOrNil(plan.NumAssociatedSites)
	}
	// property: name=region, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Region = ValueStringPointerFromPlanOrState(plan.Region, state.Region)
	} else {
		body.Region = StringValueOrNil(plan.Region)
	}
	// property: name=snmp_discovery_device_refresh_frequency, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.SnmpDiscoveryDeviceRefreshFrequency = ValueInt64PointerFromPlanOrState(plan.SnmpDiscoveryDeviceRefreshFrequency, state.SnmpDiscoveryDeviceRefreshFrequency)
	} else {
		body.SnmpDiscoveryDeviceRefreshFrequency = Int64ValueOrNil(plan.SnmpDiscoveryDeviceRefreshFrequency)
	}
	// property: name=snmp_discovery_enabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.SnmpDiscoveryEnabled = ValueBoolPointerFromPlanOrState(plan.SnmpDiscoveryEnabled, state.SnmpDiscoveryEnabled)
	} else {
		body.SnmpDiscoveryEnabled = BoolValueOrNil(plan.SnmpDiscoveryEnabled)
	}
	// property: name=snmp_discovery_network_refresh_frequency, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.SnmpDiscoveryNetworkRefreshFrequency = ValueInt64PointerFromPlanOrState(plan.SnmpDiscoveryNetworkRefreshFrequency, state.SnmpDiscoveryNetworkRefreshFrequency)
	} else {
		body.SnmpDiscoveryNetworkRefreshFrequency = Int64ValueOrNil(plan.SnmpDiscoveryNetworkRefreshFrequency)
	}
	// property: name=snmp_discovery_use_local_neighbours, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.SnmpDiscoveryUseLocalNeighbours = ValueBoolPointerFromPlanOrState(plan.SnmpDiscoveryUseLocalNeighbours, state.SnmpDiscoveryUseLocalNeighbours)
	} else {
		body.SnmpDiscoveryUseLocalNeighbours = BoolValueOrNil(plan.SnmpDiscoveryUseLocalNeighbours)
	}
	// property: name=snmp_version, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.SnmpVersion = ValueStringPointerFromPlanOrState(plan.SnmpVersion, state.SnmpVersion)
	} else {
		body.SnmpVersion = StringValueOrNil(plan.SnmpVersion)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=v2_config, type=REFERENCE macro=copy_from_plan_or_state
	if plan.V2Config == nil {
		body.V2Config = nil
	} else {
		body.V2Config = &sdwan_schema.DeviceIdSNMPV2Config{}
		// copy_from_plan_or_state: body=body.V2Config prefix=rsModel state=state.V2Config plan=plan.V2Config properties=1
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.V2Config prefix=rsModel state=state.V2Config plan=plan.V2Config")
		// property: name=snmp_community_string, type=STRING macro=copy_from_plan_or_state
		if state.V2Config != nil {
			body.V2Config.SnmpCommunityString = ValueStringPointerFromPlanOrState(plan.V2Config.SnmpCommunityString, state.V2Config.SnmpCommunityString)
		} else {
			body.V2Config.SnmpCommunityString = StringValueOrNil(plan.V2Config.SnmpCommunityString)
		}
	}
	// property: name=v3_config, type=REFERENCE macro=copy_from_plan_or_state
	if plan.V3Config == nil {
		body.V3Config = nil
	} else {
		body.V3Config = &sdwan_schema.DeviceIdSNMPV3Config{}
		// copy_from_plan_or_state: body=body.V3Config prefix=rsModel state=state.V3Config plan=plan.V3Config properties=8
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.V3Config prefix=rsModel state=state.V3Config plan=plan.V3Config")
		// property: name=snmp_auth_password, type=STRING macro=copy_from_plan_or_state
		if state.V3Config != nil {
			body.V3Config.SnmpAuthPassword = ValueStringPointerFromPlanOrState(plan.V3Config.SnmpAuthPassword, state.V3Config.SnmpAuthPassword)
		} else {
			body.V3Config.SnmpAuthPassword = StringValueOrNil(plan.V3Config.SnmpAuthPassword)
		}
		// property: name=snmp_auth_password_encrypted, type=STRING macro=copy_from_plan_or_state
		if state.V3Config != nil {
			body.V3Config.SnmpAuthPasswordEncrypted = ValueStringPointerFromPlanOrState(plan.V3Config.SnmpAuthPasswordEncrypted, state.V3Config.SnmpAuthPasswordEncrypted)
		} else {
			body.V3Config.SnmpAuthPasswordEncrypted = StringValueOrNil(plan.V3Config.SnmpAuthPasswordEncrypted)
		}
		// property: name=snmp_auth_protocol, type=STRING macro=copy_from_plan_or_state
		if state.V3Config != nil {
			body.V3Config.SnmpAuthProtocol = ValueStringPointerFromPlanOrState(plan.V3Config.SnmpAuthProtocol, state.V3Config.SnmpAuthProtocol)
		} else {
			body.V3Config.SnmpAuthProtocol = StringValueOrNil(plan.V3Config.SnmpAuthProtocol)
		}
		// property: name=snmp_privacy_password, type=STRING macro=copy_from_plan_or_state
		if state.V3Config != nil {
			body.V3Config.SnmpPrivacyPassword = ValueStringPointerFromPlanOrState(plan.V3Config.SnmpPrivacyPassword, state.V3Config.SnmpPrivacyPassword)
		} else {
			body.V3Config.SnmpPrivacyPassword = StringValueOrNil(plan.V3Config.SnmpPrivacyPassword)
		}
		// property: name=snmp_privacy_password_encrypted, type=STRING macro=copy_from_plan_or_state
		if state.V3Config != nil {
			body.V3Config.SnmpPrivacyPasswordEncrypted = ValueStringPointerFromPlanOrState(plan.V3Config.SnmpPrivacyPasswordEncrypted, state.V3Config.SnmpPrivacyPasswordEncrypted)
		} else {
			body.V3Config.SnmpPrivacyPasswordEncrypted = StringValueOrNil(plan.V3Config.SnmpPrivacyPasswordEncrypted)
		}
		// property: name=snmp_privacy_protocol, type=STRING macro=copy_from_plan_or_state
		if state.V3Config != nil {
			body.V3Config.SnmpPrivacyProtocol = ValueStringPointerFromPlanOrState(plan.V3Config.SnmpPrivacyProtocol, state.V3Config.SnmpPrivacyProtocol)
		} else {
			body.V3Config.SnmpPrivacyProtocol = StringValueOrNil(plan.V3Config.SnmpPrivacyProtocol)
		}
		// property: name=snmp_security_level, type=STRING macro=copy_from_plan_or_state
		if state.V3Config != nil {
			body.V3Config.SnmpSecurityLevel = ValueStringPointerFromPlanOrState(plan.V3Config.SnmpSecurityLevel, state.V3Config.SnmpSecurityLevel)
		} else {
			body.V3Config.SnmpSecurityLevel = StringValueOrNil(plan.V3Config.SnmpSecurityLevel)
		}
		// property: name=snmp_username, type=STRING macro=copy_from_plan_or_state
		if state.V3Config != nil {
			body.V3Config.SnmpUsername = ValueStringPointerFromPlanOrState(plan.V3Config.SnmpUsername, state.V3Config.SnmpUsername)
		} else {
			body.V3Config.SnmpUsername = StringValueOrNil(plan.V3Config.SnmpUsername)
		}
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct DeviceIdProfile to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_iot_profile", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_iot_profile",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_iot_profile", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_iot_profile",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_iot_profile", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.DeviceIdProfile
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to DeviceIdProfile in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=DeviceIdProfile
	// copy_to_state: state=state prefix=rsModel ans=ans properties=19
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=num_associated_sites, type=INTEGER macro=copy_to_state
	state.NumAssociatedSites = types.Int64PointerValue(ans.NumAssociatedSites)
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=snmp_discovery_device_refresh_frequency, type=INTEGER macro=copy_to_state
	state.SnmpDiscoveryDeviceRefreshFrequency = types.Int64PointerValue(ans.SnmpDiscoveryDeviceRefreshFrequency)
	// property: name=snmp_discovery_enabled, type=BOOLEAN macro=copy_to_state
	state.SnmpDiscoveryEnabled = types.BoolPointerValue(ans.SnmpDiscoveryEnabled)
	// property: name=snmp_discovery_network_refresh_frequency, type=INTEGER macro=copy_to_state
	state.SnmpDiscoveryNetworkRefreshFrequency = types.Int64PointerValue(ans.SnmpDiscoveryNetworkRefreshFrequency)
	// property: name=snmp_discovery_use_local_neighbours, type=BOOLEAN macro=copy_to_state
	state.SnmpDiscoveryUseLocalNeighbours = types.BoolPointerValue(ans.SnmpDiscoveryUseLocalNeighbours)
	// property: name=snmp_version, type=STRING macro=copy_to_state
	state.SnmpVersion = types.StringPointerValue(ans.SnmpVersion)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=v2_config, type=REFERENCE macro=copy_to_state
	if ans.V2Config == nil {
		state.V2Config = nil
	} else {
		state.V2Config = &rsModelDeviceIdSNMPV2Config{}
		// copy_to_state: state=state.V2Config prefix=rsModel ans=ans.V2Config properties=1
		tflog.Debug(ctx, "copy_to_state state=state.V2Config prefix=rsModel ans=ans.V2Config")
		// property: name=snmp_community_string, type=STRING macro=copy_to_state
		state.V2Config.SnmpCommunityString = types.StringPointerValue(ans.V2Config.SnmpCommunityString)
	}
	// property: name=v3_config, type=REFERENCE macro=copy_to_state
	if ans.V3Config == nil {
		state.V3Config = nil
	} else {
		state.V3Config = &rsModelDeviceIdSNMPV3Config{}
		// copy_to_state: state=state.V3Config prefix=rsModel ans=ans.V3Config properties=8
		tflog.Debug(ctx, "copy_to_state state=state.V3Config prefix=rsModel ans=ans.V3Config")
		// property: name=snmp_auth_password, type=STRING macro=copy_to_state
		state.V3Config.SnmpAuthPassword = types.StringPointerValue(plan.V3Config.SnmpAuthPassword.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.V3Config.SnmpAuthPasswordInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.V3Config.SnmpAuthPassword.IsNull() {
			encryptedSnmpAuthPassword, _ := Encrypt([]byte(state.V3Config.SnmpAuthPassword.String()))
			resp.Private.SetKey(ctx, state.V3Config.SnmpAuthPasswordInternalKeyName.String(), []byte(encryptedSnmpAuthPassword))
		}
		// property: name=snmp_auth_password_encrypted, type=STRING macro=copy_to_state
		state.V3Config.SnmpAuthPasswordEncrypted = types.StringPointerValue(plan.V3Config.SnmpAuthPasswordEncrypted.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.V3Config.SnmpAuthPasswordEncryptedInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.V3Config.SnmpAuthPasswordEncrypted.IsNull() {
			encryptedSnmpAuthPasswordEncrypted, _ := Encrypt([]byte(state.V3Config.SnmpAuthPasswordEncrypted.String()))
			resp.Private.SetKey(ctx, state.V3Config.SnmpAuthPasswordEncryptedInternalKeyName.String(), []byte(encryptedSnmpAuthPasswordEncrypted))
		}
		// property: name=snmp_auth_protocol, type=STRING macro=copy_to_state
		state.V3Config.SnmpAuthProtocol = types.StringPointerValue(ans.V3Config.SnmpAuthProtocol)
		// property: name=snmp_privacy_password, type=STRING macro=copy_to_state
		state.V3Config.SnmpPrivacyPassword = types.StringPointerValue(ans.V3Config.SnmpPrivacyPassword)
		// property: name=snmp_privacy_password_encrypted, type=STRING macro=copy_to_state
		state.V3Config.SnmpPrivacyPasswordEncrypted = types.StringPointerValue(ans.V3Config.SnmpPrivacyPasswordEncrypted)
		// property: name=snmp_privacy_protocol, type=STRING macro=copy_to_state
		state.V3Config.SnmpPrivacyProtocol = types.StringPointerValue(ans.V3Config.SnmpPrivacyProtocol)
		// property: name=snmp_security_level, type=STRING macro=copy_to_state
		state.V3Config.SnmpSecurityLevel = types.StringPointerValue(ans.V3Config.SnmpSecurityLevel)
		// property: name=snmp_username, type=STRING macro=copy_to_state
		state.V3Config.SnmpUsername = types.StringPointerValue(ans.V3Config.SnmpUsername)
	}
	return true
}

func (r *iotProfileResource) doDelete(ctx context.Context, state *rsModelDeviceIdProfile, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_iot_profile",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_iot_profile ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_iot_profile"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.0/api/deviceidprofiles/{profile_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["profile_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_iot_profile", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *iotProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_iot_profile")
	var plan rsModelDeviceIdProfile
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelDeviceIdProfile
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *iotProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_iot_profile")
	var savestate, state rsModelDeviceIdProfile
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *iotProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_iot_profile")
	var plan, state rsModelDeviceIdProfile
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *iotProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_iot_profile")
	var state rsModelDeviceIdProfile
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *iotProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
