package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=4)
// | Computed Resource Name=sites_elements_routing_routemaps
// +-----------------------------------------------------------------
// | RoutingRouteMapEntrySetClause HasID=false
// | RoutingRouteMapEntryMatchClause HasID=false
// | RoutingRouteMapEntryV2N3 HasID=false
// | RoutingRouteMapScreenV2N3 HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &elementRoutingRoutemapDataSource{}
	_ datasource.DataSourceWithConfigure = &elementRoutingRoutemapDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewElementRoutingRoutemapDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewElementRoutingRoutemapDataSource() datasource.DataSource {
	return &elementRoutingRoutemapDataSource{}
}

type elementRoutingRoutemapDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *elementRoutingRoutemapDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_element_routing_routemap"
}

// Schema defines the schema for this data source.
func (d *elementRoutingRoutemapDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=RoutingRouteMapScreenV2N3
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=auto_generated, type=BOOLEAN macro=rss_schema
			"auto_generated": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=auto_generated, type=BOOLEAN macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=route_map_entries, type=ARRAY_REFERENCE macro=rss_schema
			"route_map_entries": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=continue_entry, type=STRING macro=rss_schema
						"continue_entry": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=continue_entry, type=STRING macro=rss_schema
						// property: name=match, type=REFERENCE macro=rss_schema
						"match": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// property: name=as_path_id, type=STRING macro=rss_schema
								"as_path_id": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=as_path_id, type=STRING macro=rss_schema
								// property: name=community_list_id, type=STRING macro=rss_schema
								"community_list_id": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=community_list_id, type=STRING macro=rss_schema
								// property: name=ip_next_hop_id, type=STRING macro=rss_schema
								"ip_next_hop_id": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=ip_next_hop_id, type=STRING macro=rss_schema
								// property: name=ip_prefix_list_id, type=STRING macro=rss_schema
								"ip_prefix_list_id": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=ip_prefix_list_id, type=STRING macro=rss_schema
								// property: name=metric, type=INTEGER macro=rss_schema
								"metric": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=metric, type=INTEGER macro=rss_schema
								// property: name=tag, type=INTEGER macro=rss_schema
								"tag": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=tag, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=tag, type=INTEGER macro=rss_schema
						// property: name=order, type=INTEGER macro=rss_schema
						"order": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=order, type=INTEGER macro=rss_schema
						// property: name=permit, type=BOOLEAN macro=rss_schema
						"permit": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=permit, type=BOOLEAN macro=rss_schema
						// property: name=set, type=REFERENCE macro=rss_schema
						"set": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// property: name=additive_community, type=BOOLEAN macro=rss_schema
								"additive_community": dsschema.BoolAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=additive_community, type=BOOLEAN macro=rss_schema
								// property: name=as_path_prepend, type=STRING macro=rss_schema
								"as_path_prepend": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=as_path_prepend, type=STRING macro=rss_schema
								// property: name=community, type=STRING macro=rss_schema
								"community": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=community, type=STRING macro=rss_schema
								// property: name=ip_next_hop, type=STRING macro=rss_schema
								"ip_next_hop": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=ip_next_hop, type=STRING macro=rss_schema
								// property: name=ip_v6_next_hop, type=STRING macro=rss_schema
								"ip_v6_next_hop": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=ip_v6_next_hop, type=STRING macro=rss_schema
								// property: name=local_preference, type=INTEGER macro=rss_schema
								"local_preference": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=local_preference, type=INTEGER macro=rss_schema
								// property: name=metric, type=INTEGER macro=rss_schema
								"metric": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=metric, type=INTEGER macro=rss_schema
								// property: name=tag, type=INTEGER macro=rss_schema
								"tag": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=tag, type=INTEGER macro=rss_schema
								// property: name=type, type=STRING macro=rss_schema
								"type": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=type, type=STRING macro=rss_schema
								// property: name=weight, type=INTEGER macro=rss_schema
								"weight": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=weight, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=weight, type=INTEGER macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=weight, type=INTEGER macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=used_for, type=STRING macro=rss_schema
			"used_for": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=used_for, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *elementRoutingRoutemapDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *elementRoutingRoutemapDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelRoutingRouteMapScreenV2N3
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_element_routing_routemap",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("error in prismasdwan_element_routing_routemap ID format", "Expected 3 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.3/api/sites/{site_id}/elements/{element_id}/routing_routemaps/{config_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["site_id"] = &tokens[0]
	params["element_id"] = &tokens[1]
	params["config_id"] = &tokens[2]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_element_routing_routemap", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.RoutingRouteMapScreenV2N3
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to RoutingRouteMapScreenV2N3", json_err.Error())
		return
	}

	// lets copy all items into state schema=RoutingRouteMapScreenV2N3
	// copy_to_state: state=state prefix=dsModel ans=ans properties=9
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=auto_generated, type=BOOLEAN macro=copy_to_state
	state.AutoGenerated = types.BoolPointerValue(ans.AutoGenerated)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=route_map_entries, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.RouteMapEntries == nil {
		state.RouteMapEntries = nil
	} else if len(ans.RouteMapEntries) == 0 {
		state.RouteMapEntries = []dsModelRoutingRouteMapEntryV2N3{}
	} else {
		state.RouteMapEntries = make([]dsModelRoutingRouteMapEntryV2N3, 0, len(ans.RouteMapEntries))
		for varLoopRouteMapEntriesIndex, varLoopRouteMapEntries := range ans.RouteMapEntries {
			// add a new item
			state.RouteMapEntries = append(state.RouteMapEntries, dsModelRoutingRouteMapEntryV2N3{})
			// copy_to_state: state=state.RouteMapEntries[varLoopRouteMapEntriesIndex] prefix=dsModel ans=varLoopRouteMapEntries properties=5
			// property: name=continue_entry, type=STRING macro=copy_to_state
			state.RouteMapEntries[varLoopRouteMapEntriesIndex].ContinueEntry = types.StringPointerValue(varLoopRouteMapEntries.ContinueEntry)
			// property: name=match, type=REFERENCE macro=copy_to_state
			if varLoopRouteMapEntries.Match == nil {
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Match = nil
			} else {
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Match = &dsModelRoutingRouteMapEntryMatchClause{}
				// copy_to_state: state=state.RouteMapEntries[varLoopRouteMapEntriesIndex].Match prefix=dsModel ans=varLoopRouteMapEntries.Match properties=6
				// property: name=as_path_id, type=STRING macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Match.AsPathId = types.StringPointerValue(varLoopRouteMapEntries.Match.AsPathId)
				// property: name=community_list_id, type=STRING macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Match.CommunityListId = types.StringPointerValue(varLoopRouteMapEntries.Match.CommunityListId)
				// property: name=ip_next_hop_id, type=STRING macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Match.IpNextHopId = types.StringPointerValue(varLoopRouteMapEntries.Match.IpNextHopId)
				// property: name=ip_prefix_list_id, type=STRING macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Match.IpPrefixListId = types.StringPointerValue(varLoopRouteMapEntries.Match.IpPrefixListId)
				// property: name=metric, type=INTEGER macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Match.Metric = types.Int64PointerValue(varLoopRouteMapEntries.Match.Metric)
				// property: name=tag, type=INTEGER macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Match.Tag = types.Int64PointerValue(varLoopRouteMapEntries.Match.Tag)
			}
			// property: name=order, type=INTEGER macro=copy_to_state
			state.RouteMapEntries[varLoopRouteMapEntriesIndex].Order = types.Int64PointerValue(varLoopRouteMapEntries.Order)
			// property: name=permit, type=BOOLEAN macro=copy_to_state
			state.RouteMapEntries[varLoopRouteMapEntriesIndex].Permit = types.BoolPointerValue(varLoopRouteMapEntries.Permit)
			// property: name=set, type=REFERENCE macro=copy_to_state
			if varLoopRouteMapEntries.Set == nil {
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set = nil
			} else {
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set = &dsModelRoutingRouteMapEntrySetClause{}
				// copy_to_state: state=state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set prefix=dsModel ans=varLoopRouteMapEntries.Set properties=10
				// property: name=additive_community, type=BOOLEAN macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set.AdditiveCommunity = types.BoolPointerValue(varLoopRouteMapEntries.Set.AdditiveCommunity)
				// property: name=as_path_prepend, type=STRING macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set.AsPathPrepend = types.StringPointerValue(varLoopRouteMapEntries.Set.AsPathPrepend)
				// property: name=community, type=STRING macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set.Community = types.StringPointerValue(varLoopRouteMapEntries.Set.Community)
				// property: name=ip_next_hop, type=STRING macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set.IpNextHop = types.StringPointerValue(varLoopRouteMapEntries.Set.IpNextHop)
				// property: name=ip_v6_next_hop, type=STRING macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set.IpV6NextHop = types.StringPointerValue(varLoopRouteMapEntries.Set.IpV6NextHop)
				// property: name=local_preference, type=INTEGER macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set.LocalPreference = types.Int64PointerValue(varLoopRouteMapEntries.Set.LocalPreference)
				// property: name=metric, type=INTEGER macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set.Metric = types.Int64PointerValue(varLoopRouteMapEntries.Set.Metric)
				// property: name=tag, type=INTEGER macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set.Tag = types.Int64PointerValue(varLoopRouteMapEntries.Set.Tag)
				// property: name=type, type=STRING macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set.Type = types.StringPointerValue(varLoopRouteMapEntries.Set.Type)
				// property: name=weight, type=INTEGER macro=copy_to_state
				state.RouteMapEntries[varLoopRouteMapEntriesIndex].Set.Weight = types.Int64PointerValue(varLoopRouteMapEntries.Set.Weight)
			}
		}
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=used_for, type=STRING macro=copy_to_state
	state.UsedFor = types.StringPointerValue(ans.UsedFor)

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
