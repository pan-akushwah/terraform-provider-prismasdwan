package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=4)
// | Computed Resource Name=sites_elements_snmpagents
// +-----------------------------------------------------------------
// | SNMPUserAccess HasID=false
// | SNMPV3Config HasID=false
// | SNMPV2Config HasID=false
// | SNMPAgentV2N1 HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &elementSnmpAgentDataSource{}
	_ datasource.DataSourceWithConfigure = &elementSnmpAgentDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewElementSnmpAgentDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewElementSnmpAgentDataSource() datasource.DataSource {
	return &elementSnmpAgentDataSource{}
}

type elementSnmpAgentDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *elementSnmpAgentDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_element_snmp_agent"
}

// Schema defines the schema for this data source.
func (d *elementSnmpAgentDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=SNMPAgentV2N1
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=system_contact, type=STRING macro=rss_schema
			"system_contact": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=system_contact, type=STRING macro=rss_schema
			// property: name=system_location, type=STRING macro=rss_schema
			"system_location": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=system_location, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=v2_config, type=REFERENCE macro=rss_schema
			"v2_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=community, type=STRING macro=rss_schema
					"community": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=community, type=STRING macro=rss_schema
					// property: name=enabled, type=BOOLEAN macro=rss_schema
					"enabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
				},
			},
			// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
			// property: name=v3_config, type=REFERENCE macro=rss_schema
			"v3_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=enabled, type=BOOLEAN macro=rss_schema
					"enabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
					// property: name=users_access, type=ARRAY_REFERENCE macro=rss_schema
					"users_access": dsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// property: name=auth_phrase, type=STRING macro=rss_schema
								"auth_phrase": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: true,
								},
								// key name holder for attribute: name=auth_phrase, type=STRING macro=rss_schema
								"auth_phrase_internal_key_name": dsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// property: name=auth_type, type=STRING macro=rss_schema
								"auth_type": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=auth_type, type=STRING macro=rss_schema
								// property: name=enc_phrase, type=STRING macro=rss_schema
								"enc_phrase": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: true,
								},
								// key name holder for attribute: name=enc_phrase, type=STRING macro=rss_schema
								"enc_phrase_internal_key_name": dsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// property: name=enc_type, type=STRING macro=rss_schema
								"enc_type": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=enc_type, type=STRING macro=rss_schema
								// property: name=engine_id, type=STRING macro=rss_schema
								"engine_id": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=engine_id, type=STRING macro=rss_schema
								// property: name=security_level, type=STRING macro=rss_schema
								"security_level": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=security_level, type=STRING macro=rss_schema
								// property: name=user_name, type=STRING macro=rss_schema
								"user_name": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=user_name, type=STRING macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=user_name, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=user_name, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *elementSnmpAgentDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *elementSnmpAgentDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelSNMPAgentV2N1
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_element_snmp_agent",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 3 {
		resp.Diagnostics.AddError("error in prismasdwan_element_snmp_agent ID format", "Expected 3 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.1/api/sites/{site_id}/elements/{element_id}/snmpagents/{snmpagent_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["site_id"] = &tokens[0]
	params["element_id"] = &tokens[1]
	params["snmpagent_id"] = &tokens[2]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_element_snmp_agent", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.SNMPAgentV2N1
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to SNMPAgentV2N1", json_err.Error())
		return
	}

	// lets copy all items into state schema=SNMPAgentV2N1
	// copy_to_state: state=state prefix=dsModel ans=ans properties=9
	tflog.Debug(ctx, "copy_to_state state=state prefix=dsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=system_contact, type=STRING macro=copy_to_state
	state.SystemContact = types.StringPointerValue(ans.SystemContact)
	// property: name=system_location, type=STRING macro=copy_to_state
	state.SystemLocation = types.StringPointerValue(ans.SystemLocation)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=v2_config, type=REFERENCE macro=copy_to_state
	if ans.V2Config == nil {
		state.V2Config = nil
	} else {
		state.V2Config = &dsModelSNMPV2Config{}
		// copy_to_state: state=state.V2Config prefix=dsModel ans=ans.V2Config properties=2
		tflog.Debug(ctx, "copy_to_state state=state.V2Config prefix=dsModel ans=ans.V2Config")
		// property: name=community, type=STRING macro=copy_to_state
		state.V2Config.Community = types.StringPointerValue(ans.V2Config.Community)
		// property: name=enabled, type=BOOLEAN macro=copy_to_state
		state.V2Config.Enabled = types.BoolPointerValue(ans.V2Config.Enabled)
	}
	// property: name=v3_config, type=REFERENCE macro=copy_to_state
	if ans.V3Config == nil {
		state.V3Config = nil
	} else {
		state.V3Config = &dsModelSNMPV3Config{}
		// copy_to_state: state=state.V3Config prefix=dsModel ans=ans.V3Config properties=2
		tflog.Debug(ctx, "copy_to_state state=state.V3Config prefix=dsModel ans=ans.V3Config")
		// property: name=enabled, type=BOOLEAN macro=copy_to_state
		state.V3Config.Enabled = types.BoolPointerValue(ans.V3Config.Enabled)
		// property: name=users_access, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.V3Config.UsersAccess == nil {
			state.V3Config.UsersAccess = nil
		} else if len(ans.V3Config.UsersAccess) == 0 {
			state.V3Config.UsersAccess = []dsModelSNMPUserAccess{}
		} else {
			state.V3Config.UsersAccess = make([]dsModelSNMPUserAccess, 0, len(ans.V3Config.UsersAccess))
			for varLoopUsersAccessIndex, varLoopUsersAccess := range ans.V3Config.UsersAccess {
				// add a new item
				state.V3Config.UsersAccess = append(state.V3Config.UsersAccess, dsModelSNMPUserAccess{})
				// copy_to_state: state=state.V3Config.UsersAccess[varLoopUsersAccessIndex] prefix=dsModel ans=varLoopUsersAccess properties=7
				tflog.Debug(ctx, "copy_to_state state=state.V3Config.UsersAccess[varLoopUsersAccessIndex] prefix=dsModel ans=varLoopUsersAccess")
				// property: name=auth_phrase, type=STRING macro=copy_to_state
				state.V3Config.UsersAccess[varLoopUsersAccessIndex].AuthPhrase = types.StringPointerValue(varLoopUsersAccess.AuthPhrase)
				// property: name=auth_type, type=STRING macro=copy_to_state
				state.V3Config.UsersAccess[varLoopUsersAccessIndex].AuthType = types.StringPointerValue(varLoopUsersAccess.AuthType)
				// property: name=enc_phrase, type=STRING macro=copy_to_state
				state.V3Config.UsersAccess[varLoopUsersAccessIndex].EncPhrase = types.StringPointerValue(varLoopUsersAccess.EncPhrase)
				// property: name=enc_type, type=STRING macro=copy_to_state
				state.V3Config.UsersAccess[varLoopUsersAccessIndex].EncType = types.StringPointerValue(varLoopUsersAccess.EncType)
				// property: name=engine_id, type=STRING macro=copy_to_state
				state.V3Config.UsersAccess[varLoopUsersAccessIndex].EngineId = types.StringPointerValue(varLoopUsersAccess.EngineId)
				// property: name=security_level, type=STRING macro=copy_to_state
				state.V3Config.UsersAccess[varLoopUsersAccessIndex].SecurityLevel = types.StringPointerValue(varLoopUsersAccess.SecurityLevel)
				// property: name=user_name, type=STRING macro=copy_to_state
				state.V3Config.UsersAccess[varLoopUsersAccessIndex].UserName = types.StringPointerValue(varLoopUsersAccess.UserName)
			}
		}
	}

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
