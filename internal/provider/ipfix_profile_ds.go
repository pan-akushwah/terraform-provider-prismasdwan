package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=5)
// | Computed Resource Name=ipfixprofiles
// +-----------------------------------------------------------------
// | IPFixSampler HasID=false
// | Port HasID=false
// | IPFixFilter HasID=false
// | CollectorConfig HasID=false
// | IPFixProfileScreen HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &ipfixProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &ipfixProfileDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewIpfixProfileDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewIpfixProfileDataSource() datasource.DataSource {
	return &ipfixProfileDataSource{}
}

type ipfixProfileDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *ipfixProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_ipfix_profile"
}

// Schema defines the schema for this data source.
func (d *ipfixProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=IPFixProfileScreen
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=collector_config, type=ARRAY_REFERENCE macro=rss_schema
			"collector_config": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=host, type=STRING macro=rss_schema
						"host": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=host, type=STRING macro=rss_schema
						// property: name=host_port, type=INTEGER macro=rss_schema
						"host_port": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=host_port, type=INTEGER macro=rss_schema
						// property: name=ipfixcollectorcontext_id, type=STRING macro=rss_schema
						"ipfixcollectorcontext_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=ipfixcollectorcontext_id, type=STRING macro=rss_schema
						// property: name=max_message_size, type=INTEGER macro=rss_schema
						"max_message_size": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=max_message_size, type=INTEGER macro=rss_schema
						// property: name=protocol, type=STRING macro=rss_schema
						"protocol": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=protocol, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=protocol, type=STRING macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=export_cache_timeout, type=INTEGER macro=rss_schema
			"export_cache_timeout": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=export_cache_timeout, type=INTEGER macro=rss_schema
			// property: name=filters, type=ARRAY_REFERENCE macro=rss_schema
			"filters": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						"app_def_ids": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=dst_ports, type=ARRAY_REFERENCE macro=rss_schema
						"dst_ports": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=end, type=INTEGER macro=rss_schema
									"end": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=end, type=INTEGER macro=rss_schema
									// property: name=start, type=INTEGER macro=rss_schema
									"start": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
						// property: name=dst_prefixes_id, type=STRING macro=rss_schema
						"dst_prefixes_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=dst_prefixes_id, type=STRING macro=rss_schema
						// property: name=ipfixfiltercontext_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						"ipfixfiltercontext_ids": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=ipfixfiltercontext_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=priority_traffic_types, type=ARRAY_PRIMITIVE macro=rss_schema
						"priority_traffic_types": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=priority_traffic_types, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
						"protocols": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=rtp_transport_type, type=STRING macro=rss_schema
						"rtp_transport_type": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=rtp_transport_type, type=STRING macro=rss_schema
						// property: name=src_ports, type=ARRAY_REFERENCE macro=rss_schema
						"src_ports": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=end, type=INTEGER macro=rss_schema
									"end": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=end, type=INTEGER macro=rss_schema
									// property: name=start, type=INTEGER macro=rss_schema
									"start": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
						// property: name=src_prefixes_id, type=STRING macro=rss_schema
						"src_prefixes_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=src_prefixes_id, type=STRING macro=rss_schema
						// property: name=wan_path_direction, type=STRING macro=rss_schema
						"wan_path_direction": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=wan_path_direction, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=wan_path_direction, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=ipfixtemplate_id, type=STRING macro=rss_schema
			"ipfixtemplate_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=ipfixtemplate_id, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=sampler, type=REFERENCE macro=rss_schema
			"sampler": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=algorithm, type=STRING macro=rss_schema
					"algorithm": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=algorithm, type=STRING macro=rss_schema
					// property: name=time_interval, type=INTEGER macro=rss_schema
					"time_interval": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=time_interval, type=INTEGER macro=rss_schema
					// property: name=time_spacing, type=INTEGER macro=rss_schema
					"time_spacing": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=time_spacing, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=time_spacing, type=INTEGER macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *ipfixProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *ipfixProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelIPFixProfileScreen
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_ipfix_profile",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_ipfix_profile ID format", "Expected 1 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/ipfixprofiles/{profile_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["profile_id"] = &tokens[0]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_ipfix_profile", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.IPFixProfileScreen
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to IPFixProfileScreen", json_err.Error())
		return
	}

	// lets copy all items into state schema=IPFixProfileScreen
	// copy_to_state: state=state prefix=dsModel ans=ans properties=11
	tflog.Debug(ctx, "copy_to_state state=state prefix=dsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=collector_config, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.CollectorConfig == nil {
		state.CollectorConfig = nil
	} else if len(ans.CollectorConfig) == 0 {
		state.CollectorConfig = []dsModelCollectorConfig{}
	} else {
		state.CollectorConfig = make([]dsModelCollectorConfig, 0, len(ans.CollectorConfig))
		for varLoopCollectorConfigIndex, varLoopCollectorConfig := range ans.CollectorConfig {
			// add a new item
			state.CollectorConfig = append(state.CollectorConfig, dsModelCollectorConfig{})
			// copy_to_state: state=state.CollectorConfig[varLoopCollectorConfigIndex] prefix=dsModel ans=varLoopCollectorConfig properties=5
			tflog.Debug(ctx, "copy_to_state state=state.CollectorConfig[varLoopCollectorConfigIndex] prefix=dsModel ans=varLoopCollectorConfig")
			// property: name=host, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].Host = types.StringPointerValue(varLoopCollectorConfig.Host)
			// property: name=host_port, type=INTEGER macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].HostPort = types.Int64PointerValue(varLoopCollectorConfig.HostPort)
			// property: name=ipfixcollectorcontext_id, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].IpfixcollectorcontextId = types.StringPointerValue(varLoopCollectorConfig.IpfixcollectorcontextId)
			// property: name=max_message_size, type=INTEGER macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].MaxMessageSize = types.Int64PointerValue(varLoopCollectorConfig.MaxMessageSize)
			// property: name=protocol, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].Protocol = types.StringPointerValue(varLoopCollectorConfig.Protocol)
		}
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=export_cache_timeout, type=INTEGER macro=copy_to_state
	state.ExportCacheTimeout = types.Int64PointerValue(ans.ExportCacheTimeout)
	// property: name=filters, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Filters == nil {
		state.Filters = nil
	} else if len(ans.Filters) == 0 {
		state.Filters = []dsModelIPFixFilter{}
	} else {
		state.Filters = make([]dsModelIPFixFilter, 0, len(ans.Filters))
		for varLoopFiltersIndex, varLoopFilters := range ans.Filters {
			// add a new item
			state.Filters = append(state.Filters, dsModelIPFixFilter{})
			// copy_to_state: state=state.Filters[varLoopFiltersIndex] prefix=dsModel ans=varLoopFilters properties=10
			tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex] prefix=dsModel ans=varLoopFilters")
			// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, varLoopFilters.AppDefIds)
			state.Filters[varLoopFiltersIndex].AppDefIds = varAppDefIds
			resp.Diagnostics.Append(errAppDefIds.Errors()...)
			// property: name=dst_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopFilters.DstPorts == nil {
				state.Filters[varLoopFiltersIndex].DstPorts = nil
			} else if len(varLoopFilters.DstPorts) == 0 {
				state.Filters[varLoopFiltersIndex].DstPorts = []dsModelPort{}
			} else {
				state.Filters[varLoopFiltersIndex].DstPorts = make([]dsModelPort, 0, len(varLoopFilters.DstPorts))
				for varLoopDstPortsIndex, varLoopDstPorts := range varLoopFilters.DstPorts {
					// add a new item
					state.Filters[varLoopFiltersIndex].DstPorts = append(state.Filters[varLoopFiltersIndex].DstPorts, dsModelPort{})
					// copy_to_state: state=state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=dsModel ans=varLoopDstPorts properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=dsModel ans=varLoopDstPorts")
					// property: name=end, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].End = types.Int64PointerValue(varLoopDstPorts.End)
					// property: name=start, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].Start = types.Int64PointerValue(varLoopDstPorts.Start)
				}
			}
			// property: name=dst_prefixes_id, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].DstPrefixesId = types.StringPointerValue(varLoopFilters.DstPrefixesId)
			// property: name=ipfixfiltercontext_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varIpfixfiltercontextIds, errIpfixfiltercontextIds := types.ListValueFrom(ctx, types.StringType, varLoopFilters.IpfixfiltercontextIds)
			state.Filters[varLoopFiltersIndex].IpfixfiltercontextIds = varIpfixfiltercontextIds
			resp.Diagnostics.Append(errIpfixfiltercontextIds.Errors()...)
			// property: name=priority_traffic_types, type=ARRAY_PRIMITIVE macro=copy_to_state
			varPriorityTrafficTypes, errPriorityTrafficTypes := types.ListValueFrom(ctx, types.StringType, varLoopFilters.PriorityTrafficTypes)
			state.Filters[varLoopFiltersIndex].PriorityTrafficTypes = varPriorityTrafficTypes
			resp.Diagnostics.Append(errPriorityTrafficTypes.Errors()...)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
			varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopFilters.Protocols)
			state.Filters[varLoopFiltersIndex].Protocols = varProtocols
			resp.Diagnostics.Append(errProtocols.Errors()...)
			// property: name=rtp_transport_type, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].RtpTransportType = types.StringPointerValue(varLoopFilters.RtpTransportType)
			// property: name=src_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopFilters.SrcPorts == nil {
				state.Filters[varLoopFiltersIndex].SrcPorts = nil
			} else if len(varLoopFilters.SrcPorts) == 0 {
				state.Filters[varLoopFiltersIndex].SrcPorts = []dsModelPort{}
			} else {
				state.Filters[varLoopFiltersIndex].SrcPorts = make([]dsModelPort, 0, len(varLoopFilters.SrcPorts))
				for varLoopSrcPortsIndex, varLoopSrcPorts := range varLoopFilters.SrcPorts {
					// add a new item
					state.Filters[varLoopFiltersIndex].SrcPorts = append(state.Filters[varLoopFiltersIndex].SrcPorts, dsModelPort{})
					// copy_to_state: state=state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=dsModel ans=varLoopSrcPorts properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=dsModel ans=varLoopSrcPorts")
					// property: name=end, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].End = types.Int64PointerValue(varLoopSrcPorts.End)
					// property: name=start, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].Start = types.Int64PointerValue(varLoopSrcPorts.Start)
				}
			}
			// property: name=src_prefixes_id, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].SrcPrefixesId = types.StringPointerValue(varLoopFilters.SrcPrefixesId)
			// property: name=wan_path_direction, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].WanPathDirection = types.StringPointerValue(varLoopFilters.WanPathDirection)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipfixtemplate_id, type=STRING macro=copy_to_state
	state.IpfixtemplateId = types.StringPointerValue(ans.IpfixtemplateId)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=sampler, type=REFERENCE macro=copy_to_state
	if ans.Sampler == nil {
		state.Sampler = nil
	} else {
		state.Sampler = &dsModelIPFixSampler{}
		// copy_to_state: state=state.Sampler prefix=dsModel ans=ans.Sampler properties=3
		tflog.Debug(ctx, "copy_to_state state=state.Sampler prefix=dsModel ans=ans.Sampler")
		// property: name=algorithm, type=STRING macro=copy_to_state
		state.Sampler.Algorithm = types.StringPointerValue(ans.Sampler.Algorithm)
		// property: name=time_interval, type=INTEGER macro=copy_to_state
		state.Sampler.TimeInterval = types.Int64PointerValue(ans.Sampler.TimeInterval)
		// property: name=time_spacing, type=INTEGER macro=copy_to_state
		state.Sampler.TimeSpacing = types.Int64PointerValue(ans.Sampler.TimeSpacing)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
