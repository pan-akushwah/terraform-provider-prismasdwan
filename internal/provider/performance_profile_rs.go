package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=8)
// | Computed Resource Name=perfmgmtthresholdprofiles
// +-----------------------------------------------------------------
// | FlowMetricThresholds HasID=false
// | CircuitUtilizationMetricThresholds HasID=false
// | SystemHealthMetricsThresholds HasID=false
// | SyntheticProbeThreshold HasID=false
// | SyntheticProbeThresholds HasID=false
// | StaticAppMetricConfigV2N1 HasID=false
// | LQMThresholdConfigV2N1 HasID=false
// | PerfMgmtThresholdProfileScreenV2N1 HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &performanceProfileResource{}
	_ resource.ResourceWithConfigure   = &performanceProfileResource{}
	_ resource.ResourceWithImportState = &performanceProfileResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewPerformanceProfileResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewPerformanceProfileResource() resource.Resource {
	return &performanceProfileResource{}
}

type performanceProfileResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *performanceProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_performance_profile"
}

// Schema defines the schema for this data source.
func (r *performanceProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=PerfMgmtThresholdProfileScreenV2N1
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=circuit_utilization_metrics_thresholds, type=REFERENCE macro=rss_schema
			"circuit_utilization_metrics_thresholds": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=percentage_circuit_utilization, type=INTEGER macro=rss_schema
					"percentage_circuit_utilization": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=percentage_circuit_utilization, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=percentage_circuit_utilization, type=INTEGER macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=flow_metrics_thresholds, type=REFERENCE macro=rss_schema
			"flow_metrics_thresholds": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=percentage_flow_utilization, type=INTEGER macro=rss_schema
					"percentage_flow_utilization": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=percentage_flow_utilization, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=percentage_flow_utilization, type=INTEGER macro=rss_schema
			// property: name=hard_limit_app_metrics, type=REFERENCE macro=rss_schema
			"hard_limit_app_metrics": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=max_init_failure_rate, type=INTEGER macro=rss_schema
					"max_init_failure_rate": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=max_init_failure_rate, type=INTEGER macro=rss_schema
					// property: name=max_rtt, type=INTEGER macro=rss_schema
					"max_rtt": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=max_rtt, type=INTEGER macro=rss_schema
					// property: name=udp_trt, type=INTEGER macro=rss_schema
					"udp_trt": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=udp_trt, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=udp_trt, type=INTEGER macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=lqm_thresholds, type=REFERENCE macro=rss_schema
			"lqm_thresholds": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=max_jitter, type=INTEGER macro=rss_schema
					"max_jitter": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=max_jitter, type=INTEGER macro=rss_schema
					// property: name=max_latency, type=INTEGER macro=rss_schema
					"max_latency": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=max_latency, type=INTEGER macro=rss_schema
					// property: name=max_packet_loss, type=INTEGER macro=rss_schema
					"max_packet_loss": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=max_packet_loss, type=INTEGER macro=rss_schema
					// property: name=min_mos, type=INTEGER macro=rss_schema
					"min_mos": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=min_mos, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=min_mos, type=INTEGER macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=soft_limit_app_metrics, type=REFERENCE macro=rss_schema
			"soft_limit_app_metrics": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=max_init_failure_rate, type=INTEGER macro=rss_schema
					"max_init_failure_rate": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=max_init_failure_rate, type=INTEGER macro=rss_schema
					// property: name=max_rtt, type=INTEGER macro=rss_schema
					"max_rtt": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=max_rtt, type=INTEGER macro=rss_schema
					// property: name=udp_trt, type=INTEGER macro=rss_schema
					"udp_trt": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=udp_trt, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=udp_trt, type=INTEGER macro=rss_schema
			// property: name=synthetic_probe_thresholds, type=REFERENCE macro=rss_schema
			"synthetic_probe_thresholds": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=dns_txn_failure_pct, type=REFERENCE macro=rss_schema
					"dns_txn_failure_pct": rsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]rsschema.Attribute{
							// property: name=probe_config_id, type=STRING macro=rss_schema
							"probe_config_id": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=probe_config_id, type=STRING macro=rss_schema
							// property: name=value, type=INTEGER macro=rss_schema
							"value": rsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						},
					},
					// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
					// property: name=init_failure_pct, type=REFERENCE macro=rss_schema
					"init_failure_pct": rsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]rsschema.Attribute{
							// property: name=probe_config_id, type=STRING macro=rss_schema
							"probe_config_id": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=probe_config_id, type=STRING macro=rss_schema
							// property: name=value, type=INTEGER macro=rss_schema
							"value": rsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						},
					},
					// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
					// property: name=jitter, type=REFERENCE macro=rss_schema
					"jitter": rsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]rsschema.Attribute{
							// property: name=probe_config_id, type=STRING macro=rss_schema
							"probe_config_id": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=probe_config_id, type=STRING macro=rss_schema
							// property: name=value, type=INTEGER macro=rss_schema
							"value": rsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						},
					},
					// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
					// property: name=latency, type=REFERENCE macro=rss_schema
					"latency": rsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]rsschema.Attribute{
							// property: name=probe_config_id, type=STRING macro=rss_schema
							"probe_config_id": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=probe_config_id, type=STRING macro=rss_schema
							// property: name=value, type=INTEGER macro=rss_schema
							"value": rsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						},
					},
					// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
					// property: name=packet_loss, type=REFERENCE macro=rss_schema
					"packet_loss": rsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]rsschema.Attribute{
							// property: name=probe_config_id, type=STRING macro=rss_schema
							"probe_config_id": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=probe_config_id, type=STRING macro=rss_schema
							// property: name=value, type=INTEGER macro=rss_schema
							"value": rsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						},
					},
					// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
			// property: name=system_health_metrics_thresholds, type=REFERENCE macro=rss_schema
			"system_health_metrics_thresholds": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=cpu_utilization, type=INTEGER macro=rss_schema
					"cpu_utilization": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=cpu_utilization, type=INTEGER macro=rss_schema
					// property: name=disk_utilization, type=INTEGER macro=rss_schema
					"disk_utilization": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disk_utilization, type=INTEGER macro=rss_schema
					// property: name=memory_utilization, type=INTEGER macro=rss_schema
					"memory_utilization": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=memory_utilization, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=memory_utilization, type=INTEGER macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *performanceProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *performanceProfileResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *performanceProfileResource) doPost(ctx context.Context, plan *rsModelPerfMgmtThresholdProfileScreenV2N1, state *rsModelPerfMgmtThresholdProfileScreenV2N1, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_performance_profile")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_performance_profile",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_performance_profile"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.1/api/perfmgmtthresholdprofiles"

	// copy parameters from plan always
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.PerfMgmtThresholdProfileScreenV2N1{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=13
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=circuit_utilization_metrics_thresholds, type=REFERENCE macro=copy_from_plan
	if plan.CircuitUtilizationMetricsThresholds != nil {
		body.CircuitUtilizationMetricsThresholds = &sdwan_schema.CircuitUtilizationMetricThresholds{}
		// copy_from_plan: body=body.CircuitUtilizationMetricsThresholds prefix=rsModel plan=plan.CircuitUtilizationMetricsThresholds properties=1
		// property: name=percentage_circuit_utilization, type=INTEGER macro=copy_from_plan
		body.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization = Int64ValueOrNil(plan.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization)
	}
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=flow_metrics_thresholds, type=REFERENCE macro=copy_from_plan
	if plan.FlowMetricsThresholds != nil {
		body.FlowMetricsThresholds = &sdwan_schema.FlowMetricThresholds{}
		// copy_from_plan: body=body.FlowMetricsThresholds prefix=rsModel plan=plan.FlowMetricsThresholds properties=1
		// property: name=percentage_flow_utilization, type=INTEGER macro=copy_from_plan
		body.FlowMetricsThresholds.PercentageFlowUtilization = Int64ValueOrNil(plan.FlowMetricsThresholds.PercentageFlowUtilization)
	}
	// property: name=hard_limit_app_metrics, type=REFERENCE macro=copy_from_plan
	if plan.HardLimitAppMetrics != nil {
		body.HardLimitAppMetrics = &sdwan_schema.StaticAppMetricConfigV2N1{}
		// copy_from_plan: body=body.HardLimitAppMetrics prefix=rsModel plan=plan.HardLimitAppMetrics properties=3
		// property: name=max_init_failure_rate, type=INTEGER macro=copy_from_plan
		body.HardLimitAppMetrics.MaxInitFailureRate = Int64ValueOrNil(plan.HardLimitAppMetrics.MaxInitFailureRate)
		// property: name=max_rtt, type=INTEGER macro=copy_from_plan
		body.HardLimitAppMetrics.MaxRtt = Int64ValueOrNil(plan.HardLimitAppMetrics.MaxRtt)
		// property: name=udp_trt, type=INTEGER macro=copy_from_plan
		body.HardLimitAppMetrics.UdpTrt = Int64ValueOrNil(plan.HardLimitAppMetrics.UdpTrt)
	}
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=lqm_thresholds, type=REFERENCE macro=copy_from_plan
	if plan.LqmThresholds != nil {
		body.LqmThresholds = &sdwan_schema.LQMThresholdConfigV2N1{}
		// copy_from_plan: body=body.LqmThresholds prefix=rsModel plan=plan.LqmThresholds properties=4
		// property: name=max_jitter, type=INTEGER macro=copy_from_plan
		body.LqmThresholds.MaxJitter = Int64ValueOrNil(plan.LqmThresholds.MaxJitter)
		// property: name=max_latency, type=INTEGER macro=copy_from_plan
		body.LqmThresholds.MaxLatency = Int64ValueOrNil(plan.LqmThresholds.MaxLatency)
		// property: name=max_packet_loss, type=INTEGER macro=copy_from_plan
		body.LqmThresholds.MaxPacketLoss = Int64ValueOrNil(plan.LqmThresholds.MaxPacketLoss)
		// property: name=min_mos, type=INTEGER macro=copy_from_plan
		body.LqmThresholds.MinMos = Int64ValueOrNil(plan.LqmThresholds.MinMos)
	}
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=soft_limit_app_metrics, type=REFERENCE macro=copy_from_plan
	if plan.SoftLimitAppMetrics != nil {
		body.SoftLimitAppMetrics = &sdwan_schema.StaticAppMetricConfigV2N1{}
		// copy_from_plan: body=body.SoftLimitAppMetrics prefix=rsModel plan=plan.SoftLimitAppMetrics properties=3
		// property: name=max_init_failure_rate, type=INTEGER macro=copy_from_plan
		body.SoftLimitAppMetrics.MaxInitFailureRate = Int64ValueOrNil(plan.SoftLimitAppMetrics.MaxInitFailureRate)
		// property: name=max_rtt, type=INTEGER macro=copy_from_plan
		body.SoftLimitAppMetrics.MaxRtt = Int64ValueOrNil(plan.SoftLimitAppMetrics.MaxRtt)
		// property: name=udp_trt, type=INTEGER macro=copy_from_plan
		body.SoftLimitAppMetrics.UdpTrt = Int64ValueOrNil(plan.SoftLimitAppMetrics.UdpTrt)
	}
	// property: name=synthetic_probe_thresholds, type=REFERENCE macro=copy_from_plan
	if plan.SyntheticProbeThresholds != nil {
		body.SyntheticProbeThresholds = &sdwan_schema.SyntheticProbeThresholds{}
		// copy_from_plan: body=body.SyntheticProbeThresholds prefix=rsModel plan=plan.SyntheticProbeThresholds properties=5
		// property: name=dns_txn_failure_pct, type=REFERENCE macro=copy_from_plan
		if plan.SyntheticProbeThresholds.DnsTxnFailurePct != nil {
			body.SyntheticProbeThresholds.DnsTxnFailurePct = &sdwan_schema.SyntheticProbeThreshold{}
			// copy_from_plan: body=body.SyntheticProbeThresholds.DnsTxnFailurePct prefix=rsModel plan=plan.SyntheticProbeThresholds.DnsTxnFailurePct properties=2
			// property: name=probe_config_id, type=STRING macro=copy_from_plan
			body.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId = StringValueOrNil(plan.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_from_plan
			body.SyntheticProbeThresholds.DnsTxnFailurePct.Value = Int64ValueOrNil(plan.SyntheticProbeThresholds.DnsTxnFailurePct.Value)
		}
		// property: name=init_failure_pct, type=REFERENCE macro=copy_from_plan
		if plan.SyntheticProbeThresholds.InitFailurePct != nil {
			body.SyntheticProbeThresholds.InitFailurePct = &sdwan_schema.SyntheticProbeThreshold{}
			// copy_from_plan: body=body.SyntheticProbeThresholds.InitFailurePct prefix=rsModel plan=plan.SyntheticProbeThresholds.InitFailurePct properties=2
			// property: name=probe_config_id, type=STRING macro=copy_from_plan
			body.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId = StringValueOrNil(plan.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_from_plan
			body.SyntheticProbeThresholds.InitFailurePct.Value = Int64ValueOrNil(plan.SyntheticProbeThresholds.InitFailurePct.Value)
		}
		// property: name=jitter, type=REFERENCE macro=copy_from_plan
		if plan.SyntheticProbeThresholds.Jitter != nil {
			body.SyntheticProbeThresholds.Jitter = &sdwan_schema.SyntheticProbeThreshold{}
			// copy_from_plan: body=body.SyntheticProbeThresholds.Jitter prefix=rsModel plan=plan.SyntheticProbeThresholds.Jitter properties=2
			// property: name=probe_config_id, type=STRING macro=copy_from_plan
			body.SyntheticProbeThresholds.Jitter.ProbeConfigId = StringValueOrNil(plan.SyntheticProbeThresholds.Jitter.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_from_plan
			body.SyntheticProbeThresholds.Jitter.Value = Int64ValueOrNil(plan.SyntheticProbeThresholds.Jitter.Value)
		}
		// property: name=latency, type=REFERENCE macro=copy_from_plan
		if plan.SyntheticProbeThresholds.Latency != nil {
			body.SyntheticProbeThresholds.Latency = &sdwan_schema.SyntheticProbeThreshold{}
			// copy_from_plan: body=body.SyntheticProbeThresholds.Latency prefix=rsModel plan=plan.SyntheticProbeThresholds.Latency properties=2
			// property: name=probe_config_id, type=STRING macro=copy_from_plan
			body.SyntheticProbeThresholds.Latency.ProbeConfigId = StringValueOrNil(plan.SyntheticProbeThresholds.Latency.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_from_plan
			body.SyntheticProbeThresholds.Latency.Value = Int64ValueOrNil(plan.SyntheticProbeThresholds.Latency.Value)
		}
		// property: name=packet_loss, type=REFERENCE macro=copy_from_plan
		if plan.SyntheticProbeThresholds.PacketLoss != nil {
			body.SyntheticProbeThresholds.PacketLoss = &sdwan_schema.SyntheticProbeThreshold{}
			// copy_from_plan: body=body.SyntheticProbeThresholds.PacketLoss prefix=rsModel plan=plan.SyntheticProbeThresholds.PacketLoss properties=2
			// property: name=probe_config_id, type=STRING macro=copy_from_plan
			body.SyntheticProbeThresholds.PacketLoss.ProbeConfigId = StringValueOrNil(plan.SyntheticProbeThresholds.PacketLoss.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_from_plan
			body.SyntheticProbeThresholds.PacketLoss.Value = Int64ValueOrNil(plan.SyntheticProbeThresholds.PacketLoss.Value)
		}
	}
	// property: name=system_health_metrics_thresholds, type=REFERENCE macro=copy_from_plan
	if plan.SystemHealthMetricsThresholds != nil {
		body.SystemHealthMetricsThresholds = &sdwan_schema.SystemHealthMetricsThresholds{}
		// copy_from_plan: body=body.SystemHealthMetricsThresholds prefix=rsModel plan=plan.SystemHealthMetricsThresholds properties=3
		// property: name=cpu_utilization, type=INTEGER macro=copy_from_plan
		body.SystemHealthMetricsThresholds.CpuUtilization = Int64ValueOrNil(plan.SystemHealthMetricsThresholds.CpuUtilization)
		// property: name=disk_utilization, type=INTEGER macro=copy_from_plan
		body.SystemHealthMetricsThresholds.DiskUtilization = Int64ValueOrNil(plan.SystemHealthMetricsThresholds.DiskUtilization)
		// property: name=memory_utilization, type=INTEGER macro=copy_from_plan
		body.SystemHealthMetricsThresholds.MemoryUtilization = Int64ValueOrNil(plan.SystemHealthMetricsThresholds.MemoryUtilization)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct PerfMgmtThresholdProfileScreenV2N1 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	request_body_string, _ = sjson.Delete(request_body_string, "is_default")
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_performance_profile", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_performance_profile",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_performance_profile", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_performance_profile",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_performance_profile", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.PerfMgmtThresholdProfileScreenV2N1
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PerfMgmtThresholdProfileScreenV2N1 in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_performance_profile with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=PerfMgmtThresholdProfileScreenV2N1
	// copy_to_state: state=state prefix=rsModel ans=ans properties=13
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=circuit_utilization_metrics_thresholds, type=REFERENCE macro=copy_to_state
	if ans.CircuitUtilizationMetricsThresholds == nil {
		state.CircuitUtilizationMetricsThresholds = nil
	} else {
		state.CircuitUtilizationMetricsThresholds = &rsModelCircuitUtilizationMetricThresholds{}
		// copy_to_state: state=state.CircuitUtilizationMetricsThresholds prefix=rsModel ans=ans.CircuitUtilizationMetricsThresholds properties=1
		// property: name=percentage_circuit_utilization, type=INTEGER macro=copy_to_state
		state.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization = types.Int64PointerValue(ans.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization)
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=flow_metrics_thresholds, type=REFERENCE macro=copy_to_state
	if ans.FlowMetricsThresholds == nil {
		state.FlowMetricsThresholds = nil
	} else {
		state.FlowMetricsThresholds = &rsModelFlowMetricThresholds{}
		// copy_to_state: state=state.FlowMetricsThresholds prefix=rsModel ans=ans.FlowMetricsThresholds properties=1
		// property: name=percentage_flow_utilization, type=INTEGER macro=copy_to_state
		state.FlowMetricsThresholds.PercentageFlowUtilization = types.Int64PointerValue(ans.FlowMetricsThresholds.PercentageFlowUtilization)
	}
	// property: name=hard_limit_app_metrics, type=REFERENCE macro=copy_to_state
	if ans.HardLimitAppMetrics == nil {
		state.HardLimitAppMetrics = nil
	} else {
		state.HardLimitAppMetrics = &rsModelStaticAppMetricConfigV2N1{}
		// copy_to_state: state=state.HardLimitAppMetrics prefix=rsModel ans=ans.HardLimitAppMetrics properties=3
		// property: name=max_init_failure_rate, type=INTEGER macro=copy_to_state
		state.HardLimitAppMetrics.MaxInitFailureRate = types.Int64PointerValue(ans.HardLimitAppMetrics.MaxInitFailureRate)
		// property: name=max_rtt, type=INTEGER macro=copy_to_state
		state.HardLimitAppMetrics.MaxRtt = types.Int64PointerValue(ans.HardLimitAppMetrics.MaxRtt)
		// property: name=udp_trt, type=INTEGER macro=copy_to_state
		state.HardLimitAppMetrics.UdpTrt = types.Int64PointerValue(ans.HardLimitAppMetrics.UdpTrt)
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=lqm_thresholds, type=REFERENCE macro=copy_to_state
	if ans.LqmThresholds == nil {
		state.LqmThresholds = nil
	} else {
		state.LqmThresholds = &rsModelLQMThresholdConfigV2N1{}
		// copy_to_state: state=state.LqmThresholds prefix=rsModel ans=ans.LqmThresholds properties=4
		// property: name=max_jitter, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MaxJitter = types.Int64PointerValue(ans.LqmThresholds.MaxJitter)
		// property: name=max_latency, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MaxLatency = types.Int64PointerValue(ans.LqmThresholds.MaxLatency)
		// property: name=max_packet_loss, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MaxPacketLoss = types.Int64PointerValue(ans.LqmThresholds.MaxPacketLoss)
		// property: name=min_mos, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MinMos = types.Int64PointerValue(ans.LqmThresholds.MinMos)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=soft_limit_app_metrics, type=REFERENCE macro=copy_to_state
	if ans.SoftLimitAppMetrics == nil {
		state.SoftLimitAppMetrics = nil
	} else {
		state.SoftLimitAppMetrics = &rsModelStaticAppMetricConfigV2N1{}
		// copy_to_state: state=state.SoftLimitAppMetrics prefix=rsModel ans=ans.SoftLimitAppMetrics properties=3
		// property: name=max_init_failure_rate, type=INTEGER macro=copy_to_state
		state.SoftLimitAppMetrics.MaxInitFailureRate = types.Int64PointerValue(ans.SoftLimitAppMetrics.MaxInitFailureRate)
		// property: name=max_rtt, type=INTEGER macro=copy_to_state
		state.SoftLimitAppMetrics.MaxRtt = types.Int64PointerValue(ans.SoftLimitAppMetrics.MaxRtt)
		// property: name=udp_trt, type=INTEGER macro=copy_to_state
		state.SoftLimitAppMetrics.UdpTrt = types.Int64PointerValue(ans.SoftLimitAppMetrics.UdpTrt)
	}
	// property: name=synthetic_probe_thresholds, type=REFERENCE macro=copy_to_state
	if ans.SyntheticProbeThresholds == nil {
		state.SyntheticProbeThresholds = nil
	} else {
		state.SyntheticProbeThresholds = &rsModelSyntheticProbeThresholds{}
		// copy_to_state: state=state.SyntheticProbeThresholds prefix=rsModel ans=ans.SyntheticProbeThresholds properties=5
		// property: name=dns_txn_failure_pct, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.DnsTxnFailurePct == nil {
			state.SyntheticProbeThresholds.DnsTxnFailurePct = nil
		} else {
			state.SyntheticProbeThresholds.DnsTxnFailurePct = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.DnsTxnFailurePct prefix=rsModel ans=ans.SyntheticProbeThresholds.DnsTxnFailurePct properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.DnsTxnFailurePct.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.DnsTxnFailurePct.Value)
		}
		// property: name=init_failure_pct, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.InitFailurePct == nil {
			state.SyntheticProbeThresholds.InitFailurePct = nil
		} else {
			state.SyntheticProbeThresholds.InitFailurePct = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.InitFailurePct prefix=rsModel ans=ans.SyntheticProbeThresholds.InitFailurePct properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.InitFailurePct.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.InitFailurePct.Value)
		}
		// property: name=jitter, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.Jitter == nil {
			state.SyntheticProbeThresholds.Jitter = nil
		} else {
			state.SyntheticProbeThresholds.Jitter = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.Jitter prefix=rsModel ans=ans.SyntheticProbeThresholds.Jitter properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.Jitter.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.Jitter.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.Jitter.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.Jitter.Value)
		}
		// property: name=latency, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.Latency == nil {
			state.SyntheticProbeThresholds.Latency = nil
		} else {
			state.SyntheticProbeThresholds.Latency = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.Latency prefix=rsModel ans=ans.SyntheticProbeThresholds.Latency properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.Latency.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.Latency.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.Latency.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.Latency.Value)
		}
		// property: name=packet_loss, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.PacketLoss == nil {
			state.SyntheticProbeThresholds.PacketLoss = nil
		} else {
			state.SyntheticProbeThresholds.PacketLoss = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.PacketLoss prefix=rsModel ans=ans.SyntheticProbeThresholds.PacketLoss properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.PacketLoss.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.PacketLoss.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.PacketLoss.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.PacketLoss.Value)
		}
	}
	// property: name=system_health_metrics_thresholds, type=REFERENCE macro=copy_to_state
	if ans.SystemHealthMetricsThresholds == nil {
		state.SystemHealthMetricsThresholds = nil
	} else {
		state.SystemHealthMetricsThresholds = &rsModelSystemHealthMetricsThresholds{}
		// copy_to_state: state=state.SystemHealthMetricsThresholds prefix=rsModel ans=ans.SystemHealthMetricsThresholds properties=3
		// property: name=cpu_utilization, type=INTEGER macro=copy_to_state
		state.SystemHealthMetricsThresholds.CpuUtilization = types.Int64PointerValue(ans.SystemHealthMetricsThresholds.CpuUtilization)
		// property: name=disk_utilization, type=INTEGER macro=copy_to_state
		state.SystemHealthMetricsThresholds.DiskUtilization = types.Int64PointerValue(ans.SystemHealthMetricsThresholds.DiskUtilization)
		// property: name=memory_utilization, type=INTEGER macro=copy_to_state
		state.SystemHealthMetricsThresholds.MemoryUtilization = types.Int64PointerValue(ans.SystemHealthMetricsThresholds.MemoryUtilization)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *performanceProfileResource) doGet(ctx context.Context, state *rsModelPerfMgmtThresholdProfileScreenV2N1, savestate *rsModelPerfMgmtThresholdProfileScreenV2N1, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_performance_profile",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_performance_profile ID format", "Expected 1 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_performance_profile"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.1/api/perfmgmtthresholdprofiles/{profile_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["profile_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_performance_profile", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_performance_profile",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_performance_profile from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=PerfMgmtThresholdProfileScreenV2N1
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.PerfMgmtThresholdProfileScreenV2N1
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PerfMgmtThresholdProfileScreenV2N1 in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=13
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=circuit_utilization_metrics_thresholds, type=REFERENCE macro=copy_to_state
	if ans.CircuitUtilizationMetricsThresholds == nil {
		state.CircuitUtilizationMetricsThresholds = nil
	} else {
		state.CircuitUtilizationMetricsThresholds = &rsModelCircuitUtilizationMetricThresholds{}
		// copy_to_state: state=state.CircuitUtilizationMetricsThresholds prefix=rsModel ans=ans.CircuitUtilizationMetricsThresholds properties=1
		// property: name=percentage_circuit_utilization, type=INTEGER macro=copy_to_state
		state.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization = types.Int64PointerValue(ans.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization)
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=flow_metrics_thresholds, type=REFERENCE macro=copy_to_state
	if ans.FlowMetricsThresholds == nil {
		state.FlowMetricsThresholds = nil
	} else {
		state.FlowMetricsThresholds = &rsModelFlowMetricThresholds{}
		// copy_to_state: state=state.FlowMetricsThresholds prefix=rsModel ans=ans.FlowMetricsThresholds properties=1
		// property: name=percentage_flow_utilization, type=INTEGER macro=copy_to_state
		state.FlowMetricsThresholds.PercentageFlowUtilization = types.Int64PointerValue(ans.FlowMetricsThresholds.PercentageFlowUtilization)
	}
	// property: name=hard_limit_app_metrics, type=REFERENCE macro=copy_to_state
	if ans.HardLimitAppMetrics == nil {
		state.HardLimitAppMetrics = nil
	} else {
		state.HardLimitAppMetrics = &rsModelStaticAppMetricConfigV2N1{}
		// copy_to_state: state=state.HardLimitAppMetrics prefix=rsModel ans=ans.HardLimitAppMetrics properties=3
		// property: name=max_init_failure_rate, type=INTEGER macro=copy_to_state
		state.HardLimitAppMetrics.MaxInitFailureRate = types.Int64PointerValue(ans.HardLimitAppMetrics.MaxInitFailureRate)
		// property: name=max_rtt, type=INTEGER macro=copy_to_state
		state.HardLimitAppMetrics.MaxRtt = types.Int64PointerValue(ans.HardLimitAppMetrics.MaxRtt)
		// property: name=udp_trt, type=INTEGER macro=copy_to_state
		state.HardLimitAppMetrics.UdpTrt = types.Int64PointerValue(ans.HardLimitAppMetrics.UdpTrt)
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=lqm_thresholds, type=REFERENCE macro=copy_to_state
	if ans.LqmThresholds == nil {
		state.LqmThresholds = nil
	} else {
		state.LqmThresholds = &rsModelLQMThresholdConfigV2N1{}
		// copy_to_state: state=state.LqmThresholds prefix=rsModel ans=ans.LqmThresholds properties=4
		// property: name=max_jitter, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MaxJitter = types.Int64PointerValue(ans.LqmThresholds.MaxJitter)
		// property: name=max_latency, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MaxLatency = types.Int64PointerValue(ans.LqmThresholds.MaxLatency)
		// property: name=max_packet_loss, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MaxPacketLoss = types.Int64PointerValue(ans.LqmThresholds.MaxPacketLoss)
		// property: name=min_mos, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MinMos = types.Int64PointerValue(ans.LqmThresholds.MinMos)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=soft_limit_app_metrics, type=REFERENCE macro=copy_to_state
	if ans.SoftLimitAppMetrics == nil {
		state.SoftLimitAppMetrics = nil
	} else {
		state.SoftLimitAppMetrics = &rsModelStaticAppMetricConfigV2N1{}
		// copy_to_state: state=state.SoftLimitAppMetrics prefix=rsModel ans=ans.SoftLimitAppMetrics properties=3
		// property: name=max_init_failure_rate, type=INTEGER macro=copy_to_state
		state.SoftLimitAppMetrics.MaxInitFailureRate = types.Int64PointerValue(ans.SoftLimitAppMetrics.MaxInitFailureRate)
		// property: name=max_rtt, type=INTEGER macro=copy_to_state
		state.SoftLimitAppMetrics.MaxRtt = types.Int64PointerValue(ans.SoftLimitAppMetrics.MaxRtt)
		// property: name=udp_trt, type=INTEGER macro=copy_to_state
		state.SoftLimitAppMetrics.UdpTrt = types.Int64PointerValue(ans.SoftLimitAppMetrics.UdpTrt)
	}
	// property: name=synthetic_probe_thresholds, type=REFERENCE macro=copy_to_state
	if ans.SyntheticProbeThresholds == nil {
		state.SyntheticProbeThresholds = nil
	} else {
		state.SyntheticProbeThresholds = &rsModelSyntheticProbeThresholds{}
		// copy_to_state: state=state.SyntheticProbeThresholds prefix=rsModel ans=ans.SyntheticProbeThresholds properties=5
		// property: name=dns_txn_failure_pct, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.DnsTxnFailurePct == nil {
			state.SyntheticProbeThresholds.DnsTxnFailurePct = nil
		} else {
			state.SyntheticProbeThresholds.DnsTxnFailurePct = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.DnsTxnFailurePct prefix=rsModel ans=ans.SyntheticProbeThresholds.DnsTxnFailurePct properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.DnsTxnFailurePct.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.DnsTxnFailurePct.Value)
		}
		// property: name=init_failure_pct, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.InitFailurePct == nil {
			state.SyntheticProbeThresholds.InitFailurePct = nil
		} else {
			state.SyntheticProbeThresholds.InitFailurePct = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.InitFailurePct prefix=rsModel ans=ans.SyntheticProbeThresholds.InitFailurePct properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.InitFailurePct.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.InitFailurePct.Value)
		}
		// property: name=jitter, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.Jitter == nil {
			state.SyntheticProbeThresholds.Jitter = nil
		} else {
			state.SyntheticProbeThresholds.Jitter = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.Jitter prefix=rsModel ans=ans.SyntheticProbeThresholds.Jitter properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.Jitter.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.Jitter.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.Jitter.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.Jitter.Value)
		}
		// property: name=latency, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.Latency == nil {
			state.SyntheticProbeThresholds.Latency = nil
		} else {
			state.SyntheticProbeThresholds.Latency = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.Latency prefix=rsModel ans=ans.SyntheticProbeThresholds.Latency properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.Latency.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.Latency.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.Latency.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.Latency.Value)
		}
		// property: name=packet_loss, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.PacketLoss == nil {
			state.SyntheticProbeThresholds.PacketLoss = nil
		} else {
			state.SyntheticProbeThresholds.PacketLoss = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.PacketLoss prefix=rsModel ans=ans.SyntheticProbeThresholds.PacketLoss properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.PacketLoss.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.PacketLoss.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.PacketLoss.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.PacketLoss.Value)
		}
	}
	// property: name=system_health_metrics_thresholds, type=REFERENCE macro=copy_to_state
	if ans.SystemHealthMetricsThresholds == nil {
		state.SystemHealthMetricsThresholds = nil
	} else {
		state.SystemHealthMetricsThresholds = &rsModelSystemHealthMetricsThresholds{}
		// copy_to_state: state=state.SystemHealthMetricsThresholds prefix=rsModel ans=ans.SystemHealthMetricsThresholds properties=3
		// property: name=cpu_utilization, type=INTEGER macro=copy_to_state
		state.SystemHealthMetricsThresholds.CpuUtilization = types.Int64PointerValue(ans.SystemHealthMetricsThresholds.CpuUtilization)
		// property: name=disk_utilization, type=INTEGER macro=copy_to_state
		state.SystemHealthMetricsThresholds.DiskUtilization = types.Int64PointerValue(ans.SystemHealthMetricsThresholds.DiskUtilization)
		// property: name=memory_utilization, type=INTEGER macro=copy_to_state
		state.SystemHealthMetricsThresholds.MemoryUtilization = types.Int64PointerValue(ans.SystemHealthMetricsThresholds.MemoryUtilization)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *performanceProfileResource) doPut(ctx context.Context, plan *rsModelPerfMgmtThresholdProfileScreenV2N1, state *rsModelPerfMgmtThresholdProfileScreenV2N1, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_performance_profile",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_performance_profile", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_performance_profile ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_performance_profile"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.1/api/perfmgmtthresholdprofiles/{profile_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["profile_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.PerfMgmtThresholdProfileScreenV2N1{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=13
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=circuit_utilization_metrics_thresholds, type=REFERENCE macro=copy_from_plan_or_state
	if plan.CircuitUtilizationMetricsThresholds == nil {
		body.CircuitUtilizationMetricsThresholds = nil
	} else {
		body.CircuitUtilizationMetricsThresholds = &sdwan_schema.CircuitUtilizationMetricThresholds{}
		// copy_from_plan_or_state: body=body.CircuitUtilizationMetricsThresholds prefix=rsModel state=state.CircuitUtilizationMetricsThresholds plan=plan.CircuitUtilizationMetricsThresholds properties=1
		// property: name=percentage_circuit_utilization, type=INTEGER macro=copy_from_plan_or_state
		if state.CircuitUtilizationMetricsThresholds != nil {
			body.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization = ValueInt64PointerFromPlanOrState(plan.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization, state.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization)
		} else {
			body.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization = Int64ValueOrNil(plan.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization)
		}
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=flow_metrics_thresholds, type=REFERENCE macro=copy_from_plan_or_state
	if plan.FlowMetricsThresholds == nil {
		body.FlowMetricsThresholds = nil
	} else {
		body.FlowMetricsThresholds = &sdwan_schema.FlowMetricThresholds{}
		// copy_from_plan_or_state: body=body.FlowMetricsThresholds prefix=rsModel state=state.FlowMetricsThresholds plan=plan.FlowMetricsThresholds properties=1
		// property: name=percentage_flow_utilization, type=INTEGER macro=copy_from_plan_or_state
		if state.FlowMetricsThresholds != nil {
			body.FlowMetricsThresholds.PercentageFlowUtilization = ValueInt64PointerFromPlanOrState(plan.FlowMetricsThresholds.PercentageFlowUtilization, state.FlowMetricsThresholds.PercentageFlowUtilization)
		} else {
			body.FlowMetricsThresholds.PercentageFlowUtilization = Int64ValueOrNil(plan.FlowMetricsThresholds.PercentageFlowUtilization)
		}
	}
	// property: name=hard_limit_app_metrics, type=REFERENCE macro=copy_from_plan_or_state
	if plan.HardLimitAppMetrics == nil {
		body.HardLimitAppMetrics = nil
	} else {
		body.HardLimitAppMetrics = &sdwan_schema.StaticAppMetricConfigV2N1{}
		// copy_from_plan_or_state: body=body.HardLimitAppMetrics prefix=rsModel state=state.HardLimitAppMetrics plan=plan.HardLimitAppMetrics properties=3
		// property: name=max_init_failure_rate, type=INTEGER macro=copy_from_plan_or_state
		if state.HardLimitAppMetrics != nil {
			body.HardLimitAppMetrics.MaxInitFailureRate = ValueInt64PointerFromPlanOrState(plan.HardLimitAppMetrics.MaxInitFailureRate, state.HardLimitAppMetrics.MaxInitFailureRate)
		} else {
			body.HardLimitAppMetrics.MaxInitFailureRate = Int64ValueOrNil(plan.HardLimitAppMetrics.MaxInitFailureRate)
		}
		// property: name=max_rtt, type=INTEGER macro=copy_from_plan_or_state
		if state.HardLimitAppMetrics != nil {
			body.HardLimitAppMetrics.MaxRtt = ValueInt64PointerFromPlanOrState(plan.HardLimitAppMetrics.MaxRtt, state.HardLimitAppMetrics.MaxRtt)
		} else {
			body.HardLimitAppMetrics.MaxRtt = Int64ValueOrNil(plan.HardLimitAppMetrics.MaxRtt)
		}
		// property: name=udp_trt, type=INTEGER macro=copy_from_plan_or_state
		if state.HardLimitAppMetrics != nil {
			body.HardLimitAppMetrics.UdpTrt = ValueInt64PointerFromPlanOrState(plan.HardLimitAppMetrics.UdpTrt, state.HardLimitAppMetrics.UdpTrt)
		} else {
			body.HardLimitAppMetrics.UdpTrt = Int64ValueOrNil(plan.HardLimitAppMetrics.UdpTrt)
		}
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=lqm_thresholds, type=REFERENCE macro=copy_from_plan_or_state
	if plan.LqmThresholds == nil {
		body.LqmThresholds = nil
	} else {
		body.LqmThresholds = &sdwan_schema.LQMThresholdConfigV2N1{}
		// copy_from_plan_or_state: body=body.LqmThresholds prefix=rsModel state=state.LqmThresholds plan=plan.LqmThresholds properties=4
		// property: name=max_jitter, type=INTEGER macro=copy_from_plan_or_state
		if state.LqmThresholds != nil {
			body.LqmThresholds.MaxJitter = ValueInt64PointerFromPlanOrState(plan.LqmThresholds.MaxJitter, state.LqmThresholds.MaxJitter)
		} else {
			body.LqmThresholds.MaxJitter = Int64ValueOrNil(plan.LqmThresholds.MaxJitter)
		}
		// property: name=max_latency, type=INTEGER macro=copy_from_plan_or_state
		if state.LqmThresholds != nil {
			body.LqmThresholds.MaxLatency = ValueInt64PointerFromPlanOrState(plan.LqmThresholds.MaxLatency, state.LqmThresholds.MaxLatency)
		} else {
			body.LqmThresholds.MaxLatency = Int64ValueOrNil(plan.LqmThresholds.MaxLatency)
		}
		// property: name=max_packet_loss, type=INTEGER macro=copy_from_plan_or_state
		if state.LqmThresholds != nil {
			body.LqmThresholds.MaxPacketLoss = ValueInt64PointerFromPlanOrState(plan.LqmThresholds.MaxPacketLoss, state.LqmThresholds.MaxPacketLoss)
		} else {
			body.LqmThresholds.MaxPacketLoss = Int64ValueOrNil(plan.LqmThresholds.MaxPacketLoss)
		}
		// property: name=min_mos, type=INTEGER macro=copy_from_plan_or_state
		if state.LqmThresholds != nil {
			body.LqmThresholds.MinMos = ValueInt64PointerFromPlanOrState(plan.LqmThresholds.MinMos, state.LqmThresholds.MinMos)
		} else {
			body.LqmThresholds.MinMos = Int64ValueOrNil(plan.LqmThresholds.MinMos)
		}
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=soft_limit_app_metrics, type=REFERENCE macro=copy_from_plan_or_state
	if plan.SoftLimitAppMetrics == nil {
		body.SoftLimitAppMetrics = nil
	} else {
		body.SoftLimitAppMetrics = &sdwan_schema.StaticAppMetricConfigV2N1{}
		// copy_from_plan_or_state: body=body.SoftLimitAppMetrics prefix=rsModel state=state.SoftLimitAppMetrics plan=plan.SoftLimitAppMetrics properties=3
		// property: name=max_init_failure_rate, type=INTEGER macro=copy_from_plan_or_state
		if state.SoftLimitAppMetrics != nil {
			body.SoftLimitAppMetrics.MaxInitFailureRate = ValueInt64PointerFromPlanOrState(plan.SoftLimitAppMetrics.MaxInitFailureRate, state.SoftLimitAppMetrics.MaxInitFailureRate)
		} else {
			body.SoftLimitAppMetrics.MaxInitFailureRate = Int64ValueOrNil(plan.SoftLimitAppMetrics.MaxInitFailureRate)
		}
		// property: name=max_rtt, type=INTEGER macro=copy_from_plan_or_state
		if state.SoftLimitAppMetrics != nil {
			body.SoftLimitAppMetrics.MaxRtt = ValueInt64PointerFromPlanOrState(plan.SoftLimitAppMetrics.MaxRtt, state.SoftLimitAppMetrics.MaxRtt)
		} else {
			body.SoftLimitAppMetrics.MaxRtt = Int64ValueOrNil(plan.SoftLimitAppMetrics.MaxRtt)
		}
		// property: name=udp_trt, type=INTEGER macro=copy_from_plan_or_state
		if state.SoftLimitAppMetrics != nil {
			body.SoftLimitAppMetrics.UdpTrt = ValueInt64PointerFromPlanOrState(plan.SoftLimitAppMetrics.UdpTrt, state.SoftLimitAppMetrics.UdpTrt)
		} else {
			body.SoftLimitAppMetrics.UdpTrt = Int64ValueOrNil(plan.SoftLimitAppMetrics.UdpTrt)
		}
	}
	// property: name=synthetic_probe_thresholds, type=REFERENCE macro=copy_from_plan_or_state
	if plan.SyntheticProbeThresholds == nil {
		body.SyntheticProbeThresholds = nil
	} else {
		body.SyntheticProbeThresholds = &sdwan_schema.SyntheticProbeThresholds{}
		// copy_from_plan_or_state: body=body.SyntheticProbeThresholds prefix=rsModel state=state.SyntheticProbeThresholds plan=plan.SyntheticProbeThresholds properties=5
		// property: name=dns_txn_failure_pct, type=REFERENCE macro=copy_from_plan_or_state
		if plan.SyntheticProbeThresholds.DnsTxnFailurePct == nil {
			body.SyntheticProbeThresholds.DnsTxnFailurePct = nil
		} else {
			body.SyntheticProbeThresholds.DnsTxnFailurePct = &sdwan_schema.SyntheticProbeThreshold{}
			// copy_from_plan_or_state: body=body.SyntheticProbeThresholds.DnsTxnFailurePct prefix=rsModel state=state.SyntheticProbeThresholds.DnsTxnFailurePct plan=plan.SyntheticProbeThresholds.DnsTxnFailurePct properties=2
			// property: name=probe_config_id, type=STRING macro=copy_from_plan_or_state
			if state.SyntheticProbeThresholds.DnsTxnFailurePct != nil {
				body.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId = ValueStringPointerFromPlanOrState(plan.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId, state.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId)
			} else {
				body.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId = StringValueOrNil(plan.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId)
			}
			// property: name=value, type=INTEGER macro=copy_from_plan_or_state
			if state.SyntheticProbeThresholds.DnsTxnFailurePct != nil {
				body.SyntheticProbeThresholds.DnsTxnFailurePct.Value = ValueInt64PointerFromPlanOrState(plan.SyntheticProbeThresholds.DnsTxnFailurePct.Value, state.SyntheticProbeThresholds.DnsTxnFailurePct.Value)
			} else {
				body.SyntheticProbeThresholds.DnsTxnFailurePct.Value = Int64ValueOrNil(plan.SyntheticProbeThresholds.DnsTxnFailurePct.Value)
			}
		}
		// property: name=init_failure_pct, type=REFERENCE macro=copy_from_plan_or_state
		if plan.SyntheticProbeThresholds.InitFailurePct == nil {
			body.SyntheticProbeThresholds.InitFailurePct = nil
		} else {
			body.SyntheticProbeThresholds.InitFailurePct = &sdwan_schema.SyntheticProbeThreshold{}
			// copy_from_plan_or_state: body=body.SyntheticProbeThresholds.InitFailurePct prefix=rsModel state=state.SyntheticProbeThresholds.InitFailurePct plan=plan.SyntheticProbeThresholds.InitFailurePct properties=2
			// property: name=probe_config_id, type=STRING macro=copy_from_plan_or_state
			if state.SyntheticProbeThresholds.InitFailurePct != nil {
				body.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId = ValueStringPointerFromPlanOrState(plan.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId, state.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId)
			} else {
				body.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId = StringValueOrNil(plan.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId)
			}
			// property: name=value, type=INTEGER macro=copy_from_plan_or_state
			if state.SyntheticProbeThresholds.InitFailurePct != nil {
				body.SyntheticProbeThresholds.InitFailurePct.Value = ValueInt64PointerFromPlanOrState(plan.SyntheticProbeThresholds.InitFailurePct.Value, state.SyntheticProbeThresholds.InitFailurePct.Value)
			} else {
				body.SyntheticProbeThresholds.InitFailurePct.Value = Int64ValueOrNil(plan.SyntheticProbeThresholds.InitFailurePct.Value)
			}
		}
		// property: name=jitter, type=REFERENCE macro=copy_from_plan_or_state
		if plan.SyntheticProbeThresholds.Jitter == nil {
			body.SyntheticProbeThresholds.Jitter = nil
		} else {
			body.SyntheticProbeThresholds.Jitter = &sdwan_schema.SyntheticProbeThreshold{}
			// copy_from_plan_or_state: body=body.SyntheticProbeThresholds.Jitter prefix=rsModel state=state.SyntheticProbeThresholds.Jitter plan=plan.SyntheticProbeThresholds.Jitter properties=2
			// property: name=probe_config_id, type=STRING macro=copy_from_plan_or_state
			if state.SyntheticProbeThresholds.Jitter != nil {
				body.SyntheticProbeThresholds.Jitter.ProbeConfigId = ValueStringPointerFromPlanOrState(plan.SyntheticProbeThresholds.Jitter.ProbeConfigId, state.SyntheticProbeThresholds.Jitter.ProbeConfigId)
			} else {
				body.SyntheticProbeThresholds.Jitter.ProbeConfigId = StringValueOrNil(plan.SyntheticProbeThresholds.Jitter.ProbeConfigId)
			}
			// property: name=value, type=INTEGER macro=copy_from_plan_or_state
			if state.SyntheticProbeThresholds.Jitter != nil {
				body.SyntheticProbeThresholds.Jitter.Value = ValueInt64PointerFromPlanOrState(plan.SyntheticProbeThresholds.Jitter.Value, state.SyntheticProbeThresholds.Jitter.Value)
			} else {
				body.SyntheticProbeThresholds.Jitter.Value = Int64ValueOrNil(plan.SyntheticProbeThresholds.Jitter.Value)
			}
		}
		// property: name=latency, type=REFERENCE macro=copy_from_plan_or_state
		if plan.SyntheticProbeThresholds.Latency == nil {
			body.SyntheticProbeThresholds.Latency = nil
		} else {
			body.SyntheticProbeThresholds.Latency = &sdwan_schema.SyntheticProbeThreshold{}
			// copy_from_plan_or_state: body=body.SyntheticProbeThresholds.Latency prefix=rsModel state=state.SyntheticProbeThresholds.Latency plan=plan.SyntheticProbeThresholds.Latency properties=2
			// property: name=probe_config_id, type=STRING macro=copy_from_plan_or_state
			if state.SyntheticProbeThresholds.Latency != nil {
				body.SyntheticProbeThresholds.Latency.ProbeConfigId = ValueStringPointerFromPlanOrState(plan.SyntheticProbeThresholds.Latency.ProbeConfigId, state.SyntheticProbeThresholds.Latency.ProbeConfigId)
			} else {
				body.SyntheticProbeThresholds.Latency.ProbeConfigId = StringValueOrNil(plan.SyntheticProbeThresholds.Latency.ProbeConfigId)
			}
			// property: name=value, type=INTEGER macro=copy_from_plan_or_state
			if state.SyntheticProbeThresholds.Latency != nil {
				body.SyntheticProbeThresholds.Latency.Value = ValueInt64PointerFromPlanOrState(plan.SyntheticProbeThresholds.Latency.Value, state.SyntheticProbeThresholds.Latency.Value)
			} else {
				body.SyntheticProbeThresholds.Latency.Value = Int64ValueOrNil(plan.SyntheticProbeThresholds.Latency.Value)
			}
		}
		// property: name=packet_loss, type=REFERENCE macro=copy_from_plan_or_state
		if plan.SyntheticProbeThresholds.PacketLoss == nil {
			body.SyntheticProbeThresholds.PacketLoss = nil
		} else {
			body.SyntheticProbeThresholds.PacketLoss = &sdwan_schema.SyntheticProbeThreshold{}
			// copy_from_plan_or_state: body=body.SyntheticProbeThresholds.PacketLoss prefix=rsModel state=state.SyntheticProbeThresholds.PacketLoss plan=plan.SyntheticProbeThresholds.PacketLoss properties=2
			// property: name=probe_config_id, type=STRING macro=copy_from_plan_or_state
			if state.SyntheticProbeThresholds.PacketLoss != nil {
				body.SyntheticProbeThresholds.PacketLoss.ProbeConfigId = ValueStringPointerFromPlanOrState(plan.SyntheticProbeThresholds.PacketLoss.ProbeConfigId, state.SyntheticProbeThresholds.PacketLoss.ProbeConfigId)
			} else {
				body.SyntheticProbeThresholds.PacketLoss.ProbeConfigId = StringValueOrNil(plan.SyntheticProbeThresholds.PacketLoss.ProbeConfigId)
			}
			// property: name=value, type=INTEGER macro=copy_from_plan_or_state
			if state.SyntheticProbeThresholds.PacketLoss != nil {
				body.SyntheticProbeThresholds.PacketLoss.Value = ValueInt64PointerFromPlanOrState(plan.SyntheticProbeThresholds.PacketLoss.Value, state.SyntheticProbeThresholds.PacketLoss.Value)
			} else {
				body.SyntheticProbeThresholds.PacketLoss.Value = Int64ValueOrNil(plan.SyntheticProbeThresholds.PacketLoss.Value)
			}
		}
	}
	// property: name=system_health_metrics_thresholds, type=REFERENCE macro=copy_from_plan_or_state
	if plan.SystemHealthMetricsThresholds == nil {
		body.SystemHealthMetricsThresholds = nil
	} else {
		body.SystemHealthMetricsThresholds = &sdwan_schema.SystemHealthMetricsThresholds{}
		// copy_from_plan_or_state: body=body.SystemHealthMetricsThresholds prefix=rsModel state=state.SystemHealthMetricsThresholds plan=plan.SystemHealthMetricsThresholds properties=3
		// property: name=cpu_utilization, type=INTEGER macro=copy_from_plan_or_state
		if state.SystemHealthMetricsThresholds != nil {
			body.SystemHealthMetricsThresholds.CpuUtilization = ValueInt64PointerFromPlanOrState(plan.SystemHealthMetricsThresholds.CpuUtilization, state.SystemHealthMetricsThresholds.CpuUtilization)
		} else {
			body.SystemHealthMetricsThresholds.CpuUtilization = Int64ValueOrNil(plan.SystemHealthMetricsThresholds.CpuUtilization)
		}
		// property: name=disk_utilization, type=INTEGER macro=copy_from_plan_or_state
		if state.SystemHealthMetricsThresholds != nil {
			body.SystemHealthMetricsThresholds.DiskUtilization = ValueInt64PointerFromPlanOrState(plan.SystemHealthMetricsThresholds.DiskUtilization, state.SystemHealthMetricsThresholds.DiskUtilization)
		} else {
			body.SystemHealthMetricsThresholds.DiskUtilization = Int64ValueOrNil(plan.SystemHealthMetricsThresholds.DiskUtilization)
		}
		// property: name=memory_utilization, type=INTEGER macro=copy_from_plan_or_state
		if state.SystemHealthMetricsThresholds != nil {
			body.SystemHealthMetricsThresholds.MemoryUtilization = ValueInt64PointerFromPlanOrState(plan.SystemHealthMetricsThresholds.MemoryUtilization, state.SystemHealthMetricsThresholds.MemoryUtilization)
		} else {
			body.SystemHealthMetricsThresholds.MemoryUtilization = Int64ValueOrNil(plan.SystemHealthMetricsThresholds.MemoryUtilization)
		}
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct PerfMgmtThresholdProfileScreenV2N1 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	request_body_string, _ = sjson.Delete(request_body_string, "is_default")
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_performance_profile", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_performance_profile",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_performance_profile", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_performance_profile",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_performance_profile", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.PerfMgmtThresholdProfileScreenV2N1
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PerfMgmtThresholdProfileScreenV2N1 in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=PerfMgmtThresholdProfileScreenV2N1
	// copy_to_state: state=state prefix=rsModel ans=ans properties=13
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=circuit_utilization_metrics_thresholds, type=REFERENCE macro=copy_to_state
	if ans.CircuitUtilizationMetricsThresholds == nil {
		state.CircuitUtilizationMetricsThresholds = nil
	} else {
		state.CircuitUtilizationMetricsThresholds = &rsModelCircuitUtilizationMetricThresholds{}
		// copy_to_state: state=state.CircuitUtilizationMetricsThresholds prefix=rsModel ans=ans.CircuitUtilizationMetricsThresholds properties=1
		// property: name=percentage_circuit_utilization, type=INTEGER macro=copy_to_state
		state.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization = types.Int64PointerValue(ans.CircuitUtilizationMetricsThresholds.PercentageCircuitUtilization)
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=flow_metrics_thresholds, type=REFERENCE macro=copy_to_state
	if ans.FlowMetricsThresholds == nil {
		state.FlowMetricsThresholds = nil
	} else {
		state.FlowMetricsThresholds = &rsModelFlowMetricThresholds{}
		// copy_to_state: state=state.FlowMetricsThresholds prefix=rsModel ans=ans.FlowMetricsThresholds properties=1
		// property: name=percentage_flow_utilization, type=INTEGER macro=copy_to_state
		state.FlowMetricsThresholds.PercentageFlowUtilization = types.Int64PointerValue(ans.FlowMetricsThresholds.PercentageFlowUtilization)
	}
	// property: name=hard_limit_app_metrics, type=REFERENCE macro=copy_to_state
	if ans.HardLimitAppMetrics == nil {
		state.HardLimitAppMetrics = nil
	} else {
		state.HardLimitAppMetrics = &rsModelStaticAppMetricConfigV2N1{}
		// copy_to_state: state=state.HardLimitAppMetrics prefix=rsModel ans=ans.HardLimitAppMetrics properties=3
		// property: name=max_init_failure_rate, type=INTEGER macro=copy_to_state
		state.HardLimitAppMetrics.MaxInitFailureRate = types.Int64PointerValue(ans.HardLimitAppMetrics.MaxInitFailureRate)
		// property: name=max_rtt, type=INTEGER macro=copy_to_state
		state.HardLimitAppMetrics.MaxRtt = types.Int64PointerValue(ans.HardLimitAppMetrics.MaxRtt)
		// property: name=udp_trt, type=INTEGER macro=copy_to_state
		state.HardLimitAppMetrics.UdpTrt = types.Int64PointerValue(ans.HardLimitAppMetrics.UdpTrt)
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=lqm_thresholds, type=REFERENCE macro=copy_to_state
	if ans.LqmThresholds == nil {
		state.LqmThresholds = nil
	} else {
		state.LqmThresholds = &rsModelLQMThresholdConfigV2N1{}
		// copy_to_state: state=state.LqmThresholds prefix=rsModel ans=ans.LqmThresholds properties=4
		// property: name=max_jitter, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MaxJitter = types.Int64PointerValue(ans.LqmThresholds.MaxJitter)
		// property: name=max_latency, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MaxLatency = types.Int64PointerValue(ans.LqmThresholds.MaxLatency)
		// property: name=max_packet_loss, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MaxPacketLoss = types.Int64PointerValue(ans.LqmThresholds.MaxPacketLoss)
		// property: name=min_mos, type=INTEGER macro=copy_to_state
		state.LqmThresholds.MinMos = types.Int64PointerValue(ans.LqmThresholds.MinMos)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=soft_limit_app_metrics, type=REFERENCE macro=copy_to_state
	if ans.SoftLimitAppMetrics == nil {
		state.SoftLimitAppMetrics = nil
	} else {
		state.SoftLimitAppMetrics = &rsModelStaticAppMetricConfigV2N1{}
		// copy_to_state: state=state.SoftLimitAppMetrics prefix=rsModel ans=ans.SoftLimitAppMetrics properties=3
		// property: name=max_init_failure_rate, type=INTEGER macro=copy_to_state
		state.SoftLimitAppMetrics.MaxInitFailureRate = types.Int64PointerValue(ans.SoftLimitAppMetrics.MaxInitFailureRate)
		// property: name=max_rtt, type=INTEGER macro=copy_to_state
		state.SoftLimitAppMetrics.MaxRtt = types.Int64PointerValue(ans.SoftLimitAppMetrics.MaxRtt)
		// property: name=udp_trt, type=INTEGER macro=copy_to_state
		state.SoftLimitAppMetrics.UdpTrt = types.Int64PointerValue(ans.SoftLimitAppMetrics.UdpTrt)
	}
	// property: name=synthetic_probe_thresholds, type=REFERENCE macro=copy_to_state
	if ans.SyntheticProbeThresholds == nil {
		state.SyntheticProbeThresholds = nil
	} else {
		state.SyntheticProbeThresholds = &rsModelSyntheticProbeThresholds{}
		// copy_to_state: state=state.SyntheticProbeThresholds prefix=rsModel ans=ans.SyntheticProbeThresholds properties=5
		// property: name=dns_txn_failure_pct, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.DnsTxnFailurePct == nil {
			state.SyntheticProbeThresholds.DnsTxnFailurePct = nil
		} else {
			state.SyntheticProbeThresholds.DnsTxnFailurePct = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.DnsTxnFailurePct prefix=rsModel ans=ans.SyntheticProbeThresholds.DnsTxnFailurePct properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.DnsTxnFailurePct.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.DnsTxnFailurePct.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.DnsTxnFailurePct.Value)
		}
		// property: name=init_failure_pct, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.InitFailurePct == nil {
			state.SyntheticProbeThresholds.InitFailurePct = nil
		} else {
			state.SyntheticProbeThresholds.InitFailurePct = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.InitFailurePct prefix=rsModel ans=ans.SyntheticProbeThresholds.InitFailurePct properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.InitFailurePct.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.InitFailurePct.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.InitFailurePct.Value)
		}
		// property: name=jitter, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.Jitter == nil {
			state.SyntheticProbeThresholds.Jitter = nil
		} else {
			state.SyntheticProbeThresholds.Jitter = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.Jitter prefix=rsModel ans=ans.SyntheticProbeThresholds.Jitter properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.Jitter.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.Jitter.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.Jitter.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.Jitter.Value)
		}
		// property: name=latency, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.Latency == nil {
			state.SyntheticProbeThresholds.Latency = nil
		} else {
			state.SyntheticProbeThresholds.Latency = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.Latency prefix=rsModel ans=ans.SyntheticProbeThresholds.Latency properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.Latency.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.Latency.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.Latency.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.Latency.Value)
		}
		// property: name=packet_loss, type=REFERENCE macro=copy_to_state
		if ans.SyntheticProbeThresholds.PacketLoss == nil {
			state.SyntheticProbeThresholds.PacketLoss = nil
		} else {
			state.SyntheticProbeThresholds.PacketLoss = &rsModelSyntheticProbeThreshold{}
			// copy_to_state: state=state.SyntheticProbeThresholds.PacketLoss prefix=rsModel ans=ans.SyntheticProbeThresholds.PacketLoss properties=2
			// property: name=probe_config_id, type=STRING macro=copy_to_state
			state.SyntheticProbeThresholds.PacketLoss.ProbeConfigId = types.StringPointerValue(ans.SyntheticProbeThresholds.PacketLoss.ProbeConfigId)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.SyntheticProbeThresholds.PacketLoss.Value = types.Int64PointerValue(ans.SyntheticProbeThresholds.PacketLoss.Value)
		}
	}
	// property: name=system_health_metrics_thresholds, type=REFERENCE macro=copy_to_state
	if ans.SystemHealthMetricsThresholds == nil {
		state.SystemHealthMetricsThresholds = nil
	} else {
		state.SystemHealthMetricsThresholds = &rsModelSystemHealthMetricsThresholds{}
		// copy_to_state: state=state.SystemHealthMetricsThresholds prefix=rsModel ans=ans.SystemHealthMetricsThresholds properties=3
		// property: name=cpu_utilization, type=INTEGER macro=copy_to_state
		state.SystemHealthMetricsThresholds.CpuUtilization = types.Int64PointerValue(ans.SystemHealthMetricsThresholds.CpuUtilization)
		// property: name=disk_utilization, type=INTEGER macro=copy_to_state
		state.SystemHealthMetricsThresholds.DiskUtilization = types.Int64PointerValue(ans.SystemHealthMetricsThresholds.DiskUtilization)
		// property: name=memory_utilization, type=INTEGER macro=copy_to_state
		state.SystemHealthMetricsThresholds.MemoryUtilization = types.Int64PointerValue(ans.SystemHealthMetricsThresholds.MemoryUtilization)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *performanceProfileResource) doDelete(ctx context.Context, state *rsModelPerfMgmtThresholdProfileScreenV2N1, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_performance_profile",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_performance_profile ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_performance_profile"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.1/api/perfmgmtthresholdprofiles/{profile_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["profile_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_performance_profile", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *performanceProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_performance_profile")
	var plan rsModelPerfMgmtThresholdProfileScreenV2N1
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelPerfMgmtThresholdProfileScreenV2N1
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *performanceProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_performance_profile")
	var savestate, state rsModelPerfMgmtThresholdProfileScreenV2N1
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *performanceProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_performance_profile")
	var plan, state rsModelPerfMgmtThresholdProfileScreenV2N1
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *performanceProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_performance_profile")
	var state rsModelPerfMgmtThresholdProfileScreenV2N1
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *performanceProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
