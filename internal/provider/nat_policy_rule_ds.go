package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=6)
// | Computed Resource Name=natpolicysets_natpolicyrules
// +-----------------------------------------------------------------
// | NATPolicyZone HasID=true
// | NATPolicyPool HasID=true
// | BasePolicyPrefixS HasID=true
// | NATAction HasID=false
// | PortRange HasID=false
// | NATPolicyRule HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &natPolicyRuleDataSource{}
	_ datasource.DataSourceWithConfigure = &natPolicyRuleDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewNatPolicyRuleDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewNatPolicyRuleDataSource() datasource.DataSource {
	return &natPolicyRuleDataSource{}
}

type natPolicyRuleDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *natPolicyRuleDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_nat_policy_rule"
}

// Schema defines the schema for this data source.
func (d *natPolicyRuleDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=NATPolicyRule
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=actions, type=ARRAY_REFERENCE macro=rss_schema
			"actions": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=nat_pool_id, type=STRING macro=rss_schema
						"nat_pool_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=nat_pool_id, type=STRING macro=rss_schema
						// property: name=port, type=INTEGER macro=rss_schema
						"port": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=port, type=INTEGER macro=rss_schema
						// property: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
						"protocols": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=type, type=STRING macro=rss_schema
						"type": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=type, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=type, type=STRING macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=destination_ports, type=ARRAY_REFERENCE macro=rss_schema
			"destination_ports": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=from, type=INTEGER macro=rss_schema
						"from": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=from, type=INTEGER macro=rss_schema
						// property: name=to, type=INTEGER macro=rss_schema
						"to": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
			// property: name=destination_prefixes, type=REFERENCE macro=rss_schema
			"destination_prefixes": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// generic x_parameters is added to accomodate path parameters
					"x_parameters": dsschema.MapAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						ElementType: types.StringType,
					},
					// property: name=_etag, type=INTEGER macro=rss_schema
					"x_etag": dsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
					// property: name=_schema, type=INTEGER macro=rss_schema
					"x_schema": dsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
					// property: name=description, type=STRING macro=rss_schema
					"description": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=id, type=STRING macro=rss_schema
					"id": dsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=id, type=STRING macro=rss_schema
					// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"ipv4_prefixes": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"ipv6_prefixes": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=name, type=STRING macro=rss_schema
					"name": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=name, type=STRING macro=rss_schema
					// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
					"tags": dsschema.SetAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=destination_prefixes_id, type=STRING macro=rss_schema
			"destination_prefixes_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=destination_prefixes_id, type=STRING macro=rss_schema
			// property: name=destination_zone, type=REFERENCE macro=rss_schema
			"destination_zone": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// generic x_parameters is added to accomodate path parameters
					"x_parameters": dsschema.MapAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						ElementType: types.StringType,
					},
					// property: name=_etag, type=INTEGER macro=rss_schema
					"x_etag": dsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
					// property: name=_schema, type=INTEGER macro=rss_schema
					"x_schema": dsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
					// property: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
					"default_for_public_interfaces": dsschema.BoolAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
					// property: name=description, type=STRING macro=rss_schema
					"description": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=disabled, type=BOOLEAN macro=rss_schema
					"disabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
					// property: name=disabled_reason, type=STRING macro=rss_schema
					"disabled_reason": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
					// property: name=id, type=STRING macro=rss_schema
					"id": dsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=id, type=STRING macro=rss_schema
					// property: name=inactive, type=BOOLEAN macro=rss_schema
					"inactive": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
					// property: name=inactive_reason, type=STRING macro=rss_schema
					"inactive_reason": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
					// property: name=name, type=STRING macro=rss_schema
					"name": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=name, type=STRING macro=rss_schema
					// property: name=region, type=STRING macro=rss_schema
					"region": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=region, type=STRING macro=rss_schema
					// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
					"tags": dsschema.SetAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=destination_zone_id, type=STRING macro=rss_schema
			"destination_zone_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=destination_zone_id, type=STRING macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=enabled, type=BOOLEAN macro=rss_schema
			"enabled": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=natpolicypools, type=ARRAY_REFERENCE macro=rss_schema
			"natpolicypools": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": dsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=description, type=STRING macro=rss_schema
						"description": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=description, type=STRING macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": dsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
						"tags": dsschema.SetAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=policyset_id, type=STRING macro=rss_schema
			"policyset_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=policyset_id, type=STRING macro=rss_schema
			// property: name=protocol, type=INTEGER macro=rss_schema
			"protocol": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=protocol, type=INTEGER macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=source_ports, type=ARRAY_REFERENCE macro=rss_schema
			"source_ports": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=from, type=INTEGER macro=rss_schema
						"from": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=from, type=INTEGER macro=rss_schema
						// property: name=to, type=INTEGER macro=rss_schema
						"to": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
			// property: name=source_prefixes, type=REFERENCE macro=rss_schema
			"source_prefixes": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// generic x_parameters is added to accomodate path parameters
					"x_parameters": dsschema.MapAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						ElementType: types.StringType,
					},
					// property: name=_etag, type=INTEGER macro=rss_schema
					"x_etag": dsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
					// property: name=_schema, type=INTEGER macro=rss_schema
					"x_schema": dsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
					// property: name=description, type=STRING macro=rss_schema
					"description": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=id, type=STRING macro=rss_schema
					"id": dsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=id, type=STRING macro=rss_schema
					// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"ipv4_prefixes": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"ipv6_prefixes": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=name, type=STRING macro=rss_schema
					"name": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=name, type=STRING macro=rss_schema
					// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
					"tags": dsschema.SetAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=source_prefixes_id, type=STRING macro=rss_schema
			"source_prefixes_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=source_prefixes_id, type=STRING macro=rss_schema
			// property: name=source_zone, type=REFERENCE macro=rss_schema
			"source_zone": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// generic x_parameters is added to accomodate path parameters
					"x_parameters": dsschema.MapAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						ElementType: types.StringType,
					},
					// property: name=_etag, type=INTEGER macro=rss_schema
					"x_etag": dsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
					// property: name=_schema, type=INTEGER macro=rss_schema
					"x_schema": dsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
					// property: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
					"default_for_public_interfaces": dsschema.BoolAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
					// property: name=description, type=STRING macro=rss_schema
					"description": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=disabled, type=BOOLEAN macro=rss_schema
					"disabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
					// property: name=disabled_reason, type=STRING macro=rss_schema
					"disabled_reason": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
					// property: name=id, type=STRING macro=rss_schema
					"id": dsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=id, type=STRING macro=rss_schema
					// property: name=inactive, type=BOOLEAN macro=rss_schema
					"inactive": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
					// property: name=inactive_reason, type=STRING macro=rss_schema
					"inactive_reason": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
					// property: name=name, type=STRING macro=rss_schema
					"name": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=name, type=STRING macro=rss_schema
					// property: name=region, type=STRING macro=rss_schema
					"region": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=region, type=STRING macro=rss_schema
					// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
					"tags": dsschema.SetAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=source_zone_id, type=STRING macro=rss_schema
			"source_zone_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=source_zone_id, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *natPolicyRuleDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *natPolicyRuleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelNATPolicyRule
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_nat_policy_rule",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_policy_rule ID format", "Expected 2 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/natpolicysets/{nat_policy_set_id}/natpolicyrules/{nat_policy_rule_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["nat_policy_set_id"] = &tokens[0]
	params["nat_policy_rule_id"] = &tokens[1]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_nat_policy_rule", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.NATPolicyRule
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATPolicyRule", json_err.Error())
		return
	}

	// lets copy all items into state schema=NATPolicyRule
	// copy_to_state: state=state prefix=dsModel ans=ans properties=26
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Actions == nil {
		state.Actions = nil
	} else if len(ans.Actions) == 0 {
		state.Actions = []dsModelNATAction{}
	} else {
		state.Actions = make([]dsModelNATAction, 0, len(ans.Actions))
		for varLoopActionsIndex, varLoopActions := range ans.Actions {
			// add a new item
			state.Actions = append(state.Actions, dsModelNATAction{})
			// copy_to_state: state=state.Actions[varLoopActionsIndex] prefix=dsModel ans=varLoopActions properties=4
			// property: name=nat_pool_id, type=STRING macro=copy_to_state
			state.Actions[varLoopActionsIndex].NatPoolId = types.StringPointerValue(varLoopActions.NatPoolId)
			// property: name=port, type=INTEGER macro=copy_to_state
			state.Actions[varLoopActionsIndex].Port = types.Int64PointerValue(varLoopActions.Port)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
			varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopActions.Protocols)
			state.Actions[varLoopActionsIndex].Protocols = varProtocols
			resp.Diagnostics.Append(errProtocols.Errors()...)
			// property: name=type, type=STRING macro=copy_to_state
			state.Actions[varLoopActionsIndex].Type = types.StringPointerValue(varLoopActions.Type)
		}
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DestinationPorts == nil {
		state.DestinationPorts = nil
	} else if len(ans.DestinationPorts) == 0 {
		state.DestinationPorts = []dsModelPortRange{}
	} else {
		state.DestinationPorts = make([]dsModelPortRange, 0, len(ans.DestinationPorts))
		for varLoopDestinationPortsIndex, varLoopDestinationPorts := range ans.DestinationPorts {
			// add a new item
			state.DestinationPorts = append(state.DestinationPorts, dsModelPortRange{})
			// copy_to_state: state=state.DestinationPorts[varLoopDestinationPortsIndex] prefix=dsModel ans=varLoopDestinationPorts properties=2
			// property: name=from, type=INTEGER macro=copy_to_state
			state.DestinationPorts[varLoopDestinationPortsIndex].From = types.Int64PointerValue(varLoopDestinationPorts.From)
			// property: name=to, type=INTEGER macro=copy_to_state
			state.DestinationPorts[varLoopDestinationPortsIndex].To = types.Int64PointerValue(varLoopDestinationPorts.To)
		}
	}
	// property: name=destination_prefixes, type=REFERENCE macro=copy_to_state
	if ans.DestinationPrefixes == nil {
		state.DestinationPrefixes = nil
	} else {
		state.DestinationPrefixes = &dsModelBasePolicyPrefixS{}
		// copy_to_state: state=state.DestinationPrefixes prefix=dsModel ans=ans.DestinationPrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DestinationPrefixes.Etag = types.Int64PointerValue(ans.DestinationPrefixes.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DestinationPrefixes.Schema = types.Int64PointerValue(ans.DestinationPrefixes.Schema)
		// property: name=description, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Description = types.StringPointerValue(ans.DestinationPrefixes.Description)
		// property: name=id, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Id = types.StringPointerValue(ans.DestinationPrefixes.Id)
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Ipv4Prefixes)
		state.DestinationPrefixes.Ipv4Prefixes = varIpv4Prefixes
		resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Ipv6Prefixes)
		state.DestinationPrefixes.Ipv6Prefixes = varIpv6Prefixes
		resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
		// property: name=name, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Name = types.StringPointerValue(ans.DestinationPrefixes.Name)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Tags)
		state.DestinationPrefixes.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
	state.DestinationPrefixesId = types.StringPointerValue(ans.DestinationPrefixesId)
	// property: name=destination_zone, type=REFERENCE macro=copy_to_state
	if ans.DestinationZone == nil {
		state.DestinationZone = nil
	} else {
		state.DestinationZone = &dsModelNATPolicyZone{}
		// copy_to_state: state=state.DestinationZone prefix=dsModel ans=ans.DestinationZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DestinationZone.Etag = types.Int64PointerValue(ans.DestinationZone.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DestinationZone.Schema = types.Int64PointerValue(ans.DestinationZone.Schema)
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.DefaultForPublicInterfaces = types.BoolPointerValue(ans.DestinationZone.DefaultForPublicInterfaces)
		// property: name=description, type=STRING macro=copy_to_state
		state.DestinationZone.Description = types.StringPointerValue(ans.DestinationZone.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.Disabled = types.BoolPointerValue(ans.DestinationZone.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.DestinationZone.DisabledReason = types.StringPointerValue(ans.DestinationZone.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.DestinationZone.Id = types.StringPointerValue(ans.DestinationZone.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.Inactive = types.BoolPointerValue(ans.DestinationZone.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.DestinationZone.InactiveReason = types.StringPointerValue(ans.DestinationZone.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.DestinationZone.Name = types.StringPointerValue(ans.DestinationZone.Name)
		// property: name=region, type=STRING macro=copy_to_state
		state.DestinationZone.Region = types.StringPointerValue(ans.DestinationZone.Region)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DestinationZone.Tags)
		state.DestinationZone.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=destination_zone_id, type=STRING macro=copy_to_state
	state.DestinationZoneId = types.StringPointerValue(ans.DestinationZoneId)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=enabled, type=BOOLEAN macro=copy_to_state
	state.Enabled = types.BoolPointerValue(ans.Enabled)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Natpolicypools == nil {
		state.Natpolicypools = nil
	} else if len(ans.Natpolicypools) == 0 {
		state.Natpolicypools = []dsModelNATPolicyPool{}
	} else {
		state.Natpolicypools = make([]dsModelNATPolicyPool, 0, len(ans.Natpolicypools))
		for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range ans.Natpolicypools {
			// add a new item
			state.Natpolicypools = append(state.Natpolicypools, dsModelNATPolicyPool{})
			// copy_to_state: state=state.Natpolicypools[varLoopNatpolicypoolsIndex] prefix=dsModel ans=varLoopNatpolicypools properties=6
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Etag = types.Int64PointerValue(varLoopNatpolicypools.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Schema = types.Int64PointerValue(varLoopNatpolicypools.Schema)
			// property: name=description, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Description = types.StringPointerValue(varLoopNatpolicypools.Description)
			// property: name=id, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Id = types.StringPointerValue(varLoopNatpolicypools.Id)
			// property: name=name, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Name = types.StringPointerValue(varLoopNatpolicypools.Name)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopNatpolicypools.Tags)
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=policyset_id, type=STRING macro=copy_to_state
	state.PolicysetId = types.StringPointerValue(ans.PolicysetId)
	// property: name=protocol, type=INTEGER macro=copy_to_state
	state.Protocol = types.Int64PointerValue(ans.Protocol)
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.SourcePorts == nil {
		state.SourcePorts = nil
	} else if len(ans.SourcePorts) == 0 {
		state.SourcePorts = []dsModelPortRange{}
	} else {
		state.SourcePorts = make([]dsModelPortRange, 0, len(ans.SourcePorts))
		for varLoopSourcePortsIndex, varLoopSourcePorts := range ans.SourcePorts {
			// add a new item
			state.SourcePorts = append(state.SourcePorts, dsModelPortRange{})
			// copy_to_state: state=state.SourcePorts[varLoopSourcePortsIndex] prefix=dsModel ans=varLoopSourcePorts properties=2
			// property: name=from, type=INTEGER macro=copy_to_state
			state.SourcePorts[varLoopSourcePortsIndex].From = types.Int64PointerValue(varLoopSourcePorts.From)
			// property: name=to, type=INTEGER macro=copy_to_state
			state.SourcePorts[varLoopSourcePortsIndex].To = types.Int64PointerValue(varLoopSourcePorts.To)
		}
	}
	// property: name=source_prefixes, type=REFERENCE macro=copy_to_state
	if ans.SourcePrefixes == nil {
		state.SourcePrefixes = nil
	} else {
		state.SourcePrefixes = &dsModelBasePolicyPrefixS{}
		// copy_to_state: state=state.SourcePrefixes prefix=dsModel ans=ans.SourcePrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.SourcePrefixes.Etag = types.Int64PointerValue(ans.SourcePrefixes.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.SourcePrefixes.Schema = types.Int64PointerValue(ans.SourcePrefixes.Schema)
		// property: name=description, type=STRING macro=copy_to_state
		state.SourcePrefixes.Description = types.StringPointerValue(ans.SourcePrefixes.Description)
		// property: name=id, type=STRING macro=copy_to_state
		state.SourcePrefixes.Id = types.StringPointerValue(ans.SourcePrefixes.Id)
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, ans.SourcePrefixes.Ipv4Prefixes)
		state.SourcePrefixes.Ipv4Prefixes = varIpv4Prefixes
		resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, ans.SourcePrefixes.Ipv6Prefixes)
		state.SourcePrefixes.Ipv6Prefixes = varIpv6Prefixes
		resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
		// property: name=name, type=STRING macro=copy_to_state
		state.SourcePrefixes.Name = types.StringPointerValue(ans.SourcePrefixes.Name)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.SourcePrefixes.Tags)
		state.SourcePrefixes.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=source_prefixes_id, type=STRING macro=copy_to_state
	state.SourcePrefixesId = types.StringPointerValue(ans.SourcePrefixesId)
	// property: name=source_zone, type=REFERENCE macro=copy_to_state
	if ans.SourceZone == nil {
		state.SourceZone = nil
	} else {
		state.SourceZone = &dsModelNATPolicyZone{}
		// copy_to_state: state=state.SourceZone prefix=dsModel ans=ans.SourceZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.SourceZone.Etag = types.Int64PointerValue(ans.SourceZone.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.SourceZone.Schema = types.Int64PointerValue(ans.SourceZone.Schema)
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
		state.SourceZone.DefaultForPublicInterfaces = types.BoolPointerValue(ans.SourceZone.DefaultForPublicInterfaces)
		// property: name=description, type=STRING macro=copy_to_state
		state.SourceZone.Description = types.StringPointerValue(ans.SourceZone.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.SourceZone.Disabled = types.BoolPointerValue(ans.SourceZone.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.SourceZone.DisabledReason = types.StringPointerValue(ans.SourceZone.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.SourceZone.Id = types.StringPointerValue(ans.SourceZone.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.SourceZone.Inactive = types.BoolPointerValue(ans.SourceZone.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.SourceZone.InactiveReason = types.StringPointerValue(ans.SourceZone.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.SourceZone.Name = types.StringPointerValue(ans.SourceZone.Name)
		// property: name=region, type=STRING macro=copy_to_state
		state.SourceZone.Region = types.StringPointerValue(ans.SourceZone.Region)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.SourceZone.Tags)
		state.SourceZone.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=source_zone_id, type=STRING macro=copy_to_state
	state.SourceZoneId = types.StringPointerValue(ans.SourceZoneId)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
