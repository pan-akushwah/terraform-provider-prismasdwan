package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=1)
// | Computed Resource Name=sites_elements_ospfglobalconfigs
// +-----------------------------------------------------------------
// | OSPFGlobalConfigScreen HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &elementOspfGlobalConfigResource{}
	_ resource.ResourceWithConfigure   = &elementOspfGlobalConfigResource{}
	_ resource.ResourceWithImportState = &elementOspfGlobalConfigResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewElementOspfGlobalConfigResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewElementOspfGlobalConfigResource() resource.Resource {
	return &elementOspfGlobalConfigResource{}
}

type elementOspfGlobalConfigResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *elementOspfGlobalConfigResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_element_ospf_global_config"
}

// Schema defines the schema for this data source.
func (r *elementOspfGlobalConfigResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=OSPFGlobalConfigScreen
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=cost, type=INTEGER macro=rss_schema
			"cost": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=cost, type=INTEGER macro=rss_schema
			// property: name=dead_interval, type=INTEGER macro=rss_schema
			"dead_interval": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=dead_interval, type=INTEGER macro=rss_schema
			// property: name=hello_interval, type=INTEGER macro=rss_schema
			"hello_interval": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=hello_interval, type=INTEGER macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=md5_key_id, type=INTEGER macro=rss_schema
			"md5_key_id": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=md5_key_id, type=INTEGER macro=rss_schema
			// property: name=md5_secret, type=STRING macro=rss_schema
			"md5_secret": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: true,
			},
			// key name holder for attribute: name=md5_secret, type=STRING macro=rss_schema
			"md5_secret_internal_key_name": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// property: name=prefix_adv_type_to_lan, type=STRING macro=rss_schema
			"prefix_adv_type_to_lan": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=prefix_adv_type_to_lan, type=STRING macro=rss_schema
			// property: name=retransmit_interval, type=INTEGER macro=rss_schema
			"retransmit_interval": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=retransmit_interval, type=INTEGER macro=rss_schema
			// property: name=router_id, type=STRING macro=rss_schema
			"router_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=router_id, type=STRING macro=rss_schema
			// property: name=transmit_delay, type=INTEGER macro=rss_schema
			"transmit_delay": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=transmit_delay, type=INTEGER macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *elementOspfGlobalConfigResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *elementOspfGlobalConfigResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *elementOspfGlobalConfigResource) doGet(ctx context.Context, state *rsModelOSPFGlobalConfigScreen, savestate *rsModelOSPFGlobalConfigScreen, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_element_ospf_global_config",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("error in prismasdwan_element_ospf_global_config ID format", "Expected 3 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/ospfglobalconfigs/{ospf_config_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["ospf_config_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_element_ospf_global_config", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_element_ospf_global_config",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_element_ospf_global_config from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=OSPFGlobalConfigScreen
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.OSPFGlobalConfigScreen
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to OSPFGlobalConfigScreen in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=12
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=cost, type=INTEGER macro=copy_to_state
	state.Cost = types.Int64PointerValue(ans.Cost)
	// property: name=dead_interval, type=INTEGER macro=copy_to_state
	state.DeadInterval = types.Int64PointerValue(ans.DeadInterval)
	// property: name=hello_interval, type=INTEGER macro=copy_to_state
	state.HelloInterval = types.Int64PointerValue(ans.HelloInterval)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=md5_key_id, type=INTEGER macro=copy_to_state
	state.Md5KeyId = types.Int64PointerValue(ans.Md5KeyId)
	// property: name=md5_secret, type=STRING macro=copy_to_state
	encryptedMd5SecretKeyName := state.Md5SecretInternalKeyName.String()
	encryptedMd5SecretValueBytes, _ := resp.Private.GetKey(ctx, encryptedMd5SecretKeyName)
	if encryptedMd5SecretValueBytes != nil {
		decryptedMd5Secret, _ := Decrypt(string(encryptedMd5SecretValueBytes))
		state.Md5Secret = types.StringValue(decryptedMd5Secret)
	}
	// property: name=prefix_adv_type_to_lan, type=STRING macro=copy_to_state
	state.PrefixAdvTypeToLan = types.StringPointerValue(ans.PrefixAdvTypeToLan)
	// property: name=retransmit_interval, type=INTEGER macro=copy_to_state
	state.RetransmitInterval = types.Int64PointerValue(ans.RetransmitInterval)
	// property: name=router_id, type=STRING macro=copy_to_state
	state.RouterId = types.StringPointerValue(ans.RouterId)
	// property: name=transmit_delay, type=INTEGER macro=copy_to_state
	state.TransmitDelay = types.Int64PointerValue(ans.TransmitDelay)
	return true
}

func (r *elementOspfGlobalConfigResource) doPut(ctx context.Context, plan *rsModelOSPFGlobalConfigScreen, state *rsModelOSPFGlobalConfigScreen, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_element_ospf_global_config",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_element_ospf_global_config", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("error in prismasdwan_element_ospf_global_config ID format", "Expected 3 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/ospfglobalconfigs/{ospf_config_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["ospf_config_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.OSPFGlobalConfigScreen{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=12
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=cost, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Cost = ValueInt64PointerFromPlanOrState(plan.Cost, state.Cost)
	} else {
		body.Cost = Int64ValueOrNil(plan.Cost)
	}
	// property: name=dead_interval, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.DeadInterval = ValueInt64PointerFromPlanOrState(plan.DeadInterval, state.DeadInterval)
	} else {
		body.DeadInterval = Int64ValueOrNil(plan.DeadInterval)
	}
	// property: name=hello_interval, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.HelloInterval = ValueInt64PointerFromPlanOrState(plan.HelloInterval, state.HelloInterval)
	} else {
		body.HelloInterval = Int64ValueOrNil(plan.HelloInterval)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=md5_key_id, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Md5KeyId = ValueInt64PointerFromPlanOrState(plan.Md5KeyId, state.Md5KeyId)
	} else {
		body.Md5KeyId = Int64ValueOrNil(plan.Md5KeyId)
	}
	// property: name=md5_secret, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Md5Secret = ValueStringPointerFromPlanOrState(plan.Md5Secret, state.Md5Secret)
	} else {
		body.Md5Secret = StringValueOrNil(plan.Md5Secret)
	}
	// property: name=prefix_adv_type_to_lan, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.PrefixAdvTypeToLan = ValueStringPointerFromPlanOrState(plan.PrefixAdvTypeToLan, state.PrefixAdvTypeToLan)
	} else {
		body.PrefixAdvTypeToLan = StringValueOrNil(plan.PrefixAdvTypeToLan)
	}
	// property: name=retransmit_interval, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.RetransmitInterval = ValueInt64PointerFromPlanOrState(plan.RetransmitInterval, state.RetransmitInterval)
	} else {
		body.RetransmitInterval = Int64ValueOrNil(plan.RetransmitInterval)
	}
	// property: name=router_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.RouterId = ValueStringPointerFromPlanOrState(plan.RouterId, state.RouterId)
	} else {
		body.RouterId = StringValueOrNil(plan.RouterId)
	}
	// property: name=transmit_delay, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.TransmitDelay = ValueInt64PointerFromPlanOrState(plan.TransmitDelay, state.TransmitDelay)
	} else {
		body.TransmitDelay = Int64ValueOrNil(plan.TransmitDelay)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct OSPFGlobalConfigScreen to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_element_ospf_global_config", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_element_ospf_global_config",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_element_ospf_global_config", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_element_ospf_global_config",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_element_ospf_global_config", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.OSPFGlobalConfigScreen
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to OSPFGlobalConfigScreen in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=OSPFGlobalConfigScreen
	// copy_to_state: state=state prefix=rsModel ans=ans properties=12
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=cost, type=INTEGER macro=copy_to_state
	state.Cost = types.Int64PointerValue(ans.Cost)
	// property: name=dead_interval, type=INTEGER macro=copy_to_state
	state.DeadInterval = types.Int64PointerValue(ans.DeadInterval)
	// property: name=hello_interval, type=INTEGER macro=copy_to_state
	state.HelloInterval = types.Int64PointerValue(ans.HelloInterval)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=md5_key_id, type=INTEGER macro=copy_to_state
	state.Md5KeyId = types.Int64PointerValue(ans.Md5KeyId)
	// property: name=md5_secret, type=STRING macro=copy_to_state
	state.Md5Secret = types.StringPointerValue(plan.Md5Secret.ValueStringPointer())
	// this property is sensitive and will be stored in the state's internal key name
	state.Md5SecretInternalKeyName = types.StringValue(GenerateRandomString(16))
	// store value if needed
	if !state.Md5Secret.IsNull() {
		encryptedMd5Secret, _ := Encrypt([]byte(state.Md5Secret.String()))
		resp.Private.SetKey(ctx, state.Md5SecretInternalKeyName.String(), []byte(encryptedMd5Secret))
	}
	// property: name=prefix_adv_type_to_lan, type=STRING macro=copy_to_state
	state.PrefixAdvTypeToLan = types.StringPointerValue(ans.PrefixAdvTypeToLan)
	// property: name=retransmit_interval, type=INTEGER macro=copy_to_state
	state.RetransmitInterval = types.Int64PointerValue(ans.RetransmitInterval)
	// property: name=router_id, type=STRING macro=copy_to_state
	state.RouterId = types.StringPointerValue(ans.RouterId)
	// property: name=transmit_delay, type=INTEGER macro=copy_to_state
	state.TransmitDelay = types.Int64PointerValue(ans.TransmitDelay)
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *elementOspfGlobalConfigResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_element_ospf_global_config")
	var plan rsModelOSPFGlobalConfigScreen
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// this resource does not have a POST call defined, assuming that the PUT call is present and GET call is present
	// path=/sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/ospfglobalconfigs/{ospf_config_id}

	// state in api servers
	var save rsModelOSPFGlobalConfigScreen

	// create a new tfid
	var idBuilder strings.Builder
	params := MapStringValueOrNil(ctx, plan.TfParameters)
	// ensure all parameters are written
	site_id, ok := params["site_id"]
	if !ok {
		resp.Diagnostics.AddError("could not find site_id in x_parameters", "missing parameter")
		return
	}
	idBuilder.WriteString("site_id")
	idBuilder.WriteString("=")
	idBuilder.WriteString(*site_id)
	idBuilder.WriteString(IdSeparator)
	element_id, ok := params["element_id"]
	if !ok {
		resp.Diagnostics.AddError("could not find element_id in x_parameters", "missing parameter")
		return
	}
	idBuilder.WriteString("element_id")
	idBuilder.WriteString("=")
	idBuilder.WriteString(*element_id)
	idBuilder.WriteString(IdSeparator)
	ospf_config_id, ok := params["ospf_config_id"]
	if !ok {
		resp.Diagnostics.AddError("could not find ospf_config_id in x_parameters", "missing parameter")
		return
	}
	idBuilder.WriteString("ospf_config_id")
	idBuilder.WriteString("=")
	idBuilder.WriteString(*ospf_config_id)
	// both TFID MUST MATCH!
	plan.Tfid = types.StringValue(idBuilder.String())
	save.Tfid = types.StringValue(idBuilder.String())
	// make a get call instead
	gResp := resource.ReadResponse{
		Private:     resp.Private,
		Diagnostics: resp.Diagnostics,
	}
	if r.doGet(ctx, &save, &plan, &resp.State, &gResp) {
		// make a put to override
		uResp := resource.UpdateResponse{
			Private:     resp.Private,
			Diagnostics: resp.Diagnostics,
		}
		if r.doPut(ctx, &plan, &save, &resp.State, &uResp) {
			// push into state
			resp.Diagnostics.Append(resp.State.Set(ctx, &save)...)
		}
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *elementOspfGlobalConfigResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_element_ospf_global_config")
	var savestate, state rsModelOSPFGlobalConfigScreen
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *elementOspfGlobalConfigResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_element_ospf_global_config")
	var plan, state rsModelOSPFGlobalConfigScreen
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *elementOspfGlobalConfigResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_element_ospf_global_config")
	// some resources are auto deleted
	resp.State.RemoveResource(ctx)
}

func (r *elementOspfGlobalConfigResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
