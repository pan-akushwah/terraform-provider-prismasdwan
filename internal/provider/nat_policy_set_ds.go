package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=7)
// | Computed Resource Name=natpolicysets
// +-----------------------------------------------------------------
// | NATPolicyZone HasID=true
// | NATPolicyPool HasID=true
// | BasePolicyPrefixS HasID=true
// | NATAction HasID=false
// | PortRange HasID=false
// | NATPolicyRule HasID=true
// | NATPolicySet HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &natPolicySetDataSource{}
	_ datasource.DataSourceWithConfigure = &natPolicySetDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewNatPolicySetDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewNatPolicySetDataSource() datasource.DataSource {
	return &natPolicySetDataSource{}
}

type natPolicySetDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *natPolicySetDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_nat_policy_set"
}

// Schema defines the schema for this data source.
func (d *natPolicySetDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=NATPolicySet
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=clone_from, type=STRING macro=rss_schema
			"clone_from": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=clone_from, type=STRING macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=destination_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=rss_schema
			"destination_zone_policyrule_order": dsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=destination_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=policy_req_version, type=STRING macro=rss_schema
			"policy_req_version": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=policy_req_version, type=STRING macro=rss_schema
			// property: name=policy_rules, type=ARRAY_REFERENCE macro=rss_schema
			"policy_rules": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": dsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=actions, type=ARRAY_REFERENCE macro=rss_schema
						"actions": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=nat_pool_id, type=STRING macro=rss_schema
									"nat_pool_id": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=nat_pool_id, type=STRING macro=rss_schema
									// property: name=port, type=INTEGER macro=rss_schema
									"port": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=port, type=INTEGER macro=rss_schema
									// property: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
									"protocols": dsschema.ListAttribute{
										Required:    false,
										Computed:    false,
										Optional:    true,
										Sensitive:   false,
										ElementType: types.StringType,
									},
									// key name holder for attribute: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
									// property: name=type, type=STRING macro=rss_schema
									"type": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=type, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=type, type=STRING macro=rss_schema
						// property: name=description, type=STRING macro=rss_schema
						"description": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=description, type=STRING macro=rss_schema
						// property: name=destination_ports, type=ARRAY_REFERENCE macro=rss_schema
						"destination_ports": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=from, type=INTEGER macro=rss_schema
									"from": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=from, type=INTEGER macro=rss_schema
									// property: name=to, type=INTEGER macro=rss_schema
									"to": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
						// property: name=destination_prefixes, type=REFERENCE macro=rss_schema
						"destination_prefixes": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// generic x_parameters is added to accomodate path parameters
								"x_parameters": dsschema.MapAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									ElementType: types.StringType,
								},
								// property: name=_etag, type=INTEGER macro=rss_schema
								"x_etag": dsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
								// property: name=_schema, type=INTEGER macro=rss_schema
								"x_schema": dsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
								// property: name=description, type=STRING macro=rss_schema
								"description": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=description, type=STRING macro=rss_schema
								// property: name=id, type=STRING macro=rss_schema
								"id": dsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=id, type=STRING macro=rss_schema
								// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								"ipv4_prefixes": dsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								"ipv6_prefixes": dsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=name, type=STRING macro=rss_schema
								"name": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=name, type=STRING macro=rss_schema
								// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
								"tags": dsschema.SetAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=destination_prefixes_id, type=STRING macro=rss_schema
						"destination_prefixes_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=destination_prefixes_id, type=STRING macro=rss_schema
						// property: name=destination_zone, type=REFERENCE macro=rss_schema
						"destination_zone": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// generic x_parameters is added to accomodate path parameters
								"x_parameters": dsschema.MapAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									ElementType: types.StringType,
								},
								// property: name=_etag, type=INTEGER macro=rss_schema
								"x_etag": dsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
								// property: name=_schema, type=INTEGER macro=rss_schema
								"x_schema": dsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
								// property: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
								"default_for_public_interfaces": dsschema.BoolAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
								// property: name=description, type=STRING macro=rss_schema
								"description": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=description, type=STRING macro=rss_schema
								// property: name=disabled, type=BOOLEAN macro=rss_schema
								"disabled": dsschema.BoolAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
								// property: name=disabled_reason, type=STRING macro=rss_schema
								"disabled_reason": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
								// property: name=id, type=STRING macro=rss_schema
								"id": dsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=id, type=STRING macro=rss_schema
								// property: name=inactive, type=BOOLEAN macro=rss_schema
								"inactive": dsschema.BoolAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
								// property: name=inactive_reason, type=STRING macro=rss_schema
								"inactive_reason": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
								// property: name=name, type=STRING macro=rss_schema
								"name": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=name, type=STRING macro=rss_schema
								// property: name=region, type=STRING macro=rss_schema
								"region": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=region, type=STRING macro=rss_schema
								// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
								"tags": dsschema.SetAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=destination_zone_id, type=STRING macro=rss_schema
						"destination_zone_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=destination_zone_id, type=STRING macro=rss_schema
						// property: name=disabled, type=BOOLEAN macro=rss_schema
						"disabled": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
						// property: name=disabled_reason, type=STRING macro=rss_schema
						"disabled_reason": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
						// property: name=enabled, type=BOOLEAN macro=rss_schema
						"enabled": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": dsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=inactive, type=BOOLEAN macro=rss_schema
						"inactive": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
						// property: name=inactive_reason, type=STRING macro=rss_schema
						"inactive_reason": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=natpolicypools, type=ARRAY_REFERENCE macro=rss_schema
						"natpolicypools": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// generic x_parameters is added to accomodate path parameters
									"x_parameters": dsschema.MapAttribute{
										Required:    false,
										Computed:    false,
										Optional:    true,
										ElementType: types.StringType,
									},
									// property: name=_etag, type=INTEGER macro=rss_schema
									"x_etag": dsschema.Int64Attribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
									// property: name=_schema, type=INTEGER macro=rss_schema
									"x_schema": dsschema.Int64Attribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
									// property: name=description, type=STRING macro=rss_schema
									"description": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=description, type=STRING macro=rss_schema
									// property: name=id, type=STRING macro=rss_schema
									"id": dsschema.StringAttribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=id, type=STRING macro=rss_schema
									// property: name=name, type=STRING macro=rss_schema
									"name": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=name, type=STRING macro=rss_schema
									// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
									"tags": dsschema.SetAttribute{
										Required:    false,
										Computed:    false,
										Optional:    true,
										Sensitive:   false,
										ElementType: types.StringType,
									},
									// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=policyset_id, type=STRING macro=rss_schema
						"policyset_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=policyset_id, type=STRING macro=rss_schema
						// property: name=protocol, type=INTEGER macro=rss_schema
						"protocol": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=protocol, type=INTEGER macro=rss_schema
						// property: name=region, type=STRING macro=rss_schema
						"region": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=region, type=STRING macro=rss_schema
						// property: name=source_ports, type=ARRAY_REFERENCE macro=rss_schema
						"source_ports": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=from, type=INTEGER macro=rss_schema
									"from": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=from, type=INTEGER macro=rss_schema
									// property: name=to, type=INTEGER macro=rss_schema
									"to": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
						// property: name=source_prefixes, type=REFERENCE macro=rss_schema
						"source_prefixes": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// generic x_parameters is added to accomodate path parameters
								"x_parameters": dsschema.MapAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									ElementType: types.StringType,
								},
								// property: name=_etag, type=INTEGER macro=rss_schema
								"x_etag": dsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
								// property: name=_schema, type=INTEGER macro=rss_schema
								"x_schema": dsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
								// property: name=description, type=STRING macro=rss_schema
								"description": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=description, type=STRING macro=rss_schema
								// property: name=id, type=STRING macro=rss_schema
								"id": dsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=id, type=STRING macro=rss_schema
								// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								"ipv4_prefixes": dsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								"ipv6_prefixes": dsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=name, type=STRING macro=rss_schema
								"name": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=name, type=STRING macro=rss_schema
								// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
								"tags": dsschema.SetAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=source_prefixes_id, type=STRING macro=rss_schema
						"source_prefixes_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=source_prefixes_id, type=STRING macro=rss_schema
						// property: name=source_zone, type=REFERENCE macro=rss_schema
						"source_zone": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// generic x_parameters is added to accomodate path parameters
								"x_parameters": dsschema.MapAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									ElementType: types.StringType,
								},
								// property: name=_etag, type=INTEGER macro=rss_schema
								"x_etag": dsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
								// property: name=_schema, type=INTEGER macro=rss_schema
								"x_schema": dsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
								// property: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
								"default_for_public_interfaces": dsschema.BoolAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
								// property: name=description, type=STRING macro=rss_schema
								"description": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=description, type=STRING macro=rss_schema
								// property: name=disabled, type=BOOLEAN macro=rss_schema
								"disabled": dsschema.BoolAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
								// property: name=disabled_reason, type=STRING macro=rss_schema
								"disabled_reason": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
								// property: name=id, type=STRING macro=rss_schema
								"id": dsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=id, type=STRING macro=rss_schema
								// property: name=inactive, type=BOOLEAN macro=rss_schema
								"inactive": dsschema.BoolAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
								// property: name=inactive_reason, type=STRING macro=rss_schema
								"inactive_reason": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
								// property: name=name, type=STRING macro=rss_schema
								"name": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=name, type=STRING macro=rss_schema
								// property: name=region, type=STRING macro=rss_schema
								"region": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=region, type=STRING macro=rss_schema
								// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
								"tags": dsschema.SetAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=source_zone_id, type=STRING macro=rss_schema
						"source_zone_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=source_zone_id, type=STRING macro=rss_schema
						// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
						"tags": dsschema.SetAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=send_to_element, type=BOOLEAN macro=rss_schema
			"send_to_element": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=send_to_element, type=BOOLEAN macro=rss_schema
			// property: name=source_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=rss_schema
			"source_zone_policyrule_order": dsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=source_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=update_order, type=BOOLEAN macro=rss_schema
			"update_order": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=update_order, type=BOOLEAN macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *natPolicySetDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *natPolicySetDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelNATPolicySet
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_nat_policy_set",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 1 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_policy_set ID format", "Expected 1 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/natpolicysets/{nat_policy_set_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["nat_policy_set_id"] = &tokens[0]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_nat_policy_set", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.NATPolicySet
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATPolicySet", json_err.Error())
		return
	}

	// lets copy all items into state schema=NATPolicySet
	// copy_to_state: state=state prefix=dsModel ans=ans properties=18
	tflog.Debug(ctx, "copy_to_state state=state prefix=dsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=destination_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDestinationZonePolicyruleOrder, errDestinationZonePolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.DestinationZonePolicyruleOrder)
	state.DestinationZonePolicyruleOrder = varDestinationZonePolicyruleOrder
	resp.Diagnostics.Append(errDestinationZonePolicyruleOrder.Errors()...)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policy_req_version, type=STRING macro=copy_to_state
	state.PolicyReqVersion = types.StringPointerValue(ans.PolicyReqVersion)
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PolicyRules == nil {
		state.PolicyRules = nil
	} else if len(ans.PolicyRules) == 0 {
		state.PolicyRules = []dsModelNATPolicyRule{}
	} else {
		state.PolicyRules = make([]dsModelNATPolicyRule, 0, len(ans.PolicyRules))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.PolicyRules {
			// add a new item
			state.PolicyRules = append(state.PolicyRules, dsModelNATPolicyRule{})
			// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=dsModel ans=varLoopPolicyRules properties=26
			tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=dsModel ans=varLoopPolicyRules")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.Actions == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = nil
			} else if len(varLoopPolicyRules.Actions) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = []dsModelNATAction{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = make([]dsModelNATAction, 0, len(varLoopPolicyRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopPolicyRules.Actions {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].Actions = append(state.PolicyRules[varLoopPolicyRulesIndex].Actions, dsModelNATAction{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex] prefix=dsModel ans=varLoopActions properties=4
					tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex] prefix=dsModel ans=varLoopActions")
					// property: name=nat_pool_id, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].NatPoolId = types.StringPointerValue(varLoopActions.NatPoolId)
					// property: name=port, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Port = types.Int64PointerValue(varLoopActions.Port)
					// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
					varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopActions.Protocols)
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Protocols = varProtocols
					resp.Diagnostics.Append(errProtocols.Errors()...)
					// property: name=type, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Type = types.StringPointerValue(varLoopActions.Type)
				}
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
			// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationPorts == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = nil
			} else if len(varLoopPolicyRules.DestinationPorts) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = []dsModelPortRange{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = make([]dsModelPortRange, 0, len(varLoopPolicyRules.DestinationPorts))
				for varLoopDestinationPortsIndex, varLoopDestinationPorts := range varLoopPolicyRules.DestinationPorts {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = append(state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts, dsModelPortRange{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex] prefix=dsModel ans=varLoopDestinationPorts properties=2
					tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex] prefix=dsModel ans=varLoopDestinationPorts")
					// property: name=from, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].From = types.Int64PointerValue(varLoopDestinationPorts.From)
					// property: name=to, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].To = types.Int64PointerValue(varLoopDestinationPorts.To)
				}
			}
			// property: name=destination_prefixes, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationPrefixes == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes = &dsModelBasePolicyPrefixS{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes prefix=dsModel ans=varLoopPolicyRules.DestinationPrefixes properties=8
				tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes prefix=dsModel ans=varLoopPolicyRules.DestinationPrefixes")
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Etag = types.Int64PointerValue(varLoopPolicyRules.DestinationPrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Schema = types.Int64PointerValue(varLoopPolicyRules.DestinationPrefixes.Schema)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Description = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Description)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Id = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Ipv4Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv4Prefixes = varIpv4Prefixes
				resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Ipv6Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv6Prefixes = varIpv6Prefixes
				resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Name = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixesId)
			// property: name=destination_zone, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationZone == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone = &dsModelNATPolicyZone{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone prefix=dsModel ans=varLoopPolicyRules.DestinationZone properties=12
				tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone prefix=dsModel ans=varLoopPolicyRules.DestinationZone")
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Etag = types.Int64PointerValue(varLoopPolicyRules.DestinationZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Schema = types.Int64PointerValue(varLoopPolicyRules.DestinationZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DefaultForPublicInterfaces = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Description = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Disabled = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DisabledReason = types.StringPointerValue(varLoopPolicyRules.DestinationZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Id = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Inactive = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.InactiveReason = types.StringPointerValue(varLoopPolicyRules.DestinationZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Name = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Name)
				// property: name=region, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Region = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationZone.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=destination_zone_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DestinationZoneId = types.StringPointerValue(varLoopPolicyRules.DestinationZoneId)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Disabled = types.BoolPointerValue(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = types.StringPointerValue(varLoopPolicyRules.DisabledReason)
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Enabled = types.BoolPointerValue(varLoopPolicyRules.Enabled)
			// property: name=id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Inactive = types.BoolPointerValue(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = types.StringPointerValue(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
			// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.Natpolicypools == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = nil
			} else if len(varLoopPolicyRules.Natpolicypools) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = []dsModelNATPolicyPool{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = make([]dsModelNATPolicyPool, 0, len(varLoopPolicyRules.Natpolicypools))
				for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range varLoopPolicyRules.Natpolicypools {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = append(state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools, dsModelNATPolicyPool{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex] prefix=dsModel ans=varLoopNatpolicypools properties=6
					tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex] prefix=dsModel ans=varLoopNatpolicypools")
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Etag = types.Int64PointerValue(varLoopNatpolicypools.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Schema = types.Int64PointerValue(varLoopNatpolicypools.Schema)
					// property: name=description, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Description = types.StringPointerValue(varLoopNatpolicypools.Description)
					// property: name=id, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Id = types.StringPointerValue(varLoopNatpolicypools.Id)
					// property: name=name, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Name = types.StringPointerValue(varLoopNatpolicypools.Name)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
					varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopNatpolicypools.Tags)
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Tags = varTags
					resp.Diagnostics.Append(errTags.Errors()...)
				}
			}
			// property: name=policyset_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = types.StringPointerValue(varLoopPolicyRules.PolicysetId)
			// property: name=protocol, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Protocol = types.Int64PointerValue(varLoopPolicyRules.Protocol)
			// property: name=region, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Region = types.StringPointerValue(varLoopPolicyRules.Region)
			// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourcePorts == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = nil
			} else if len(varLoopPolicyRules.SourcePorts) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = []dsModelPortRange{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = make([]dsModelPortRange, 0, len(varLoopPolicyRules.SourcePorts))
				for varLoopSourcePortsIndex, varLoopSourcePorts := range varLoopPolicyRules.SourcePorts {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = append(state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts, dsModelPortRange{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex] prefix=dsModel ans=varLoopSourcePorts properties=2
					tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex] prefix=dsModel ans=varLoopSourcePorts")
					// property: name=from, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].From = types.Int64PointerValue(varLoopSourcePorts.From)
					// property: name=to, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].To = types.Int64PointerValue(varLoopSourcePorts.To)
				}
			}
			// property: name=source_prefixes, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourcePrefixes == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes = &dsModelBasePolicyPrefixS{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes prefix=dsModel ans=varLoopPolicyRules.SourcePrefixes properties=8
				tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes prefix=dsModel ans=varLoopPolicyRules.SourcePrefixes")
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Etag = types.Int64PointerValue(varLoopPolicyRules.SourcePrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Schema = types.Int64PointerValue(varLoopPolicyRules.SourcePrefixes.Schema)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Description = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Description)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Id = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Ipv4Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv4Prefixes = varIpv4Prefixes
				resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Ipv6Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv6Prefixes = varIpv6Prefixes
				resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Name = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=source_prefixes_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = types.StringPointerValue(varLoopPolicyRules.SourcePrefixesId)
			// property: name=source_zone, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourceZone == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone = &dsModelNATPolicyZone{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourceZone prefix=dsModel ans=varLoopPolicyRules.SourceZone properties=12
				tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].SourceZone prefix=dsModel ans=varLoopPolicyRules.SourceZone")
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Etag = types.Int64PointerValue(varLoopPolicyRules.SourceZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Schema = types.Int64PointerValue(varLoopPolicyRules.SourceZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DefaultForPublicInterfaces = types.BoolPointerValue(varLoopPolicyRules.SourceZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Description = types.StringPointerValue(varLoopPolicyRules.SourceZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Disabled = types.BoolPointerValue(varLoopPolicyRules.SourceZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DisabledReason = types.StringPointerValue(varLoopPolicyRules.SourceZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Id = types.StringPointerValue(varLoopPolicyRules.SourceZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Inactive = types.BoolPointerValue(varLoopPolicyRules.SourceZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.InactiveReason = types.StringPointerValue(varLoopPolicyRules.SourceZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Name = types.StringPointerValue(varLoopPolicyRules.SourceZone.Name)
				// property: name=region, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Region = types.StringPointerValue(varLoopPolicyRules.SourceZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.SourceZone.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=source_zone_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].SourceZoneId = types.StringPointerValue(varLoopPolicyRules.SourceZoneId)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
			state.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
	state.SendToElement = types.BoolPointerValue(ans.SendToElement)
	// property: name=source_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varSourceZonePolicyruleOrder, errSourceZonePolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.SourceZonePolicyruleOrder)
	state.SourceZonePolicyruleOrder = varSourceZonePolicyruleOrder
	resp.Diagnostics.Append(errSourceZonePolicyruleOrder.Errors()...)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=update_order, type=BOOLEAN macro=copy_to_state
	state.UpdateOrder = types.BoolPointerValue(ans.UpdateOrder)

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
