package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	nSFnnqb "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/lqmconfig"
	rIUJWmK "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/vpnlink/configuration"
	uAgupQd "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/waninterface/screen/v2/n8"
	qRlmEFd "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/wanl3/reachability"
	ccUusFA "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v28/api/sites/siteid/waninterfaces"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &wanInterfaceListDataSource{}
	_ datasource.DataSourceWithConfigure = &wanInterfaceListDataSource{}
)

func NewWanInterfaceListDataSource() datasource.DataSource {
	return &wanInterfaceListDataSource{}
}

type wanInterfaceListDataSource struct {
	client *sdwan.Client
}

// wanInterfaceListDsModel is the model.
type wanInterfaceListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	SiteId types.String `tfsdk:"site_id"`

	// Output.
	Items      []wanInterfaceListDsModel_uAgupQd_Config `tfsdk:"items"`
	TotalItems types.Int64                              `tfsdk:"total_items"`
}

type wanInterfaceListDsModel_uAgupQd_Config struct {
	BfdMode                             types.String                            `tfsdk:"bfd_mode"`
	BwConfigMode                        types.String                            `tfsdk:"bw_config_mode"`
	BwcEnabled                          types.Bool                              `tfsdk:"bwc_enabled"`
	Cost                                types.Int64                             `tfsdk:"cost"`
	Description                         types.String                            `tfsdk:"description"`
	Etag                                types.Int64                             `tfsdk:"etag"`
	Id                                  types.String                            `tfsdk:"id"`
	L3Reachability                      *wanInterfaceListDsModel_qRlmEFd_Config `tfsdk:"l3_reachability"`
	LabelId                             types.String                            `tfsdk:"label_id"`
	LinkBwDown                          types.Float64                           `tfsdk:"link_bw_down"`
	LinkBwUp                            types.Float64                           `tfsdk:"link_bw_up"`
	LqmConfig                           *wanInterfaceListDsModel_nSFnnqb_Config `tfsdk:"lqm_config"`
	LqmEnabled                          types.Bool                              `tfsdk:"lqm_enabled"`
	Name                                types.String                            `tfsdk:"name"`
	NetworkId                           types.String                            `tfsdk:"network_id"`
	ProbeProfileId                      types.String                            `tfsdk:"probe_profile_id"`
	Tags                                types.List                              `tfsdk:"tags"`
	Type                                types.String                            `tfsdk:"type"`
	UseForApplicationReachabilityProbes types.Bool                              `tfsdk:"use_for_application_reachability_probes"`
	UseForControllerConnections         types.Bool                              `tfsdk:"use_for_controller_connections"`
	UseLqmForNonHubPaths                types.Bool                              `tfsdk:"use_lqm_for_non_hub_paths"`
	VpnlinkConfiguration                *wanInterfaceListDsModel_rIUJWmK_Config `tfsdk:"vpnlink_configuration"`
}

type wanInterfaceListDsModel_qRlmEFd_Config struct {
	ProbeConfigIds    types.List `tfsdk:"probe_config_ids"`
	UseElementDefault types.Bool `tfsdk:"use_element_default"`
}

type wanInterfaceListDsModel_nSFnnqb_Config struct {
	HubSiteIds     types.List   `tfsdk:"hub_site_ids"`
	InterPacketGap types.Int64  `tfsdk:"inter_packet_gap"`
	Statistic      types.String `tfsdk:"statistic"`
}

type wanInterfaceListDsModel_rIUJWmK_Config struct {
	KeepAliveFailureCount types.Int64 `tfsdk:"keep_alive_failure_count"`
	KeepAliveInterval     types.Int64 `tfsdk:"keep_alive_interval"`
}

// Metadata returns the data source type name.
func (d *wanInterfaceListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wan_interface_list"
}

// Schema defines the schema for this listing data source.
func (d *wanInterfaceListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"site_id":true} outputs:map[string]bool{"items":true, "tfid":true, "total_items":true} forceNew:map[string]bool{"site_id":true}
			"items": dsschema.ListNestedAttribute{
				Description: "The Items param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"bfd_mode":true, "bw_config_mode":true, "bwc_enabled":true, "cost":true, "description":true, "etag":true, "id":true, "l3_reachability":true, "label_id":true, "link_bw_down":true, "link_bw_up":true, "lqm_config":true, "lqm_enabled":true, "name":true, "network_id":true, "probe_profile_id":true, "tags":true, "type":true, "use_for_application_reachability_probes":true, "use_for_controller_connections":true, "use_lqm_for_non_hub_paths":true, "vpnlink_configuration":true} forceNew:map[string]bool(nil)
						"bfd_mode": dsschema.StringAttribute{
							Description: "Bfd Mode: ValidateEnum(enumClass = classOf[BfdMode], WAN_CONFIG_INVALID_BFD_MODE, nullAllowed = false) . String must be one of these: `\"aggressive\"`, `\"non_aggressive\"`.",
							Computed:    true,
						},
						"bw_config_mode": dsschema.StringAttribute{
							Description: "Bw Config Mode: ValidateEnum(enumClass = classOf[BWConfigMode], message = INVALID_BANDWIDTH_CONFIG_MODE, nullAllowed = false) . String must be one of these: `\"auto\"`, `\"manual\"`, `\"manual_bwm_disabled\"`.",
							Computed:    true,
						},
						"bwc_enabled": dsschema.BoolAttribute{
							Description: "Bwc Enabled.",
							Computed:    true,
						},
						"cost": dsschema.Int64Attribute{
							Description: "Cost: Range(max = 1024L, error = WANINTERFACE_INVALID_COST_VALUE: Cost value for site WAN interface should be within range 0-1024, min = 0L) .",
							Computed:    true,
						},
						"description": dsschema.StringAttribute{
							Description: "Description: Size(max = 256, WANINTERFACE_CONFIG_DESCRIPTION_EXCEEDS_LIMIT, min = 0) .",
							Computed:    true,
						},
						"etag": dsschema.Int64Attribute{
							Description: "Entity tag for the resource.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "Id.",
							Computed:    true,
						},
						"l3_reachability": dsschema.SingleNestedAttribute{
							Description: "The L3Reachability param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"probe_config_ids":true, "use_element_default":true} forceNew:map[string]bool(nil)
								"probe_config_ids": dsschema.ListAttribute{
									Description: "Probe Config Ids.",
									Computed:    true,
									ElementType: types.StringType,
								},
								"use_element_default": dsschema.BoolAttribute{
									Description: "Use Element Default.",
									Computed:    true,
								},
							},
						},
						"label_id": dsschema.StringAttribute{
							Description: "Label Id: NotEmpty(message = WAN_INTERFACE_INVALID_LABEL) .",
							Computed:    true,
						},
						"link_bw_down": dsschema.Float64Attribute{
							Description: "Link Bw Down: JsonIgnore(value = true) .",
							Computed:    true,
						},
						"link_bw_up": dsschema.Float64Attribute{
							Description: "Link Bw Up: JsonIgnore(value = true) .",
							Computed:    true,
						},
						"lqm_config": dsschema.SingleNestedAttribute{
							Description: "The LqmConfig param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"hub_site_ids":true, "inter_packet_gap":true, "statistic":true} forceNew:map[string]bool(nil)
								"hub_site_ids": dsschema.ListAttribute{
									Description: "Hub Site Ids: Size(max = 16, error = WANINTERFACE_LQM_CONFIG_INVALID_HUB_SITE_IDS_SIZE: Maximum 16 hub sites can be configured, min = 0) ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 0, listMaxSize = 0, error = WANINTERFACE_LQM_CONFIG_DUPLICATE_HUB_SITE_IDS: Duplicate hub site ids are not allowed., noTrim = false, regex = , required = false) .",
									Computed:    true,
									ElementType: types.StringType,
								},
								"inter_packet_gap": dsschema.Int64Attribute{
									Description: "Inter Packet Gap: Range(max = 300L, error = WANINTERFACE_LQM_CONFIG_INVALID_INTER_PACKET_GAP: inter packet gap should be in the range of 50-300 milliseconds., min = 50L) .",
									Computed:    true,
								},
								"statistic": dsschema.StringAttribute{
									Description: "Statistic: ValidateEnum(enumClass = classOf[LQMStatistic], error = WANINTERFACE_LQM_CONFIG_INVALID_STATISTIC: Invalid statistic value. Valid values are min, max and avg., nullAllowed = true) . String must be one of these: `\"min\"`, `\"max\"`, `\"avg\"`.",
									Computed:    true,
								},
							},
						},
						"lqm_enabled": dsschema.BoolAttribute{
							Description: "Lqm Enabled.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Name: Size(max = 128, WANINTERFACE_CONFIG_NAME_EXCEEDS_LIMIT, min = 0) .",
							Computed:    true,
						},
						"network_id": dsschema.StringAttribute{
							Description: "Network Id: NotEmpty(message = NETWORK_ID_REQD) .",
							Computed:    true,
						},
						"probe_profile_id": dsschema.StringAttribute{
							Description: "Probe Profile Id.",
							Computed:    true,
						},
						"tags": dsschema.ListAttribute{
							Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
							Computed:    true,
							ElementType: types.StringType,
						},
						"type": dsschema.StringAttribute{
							Description: "Type. String must be one of these: `\"PUBLIC_WAN\"`, `\"PRIVATE_WAN\"`.",
							Computed:    true,
						},
						"use_for_application_reachability_probes": dsschema.BoolAttribute{
							Description: "Use For Application Reachability Probes: Valid .",
							Computed:    true,
						},
						"use_for_controller_connections": dsschema.BoolAttribute{
							Description: "Use For Controller Connections: Valid .",
							Computed:    true,
						},
						"use_lqm_for_non_hub_paths": dsschema.BoolAttribute{
							Description: "Use Lqm For Non Hub Paths.",
							Computed:    true,
						},
						"vpnlink_configuration": dsschema.SingleNestedAttribute{
							Description: "The VpnlinkConfiguration param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"keep_alive_failure_count":true, "keep_alive_interval":true} forceNew:map[string]bool(nil)
								"keep_alive_failure_count": dsschema.Int64Attribute{
									Description: "Keep Alive Failure Count: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30.) Range(max = 30L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30., min = 3L) .",
									Computed:    true,
								},
								"keep_alive_interval": dsschema.Int64Attribute{
									Description: "Keep Alive Interval: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms.) Range(max = 1740000L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms., min = 100L) .",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total_items": dsschema.Int64Attribute{
				Description: "The TotalItems param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *wanInterfaceListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *wanInterfaceListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state wanInterfaceListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "prismasdwan_wan_interface_list",
		"terraform_provider_function": "Read",
		"site_id":                     state.SiteId.ValueString(),
	})

	// Prepare to run the command.
	svc := ccUusFA.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := ccUusFA.ListInput{}

	input.SiteId = StringValue(state.SiteId)

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Items) == 0 {
		state.Items = nil
	} else {
		state.Items = make([]wanInterfaceListDsModel_uAgupQd_Config, 0, len(ans.Items))
		for _, var0 := range ans.Items {
			var1 := wanInterfaceListDsModel_uAgupQd_Config{}

			var1.BfdMode = types.StringValue(var0.BfdMode)

			var1.BwConfigMode = types.StringValue(var0.BwConfigMode)

			var1.BwcEnabled = types.BoolPointerValue(var0.BwcEnabled)

			var1.Cost = types.Int64PointerValue(var0.Cost)

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Etag = types.Int64PointerValue(var0.Etag)

			var1.Id = types.StringPointerValue(var0.Id)

			if var0.L3Reachability == nil {
				var1.L3Reachability = nil
			} else {
				var1.L3Reachability = &wanInterfaceListDsModel_qRlmEFd_Config{}

				var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.L3Reachability.ProbeConfigIds)
				var1.L3Reachability.ProbeConfigIds = var2
				resp.Diagnostics.Append(var3.Errors()...)

				var1.L3Reachability.UseElementDefault = types.BoolPointerValue(var0.L3Reachability.UseElementDefault)
			}

			var1.LabelId = types.StringValue(var0.LabelId)

			var1.LinkBwDown = types.Float64PointerValue(var0.LinkBwDown)

			var1.LinkBwUp = types.Float64PointerValue(var0.LinkBwUp)

			if var0.LqmConfig == nil {
				var1.LqmConfig = nil
			} else {
				var1.LqmConfig = &wanInterfaceListDsModel_nSFnnqb_Config{}

				var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.LqmConfig.HubSiteIds)
				var1.LqmConfig.HubSiteIds = var4
				resp.Diagnostics.Append(var5.Errors()...)

				var1.LqmConfig.InterPacketGap = types.Int64PointerValue(var0.LqmConfig.InterPacketGap)

				var1.LqmConfig.Statistic = types.StringPointerValue(var0.LqmConfig.Statistic)
			}

			var1.LqmEnabled = types.BoolPointerValue(var0.LqmEnabled)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.NetworkId = types.StringValue(var0.NetworkId)

			var1.ProbeProfileId = types.StringPointerValue(var0.ProbeProfileId)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var1.Type = types.StringPointerValue(var0.Type)

			var1.UseForApplicationReachabilityProbes = types.BoolPointerValue(var0.UseForApplicationReachabilityProbes)

			var1.UseForControllerConnections = types.BoolPointerValue(var0.UseForControllerConnections)

			var1.UseLqmForNonHubPaths = types.BoolPointerValue(var0.UseLqmForNonHubPaths)

			if var0.VpnlinkConfiguration == nil {
				var1.VpnlinkConfiguration = nil
			} else {
				var1.VpnlinkConfiguration = &wanInterfaceListDsModel_rIUJWmK_Config{}

				var1.VpnlinkConfiguration.KeepAliveFailureCount = types.Int64Value(var0.VpnlinkConfiguration.KeepAliveFailureCount)

				var1.VpnlinkConfiguration.KeepAliveInterval = types.Int64Value(var0.VpnlinkConfiguration.KeepAliveInterval)
			}
			state.Items = append(state.Items, var1)
		}
	}

	state.TotalItems = types.Int64PointerValue(ans.TotalItems)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &wanInterfaceDataSource{}
	_ datasource.DataSourceWithConfigure = &wanInterfaceDataSource{}
)

func NewWanInterfaceDataSource() datasource.DataSource {
	return &wanInterfaceDataSource{}
}

type wanInterfaceDataSource struct {
	client *sdwan.Client
}

// wanInterfaceDsModel is the model.
type wanInterfaceDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	SiteId         types.String `tfsdk:"site_id"`
	WanInterfaceId types.String `tfsdk:"wan_interface_id"`

	// Output.
	BfdMode                             types.String                        `tfsdk:"bfd_mode"`
	BwConfigMode                        types.String                        `tfsdk:"bw_config_mode"`
	BwcEnabled                          types.Bool                          `tfsdk:"bwc_enabled"`
	Cost                                types.Int64                         `tfsdk:"cost"`
	Description                         types.String                        `tfsdk:"description"`
	Etag                                types.Int64                         `tfsdk:"etag"`
	Id                                  types.String                        `tfsdk:"id"`
	L3Reachability                      *wanInterfaceDsModel_qRlmEFd_Config `tfsdk:"l3_reachability"`
	LabelId                             types.String                        `tfsdk:"label_id"`
	LinkBwDown                          types.Float64                       `tfsdk:"link_bw_down"`
	LinkBwUp                            types.Float64                       `tfsdk:"link_bw_up"`
	LqmConfig                           *wanInterfaceDsModel_nSFnnqb_Config `tfsdk:"lqm_config"`
	LqmEnabled                          types.Bool                          `tfsdk:"lqm_enabled"`
	Name                                types.String                        `tfsdk:"name"`
	NetworkId                           types.String                        `tfsdk:"network_id"`
	ProbeProfileId                      types.String                        `tfsdk:"probe_profile_id"`
	Tags                                types.List                          `tfsdk:"tags"`
	Type                                types.String                        `tfsdk:"type"`
	UseForApplicationReachabilityProbes types.Bool                          `tfsdk:"use_for_application_reachability_probes"`
	UseForControllerConnections         types.Bool                          `tfsdk:"use_for_controller_connections"`
	UseLqmForNonHubPaths                types.Bool                          `tfsdk:"use_lqm_for_non_hub_paths"`
	VpnlinkConfiguration                *wanInterfaceDsModel_rIUJWmK_Config `tfsdk:"vpnlink_configuration"`
}

type wanInterfaceDsModel_qRlmEFd_Config struct {
	ProbeConfigIds    types.List `tfsdk:"probe_config_ids"`
	UseElementDefault types.Bool `tfsdk:"use_element_default"`
}

type wanInterfaceDsModel_nSFnnqb_Config struct {
	HubSiteIds     types.List   `tfsdk:"hub_site_ids"`
	InterPacketGap types.Int64  `tfsdk:"inter_packet_gap"`
	Statistic      types.String `tfsdk:"statistic"`
}

type wanInterfaceDsModel_rIUJWmK_Config struct {
	KeepAliveFailureCount types.Int64 `tfsdk:"keep_alive_failure_count"`
	KeepAliveInterval     types.Int64 `tfsdk:"keep_alive_interval"`
}

// Metadata returns the data source type name.
func (d *wanInterfaceDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wan_interface"
}

// Schema defines the schema for this data source.
func (d *wanInterfaceDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"site_id":true, "wan_interface_id":true} outputs:map[string]bool{"bfd_mode":true, "bw_config_mode":true, "bwc_enabled":true, "cost":true, "description":true, "etag":true, "id":true, "l3_reachability":true, "label_id":true, "link_bw_down":true, "link_bw_up":true, "lqm_config":true, "lqm_enabled":true, "name":true, "network_id":true, "probe_profile_id":true, "tags":true, "tfid":true, "type":true, "use_for_application_reachability_probes":true, "use_for_controller_connections":true, "use_lqm_for_non_hub_paths":true, "vpnlink_configuration":true} forceNew:map[string]bool{"site_id":true, "wan_interface_id":true}
			"bfd_mode": dsschema.StringAttribute{
				Description: "Bfd Mode: ValidateEnum(enumClass = classOf[BfdMode], WAN_CONFIG_INVALID_BFD_MODE, nullAllowed = false) . String must be one of these: `\"aggressive\"`, `\"non_aggressive\"`.",
				Computed:    true,
			},
			"bw_config_mode": dsschema.StringAttribute{
				Description: "Bw Config Mode: ValidateEnum(enumClass = classOf[BWConfigMode], message = INVALID_BANDWIDTH_CONFIG_MODE, nullAllowed = false) . String must be one of these: `\"auto\"`, `\"manual\"`, `\"manual_bwm_disabled\"`.",
				Computed:    true,
			},
			"bwc_enabled": dsschema.BoolAttribute{
				Description: "Bwc Enabled.",
				Computed:    true,
			},
			"cost": dsschema.Int64Attribute{
				Description: "Cost: Range(max = 1024L, error = WANINTERFACE_INVALID_COST_VALUE: Cost value for site WAN interface should be within range 0-1024, min = 0L) .",
				Computed:    true,
			},
			"description": dsschema.StringAttribute{
				Description: "Description: Size(max = 256, WANINTERFACE_CONFIG_DESCRIPTION_EXCEEDS_LIMIT, min = 0) .",
				Computed:    true,
			},
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"l3_reachability": dsschema.SingleNestedAttribute{
				Description: "The L3Reachability param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"probe_config_ids":true, "use_element_default":true} forceNew:map[string]bool(nil)
					"probe_config_ids": dsschema.ListAttribute{
						Description: "Probe Config Ids.",
						Computed:    true,
						ElementType: types.StringType,
					},
					"use_element_default": dsschema.BoolAttribute{
						Description: "Use Element Default.",
						Computed:    true,
					},
				},
			},
			"label_id": dsschema.StringAttribute{
				Description: "Label Id: NotEmpty(message = WAN_INTERFACE_INVALID_LABEL) .",
				Computed:    true,
			},
			"link_bw_down": dsschema.Float64Attribute{
				Description: "Link Bw Down: JsonIgnore(value = true) .",
				Computed:    true,
			},
			"link_bw_up": dsschema.Float64Attribute{
				Description: "Link Bw Up: JsonIgnore(value = true) .",
				Computed:    true,
			},
			"lqm_config": dsschema.SingleNestedAttribute{
				Description: "The LqmConfig param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"hub_site_ids":true, "inter_packet_gap":true, "statistic":true} forceNew:map[string]bool(nil)
					"hub_site_ids": dsschema.ListAttribute{
						Description: "Hub Site Ids: Size(max = 16, error = WANINTERFACE_LQM_CONFIG_INVALID_HUB_SITE_IDS_SIZE: Maximum 16 hub sites can be configured, min = 0) ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 0, listMaxSize = 0, error = WANINTERFACE_LQM_CONFIG_DUPLICATE_HUB_SITE_IDS: Duplicate hub site ids are not allowed., noTrim = false, regex = , required = false) .",
						Computed:    true,
						ElementType: types.StringType,
					},
					"inter_packet_gap": dsschema.Int64Attribute{
						Description: "Inter Packet Gap: Range(max = 300L, error = WANINTERFACE_LQM_CONFIG_INVALID_INTER_PACKET_GAP: inter packet gap should be in the range of 50-300 milliseconds., min = 50L) .",
						Computed:    true,
					},
					"statistic": dsschema.StringAttribute{
						Description: "Statistic: ValidateEnum(enumClass = classOf[LQMStatistic], error = WANINTERFACE_LQM_CONFIG_INVALID_STATISTIC: Invalid statistic value. Valid values are min, max and avg., nullAllowed = true) . String must be one of these: `\"min\"`, `\"max\"`, `\"avg\"`.",
						Computed:    true,
					},
				},
			},
			"lqm_enabled": dsschema.BoolAttribute{
				Description: "Lqm Enabled.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Name: Size(max = 128, WANINTERFACE_CONFIG_NAME_EXCEEDS_LIMIT, min = 0) .",
				Computed:    true,
			},
			"network_id": dsschema.StringAttribute{
				Description: "Network Id: NotEmpty(message = NETWORK_ID_REQD) .",
				Computed:    true,
			},
			"probe_profile_id": dsschema.StringAttribute{
				Description: "Probe Profile Id.",
				Computed:    true,
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
			},
			"tags": dsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"type": dsschema.StringAttribute{
				Description: "Type. String must be one of these: `\"PUBLIC_WAN\"`, `\"PRIVATE_WAN\"`.",
				Computed:    true,
			},
			"use_for_application_reachability_probes": dsschema.BoolAttribute{
				Description: "Use For Application Reachability Probes: Valid .",
				Computed:    true,
			},
			"use_for_controller_connections": dsschema.BoolAttribute{
				Description: "Use For Controller Connections: Valid .",
				Computed:    true,
			},
			"use_lqm_for_non_hub_paths": dsschema.BoolAttribute{
				Description: "Use Lqm For Non Hub Paths.",
				Computed:    true,
			},
			"vpnlink_configuration": dsschema.SingleNestedAttribute{
				Description: "The VpnlinkConfiguration param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"keep_alive_failure_count":true, "keep_alive_interval":true} forceNew:map[string]bool(nil)
					"keep_alive_failure_count": dsschema.Int64Attribute{
						Description: "Keep Alive Failure Count: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30.) Range(max = 30L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30., min = 3L) .",
						Computed:    true,
					},
					"keep_alive_interval": dsschema.Int64Attribute{
						Description: "Keep Alive Interval: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms.) Range(max = 1740000L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms., min = 100L) .",
						Computed:    true,
					},
				},
			},
			"wan_interface_id": dsschema.StringAttribute{
				Description: "Wan Interface Id.",
				Required:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *wanInterfaceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *wanInterfaceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state wanInterfaceDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_wan_interface",
		"terraform_provider_function": "Read",
		"site_id":                     state.SiteId.ValueString(),
		"wan_interface_id":            state.WanInterfaceId.ValueString(),
	})

	// Prepare to run the command.
	svc := ccUusFA.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := ccUusFA.ReadInput{}

	input.SiteId = StringValue(state.SiteId)

	input.WanInterfaceId = StringValue(state.WanInterfaceId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.WanInterfaceId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.BfdMode = types.StringValue(ans.BfdMode)

	state.BwConfigMode = types.StringValue(ans.BwConfigMode)

	state.BwcEnabled = types.BoolPointerValue(ans.BwcEnabled)

	state.Cost = types.Int64PointerValue(ans.Cost)

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.L3Reachability == nil {
		state.L3Reachability = nil
	} else {
		state.L3Reachability = &wanInterfaceDsModel_qRlmEFd_Config{}

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.L3Reachability.ProbeConfigIds)
		state.L3Reachability.ProbeConfigIds = var0
		resp.Diagnostics.Append(var1.Errors()...)

		state.L3Reachability.UseElementDefault = types.BoolPointerValue(ans.L3Reachability.UseElementDefault)
	}

	state.LabelId = types.StringValue(ans.LabelId)

	state.LinkBwDown = types.Float64PointerValue(ans.LinkBwDown)

	state.LinkBwUp = types.Float64PointerValue(ans.LinkBwUp)

	if ans.LqmConfig == nil {
		state.LqmConfig = nil
	} else {
		state.LqmConfig = &wanInterfaceDsModel_nSFnnqb_Config{}

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.LqmConfig.HubSiteIds)
		state.LqmConfig.HubSiteIds = var2
		resp.Diagnostics.Append(var3.Errors()...)

		state.LqmConfig.InterPacketGap = types.Int64PointerValue(ans.LqmConfig.InterPacketGap)

		state.LqmConfig.Statistic = types.StringPointerValue(ans.LqmConfig.Statistic)
	}

	state.LqmEnabled = types.BoolPointerValue(ans.LqmEnabled)

	state.Name = types.StringPointerValue(ans.Name)

	state.NetworkId = types.StringValue(ans.NetworkId)

	state.ProbeProfileId = types.StringPointerValue(ans.ProbeProfileId)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.Type = types.StringPointerValue(ans.Type)

	state.UseForApplicationReachabilityProbes = types.BoolPointerValue(ans.UseForApplicationReachabilityProbes)

	state.UseForControllerConnections = types.BoolPointerValue(ans.UseForControllerConnections)

	state.UseLqmForNonHubPaths = types.BoolPointerValue(ans.UseLqmForNonHubPaths)

	if ans.VpnlinkConfiguration == nil {
		state.VpnlinkConfiguration = nil
	} else {
		state.VpnlinkConfiguration = &wanInterfaceDsModel_rIUJWmK_Config{}

		state.VpnlinkConfiguration.KeepAliveFailureCount = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveFailureCount)

		state.VpnlinkConfiguration.KeepAliveInterval = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &wanInterfaceResource{}
	_ resource.ResourceWithConfigure   = &wanInterfaceResource{}
	_ resource.ResourceWithImportState = &wanInterfaceResource{}
)

func NewWanInterfaceResource() resource.Resource {
	return &wanInterfaceResource{}
}

type wanInterfaceResource struct {
	client *sdwan.Client
}

// wanInterfaceRsModel is the model.
type wanInterfaceRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	BfdMode                             types.String                        `tfsdk:"bfd_mode"`
	BwConfigMode                        types.String                        `tfsdk:"bw_config_mode"`
	BwcEnabled                          types.Bool                          `tfsdk:"bwc_enabled"`
	Cost                                types.Int64                         `tfsdk:"cost"`
	Description                         types.String                        `tfsdk:"description"`
	Etag                                types.Int64                         `tfsdk:"etag"`
	Id                                  types.String                        `tfsdk:"id"`
	L3Reachability                      *wanInterfaceRsModel_qRlmEFd_Config `tfsdk:"l3_reachability"`
	LabelId                             types.String                        `tfsdk:"label_id"`
	LinkBwDown                          types.Float64                       `tfsdk:"link_bw_down"`
	LinkBwUp                            types.Float64                       `tfsdk:"link_bw_up"`
	LqmConfig                           *wanInterfaceRsModel_nSFnnqb_Config `tfsdk:"lqm_config"`
	LqmEnabled                          types.Bool                          `tfsdk:"lqm_enabled"`
	Name                                types.String                        `tfsdk:"name"`
	NetworkId                           types.String                        `tfsdk:"network_id"`
	ProbeProfileId                      types.String                        `tfsdk:"probe_profile_id"`
	SiteId                              types.String                        `tfsdk:"site_id"`
	Tags                                types.List                          `tfsdk:"tags"`
	Type                                types.String                        `tfsdk:"type"`
	UseForApplicationReachabilityProbes types.Bool                          `tfsdk:"use_for_application_reachability_probes"`
	UseForControllerConnections         types.Bool                          `tfsdk:"use_for_controller_connections"`
	UseLqmForNonHubPaths                types.Bool                          `tfsdk:"use_lqm_for_non_hub_paths"`
	VpnlinkConfiguration                *wanInterfaceRsModel_rIUJWmK_Config `tfsdk:"vpnlink_configuration"`

	// Output.
	// omit input: bfd_mode
	// omit input: bw_config_mode
	// omit input: bwc_enabled
	// omit input: cost
	// omit input: description
	// omit input: etag
	// omit input: id
	// omit input: l3_reachability
	// omit input: label_id
	// omit input: link_bw_down
	// omit input: link_bw_up
	// omit input: lqm_config
	// omit input: lqm_enabled
	// omit input: name
	// omit input: network_id
	// omit input: probe_profile_id
	// omit input: tags
	// omit input: type
	// omit input: use_for_application_reachability_probes
	// omit input: use_for_controller_connections
	// omit input: use_lqm_for_non_hub_paths
	// omit input: vpnlink_configuration
}

type wanInterfaceRsModel_qRlmEFd_Config struct {
	ProbeConfigIds    types.List `tfsdk:"probe_config_ids"`
	UseElementDefault types.Bool `tfsdk:"use_element_default"`
}

type wanInterfaceRsModel_nSFnnqb_Config struct {
	HubSiteIds     types.List   `tfsdk:"hub_site_ids"`
	InterPacketGap types.Int64  `tfsdk:"inter_packet_gap"`
	Statistic      types.String `tfsdk:"statistic"`
}

type wanInterfaceRsModel_rIUJWmK_Config struct {
	KeepAliveFailureCount types.Int64 `tfsdk:"keep_alive_failure_count"`
	KeepAliveInterval     types.Int64 `tfsdk:"keep_alive_interval"`
}

// Metadata returns the data source type name.
func (r *wanInterfaceResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wan_interface"
}

// Schema defines the schema for this data source.
func (r *wanInterfaceResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"bfd_mode":true, "bw_config_mode":true, "bwc_enabled":true, "cost":true, "description":true, "etag":true, "id":true, "l3_reachability":true, "label_id":true, "link_bw_down":true, "link_bw_up":true, "lqm_config":true, "lqm_enabled":true, "name":true, "network_id":true, "probe_profile_id":true, "site_id":true, "tags":true, "type":true, "use_for_application_reachability_probes":true, "use_for_controller_connections":true, "use_lqm_for_non_hub_paths":true, "vpnlink_configuration":true} outputs:map[string]bool{"bfd_mode":true, "bw_config_mode":true, "bwc_enabled":true, "cost":true, "description":true, "etag":true, "id":true, "l3_reachability":true, "label_id":true, "link_bw_down":true, "link_bw_up":true, "lqm_config":true, "lqm_enabled":true, "name":true, "network_id":true, "probe_profile_id":true, "tags":true, "tfid":true, "type":true, "use_for_application_reachability_probes":true, "use_for_controller_connections":true, "use_lqm_for_non_hub_paths":true, "vpnlink_configuration":true} forceNew:map[string]bool{"site_id":true}
			"bfd_mode": rsschema.StringAttribute{
				Description: "Bfd Mode: ValidateEnum(enumClass = classOf[BfdMode], WAN_CONFIG_INVALID_BFD_MODE, nullAllowed = false) . String must be one of these: `\"aggressive\"`, `\"non_aggressive\"`.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("aggressive", "non_aggressive"),
				},
			},
			"bw_config_mode": rsschema.StringAttribute{
				Description: "Bw Config Mode: ValidateEnum(enumClass = classOf[BWConfigMode], message = INVALID_BANDWIDTH_CONFIG_MODE, nullAllowed = false) . String must be one of these: `\"auto\"`, `\"manual\"`, `\"manual_bwm_disabled\"`.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("auto", "manual", "manual_bwm_disabled"),
				},
			},
			"bwc_enabled": rsschema.BoolAttribute{
				Description: "Bwc Enabled.",
				Optional:    true,
			},
			"cost": rsschema.Int64Attribute{
				Description: "Cost: Range(max = 1024L, error = WANINTERFACE_INVALID_COST_VALUE: Cost value for site WAN interface should be within range 0-1024, min = 0L) .",
				Optional:    true,
			},
			"description": rsschema.StringAttribute{
				Description: "Description: Size(max = 256, WANINTERFACE_CONFIG_DESCRIPTION_EXCEEDS_LIMIT, min = 0) .",
				Optional:    true,
			},
			"etag": rsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Optional:    true,
				Computed:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"l3_reachability": rsschema.SingleNestedAttribute{
				Description: "The L3Reachability param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"probe_config_ids":true, "use_element_default":true} outputs:map[string]bool{"probe_config_ids":true, "use_element_default":true} forceNew:map[string]bool(nil)
					"probe_config_ids": rsschema.ListAttribute{
						Description: "Probe Config Ids.",
						Optional:    true,
						ElementType: types.StringType,
					},
					"use_element_default": rsschema.BoolAttribute{
						Description: "Use Element Default.",
						Optional:    true,
					},
				},
			},
			"label_id": rsschema.StringAttribute{
				Description: "Label Id: NotEmpty(message = WAN_INTERFACE_INVALID_LABEL) .",
				Required:    true,
			},
			"link_bw_down": rsschema.Float64Attribute{
				Description: "Link Bw Down: JsonIgnore(value = true) .",
				Optional:    true,
			},
			"link_bw_up": rsschema.Float64Attribute{
				Description: "Link Bw Up: JsonIgnore(value = true) .",
				Optional:    true,
			},
			"lqm_config": rsschema.SingleNestedAttribute{
				Description: "The LqmConfig param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"hub_site_ids":true, "inter_packet_gap":true, "statistic":true} outputs:map[string]bool{"hub_site_ids":true, "inter_packet_gap":true, "statistic":true} forceNew:map[string]bool(nil)
					"hub_site_ids": rsschema.ListAttribute{
						Description: "Hub Site Ids: Size(max = 16, error = WANINTERFACE_LQM_CONFIG_INVALID_HUB_SITE_IDS_SIZE: Maximum 16 hub sites can be configured, min = 0) ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 0, listMaxSize = 0, error = WANINTERFACE_LQM_CONFIG_DUPLICATE_HUB_SITE_IDS: Duplicate hub site ids are not allowed., noTrim = false, regex = , required = false) .",
						Optional:    true,
						ElementType: types.StringType,
					},
					"inter_packet_gap": rsschema.Int64Attribute{
						Description: "Inter Packet Gap: Range(max = 300L, error = WANINTERFACE_LQM_CONFIG_INVALID_INTER_PACKET_GAP: inter packet gap should be in the range of 50-300 milliseconds., min = 50L) .",
						Optional:    true,
					},
					"statistic": rsschema.StringAttribute{
						Description: "Statistic: ValidateEnum(enumClass = classOf[LQMStatistic], error = WANINTERFACE_LQM_CONFIG_INVALID_STATISTIC: Invalid statistic value. Valid values are min, max and avg., nullAllowed = true) . String must be one of these: `\"min\"`, `\"max\"`, `\"avg\"`.",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.OneOf("min", "max", "avg"),
						},
					},
				},
			},
			"lqm_enabled": rsschema.BoolAttribute{
				Description: "Lqm Enabled.",
				Optional:    true,
			},
			"name": rsschema.StringAttribute{
				Description: "Name: Size(max = 128, WANINTERFACE_CONFIG_NAME_EXCEEDS_LIMIT, min = 0) .",
				Optional:    true,
			},
			"network_id": rsschema.StringAttribute{
				Description: "Network Id: NotEmpty(message = NETWORK_ID_REQD) .",
				Required:    true,
			},
			"probe_profile_id": rsschema.StringAttribute{
				Description: "Probe Profile Id.",
				Optional:    true,
			},
			"site_id": rsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tags": rsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"type": rsschema.StringAttribute{
				Description: "Type. String must be one of these: `\"PUBLIC_WAN\"`, `\"PRIVATE_WAN\"`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("PUBLIC_WAN", "PRIVATE_WAN"),
				},
			},
			"use_for_application_reachability_probes": rsschema.BoolAttribute{
				Description: "Use For Application Reachability Probes: Valid .",
				Optional:    true,
			},
			"use_for_controller_connections": rsschema.BoolAttribute{
				Description: "Use For Controller Connections: Valid .",
				Optional:    true,
			},
			"use_lqm_for_non_hub_paths": rsschema.BoolAttribute{
				Description: "Use Lqm For Non Hub Paths.",
				Optional:    true,
			},
			"vpnlink_configuration": rsschema.SingleNestedAttribute{
				Description: "The VpnlinkConfiguration param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"keep_alive_failure_count":true, "keep_alive_interval":true} outputs:map[string]bool{"keep_alive_failure_count":true, "keep_alive_interval":true} forceNew:map[string]bool(nil)
					"keep_alive_failure_count": rsschema.Int64Attribute{
						Description: "Keep Alive Failure Count: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30.) Range(max = 30L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30., min = 3L) .",
						Required:    true,
					},
					"keep_alive_interval": rsschema.Int64Attribute{
						Description: "Keep Alive Interval: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms.) Range(max = 1740000L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms., min = 100L) .",
						Required:    true,
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *wanInterfaceResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sdwan.Client)
}

// Create resource.
func (r *wanInterfaceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state wanInterfaceRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_wan_interface",
		"terraform_provider_function": "Create",
		"site_id":                     state.SiteId.ValueString(),
	})

	// Prepare to create the config.
	svc := ccUusFA.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ccUusFA.CreateInput{}

	input.SiteId = StringValue(state.SiteId)
	input.Request = &uAgupQd.Config{}

	input.Request.BfdMode = StringValue(state.BfdMode)

	input.Request.BwConfigMode = StringValue(state.BwConfigMode)

	input.Request.BwcEnabled = BoolValueOrNil(state.BwcEnabled)

	input.Request.Cost = Int64ValueOrNil(state.Cost)

	input.Request.Description = StringValueOrNil(state.Description)

	input.Request.Etag = Int64ValueOrNil(state.Etag)

	if state.L3Reachability != nil {
		input.Request.L3Reachability = &qRlmEFd.Config{}

		input.Request.L3Reachability.ProbeConfigIds = ListStringValueOrNil(ctx, state.L3Reachability.ProbeConfigIds)

		input.Request.L3Reachability.UseElementDefault = BoolValueOrNil(state.L3Reachability.UseElementDefault)
	}

	input.Request.LabelId = StringValue(state.LabelId)

	input.Request.LinkBwDown = Float64ValueOrNil(state.LinkBwDown)

	input.Request.LinkBwUp = Float64ValueOrNil(state.LinkBwUp)

	if state.LqmConfig != nil {
		input.Request.LqmConfig = &nSFnnqb.Config{}

		input.Request.LqmConfig.HubSiteIds = ListStringValueOrNil(ctx, state.LqmConfig.HubSiteIds)

		input.Request.LqmConfig.InterPacketGap = Int64ValueOrNil(state.LqmConfig.InterPacketGap)

		input.Request.LqmConfig.Statistic = StringValueOrNil(state.LqmConfig.Statistic)
	}

	input.Request.LqmEnabled = BoolValueOrNil(state.LqmEnabled)

	input.Request.Name = StringValueOrNil(state.Name)

	input.Request.NetworkId = StringValue(state.NetworkId)

	input.Request.ProbeProfileId = StringValueOrNil(state.ProbeProfileId)

	input.Request.Tags = ListStringValueOrNil(ctx, state.Tags)

	input.Request.Type = StringValueOrNil(state.Type)

	input.Request.UseForApplicationReachabilityProbes = BoolValueOrNil(state.UseForApplicationReachabilityProbes)

	input.Request.UseForControllerConnections = BoolValueOrNil(state.UseForControllerConnections)

	input.Request.UseLqmForNonHubPaths = BoolValueOrNil(state.UseLqmForNonHubPaths)

	if state.VpnlinkConfiguration != nil {
		input.Request.VpnlinkConfiguration = &rIUJWmK.Config{}

		input.Request.VpnlinkConfiguration.KeepAliveFailureCount = Int64Value(state.VpnlinkConfiguration.KeepAliveFailureCount)

		input.Request.VpnlinkConfiguration.KeepAliveInterval = Int64Value(state.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.BfdMode = types.StringValue(ans.BfdMode)

	state.BwConfigMode = types.StringValue(ans.BwConfigMode)

	state.BwcEnabled = types.BoolPointerValue(ans.BwcEnabled)

	state.Cost = types.Int64PointerValue(ans.Cost)

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.L3Reachability == nil {
		state.L3Reachability = nil
	} else {
		state.L3Reachability = &wanInterfaceRsModel_qRlmEFd_Config{}

		var3, var4 := types.ListValueFrom(ctx, types.StringType, ans.L3Reachability.ProbeConfigIds)
		state.L3Reachability.ProbeConfigIds = var3
		resp.Diagnostics.Append(var4.Errors()...)

		state.L3Reachability.UseElementDefault = types.BoolPointerValue(ans.L3Reachability.UseElementDefault)
	}

	state.LabelId = types.StringValue(ans.LabelId)

	state.LinkBwDown = types.Float64PointerValue(ans.LinkBwDown)

	state.LinkBwUp = types.Float64PointerValue(ans.LinkBwUp)

	if ans.LqmConfig == nil {
		state.LqmConfig = nil
	} else {
		state.LqmConfig = &wanInterfaceRsModel_nSFnnqb_Config{}

		var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.LqmConfig.HubSiteIds)
		state.LqmConfig.HubSiteIds = var5
		resp.Diagnostics.Append(var6.Errors()...)

		state.LqmConfig.InterPacketGap = types.Int64PointerValue(ans.LqmConfig.InterPacketGap)

		state.LqmConfig.Statistic = types.StringPointerValue(ans.LqmConfig.Statistic)
	}

	state.LqmEnabled = types.BoolPointerValue(ans.LqmEnabled)

	state.Name = types.StringPointerValue(ans.Name)

	state.NetworkId = types.StringValue(ans.NetworkId)

	state.ProbeProfileId = types.StringPointerValue(ans.ProbeProfileId)

	var7, var8 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var7
	resp.Diagnostics.Append(var8.Errors()...)

	state.Type = types.StringPointerValue(ans.Type)

	state.UseForApplicationReachabilityProbes = types.BoolPointerValue(ans.UseForApplicationReachabilityProbes)

	state.UseForControllerConnections = types.BoolPointerValue(ans.UseForControllerConnections)

	state.UseLqmForNonHubPaths = types.BoolPointerValue(ans.UseLqmForNonHubPaths)

	if ans.VpnlinkConfiguration == nil {
		state.VpnlinkConfiguration = nil
	} else {
		state.VpnlinkConfiguration = &wanInterfaceRsModel_rIUJWmK_Config{}

		state.VpnlinkConfiguration.KeepAliveFailureCount = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveFailureCount)

		state.VpnlinkConfiguration.KeepAliveInterval = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *wanInterfaceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state wanInterfaceRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_wan_interface",
		"locMap":                      map[string]int{"site_id": 0, "wan_interface_id": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := ccUusFA.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ccUusFA.ReadInput{}

	input.SiteId = tokens[0]

	input.WanInterfaceId = tokens[1]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.SiteId = types.StringNull()
	} else {
		state.SiteId = types.StringValue(tokens[0])
	}
	state.Tfid = savestate.Tfid

	state.BfdMode = types.StringValue(ans.BfdMode)

	state.BwConfigMode = types.StringValue(ans.BwConfigMode)

	state.BwcEnabled = types.BoolPointerValue(ans.BwcEnabled)

	state.Cost = types.Int64PointerValue(ans.Cost)

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.L3Reachability == nil {
		state.L3Reachability = nil
	} else {
		state.L3Reachability = &wanInterfaceRsModel_qRlmEFd_Config{}

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.L3Reachability.ProbeConfigIds)
		state.L3Reachability.ProbeConfigIds = var0
		resp.Diagnostics.Append(var1.Errors()...)

		state.L3Reachability.UseElementDefault = types.BoolPointerValue(ans.L3Reachability.UseElementDefault)
	}

	state.LabelId = types.StringValue(ans.LabelId)

	state.LinkBwDown = types.Float64PointerValue(ans.LinkBwDown)

	state.LinkBwUp = types.Float64PointerValue(ans.LinkBwUp)

	if ans.LqmConfig == nil {
		state.LqmConfig = nil
	} else {
		state.LqmConfig = &wanInterfaceRsModel_nSFnnqb_Config{}

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.LqmConfig.HubSiteIds)
		state.LqmConfig.HubSiteIds = var2
		resp.Diagnostics.Append(var3.Errors()...)

		state.LqmConfig.InterPacketGap = types.Int64PointerValue(ans.LqmConfig.InterPacketGap)

		state.LqmConfig.Statistic = types.StringPointerValue(ans.LqmConfig.Statistic)
	}

	state.LqmEnabled = types.BoolPointerValue(ans.LqmEnabled)

	state.Name = types.StringPointerValue(ans.Name)

	state.NetworkId = types.StringValue(ans.NetworkId)

	state.ProbeProfileId = types.StringPointerValue(ans.ProbeProfileId)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.Type = types.StringPointerValue(ans.Type)

	state.UseForApplicationReachabilityProbes = types.BoolPointerValue(ans.UseForApplicationReachabilityProbes)

	state.UseForControllerConnections = types.BoolPointerValue(ans.UseForControllerConnections)

	state.UseLqmForNonHubPaths = types.BoolPointerValue(ans.UseLqmForNonHubPaths)

	if ans.VpnlinkConfiguration == nil {
		state.VpnlinkConfiguration = nil
	} else {
		state.VpnlinkConfiguration = &wanInterfaceRsModel_rIUJWmK_Config{}

		state.VpnlinkConfiguration.KeepAliveFailureCount = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveFailureCount)

		state.VpnlinkConfiguration.KeepAliveInterval = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *wanInterfaceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state wanInterfaceRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_wan_interface",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := ccUusFA.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ccUusFA.UpdateInput{}

	if tokens[0] != "" {
		input.SiteId = tokens[0]
	}

	if tokens[1] != "" {
		input.WanInterfaceId = tokens[1]
	}
	input.Request = &uAgupQd.Config{}

	input.Request.BfdMode = ValueStringFromPlanOrState(plan.BfdMode, state.BfdMode)

	input.Request.BwConfigMode = ValueStringFromPlanOrState(plan.BwConfigMode, state.BwConfigMode)

	input.Request.BwcEnabled = ValueBoolPointerFromPlanOrState(plan.BwcEnabled, state.BwcEnabled)

	input.Request.Cost = ValueInt64PointerFromPlanOrState(plan.Cost, state.Cost)

	input.Request.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)

	input.Request.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)

	if plan.L3Reachability != nil {
		input.Request.L3Reachability = &qRlmEFd.Config{}

		input.Request.L3Reachability.ProbeConfigIds = ListStringValueOrNil(ctx, plan.L3Reachability.ProbeConfigIds)

		input.Request.L3Reachability.UseElementDefault = ValueBoolPointerFromPlanOrState(plan.L3Reachability.UseElementDefault, state.L3Reachability.UseElementDefault)
	}

	input.Request.LabelId = ValueStringFromPlanOrState(plan.LabelId, state.LabelId)

	input.Request.LinkBwDown = ValueFloat64PointerFromPlanOrState(plan.LinkBwDown, state.LinkBwDown)

	input.Request.LinkBwUp = ValueFloat64PointerFromPlanOrState(plan.LinkBwUp, state.LinkBwUp)

	if plan.LqmConfig != nil {
		input.Request.LqmConfig = &nSFnnqb.Config{}

		input.Request.LqmConfig.HubSiteIds = ListStringValueOrNil(ctx, plan.LqmConfig.HubSiteIds)

		input.Request.LqmConfig.InterPacketGap = ValueInt64PointerFromPlanOrState(plan.LqmConfig.InterPacketGap, state.LqmConfig.InterPacketGap)

		input.Request.LqmConfig.Statistic = ValueStringPointerFromPlanOrState(plan.LqmConfig.Statistic, state.LqmConfig.Statistic)
	}

	input.Request.LqmEnabled = ValueBoolPointerFromPlanOrState(plan.LqmEnabled, state.LqmEnabled)

	input.Request.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)

	input.Request.NetworkId = ValueStringFromPlanOrState(plan.NetworkId, state.NetworkId)

	input.Request.ProbeProfileId = ValueStringPointerFromPlanOrState(plan.ProbeProfileId, state.ProbeProfileId)

	input.Request.Tags = ListStringValueOrNil(ctx, plan.Tags)

	input.Request.Type = ValueStringPointerFromPlanOrState(plan.Type, state.Type)

	input.Request.UseForApplicationReachabilityProbes = ValueBoolPointerFromPlanOrState(plan.UseForApplicationReachabilityProbes, state.UseForApplicationReachabilityProbes)

	input.Request.UseForControllerConnections = ValueBoolPointerFromPlanOrState(plan.UseForControllerConnections, state.UseForControllerConnections)

	input.Request.UseLqmForNonHubPaths = ValueBoolPointerFromPlanOrState(plan.UseLqmForNonHubPaths, state.UseLqmForNonHubPaths)

	if plan.VpnlinkConfiguration != nil {
		input.Request.VpnlinkConfiguration = &rIUJWmK.Config{}

		input.Request.VpnlinkConfiguration.KeepAliveFailureCount = ValueInt64FromPlanOrState(plan.VpnlinkConfiguration.KeepAliveFailureCount, state.VpnlinkConfiguration.KeepAliveFailureCount)

		input.Request.VpnlinkConfiguration.KeepAliveInterval = ValueInt64FromPlanOrState(plan.VpnlinkConfiguration.KeepAliveInterval, state.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.BfdMode = types.StringValue(ans.BfdMode)

	state.BwConfigMode = types.StringValue(ans.BwConfigMode)

	state.BwcEnabled = types.BoolPointerValue(ans.BwcEnabled)

	state.Cost = types.Int64PointerValue(ans.Cost)

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.L3Reachability == nil {
		state.L3Reachability = nil
	} else {
		state.L3Reachability = &wanInterfaceRsModel_qRlmEFd_Config{}

		var3, var4 := types.ListValueFrom(ctx, types.StringType, ans.L3Reachability.ProbeConfigIds)
		state.L3Reachability.ProbeConfigIds = var3
		resp.Diagnostics.Append(var4.Errors()...)

		state.L3Reachability.UseElementDefault = types.BoolPointerValue(ans.L3Reachability.UseElementDefault)
	}

	state.LabelId = types.StringValue(ans.LabelId)

	state.LinkBwDown = types.Float64PointerValue(ans.LinkBwDown)

	state.LinkBwUp = types.Float64PointerValue(ans.LinkBwUp)

	if ans.LqmConfig == nil {
		state.LqmConfig = nil
	} else {
		state.LqmConfig = &wanInterfaceRsModel_nSFnnqb_Config{}

		var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.LqmConfig.HubSiteIds)
		state.LqmConfig.HubSiteIds = var5
		resp.Diagnostics.Append(var6.Errors()...)

		state.LqmConfig.InterPacketGap = types.Int64PointerValue(ans.LqmConfig.InterPacketGap)

		state.LqmConfig.Statistic = types.StringPointerValue(ans.LqmConfig.Statistic)
	}

	state.LqmEnabled = types.BoolPointerValue(ans.LqmEnabled)

	state.Name = types.StringPointerValue(ans.Name)

	state.NetworkId = types.StringValue(ans.NetworkId)

	state.ProbeProfileId = types.StringPointerValue(ans.ProbeProfileId)

	var7, var8 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var7
	resp.Diagnostics.Append(var8.Errors()...)

	state.Type = types.StringPointerValue(ans.Type)

	state.UseForApplicationReachabilityProbes = types.BoolPointerValue(ans.UseForApplicationReachabilityProbes)

	state.UseForControllerConnections = types.BoolPointerValue(ans.UseForControllerConnections)

	state.UseLqmForNonHubPaths = types.BoolPointerValue(ans.UseLqmForNonHubPaths)

	if ans.VpnlinkConfiguration == nil {
		state.VpnlinkConfiguration = nil
	} else {
		state.VpnlinkConfiguration = &wanInterfaceRsModel_rIUJWmK_Config{}

		state.VpnlinkConfiguration.KeepAliveFailureCount = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveFailureCount)

		state.VpnlinkConfiguration.KeepAliveInterval = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *wanInterfaceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_wan_interface",
		"locMap":                      map[string]int{"site_id": 0, "wan_interface_id": 1},
		"tokens":                      tokens,
	})

	svc := ccUusFA.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ccUusFA.DeleteInput{}

	input.SiteId = tokens[0]

	input.WanInterfaceId = tokens[1]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *wanInterfaceResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
