package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=5)
// | Computed Resource Name=sites_elements_ipfix
// +-----------------------------------------------------------------
// | IPFixSampler HasID=false
// | Port HasID=false
// | IPFixFilter HasID=false
// | CollectorConfig HasID=false
// | IPFixConfigScreen HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &elementIpfixResource{}
	_ resource.ResourceWithConfigure   = &elementIpfixResource{}
	_ resource.ResourceWithImportState = &elementIpfixResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewElementIpfixResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewElementIpfixResource() resource.Resource {
	return &elementIpfixResource{}
}

type elementIpfixResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *elementIpfixResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_element_ipfix"
}

// Schema defines the schema for this data source.
func (r *elementIpfixResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=IPFixConfigScreen
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=collector_config, type=ARRAY_REFERENCE macro=rss_schema
			"collector_config": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=host, type=STRING macro=rss_schema
						"host": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=host, type=STRING macro=rss_schema
						// property: name=host_port, type=INTEGER macro=rss_schema
						"host_port": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=host_port, type=INTEGER macro=rss_schema
						// property: name=ipfixcollectorcontext_id, type=STRING macro=rss_schema
						"ipfixcollectorcontext_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=ipfixcollectorcontext_id, type=STRING macro=rss_schema
						// property: name=max_message_size, type=INTEGER macro=rss_schema
						"max_message_size": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=max_message_size, type=INTEGER macro=rss_schema
						// property: name=protocol, type=STRING macro=rss_schema
						"protocol": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=protocol, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=protocol, type=STRING macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=export_cache_timeout, type=INTEGER macro=rss_schema
			"export_cache_timeout": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=export_cache_timeout, type=INTEGER macro=rss_schema
			// property: name=filters, type=ARRAY_REFERENCE macro=rss_schema
			"filters": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						"app_def_ids": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=dst_ports, type=ARRAY_REFERENCE macro=rss_schema
						"dst_ports": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=end, type=INTEGER macro=rss_schema
									"end": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=end, type=INTEGER macro=rss_schema
									// property: name=start, type=INTEGER macro=rss_schema
									"start": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
						// property: name=dst_prefixes_id, type=STRING macro=rss_schema
						"dst_prefixes_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=dst_prefixes_id, type=STRING macro=rss_schema
						// property: name=ipfixfiltercontext_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						"ipfixfiltercontext_ids": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=ipfixfiltercontext_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=priority_traffic_types, type=ARRAY_PRIMITIVE macro=rss_schema
						"priority_traffic_types": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=priority_traffic_types, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
						"protocols": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=rtp_transport_type, type=STRING macro=rss_schema
						"rtp_transport_type": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=rtp_transport_type, type=STRING macro=rss_schema
						// property: name=src_ports, type=ARRAY_REFERENCE macro=rss_schema
						"src_ports": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=end, type=INTEGER macro=rss_schema
									"end": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=end, type=INTEGER macro=rss_schema
									// property: name=start, type=INTEGER macro=rss_schema
									"start": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
						// property: name=src_prefixes_id, type=STRING macro=rss_schema
						"src_prefixes_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=src_prefixes_id, type=STRING macro=rss_schema
						// property: name=wan_path_direction, type=STRING macro=rss_schema
						"wan_path_direction": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=wan_path_direction, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=wan_path_direction, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=ipfixprofile_id, type=STRING macro=rss_schema
			"ipfixprofile_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=ipfixprofile_id, type=STRING macro=rss_schema
			// property: name=ipfixtemplate_id, type=STRING macro=rss_schema
			"ipfixtemplate_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=ipfixtemplate_id, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=sampler, type=REFERENCE macro=rss_schema
			"sampler": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=algorithm, type=STRING macro=rss_schema
					"algorithm": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=algorithm, type=STRING macro=rss_schema
					// property: name=time_interval, type=INTEGER macro=rss_schema
					"time_interval": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=time_interval, type=INTEGER macro=rss_schema
					// property: name=time_spacing, type=INTEGER macro=rss_schema
					"time_spacing": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=time_spacing, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=time_spacing, type=INTEGER macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *elementIpfixResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *elementIpfixResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *elementIpfixResource) doPost(ctx context.Context, plan *rsModelIPFixConfigScreen, state *rsModelIPFixConfigScreen, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_element_ipfix")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_element_ipfix",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_element_ipfix"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/ipfix"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, plan.TfParameters)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.IPFixConfigScreen{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=12
	tflog.Debug(ctx, "copy_from_plan body=body prefix=rsModel plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=collector_config, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.CollectorConfig == nil {
		body.CollectorConfig = nil
	} else if len(plan.CollectorConfig) == 0 {
		body.CollectorConfig = []sdwan_schema.CollectorConfig{}
	} else {
		body.CollectorConfig = make([]sdwan_schema.CollectorConfig, 0, len(plan.CollectorConfig))
		for varLoopCollectorConfigIndex, varLoopCollectorConfig := range plan.CollectorConfig {
			// add a new item
			body.CollectorConfig = append(body.CollectorConfig, sdwan_schema.CollectorConfig{})
			// copy_from_plan: body=body.CollectorConfig[varLoopCollectorConfigIndex] prefix=rsModel plan=varLoopCollectorConfig properties=5
			tflog.Debug(ctx, "copy_from_plan body=body.CollectorConfig[varLoopCollectorConfigIndex] prefix=rsModel plan=varLoopCollectorConfig")
			// property: name=host, type=STRING macro=copy_from_plan
			body.CollectorConfig[varLoopCollectorConfigIndex].Host = StringValueOrNil(varLoopCollectorConfig.Host)
			// property: name=host_port, type=INTEGER macro=copy_from_plan
			body.CollectorConfig[varLoopCollectorConfigIndex].HostPort = Int64ValueOrNil(varLoopCollectorConfig.HostPort)
			// property: name=ipfixcollectorcontext_id, type=STRING macro=copy_from_plan
			body.CollectorConfig[varLoopCollectorConfigIndex].IpfixcollectorcontextId = StringValueOrNil(varLoopCollectorConfig.IpfixcollectorcontextId)
			// property: name=max_message_size, type=INTEGER macro=copy_from_plan
			body.CollectorConfig[varLoopCollectorConfigIndex].MaxMessageSize = Int64ValueOrNil(varLoopCollectorConfig.MaxMessageSize)
			// property: name=protocol, type=STRING macro=copy_from_plan
			body.CollectorConfig[varLoopCollectorConfigIndex].Protocol = StringValueOrNil(varLoopCollectorConfig.Protocol)
		}
	}
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=export_cache_timeout, type=INTEGER macro=copy_from_plan
	body.ExportCacheTimeout = Int64ValueOrNil(plan.ExportCacheTimeout)
	// property: name=filters, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.Filters == nil {
		body.Filters = nil
	} else if len(plan.Filters) == 0 {
		body.Filters = []sdwan_schema.IPFixFilter{}
	} else {
		body.Filters = make([]sdwan_schema.IPFixFilter, 0, len(plan.Filters))
		for varLoopFiltersIndex, varLoopFilters := range plan.Filters {
			// add a new item
			body.Filters = append(body.Filters, sdwan_schema.IPFixFilter{})
			// copy_from_plan: body=body.Filters[varLoopFiltersIndex] prefix=rsModel plan=varLoopFilters properties=10
			tflog.Debug(ctx, "copy_from_plan body=body.Filters[varLoopFiltersIndex] prefix=rsModel plan=varLoopFilters")
			// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].AppDefIds = ListStringValueOrNil(ctx, varLoopFilters.AppDefIds)
			// property: name=dst_ports, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopFilters.DstPorts == nil {
				body.Filters[varLoopFiltersIndex].DstPorts = nil
			} else if len(varLoopFilters.DstPorts) == 0 {
				body.Filters[varLoopFiltersIndex].DstPorts = []sdwan_schema.Port{}
			} else {
				body.Filters[varLoopFiltersIndex].DstPorts = make([]sdwan_schema.Port, 0, len(varLoopFilters.DstPorts))
				for varLoopDstPortsIndex, varLoopDstPorts := range varLoopFilters.DstPorts {
					// add a new item
					body.Filters[varLoopFiltersIndex].DstPorts = append(body.Filters[varLoopFiltersIndex].DstPorts, sdwan_schema.Port{})
					// copy_from_plan: body=body.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=rsModel plan=varLoopDstPorts properties=2
					tflog.Debug(ctx, "copy_from_plan body=body.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=rsModel plan=varLoopDstPorts")
					// property: name=end, type=INTEGER macro=copy_from_plan
					body.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].End = Int64ValueOrNil(varLoopDstPorts.End)
					// property: name=start, type=INTEGER macro=copy_from_plan
					body.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].Start = Int64ValueOrNil(varLoopDstPorts.Start)
				}
			}
			// property: name=dst_prefixes_id, type=STRING macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].DstPrefixesId = StringValueOrNil(varLoopFilters.DstPrefixesId)
			// property: name=ipfixfiltercontext_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].IpfixfiltercontextIds = ListStringValueOrNil(ctx, varLoopFilters.IpfixfiltercontextIds)
			// property: name=priority_traffic_types, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].PriorityTrafficTypes = ListStringValueOrNil(ctx, varLoopFilters.PriorityTrafficTypes)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].Protocols = ListStringValueOrNil(ctx, varLoopFilters.Protocols)
			// property: name=rtp_transport_type, type=STRING macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].RtpTransportType = StringValueOrNil(varLoopFilters.RtpTransportType)
			// property: name=src_ports, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopFilters.SrcPorts == nil {
				body.Filters[varLoopFiltersIndex].SrcPorts = nil
			} else if len(varLoopFilters.SrcPorts) == 0 {
				body.Filters[varLoopFiltersIndex].SrcPorts = []sdwan_schema.Port{}
			} else {
				body.Filters[varLoopFiltersIndex].SrcPorts = make([]sdwan_schema.Port, 0, len(varLoopFilters.SrcPorts))
				for varLoopSrcPortsIndex, varLoopSrcPorts := range varLoopFilters.SrcPorts {
					// add a new item
					body.Filters[varLoopFiltersIndex].SrcPorts = append(body.Filters[varLoopFiltersIndex].SrcPorts, sdwan_schema.Port{})
					// copy_from_plan: body=body.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=rsModel plan=varLoopSrcPorts properties=2
					tflog.Debug(ctx, "copy_from_plan body=body.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=rsModel plan=varLoopSrcPorts")
					// property: name=end, type=INTEGER macro=copy_from_plan
					body.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].End = Int64ValueOrNil(varLoopSrcPorts.End)
					// property: name=start, type=INTEGER macro=copy_from_plan
					body.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].Start = Int64ValueOrNil(varLoopSrcPorts.Start)
				}
			}
			// property: name=src_prefixes_id, type=STRING macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].SrcPrefixesId = StringValueOrNil(varLoopFilters.SrcPrefixesId)
			// property: name=wan_path_direction, type=STRING macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].WanPathDirection = StringValueOrNil(varLoopFilters.WanPathDirection)
		}
	}
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=ipfixprofile_id, type=STRING macro=copy_from_plan
	body.IpfixprofileId = StringValueOrNil(plan.IpfixprofileId)
	// property: name=ipfixtemplate_id, type=STRING macro=copy_from_plan
	body.IpfixtemplateId = StringValueOrNil(plan.IpfixtemplateId)
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=sampler, type=REFERENCE macro=copy_from_plan
	if plan.Sampler != nil {
		body.Sampler = &sdwan_schema.IPFixSampler{}
		// copy_from_plan: body=body.Sampler prefix=rsModel plan=plan.Sampler properties=3
		tflog.Debug(ctx, "copy_from_plan body=body.Sampler prefix=rsModel plan=plan.Sampler")
		// property: name=algorithm, type=STRING macro=copy_from_plan
		body.Sampler.Algorithm = StringValueOrNil(plan.Sampler.Algorithm)
		// property: name=time_interval, type=INTEGER macro=copy_from_plan
		body.Sampler.TimeInterval = Int64ValueOrNil(plan.Sampler.TimeInterval)
		// property: name=time_spacing, type=INTEGER macro=copy_from_plan
		body.Sampler.TimeSpacing = Int64ValueOrNil(plan.Sampler.TimeSpacing)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct IPFixConfigScreen to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete request_body_string::id")
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	tflog.Debug(ctx, "http json override: delete request_body_string::_etag")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	tflog.Debug(ctx, "http json override: set request_body_string::_schema")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_element_ipfix", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_element_ipfix",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_element_ipfix", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_element_ipfix",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_element_ipfix", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.IPFixConfigScreen
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to IPFixConfigScreen in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_element_ipfix with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=IPFixConfigScreen
	// copy_to_state: state=state prefix=rsModel ans=ans properties=12
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=collector_config, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.CollectorConfig == nil {
		state.CollectorConfig = nil
	} else if len(ans.CollectorConfig) == 0 {
		state.CollectorConfig = []rsModelCollectorConfig{}
	} else {
		state.CollectorConfig = make([]rsModelCollectorConfig, 0, len(ans.CollectorConfig))
		for varLoopCollectorConfigIndex, varLoopCollectorConfig := range ans.CollectorConfig {
			// add a new item
			state.CollectorConfig = append(state.CollectorConfig, rsModelCollectorConfig{})
			// copy_to_state: state=state.CollectorConfig[varLoopCollectorConfigIndex] prefix=rsModel ans=varLoopCollectorConfig properties=5
			tflog.Debug(ctx, "copy_to_state state=state.CollectorConfig[varLoopCollectorConfigIndex] prefix=rsModel ans=varLoopCollectorConfig")
			// property: name=host, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].Host = types.StringPointerValue(varLoopCollectorConfig.Host)
			// property: name=host_port, type=INTEGER macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].HostPort = types.Int64PointerValue(varLoopCollectorConfig.HostPort)
			// property: name=ipfixcollectorcontext_id, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].IpfixcollectorcontextId = types.StringPointerValue(varLoopCollectorConfig.IpfixcollectorcontextId)
			// property: name=max_message_size, type=INTEGER macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].MaxMessageSize = types.Int64PointerValue(varLoopCollectorConfig.MaxMessageSize)
			// property: name=protocol, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].Protocol = types.StringPointerValue(varLoopCollectorConfig.Protocol)
		}
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=export_cache_timeout, type=INTEGER macro=copy_to_state
	state.ExportCacheTimeout = types.Int64PointerValue(ans.ExportCacheTimeout)
	// property: name=filters, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Filters == nil {
		state.Filters = nil
	} else if len(ans.Filters) == 0 {
		state.Filters = []rsModelIPFixFilter{}
	} else {
		state.Filters = make([]rsModelIPFixFilter, 0, len(ans.Filters))
		for varLoopFiltersIndex, varLoopFilters := range ans.Filters {
			// add a new item
			state.Filters = append(state.Filters, rsModelIPFixFilter{})
			// copy_to_state: state=state.Filters[varLoopFiltersIndex] prefix=rsModel ans=varLoopFilters properties=10
			tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex] prefix=rsModel ans=varLoopFilters")
			// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, varLoopFilters.AppDefIds)
			state.Filters[varLoopFiltersIndex].AppDefIds = varAppDefIds
			resp.Diagnostics.Append(errAppDefIds.Errors()...)
			// property: name=dst_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopFilters.DstPorts == nil {
				state.Filters[varLoopFiltersIndex].DstPorts = nil
			} else if len(varLoopFilters.DstPorts) == 0 {
				state.Filters[varLoopFiltersIndex].DstPorts = []rsModelPort{}
			} else {
				state.Filters[varLoopFiltersIndex].DstPorts = make([]rsModelPort, 0, len(varLoopFilters.DstPorts))
				for varLoopDstPortsIndex, varLoopDstPorts := range varLoopFilters.DstPorts {
					// add a new item
					state.Filters[varLoopFiltersIndex].DstPorts = append(state.Filters[varLoopFiltersIndex].DstPorts, rsModelPort{})
					// copy_to_state: state=state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=rsModel ans=varLoopDstPorts properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=rsModel ans=varLoopDstPorts")
					// property: name=end, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].End = types.Int64PointerValue(varLoopDstPorts.End)
					// property: name=start, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].Start = types.Int64PointerValue(varLoopDstPorts.Start)
				}
			}
			// property: name=dst_prefixes_id, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].DstPrefixesId = types.StringPointerValue(varLoopFilters.DstPrefixesId)
			// property: name=ipfixfiltercontext_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varIpfixfiltercontextIds, errIpfixfiltercontextIds := types.ListValueFrom(ctx, types.StringType, varLoopFilters.IpfixfiltercontextIds)
			state.Filters[varLoopFiltersIndex].IpfixfiltercontextIds = varIpfixfiltercontextIds
			resp.Diagnostics.Append(errIpfixfiltercontextIds.Errors()...)
			// property: name=priority_traffic_types, type=ARRAY_PRIMITIVE macro=copy_to_state
			varPriorityTrafficTypes, errPriorityTrafficTypes := types.ListValueFrom(ctx, types.StringType, varLoopFilters.PriorityTrafficTypes)
			state.Filters[varLoopFiltersIndex].PriorityTrafficTypes = varPriorityTrafficTypes
			resp.Diagnostics.Append(errPriorityTrafficTypes.Errors()...)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
			varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopFilters.Protocols)
			state.Filters[varLoopFiltersIndex].Protocols = varProtocols
			resp.Diagnostics.Append(errProtocols.Errors()...)
			// property: name=rtp_transport_type, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].RtpTransportType = types.StringPointerValue(varLoopFilters.RtpTransportType)
			// property: name=src_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopFilters.SrcPorts == nil {
				state.Filters[varLoopFiltersIndex].SrcPorts = nil
			} else if len(varLoopFilters.SrcPorts) == 0 {
				state.Filters[varLoopFiltersIndex].SrcPorts = []rsModelPort{}
			} else {
				state.Filters[varLoopFiltersIndex].SrcPorts = make([]rsModelPort, 0, len(varLoopFilters.SrcPorts))
				for varLoopSrcPortsIndex, varLoopSrcPorts := range varLoopFilters.SrcPorts {
					// add a new item
					state.Filters[varLoopFiltersIndex].SrcPorts = append(state.Filters[varLoopFiltersIndex].SrcPorts, rsModelPort{})
					// copy_to_state: state=state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=rsModel ans=varLoopSrcPorts properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=rsModel ans=varLoopSrcPorts")
					// property: name=end, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].End = types.Int64PointerValue(varLoopSrcPorts.End)
					// property: name=start, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].Start = types.Int64PointerValue(varLoopSrcPorts.Start)
				}
			}
			// property: name=src_prefixes_id, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].SrcPrefixesId = types.StringPointerValue(varLoopFilters.SrcPrefixesId)
			// property: name=wan_path_direction, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].WanPathDirection = types.StringPointerValue(varLoopFilters.WanPathDirection)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipfixprofile_id, type=STRING macro=copy_to_state
	state.IpfixprofileId = types.StringPointerValue(ans.IpfixprofileId)
	// property: name=ipfixtemplate_id, type=STRING macro=copy_to_state
	state.IpfixtemplateId = types.StringPointerValue(ans.IpfixtemplateId)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=sampler, type=REFERENCE macro=copy_to_state
	if ans.Sampler == nil {
		state.Sampler = nil
	} else {
		state.Sampler = &rsModelIPFixSampler{}
		// copy_to_state: state=state.Sampler prefix=rsModel ans=ans.Sampler properties=3
		tflog.Debug(ctx, "copy_to_state state=state.Sampler prefix=rsModel ans=ans.Sampler")
		// property: name=algorithm, type=STRING macro=copy_to_state
		state.Sampler.Algorithm = types.StringPointerValue(ans.Sampler.Algorithm)
		// property: name=time_interval, type=INTEGER macro=copy_to_state
		state.Sampler.TimeInterval = types.Int64PointerValue(ans.Sampler.TimeInterval)
		// property: name=time_spacing, type=INTEGER macro=copy_to_state
		state.Sampler.TimeSpacing = types.Int64PointerValue(ans.Sampler.TimeSpacing)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *elementIpfixResource) doGet(ctx context.Context, state *rsModelIPFixConfigScreen, savestate *rsModelIPFixConfigScreen, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_element_ipfix",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 3 {
		resp.Diagnostics.AddError("error in prismasdwan_element_ipfix ID format", "Expected 3 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_element_ipfix"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/ipfix/{ipfix_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["ipfix_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_element_ipfix", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_element_ipfix",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_element_ipfix from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=IPFixConfigScreen
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.IPFixConfigScreen
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to IPFixConfigScreen in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=12
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=collector_config, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.CollectorConfig == nil {
		state.CollectorConfig = nil
	} else if len(ans.CollectorConfig) == 0 {
		state.CollectorConfig = []rsModelCollectorConfig{}
	} else {
		state.CollectorConfig = make([]rsModelCollectorConfig, 0, len(ans.CollectorConfig))
		for varLoopCollectorConfigIndex, varLoopCollectorConfig := range ans.CollectorConfig {
			// add a new item
			state.CollectorConfig = append(state.CollectorConfig, rsModelCollectorConfig{})
			// copy_to_state: state=state.CollectorConfig[varLoopCollectorConfigIndex] prefix=rsModel ans=varLoopCollectorConfig properties=5
			tflog.Debug(ctx, "copy_to_state state=state.CollectorConfig[varLoopCollectorConfigIndex] prefix=rsModel ans=varLoopCollectorConfig")
			// property: name=host, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].Host = types.StringPointerValue(varLoopCollectorConfig.Host)
			// property: name=host_port, type=INTEGER macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].HostPort = types.Int64PointerValue(varLoopCollectorConfig.HostPort)
			// property: name=ipfixcollectorcontext_id, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].IpfixcollectorcontextId = types.StringPointerValue(varLoopCollectorConfig.IpfixcollectorcontextId)
			// property: name=max_message_size, type=INTEGER macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].MaxMessageSize = types.Int64PointerValue(varLoopCollectorConfig.MaxMessageSize)
			// property: name=protocol, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].Protocol = types.StringPointerValue(varLoopCollectorConfig.Protocol)
		}
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=export_cache_timeout, type=INTEGER macro=copy_to_state
	state.ExportCacheTimeout = types.Int64PointerValue(ans.ExportCacheTimeout)
	// property: name=filters, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Filters == nil {
		state.Filters = nil
	} else if len(ans.Filters) == 0 {
		state.Filters = []rsModelIPFixFilter{}
	} else {
		state.Filters = make([]rsModelIPFixFilter, 0, len(ans.Filters))
		for varLoopFiltersIndex, varLoopFilters := range ans.Filters {
			// add a new item
			state.Filters = append(state.Filters, rsModelIPFixFilter{})
			// copy_to_state: state=state.Filters[varLoopFiltersIndex] prefix=rsModel ans=varLoopFilters properties=10
			tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex] prefix=rsModel ans=varLoopFilters")
			// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, varLoopFilters.AppDefIds)
			state.Filters[varLoopFiltersIndex].AppDefIds = varAppDefIds
			resp.Diagnostics.Append(errAppDefIds.Errors()...)
			// property: name=dst_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopFilters.DstPorts == nil {
				state.Filters[varLoopFiltersIndex].DstPorts = nil
			} else if len(varLoopFilters.DstPorts) == 0 {
				state.Filters[varLoopFiltersIndex].DstPorts = []rsModelPort{}
			} else {
				state.Filters[varLoopFiltersIndex].DstPorts = make([]rsModelPort, 0, len(varLoopFilters.DstPorts))
				for varLoopDstPortsIndex, varLoopDstPorts := range varLoopFilters.DstPorts {
					// add a new item
					state.Filters[varLoopFiltersIndex].DstPorts = append(state.Filters[varLoopFiltersIndex].DstPorts, rsModelPort{})
					// copy_to_state: state=state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=rsModel ans=varLoopDstPorts properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=rsModel ans=varLoopDstPorts")
					// property: name=end, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].End = types.Int64PointerValue(varLoopDstPorts.End)
					// property: name=start, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].Start = types.Int64PointerValue(varLoopDstPorts.Start)
				}
			}
			// property: name=dst_prefixes_id, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].DstPrefixesId = types.StringPointerValue(varLoopFilters.DstPrefixesId)
			// property: name=ipfixfiltercontext_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varIpfixfiltercontextIds, errIpfixfiltercontextIds := types.ListValueFrom(ctx, types.StringType, varLoopFilters.IpfixfiltercontextIds)
			state.Filters[varLoopFiltersIndex].IpfixfiltercontextIds = varIpfixfiltercontextIds
			resp.Diagnostics.Append(errIpfixfiltercontextIds.Errors()...)
			// property: name=priority_traffic_types, type=ARRAY_PRIMITIVE macro=copy_to_state
			varPriorityTrafficTypes, errPriorityTrafficTypes := types.ListValueFrom(ctx, types.StringType, varLoopFilters.PriorityTrafficTypes)
			state.Filters[varLoopFiltersIndex].PriorityTrafficTypes = varPriorityTrafficTypes
			resp.Diagnostics.Append(errPriorityTrafficTypes.Errors()...)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
			varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopFilters.Protocols)
			state.Filters[varLoopFiltersIndex].Protocols = varProtocols
			resp.Diagnostics.Append(errProtocols.Errors()...)
			// property: name=rtp_transport_type, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].RtpTransportType = types.StringPointerValue(varLoopFilters.RtpTransportType)
			// property: name=src_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopFilters.SrcPorts == nil {
				state.Filters[varLoopFiltersIndex].SrcPorts = nil
			} else if len(varLoopFilters.SrcPorts) == 0 {
				state.Filters[varLoopFiltersIndex].SrcPorts = []rsModelPort{}
			} else {
				state.Filters[varLoopFiltersIndex].SrcPorts = make([]rsModelPort, 0, len(varLoopFilters.SrcPorts))
				for varLoopSrcPortsIndex, varLoopSrcPorts := range varLoopFilters.SrcPorts {
					// add a new item
					state.Filters[varLoopFiltersIndex].SrcPorts = append(state.Filters[varLoopFiltersIndex].SrcPorts, rsModelPort{})
					// copy_to_state: state=state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=rsModel ans=varLoopSrcPorts properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=rsModel ans=varLoopSrcPorts")
					// property: name=end, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].End = types.Int64PointerValue(varLoopSrcPorts.End)
					// property: name=start, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].Start = types.Int64PointerValue(varLoopSrcPorts.Start)
				}
			}
			// property: name=src_prefixes_id, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].SrcPrefixesId = types.StringPointerValue(varLoopFilters.SrcPrefixesId)
			// property: name=wan_path_direction, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].WanPathDirection = types.StringPointerValue(varLoopFilters.WanPathDirection)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipfixprofile_id, type=STRING macro=copy_to_state
	state.IpfixprofileId = types.StringPointerValue(ans.IpfixprofileId)
	// property: name=ipfixtemplate_id, type=STRING macro=copy_to_state
	state.IpfixtemplateId = types.StringPointerValue(ans.IpfixtemplateId)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=sampler, type=REFERENCE macro=copy_to_state
	if ans.Sampler == nil {
		state.Sampler = nil
	} else {
		state.Sampler = &rsModelIPFixSampler{}
		// copy_to_state: state=state.Sampler prefix=rsModel ans=ans.Sampler properties=3
		tflog.Debug(ctx, "copy_to_state state=state.Sampler prefix=rsModel ans=ans.Sampler")
		// property: name=algorithm, type=STRING macro=copy_to_state
		state.Sampler.Algorithm = types.StringPointerValue(ans.Sampler.Algorithm)
		// property: name=time_interval, type=INTEGER macro=copy_to_state
		state.Sampler.TimeInterval = types.Int64PointerValue(ans.Sampler.TimeInterval)
		// property: name=time_spacing, type=INTEGER macro=copy_to_state
		state.Sampler.TimeSpacing = types.Int64PointerValue(ans.Sampler.TimeSpacing)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *elementIpfixResource) doPut(ctx context.Context, plan *rsModelIPFixConfigScreen, state *rsModelIPFixConfigScreen, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_element_ipfix",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_element_ipfix", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) < 3 {
		resp.Diagnostics.AddError("error in prismasdwan_element_ipfix ID format", "Expected 3 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_element_ipfix"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/ipfix/{ipfix_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["ipfix_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.IPFixConfigScreen{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=12
	tflog.Debug(ctx, "copy_from_plan_or_state body=body prefix=rsModel state=state plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=collector_config, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.CollectorConfig == nil && (state == nil || state.CollectorConfig == nil) {
		body.CollectorConfig = nil
	} else if len(plan.CollectorConfig) == 0 && (state == nil || len(state.CollectorConfig) == 0) {
		body.CollectorConfig = []sdwan_schema.CollectorConfig{}
	} else if len(plan.CollectorConfig) != 0 || (state != nil && len(state.CollectorConfig) != 0) {
		CollectorConfigToUse := plan.CollectorConfig
		if len(plan.CollectorConfig) == 0 {
			CollectorConfigToUse = state.CollectorConfig
		}
		body.CollectorConfig = make([]sdwan_schema.CollectorConfig, 0, len(CollectorConfigToUse))
		for varLoopCollectorConfigIndex, varLoopCollectorConfig := range CollectorConfigToUse {
			// add a new item
			body.CollectorConfig = append(body.CollectorConfig, sdwan_schema.CollectorConfig{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.CollectorConfig[varLoopCollectorConfigIndex] prefix=rsModel plan=varLoopCollectorConfig properties=5
			tflog.Debug(ctx, "copy_from_plan body=body.CollectorConfig[varLoopCollectorConfigIndex] prefix=rsModel plan=varLoopCollectorConfig")
			// property: name=host, type=STRING macro=copy_from_plan
			body.CollectorConfig[varLoopCollectorConfigIndex].Host = StringValueOrNil(varLoopCollectorConfig.Host)
			// property: name=host_port, type=INTEGER macro=copy_from_plan
			body.CollectorConfig[varLoopCollectorConfigIndex].HostPort = Int64ValueOrNil(varLoopCollectorConfig.HostPort)
			// property: name=ipfixcollectorcontext_id, type=STRING macro=copy_from_plan
			body.CollectorConfig[varLoopCollectorConfigIndex].IpfixcollectorcontextId = StringValueOrNil(varLoopCollectorConfig.IpfixcollectorcontextId)
			// property: name=max_message_size, type=INTEGER macro=copy_from_plan
			body.CollectorConfig[varLoopCollectorConfigIndex].MaxMessageSize = Int64ValueOrNil(varLoopCollectorConfig.MaxMessageSize)
			// property: name=protocol, type=STRING macro=copy_from_plan
			body.CollectorConfig[varLoopCollectorConfigIndex].Protocol = StringValueOrNil(varLoopCollectorConfig.Protocol)
		}
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=export_cache_timeout, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.ExportCacheTimeout = ValueInt64PointerFromPlanOrState(plan.ExportCacheTimeout, state.ExportCacheTimeout)
	} else {
		body.ExportCacheTimeout = Int64ValueOrNil(plan.ExportCacheTimeout)
	}
	// property: name=filters, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.Filters == nil && (state == nil || state.Filters == nil) {
		body.Filters = nil
	} else if len(plan.Filters) == 0 && (state == nil || len(state.Filters) == 0) {
		body.Filters = []sdwan_schema.IPFixFilter{}
	} else if len(plan.Filters) != 0 || (state != nil && len(state.Filters) != 0) {
		FiltersToUse := plan.Filters
		if len(plan.Filters) == 0 {
			FiltersToUse = state.Filters
		}
		body.Filters = make([]sdwan_schema.IPFixFilter, 0, len(FiltersToUse))
		for varLoopFiltersIndex, varLoopFilters := range FiltersToUse {
			// add a new item
			body.Filters = append(body.Filters, sdwan_schema.IPFixFilter{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.Filters[varLoopFiltersIndex] prefix=rsModel plan=varLoopFilters properties=10
			tflog.Debug(ctx, "copy_from_plan body=body.Filters[varLoopFiltersIndex] prefix=rsModel plan=varLoopFilters")
			// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].AppDefIds = ListStringValueOrNil(ctx, varLoopFilters.AppDefIds)
			// property: name=dst_ports, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopFilters.DstPorts == nil {
				body.Filters[varLoopFiltersIndex].DstPorts = nil
			} else if len(varLoopFilters.DstPorts) == 0 {
				body.Filters[varLoopFiltersIndex].DstPorts = []sdwan_schema.Port{}
			} else {
				body.Filters[varLoopFiltersIndex].DstPorts = make([]sdwan_schema.Port, 0, len(varLoopFilters.DstPorts))
				for varLoopDstPortsIndex, varLoopDstPorts := range varLoopFilters.DstPorts {
					// add a new item
					body.Filters[varLoopFiltersIndex].DstPorts = append(body.Filters[varLoopFiltersIndex].DstPorts, sdwan_schema.Port{})
					// copy_from_plan: body=body.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=rsModel plan=varLoopDstPorts properties=2
					tflog.Debug(ctx, "copy_from_plan body=body.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=rsModel plan=varLoopDstPorts")
					// property: name=end, type=INTEGER macro=copy_from_plan
					body.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].End = Int64ValueOrNil(varLoopDstPorts.End)
					// property: name=start, type=INTEGER macro=copy_from_plan
					body.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].Start = Int64ValueOrNil(varLoopDstPorts.Start)
				}
			}
			// property: name=dst_prefixes_id, type=STRING macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].DstPrefixesId = StringValueOrNil(varLoopFilters.DstPrefixesId)
			// property: name=ipfixfiltercontext_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].IpfixfiltercontextIds = ListStringValueOrNil(ctx, varLoopFilters.IpfixfiltercontextIds)
			// property: name=priority_traffic_types, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].PriorityTrafficTypes = ListStringValueOrNil(ctx, varLoopFilters.PriorityTrafficTypes)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].Protocols = ListStringValueOrNil(ctx, varLoopFilters.Protocols)
			// property: name=rtp_transport_type, type=STRING macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].RtpTransportType = StringValueOrNil(varLoopFilters.RtpTransportType)
			// property: name=src_ports, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopFilters.SrcPorts == nil {
				body.Filters[varLoopFiltersIndex].SrcPorts = nil
			} else if len(varLoopFilters.SrcPorts) == 0 {
				body.Filters[varLoopFiltersIndex].SrcPorts = []sdwan_schema.Port{}
			} else {
				body.Filters[varLoopFiltersIndex].SrcPorts = make([]sdwan_schema.Port, 0, len(varLoopFilters.SrcPorts))
				for varLoopSrcPortsIndex, varLoopSrcPorts := range varLoopFilters.SrcPorts {
					// add a new item
					body.Filters[varLoopFiltersIndex].SrcPorts = append(body.Filters[varLoopFiltersIndex].SrcPorts, sdwan_schema.Port{})
					// copy_from_plan: body=body.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=rsModel plan=varLoopSrcPorts properties=2
					tflog.Debug(ctx, "copy_from_plan body=body.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=rsModel plan=varLoopSrcPorts")
					// property: name=end, type=INTEGER macro=copy_from_plan
					body.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].End = Int64ValueOrNil(varLoopSrcPorts.End)
					// property: name=start, type=INTEGER macro=copy_from_plan
					body.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].Start = Int64ValueOrNil(varLoopSrcPorts.Start)
				}
			}
			// property: name=src_prefixes_id, type=STRING macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].SrcPrefixesId = StringValueOrNil(varLoopFilters.SrcPrefixesId)
			// property: name=wan_path_direction, type=STRING macro=copy_from_plan
			body.Filters[varLoopFiltersIndex].WanPathDirection = StringValueOrNil(varLoopFilters.WanPathDirection)
		}
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=ipfixprofile_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.IpfixprofileId = ValueStringPointerFromPlanOrState(plan.IpfixprofileId, state.IpfixprofileId)
	} else {
		body.IpfixprofileId = StringValueOrNil(plan.IpfixprofileId)
	}
	// property: name=ipfixtemplate_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.IpfixtemplateId = ValueStringPointerFromPlanOrState(plan.IpfixtemplateId, state.IpfixtemplateId)
	} else {
		body.IpfixtemplateId = StringValueOrNil(plan.IpfixtemplateId)
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=sampler, type=REFERENCE macro=copy_from_plan_or_state
	if plan.Sampler == nil {
		body.Sampler = nil
	} else {
		body.Sampler = &sdwan_schema.IPFixSampler{}
		// copy_from_plan_or_state: body=body.Sampler prefix=rsModel state=state.Sampler plan=plan.Sampler properties=3
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.Sampler prefix=rsModel state=state.Sampler plan=plan.Sampler")
		// property: name=algorithm, type=STRING macro=copy_from_plan_or_state
		if state.Sampler != nil {
			body.Sampler.Algorithm = ValueStringPointerFromPlanOrState(plan.Sampler.Algorithm, state.Sampler.Algorithm)
		} else {
			body.Sampler.Algorithm = StringValueOrNil(plan.Sampler.Algorithm)
		}
		// property: name=time_interval, type=INTEGER macro=copy_from_plan_or_state
		if state.Sampler != nil {
			body.Sampler.TimeInterval = ValueInt64PointerFromPlanOrState(plan.Sampler.TimeInterval, state.Sampler.TimeInterval)
		} else {
			body.Sampler.TimeInterval = Int64ValueOrNil(plan.Sampler.TimeInterval)
		}
		// property: name=time_spacing, type=INTEGER macro=copy_from_plan_or_state
		if state.Sampler != nil {
			body.Sampler.TimeSpacing = ValueInt64PointerFromPlanOrState(plan.Sampler.TimeSpacing, state.Sampler.TimeSpacing)
		} else {
			body.Sampler.TimeSpacing = Int64ValueOrNil(plan.Sampler.TimeSpacing)
		}
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct IPFixConfigScreen to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_element_ipfix", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_element_ipfix",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_element_ipfix", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_element_ipfix",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_element_ipfix", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.IPFixConfigScreen
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to IPFixConfigScreen in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=IPFixConfigScreen
	// copy_to_state: state=state prefix=rsModel ans=ans properties=12
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=collector_config, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.CollectorConfig == nil {
		state.CollectorConfig = nil
	} else if len(ans.CollectorConfig) == 0 {
		state.CollectorConfig = []rsModelCollectorConfig{}
	} else {
		state.CollectorConfig = make([]rsModelCollectorConfig, 0, len(ans.CollectorConfig))
		for varLoopCollectorConfigIndex, varLoopCollectorConfig := range ans.CollectorConfig {
			// add a new item
			state.CollectorConfig = append(state.CollectorConfig, rsModelCollectorConfig{})
			// copy_to_state: state=state.CollectorConfig[varLoopCollectorConfigIndex] prefix=rsModel ans=varLoopCollectorConfig properties=5
			tflog.Debug(ctx, "copy_to_state state=state.CollectorConfig[varLoopCollectorConfigIndex] prefix=rsModel ans=varLoopCollectorConfig")
			// property: name=host, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].Host = types.StringPointerValue(varLoopCollectorConfig.Host)
			// property: name=host_port, type=INTEGER macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].HostPort = types.Int64PointerValue(varLoopCollectorConfig.HostPort)
			// property: name=ipfixcollectorcontext_id, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].IpfixcollectorcontextId = types.StringPointerValue(varLoopCollectorConfig.IpfixcollectorcontextId)
			// property: name=max_message_size, type=INTEGER macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].MaxMessageSize = types.Int64PointerValue(varLoopCollectorConfig.MaxMessageSize)
			// property: name=protocol, type=STRING macro=copy_to_state
			state.CollectorConfig[varLoopCollectorConfigIndex].Protocol = types.StringPointerValue(varLoopCollectorConfig.Protocol)
		}
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=export_cache_timeout, type=INTEGER macro=copy_to_state
	state.ExportCacheTimeout = types.Int64PointerValue(ans.ExportCacheTimeout)
	// property: name=filters, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Filters == nil {
		state.Filters = nil
	} else if len(ans.Filters) == 0 {
		state.Filters = []rsModelIPFixFilter{}
	} else {
		state.Filters = make([]rsModelIPFixFilter, 0, len(ans.Filters))
		for varLoopFiltersIndex, varLoopFilters := range ans.Filters {
			// add a new item
			state.Filters = append(state.Filters, rsModelIPFixFilter{})
			// copy_to_state: state=state.Filters[varLoopFiltersIndex] prefix=rsModel ans=varLoopFilters properties=10
			tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex] prefix=rsModel ans=varLoopFilters")
			// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, varLoopFilters.AppDefIds)
			state.Filters[varLoopFiltersIndex].AppDefIds = varAppDefIds
			resp.Diagnostics.Append(errAppDefIds.Errors()...)
			// property: name=dst_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopFilters.DstPorts == nil {
				state.Filters[varLoopFiltersIndex].DstPorts = nil
			} else if len(varLoopFilters.DstPorts) == 0 {
				state.Filters[varLoopFiltersIndex].DstPorts = []rsModelPort{}
			} else {
				state.Filters[varLoopFiltersIndex].DstPorts = make([]rsModelPort, 0, len(varLoopFilters.DstPorts))
				for varLoopDstPortsIndex, varLoopDstPorts := range varLoopFilters.DstPorts {
					// add a new item
					state.Filters[varLoopFiltersIndex].DstPorts = append(state.Filters[varLoopFiltersIndex].DstPorts, rsModelPort{})
					// copy_to_state: state=state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=rsModel ans=varLoopDstPorts properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex] prefix=rsModel ans=varLoopDstPorts")
					// property: name=end, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].End = types.Int64PointerValue(varLoopDstPorts.End)
					// property: name=start, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].DstPorts[varLoopDstPortsIndex].Start = types.Int64PointerValue(varLoopDstPorts.Start)
				}
			}
			// property: name=dst_prefixes_id, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].DstPrefixesId = types.StringPointerValue(varLoopFilters.DstPrefixesId)
			// property: name=ipfixfiltercontext_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varIpfixfiltercontextIds, errIpfixfiltercontextIds := types.ListValueFrom(ctx, types.StringType, varLoopFilters.IpfixfiltercontextIds)
			state.Filters[varLoopFiltersIndex].IpfixfiltercontextIds = varIpfixfiltercontextIds
			resp.Diagnostics.Append(errIpfixfiltercontextIds.Errors()...)
			// property: name=priority_traffic_types, type=ARRAY_PRIMITIVE macro=copy_to_state
			varPriorityTrafficTypes, errPriorityTrafficTypes := types.ListValueFrom(ctx, types.StringType, varLoopFilters.PriorityTrafficTypes)
			state.Filters[varLoopFiltersIndex].PriorityTrafficTypes = varPriorityTrafficTypes
			resp.Diagnostics.Append(errPriorityTrafficTypes.Errors()...)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
			varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopFilters.Protocols)
			state.Filters[varLoopFiltersIndex].Protocols = varProtocols
			resp.Diagnostics.Append(errProtocols.Errors()...)
			// property: name=rtp_transport_type, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].RtpTransportType = types.StringPointerValue(varLoopFilters.RtpTransportType)
			// property: name=src_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopFilters.SrcPorts == nil {
				state.Filters[varLoopFiltersIndex].SrcPorts = nil
			} else if len(varLoopFilters.SrcPorts) == 0 {
				state.Filters[varLoopFiltersIndex].SrcPorts = []rsModelPort{}
			} else {
				state.Filters[varLoopFiltersIndex].SrcPorts = make([]rsModelPort, 0, len(varLoopFilters.SrcPorts))
				for varLoopSrcPortsIndex, varLoopSrcPorts := range varLoopFilters.SrcPorts {
					// add a new item
					state.Filters[varLoopFiltersIndex].SrcPorts = append(state.Filters[varLoopFiltersIndex].SrcPorts, rsModelPort{})
					// copy_to_state: state=state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=rsModel ans=varLoopSrcPorts properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex] prefix=rsModel ans=varLoopSrcPorts")
					// property: name=end, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].End = types.Int64PointerValue(varLoopSrcPorts.End)
					// property: name=start, type=INTEGER macro=copy_to_state
					state.Filters[varLoopFiltersIndex].SrcPorts[varLoopSrcPortsIndex].Start = types.Int64PointerValue(varLoopSrcPorts.Start)
				}
			}
			// property: name=src_prefixes_id, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].SrcPrefixesId = types.StringPointerValue(varLoopFilters.SrcPrefixesId)
			// property: name=wan_path_direction, type=STRING macro=copy_to_state
			state.Filters[varLoopFiltersIndex].WanPathDirection = types.StringPointerValue(varLoopFilters.WanPathDirection)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipfixprofile_id, type=STRING macro=copy_to_state
	state.IpfixprofileId = types.StringPointerValue(ans.IpfixprofileId)
	// property: name=ipfixtemplate_id, type=STRING macro=copy_to_state
	state.IpfixtemplateId = types.StringPointerValue(ans.IpfixtemplateId)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=sampler, type=REFERENCE macro=copy_to_state
	if ans.Sampler == nil {
		state.Sampler = nil
	} else {
		state.Sampler = &rsModelIPFixSampler{}
		// copy_to_state: state=state.Sampler prefix=rsModel ans=ans.Sampler properties=3
		tflog.Debug(ctx, "copy_to_state state=state.Sampler prefix=rsModel ans=ans.Sampler")
		// property: name=algorithm, type=STRING macro=copy_to_state
		state.Sampler.Algorithm = types.StringPointerValue(ans.Sampler.Algorithm)
		// property: name=time_interval, type=INTEGER macro=copy_to_state
		state.Sampler.TimeInterval = types.Int64PointerValue(ans.Sampler.TimeInterval)
		// property: name=time_spacing, type=INTEGER macro=copy_to_state
		state.Sampler.TimeSpacing = types.Int64PointerValue(ans.Sampler.TimeSpacing)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *elementIpfixResource) doDelete(ctx context.Context, state *rsModelIPFixConfigScreen, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_element_ipfix",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 3 {
		resp.Diagnostics.AddError("error in prismasdwan_element_ipfix ID format", "Expected 3 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_element_ipfix"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/ipfix/{ipfix_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["ipfix_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_element_ipfix", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *elementIpfixResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_element_ipfix")
	var plan rsModelIPFixConfigScreen
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelIPFixConfigScreen
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *elementIpfixResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_element_ipfix")
	var savestate, state rsModelIPFixConfigScreen
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *elementIpfixResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_element_ipfix")
	var plan, state rsModelIPFixConfigScreen
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *elementIpfixResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_element_ipfix")
	var state rsModelIPFixConfigScreen
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *elementIpfixResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
