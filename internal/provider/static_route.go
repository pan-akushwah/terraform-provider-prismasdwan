package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	tyOPiTo "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/next/hop"
	efuRypb "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/static/route/v2/n3"
	vqtUUHF "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v23/api/sites/siteid/elements/elementid/staticroutes"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &staticRouteListDataSource{}
	_ datasource.DataSourceWithConfigure = &staticRouteListDataSource{}
)

func NewStaticRouteListDataSource() datasource.DataSource {
	return &staticRouteListDataSource{}
}

type staticRouteListDataSource struct {
	client *sdwan.Client
}

// staticRouteListDsModel is the model.
type staticRouteListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ElementId types.String `tfsdk:"element_id"`
	SiteId    types.String `tfsdk:"site_id"`

	// Output.
	Items      []staticRouteListDsModel_efuRypb_Config `tfsdk:"items"`
	TotalItems types.Int64                             `tfsdk:"total_items"`
}

type staticRouteListDsModel_efuRypb_Config struct {
	AddressFamily            types.String                            `tfsdk:"address_family"`
	Description              types.String                            `tfsdk:"description"`
	DestinationPrefix        types.String                            `tfsdk:"destination_prefix"`
	Etag                     types.Int64                             `tfsdk:"etag"`
	Id                       types.String                            `tfsdk:"id"`
	Name                     types.String                            `tfsdk:"name"`
	NetworkContextId         types.String                            `tfsdk:"network_context_id"`
	NexthopReachabilityProbe types.Bool                              `tfsdk:"nexthop_reachability_probe"`
	Nexthops                 []staticRouteListDsModel_tyOPiTo_Config `tfsdk:"nexthops"`
	Scope                    types.String                            `tfsdk:"scope"`
	Tags                     types.List                              `tfsdk:"tags"`
	VrfContextId             types.String                            `tfsdk:"vrf_context_id"`
}

type staticRouteListDsModel_tyOPiTo_Config struct {
	AdminDistance      types.Int64  `tfsdk:"admin_distance"`
	NexthopInterfaceId types.String `tfsdk:"nexthop_interface_id"`
	NexthopIp          types.String `tfsdk:"nexthop_ip"`
	Self               types.Bool   `tfsdk:"self"`
}

// Metadata returns the data source type name.
func (d *staticRouteListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_static_route_list"
}

// Schema defines the schema for this listing data source.
func (d *staticRouteListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"element_id":true, "site_id":true} outputs:map[string]bool{"items":true, "tfid":true, "total_items":true} forceNew:map[string]bool{"element_id":true, "site_id":true}
			"element_id": dsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
			},
			"items": dsschema.ListNestedAttribute{
				Description: "The Items param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"address_family":true, "description":true, "destination_prefix":true, "etag":true, "id":true, "name":true, "network_context_id":true, "nexthop_reachability_probe":true, "nexthops":true, "scope":true, "tags":true, "vrf_context_id":true} forceNew:map[string]bool(nil)
						"address_family": dsschema.StringAttribute{
							Description: "Address Family: ValidateEnum(enumClass = classOf[IPAddressFamily], error = STATICROUTE_CONFIG_ADDRESS_FAMILY_INVALID: Static Route address family is invalid., nullAllowed = false) .",
							Computed:    true,
						},
						"description": dsschema.StringAttribute{
							Description: "Description: Size(max = 256, error = DESCRIPTION_SIZE_EXCEEDED: Description size exceeded., min = 0) Valid .",
							Computed:    true,
						},
						"destination_prefix": dsschema.StringAttribute{
							Description: "Destination Prefix: Required(DESTINATION_PREFIX_REQD) .",
							Computed:    true,
						},
						"etag": dsschema.Int64Attribute{
							Description: "Entity tag for the resource.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "Id.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Name: Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
							Computed:    true,
						},
						"network_context_id": dsschema.StringAttribute{
							Description: "Network Context Id.",
							Computed:    true,
						},
						"nexthop_reachability_probe": dsschema.BoolAttribute{
							Description: "Nexthop Reachability Probe.",
							Computed:    true,
						},
						"nexthops": dsschema.ListNestedAttribute{
							Description: "Nexthops: Required(message = required) Size(max = 8, NEXTHOPLIST_SIZE_EXCEEDED, min = 0) Valid .",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"admin_distance":true, "nexthop_interface_id":true, "nexthop_ip":true, "self":true} forceNew:map[string]bool(nil)
									"admin_distance": dsschema.Int64Attribute{
										Description: "Admin Distance: Range(max = 255L, error = STATICROUTE_CONFIG_INVALID_DISTANCE: Distance should be between 1 and 255., min = 1L) .",
										Computed:    true,
									},
									"nexthop_interface_id": dsschema.StringAttribute{
										Description: "Nexthop Interface Id.",
										Computed:    true,
									},
									"nexthop_ip": dsschema.StringAttribute{
										Description: "Nexthop Ip.",
										Computed:    true,
									},
									"self": dsschema.BoolAttribute{
										Description: "Self.",
										Computed:    true,
									},
								},
							},
						},
						"scope": dsschema.StringAttribute{
							Description: "Scope: ValidateEnum(enumClass = classOf[NetworkScope], message = Invalid enum string., nullAllowed = false) .",
							Computed:    true,
						},
						"tags": dsschema.ListAttribute{
							Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
							Computed:    true,
							ElementType: types.StringType,
						},
						"vrf_context_id": dsschema.StringAttribute{
							Description: "Vrf Context Id.",
							Computed:    true,
						},
					},
				},
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total_items": dsschema.Int64Attribute{
				Description: "The TotalItems param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *staticRouteListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *staticRouteListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state staticRouteListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "prismasdwan_static_route_list",
		"terraform_provider_function": "Read",
		"site_id":                     state.SiteId.ValueString(),
		"element_id":                  state.ElementId.ValueString(),
	})

	// Prepare to run the command.
	svc := vqtUUHF.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.ListInput{}

	input.SiteId = StringValue(state.SiteId)

	input.ElementId = StringValue(state.ElementId)

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.ElementId)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Items) == 0 {
		state.Items = nil
	} else {
		state.Items = make([]staticRouteListDsModel_efuRypb_Config, 0, len(ans.Items))
		for _, var0 := range ans.Items {
			var1 := staticRouteListDsModel_efuRypb_Config{}

			var1.AddressFamily = types.StringValue(var0.AddressFamily)

			var1.Description = types.StringPointerValue(var0.Description)

			var1.DestinationPrefix = types.StringValue(var0.DestinationPrefix)

			var1.Etag = types.Int64PointerValue(var0.Etag)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.NetworkContextId = types.StringPointerValue(var0.NetworkContextId)

			var1.NexthopReachabilityProbe = types.BoolPointerValue(var0.NexthopReachabilityProbe)

			if len(var0.Nexthops) == 0 {
				var1.Nexthops = nil
			} else {
				var1.Nexthops = make([]staticRouteListDsModel_tyOPiTo_Config, 0, len(var0.Nexthops))
				for _, var2 := range var0.Nexthops {
					var3 := staticRouteListDsModel_tyOPiTo_Config{}

					var3.AdminDistance = types.Int64PointerValue(var2.AdminDistance)

					var3.NexthopInterfaceId = types.StringPointerValue(var2.NexthopInterfaceId)

					var3.NexthopIp = types.StringPointerValue(var2.NexthopIp)

					var3.Self = types.BoolPointerValue(var2.Self)
					var1.Nexthops = append(var1.Nexthops, var3)
				}
			}

			var1.Scope = types.StringValue(var0.Scope)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var1.VrfContextId = types.StringPointerValue(var0.VrfContextId)
			state.Items = append(state.Items, var1)
		}
	}

	state.TotalItems = types.Int64PointerValue(ans.TotalItems)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &staticRouteDataSource{}
	_ datasource.DataSourceWithConfigure = &staticRouteDataSource{}
)

func NewStaticRouteDataSource() datasource.DataSource {
	return &staticRouteDataSource{}
}

type staticRouteDataSource struct {
	client *sdwan.Client
}

// staticRouteDsModel is the model.
type staticRouteDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ElementId     types.String `tfsdk:"element_id"`
	SiteId        types.String `tfsdk:"site_id"`
	StaticRouteId types.String `tfsdk:"static_route_id"`

	// Output.
	AddressFamily            types.String                        `tfsdk:"address_family"`
	Description              types.String                        `tfsdk:"description"`
	DestinationPrefix        types.String                        `tfsdk:"destination_prefix"`
	Etag                     types.Int64                         `tfsdk:"etag"`
	Id                       types.String                        `tfsdk:"id"`
	Name                     types.String                        `tfsdk:"name"`
	NetworkContextId         types.String                        `tfsdk:"network_context_id"`
	NexthopReachabilityProbe types.Bool                          `tfsdk:"nexthop_reachability_probe"`
	Nexthops                 []staticRouteDsModel_tyOPiTo_Config `tfsdk:"nexthops"`
	Scope                    types.String                        `tfsdk:"scope"`
	Tags                     types.List                          `tfsdk:"tags"`
	VrfContextId             types.String                        `tfsdk:"vrf_context_id"`
}

type staticRouteDsModel_tyOPiTo_Config struct {
	AdminDistance      types.Int64  `tfsdk:"admin_distance"`
	NexthopInterfaceId types.String `tfsdk:"nexthop_interface_id"`
	NexthopIp          types.String `tfsdk:"nexthop_ip"`
	Self               types.Bool   `tfsdk:"self"`
}

// Metadata returns the data source type name.
func (d *staticRouteDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_static_route"
}

// Schema defines the schema for this data source.
func (d *staticRouteDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"element_id":true, "site_id":true, "static_route_id":true} outputs:map[string]bool{"address_family":true, "description":true, "destination_prefix":true, "etag":true, "id":true, "name":true, "network_context_id":true, "nexthop_reachability_probe":true, "nexthops":true, "scope":true, "tags":true, "tfid":true, "vrf_context_id":true} forceNew:map[string]bool{"element_id":true, "site_id":true, "static_route_id":true}
			"address_family": dsschema.StringAttribute{
				Description: "Address Family: ValidateEnum(enumClass = classOf[IPAddressFamily], error = STATICROUTE_CONFIG_ADDRESS_FAMILY_INVALID: Static Route address family is invalid., nullAllowed = false) .",
				Computed:    true,
			},
			"description": dsschema.StringAttribute{
				Description: "Description: Size(max = 256, error = DESCRIPTION_SIZE_EXCEEDED: Description size exceeded., min = 0) Valid .",
				Computed:    true,
			},
			"destination_prefix": dsschema.StringAttribute{
				Description: "Destination Prefix: Required(DESTINATION_PREFIX_REQD) .",
				Computed:    true,
			},
			"element_id": dsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
			},
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Name: Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Computed:    true,
			},
			"network_context_id": dsschema.StringAttribute{
				Description: "Network Context Id.",
				Computed:    true,
			},
			"nexthop_reachability_probe": dsschema.BoolAttribute{
				Description: "Nexthop Reachability Probe.",
				Computed:    true,
			},
			"nexthops": dsschema.ListNestedAttribute{
				Description: "Nexthops: Required(message = required) Size(max = 8, NEXTHOPLIST_SIZE_EXCEEDED, min = 0) Valid .",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"admin_distance":true, "nexthop_interface_id":true, "nexthop_ip":true, "self":true} forceNew:map[string]bool(nil)
						"admin_distance": dsschema.Int64Attribute{
							Description: "Admin Distance: Range(max = 255L, error = STATICROUTE_CONFIG_INVALID_DISTANCE: Distance should be between 1 and 255., min = 1L) .",
							Computed:    true,
						},
						"nexthop_interface_id": dsschema.StringAttribute{
							Description: "Nexthop Interface Id.",
							Computed:    true,
						},
						"nexthop_ip": dsschema.StringAttribute{
							Description: "Nexthop Ip.",
							Computed:    true,
						},
						"self": dsschema.BoolAttribute{
							Description: "Self.",
							Computed:    true,
						},
					},
				},
			},
			"scope": dsschema.StringAttribute{
				Description: "Scope: ValidateEnum(enumClass = classOf[NetworkScope], message = Invalid enum string., nullAllowed = false) .",
				Computed:    true,
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
			},
			"static_route_id": dsschema.StringAttribute{
				Description: "Static Route Id.",
				Required:    true,
			},
			"tags": dsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"vrf_context_id": dsschema.StringAttribute{
				Description: "Vrf Context Id.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *staticRouteDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *staticRouteDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state staticRouteDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_static_route",
		"terraform_provider_function": "Read",
		"site_id":                     state.SiteId.ValueString(),
		"element_id":                  state.ElementId.ValueString(),
		"static_route_id":             state.StaticRouteId.ValueString(),
	})

	// Prepare to run the command.
	svc := vqtUUHF.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.ReadInput{}

	input.SiteId = StringValue(state.SiteId)

	input.ElementId = StringValue(state.ElementId)

	input.StaticRouteId = StringValue(state.StaticRouteId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.ElementId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.StaticRouteId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.AddressFamily = types.StringValue(ans.AddressFamily)

	state.Description = types.StringPointerValue(ans.Description)

	state.DestinationPrefix = types.StringValue(ans.DestinationPrefix)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)

	state.NexthopReachabilityProbe = types.BoolPointerValue(ans.NexthopReachabilityProbe)

	if len(ans.Nexthops) == 0 {
		state.Nexthops = nil
	} else {
		state.Nexthops = make([]staticRouteDsModel_tyOPiTo_Config, 0, len(ans.Nexthops))
		for _, var0 := range ans.Nexthops {
			var1 := staticRouteDsModel_tyOPiTo_Config{}

			var1.AdminDistance = types.Int64PointerValue(var0.AdminDistance)

			var1.NexthopInterfaceId = types.StringPointerValue(var0.NexthopInterfaceId)

			var1.NexthopIp = types.StringPointerValue(var0.NexthopIp)

			var1.Self = types.BoolPointerValue(var0.Self)
			state.Nexthops = append(state.Nexthops, var1)
		}
	}

	state.Scope = types.StringValue(ans.Scope)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.VrfContextId = types.StringPointerValue(ans.VrfContextId)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &staticRouteResource{}
	_ resource.ResourceWithConfigure   = &staticRouteResource{}
	_ resource.ResourceWithImportState = &staticRouteResource{}
)

func NewStaticRouteResource() resource.Resource {
	return &staticRouteResource{}
}

type staticRouteResource struct {
	client *sdwan.Client
}

// staticRouteRsModel is the model.
type staticRouteRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	AddressFamily            types.String                        `tfsdk:"address_family"`
	Description              types.String                        `tfsdk:"description"`
	DestinationPrefix        types.String                        `tfsdk:"destination_prefix"`
	ElementId                types.String                        `tfsdk:"element_id"`
	Etag                     types.Int64                         `tfsdk:"etag"`
	Id                       types.String                        `tfsdk:"id"`
	Name                     types.String                        `tfsdk:"name"`
	NetworkContextId         types.String                        `tfsdk:"network_context_id"`
	NexthopReachabilityProbe types.Bool                          `tfsdk:"nexthop_reachability_probe"`
	Nexthops                 []staticRouteRsModel_tyOPiTo_Config `tfsdk:"nexthops"`
	Scope                    types.String                        `tfsdk:"scope"`
	SiteId                   types.String                        `tfsdk:"site_id"`
	Tags                     types.List                          `tfsdk:"tags"`
	VrfContextId             types.String                        `tfsdk:"vrf_context_id"`

	// Output.
	// omit input: address_family
	// omit input: description
	// omit input: destination_prefix
	// omit input: etag
	// omit input: id
	// omit input: name
	// omit input: network_context_id
	// omit input: nexthop_reachability_probe
	// omit input: nexthops
	// omit input: scope
	// omit input: tags
	// omit input: vrf_context_id
}

type staticRouteRsModel_tyOPiTo_Config struct {
	AdminDistance      types.Int64  `tfsdk:"admin_distance"`
	NexthopInterfaceId types.String `tfsdk:"nexthop_interface_id"`
	NexthopIp          types.String `tfsdk:"nexthop_ip"`
	Self               types.Bool   `tfsdk:"self"`
}

// Metadata returns the data source type name.
func (r *staticRouteResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_static_route"
}

// Schema defines the schema for this data source.
func (r *staticRouteResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"address_family":true, "description":true, "destination_prefix":true, "element_id":true, "etag":true, "id":true, "name":true, "network_context_id":true, "nexthop_reachability_probe":true, "nexthops":true, "scope":true, "site_id":true, "tags":true, "vrf_context_id":true} outputs:map[string]bool{"address_family":true, "description":true, "destination_prefix":true, "etag":true, "id":true, "name":true, "network_context_id":true, "nexthop_reachability_probe":true, "nexthops":true, "scope":true, "tags":true, "tfid":true, "vrf_context_id":true} forceNew:map[string]bool{"element_id":true, "site_id":true}
			"address_family": rsschema.StringAttribute{
				Description: "Address Family: ValidateEnum(enumClass = classOf[IPAddressFamily], error = STATICROUTE_CONFIG_ADDRESS_FAMILY_INVALID: Static Route address family is invalid., nullAllowed = false) .",
				Required:    true,
			},
			"description": rsschema.StringAttribute{
				Description: "Description: Size(max = 256, error = DESCRIPTION_SIZE_EXCEEDED: Description size exceeded., min = 0) Valid .",
				Optional:    true,
			},
			"destination_prefix": rsschema.StringAttribute{
				Description: "Destination Prefix: Required(DESTINATION_PREFIX_REQD) .",
				Required:    true,
			},
			"element_id": rsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"etag": rsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Optional:    true,
				Computed:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Name: Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Optional:    true,
			},
			"network_context_id": rsschema.StringAttribute{
				Description: "Network Context Id.",
				Optional:    true,
			},
			"nexthop_reachability_probe": rsschema.BoolAttribute{
				Description: "Nexthop Reachability Probe.",
				Optional:    true,
			},
			"nexthops": rsschema.ListNestedAttribute{
				Description: "Nexthops: Required(message = required) Size(max = 8, NEXTHOPLIST_SIZE_EXCEEDED, min = 0) Valid .",
				Required:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"admin_distance":true, "nexthop_interface_id":true, "nexthop_ip":true, "self":true} outputs:map[string]bool{"admin_distance":true, "nexthop_interface_id":true, "nexthop_ip":true, "self":true} forceNew:map[string]bool(nil)
						"admin_distance": rsschema.Int64Attribute{
							Description: "Admin Distance: Range(max = 255L, error = STATICROUTE_CONFIG_INVALID_DISTANCE: Distance should be between 1 and 255., min = 1L) .",
							Optional:    true,
						},
						"nexthop_interface_id": rsschema.StringAttribute{
							Description: "Nexthop Interface Id.",
							Optional:    true,
						},
						"nexthop_ip": rsschema.StringAttribute{
							Description: "Nexthop Ip.",
							Optional:    true,
						},
						"self": rsschema.BoolAttribute{
							Description: "Self.",
							Optional:    true,
						},
					},
				},
			},
			"scope": rsschema.StringAttribute{
				Description: "Scope: ValidateEnum(enumClass = classOf[NetworkScope], message = Invalid enum string., nullAllowed = false) .",
				Required:    true,
			},
			"site_id": rsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tags": rsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Optional:    true,
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"vrf_context_id": rsschema.StringAttribute{
				Description: "Vrf Context Id.",
				Optional:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (r *staticRouteResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sdwan.Client)
}

// Create resource.
func (r *staticRouteResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state staticRouteRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_static_route",
		"terraform_provider_function": "Create",
		"site_id":                     state.SiteId.ValueString(),
		"element_id":                  state.ElementId.ValueString(),
	})

	// Prepare to create the config.
	svc := vqtUUHF.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.CreateInput{}

	input.SiteId = StringValue(state.SiteId)

	input.ElementId = StringValue(state.ElementId)
	input.Request = &efuRypb.Config{}

	input.Request.AddressFamily = StringValue(state.AddressFamily)

	input.Request.Description = StringValueOrNil(state.Description)

	input.Request.DestinationPrefix = StringValue(state.DestinationPrefix)

	input.Request.Etag = Int64ValueOrNil(state.Etag)

	input.Request.Name = StringValueOrNil(state.Name)

	input.Request.NetworkContextId = StringValueOrNil(state.NetworkContextId)

	input.Request.NexthopReachabilityProbe = BoolValueOrNil(state.NexthopReachabilityProbe)

	if len(state.Nexthops) != 0 {
		input.Request.Nexthops = make([]tyOPiTo.Config, 0, len(state.Nexthops))
		for _, var0 := range state.Nexthops {
			var var1 tyOPiTo.Config

			var1.AdminDistance = Int64ValueOrNil(var0.AdminDistance)

			var1.NexthopInterfaceId = StringValueOrNil(var0.NexthopInterfaceId)

			var1.NexthopIp = StringValueOrNil(var0.NexthopIp)

			var1.Self = BoolValueOrNil(var0.Self)
			input.Request.Nexthops = append(input.Request.Nexthops, var1)
		}
	}

	input.Request.Scope = StringValue(state.Scope)

	input.Request.Tags = ListStringValueOrNil(ctx, state.Tags)

	input.Request.VrfContextId = StringValueOrNil(state.VrfContextId)

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.ElementId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.AddressFamily = types.StringValue(ans.AddressFamily)

	state.Description = types.StringPointerValue(ans.Description)

	state.DestinationPrefix = types.StringValue(ans.DestinationPrefix)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)

	state.NexthopReachabilityProbe = types.BoolPointerValue(ans.NexthopReachabilityProbe)

	if len(ans.Nexthops) == 0 {
		state.Nexthops = nil
	} else {
		state.Nexthops = make([]staticRouteRsModel_tyOPiTo_Config, 0, len(ans.Nexthops))
		for _, var3 := range ans.Nexthops {
			var4 := staticRouteRsModel_tyOPiTo_Config{}

			var4.AdminDistance = types.Int64PointerValue(var3.AdminDistance)

			var4.NexthopInterfaceId = types.StringPointerValue(var3.NexthopInterfaceId)

			var4.NexthopIp = types.StringPointerValue(var3.NexthopIp)

			var4.Self = types.BoolPointerValue(var3.Self)
			state.Nexthops = append(state.Nexthops, var4)
		}
	}

	state.Scope = types.StringValue(ans.Scope)

	var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var5
	resp.Diagnostics.Append(var6.Errors()...)

	state.VrfContextId = types.StringPointerValue(ans.VrfContextId)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *staticRouteResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state staticRouteRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_static_route",
		"locMap":                      map[string]int{"element_id": 1, "site_id": 0, "static_route_id": 2},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := vqtUUHF.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.ReadInput{}

	input.SiteId = tokens[0]

	input.ElementId = tokens[1]

	input.StaticRouteId = tokens[2]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.SiteId = types.StringNull()
	} else {
		state.SiteId = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.ElementId = types.StringNull()
	} else {
		state.ElementId = types.StringValue(tokens[1])
	}
	state.Tfid = savestate.Tfid

	state.AddressFamily = types.StringValue(ans.AddressFamily)

	state.Description = types.StringPointerValue(ans.Description)

	state.DestinationPrefix = types.StringValue(ans.DestinationPrefix)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)

	state.NexthopReachabilityProbe = types.BoolPointerValue(ans.NexthopReachabilityProbe)

	if len(ans.Nexthops) == 0 {
		state.Nexthops = nil
	} else {
		state.Nexthops = make([]staticRouteRsModel_tyOPiTo_Config, 0, len(ans.Nexthops))
		for _, var0 := range ans.Nexthops {
			var1 := staticRouteRsModel_tyOPiTo_Config{}

			var1.AdminDistance = types.Int64PointerValue(var0.AdminDistance)

			var1.NexthopInterfaceId = types.StringPointerValue(var0.NexthopInterfaceId)

			var1.NexthopIp = types.StringPointerValue(var0.NexthopIp)

			var1.Self = types.BoolPointerValue(var0.Self)
			state.Nexthops = append(state.Nexthops, var1)
		}
	}

	state.Scope = types.StringValue(ans.Scope)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.VrfContextId = types.StringPointerValue(ans.VrfContextId)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *staticRouteResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state staticRouteRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_static_route",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := vqtUUHF.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.UpdateInput{}

	if tokens[0] != "" {
		input.SiteId = tokens[0]
	}

	if tokens[1] != "" {
		input.ElementId = tokens[1]
	}

	if tokens[2] != "" {
		input.StaticRouteId = tokens[2]
	}
	input.Request = &efuRypb.Config{}

	input.Request.AddressFamily = ValueStringFromPlanOrState(plan.AddressFamily, state.AddressFamily)

	input.Request.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)

	input.Request.DestinationPrefix = ValueStringFromPlanOrState(plan.DestinationPrefix, state.DestinationPrefix)

	input.Request.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)

	input.Request.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)

	input.Request.NetworkContextId = ValueStringPointerFromPlanOrState(plan.NetworkContextId, state.NetworkContextId)

	input.Request.NexthopReachabilityProbe = ValueBoolPointerFromPlanOrState(plan.NexthopReachabilityProbe, state.NexthopReachabilityProbe)

	if len(plan.Nexthops) != 0 || len(state.Nexthops) != 0 {
		NexthopsToUse := plan.Nexthops
		if len(plan.Nexthops) == 0 {
			NexthopsToUse = state.Nexthops
		}
		input.Request.Nexthops = make([]tyOPiTo.Config, 0, len(NexthopsToUse))
		for _, var0 := range plan.Nexthops {
			var var1 tyOPiTo.Config

			var1.AdminDistance = Int64ValueOrNil(var0.AdminDistance)

			var1.NexthopInterfaceId = StringValueOrNil(var0.NexthopInterfaceId)

			var1.NexthopIp = StringValueOrNil(var0.NexthopIp)

			var1.Self = BoolValueOrNil(var0.Self)
			input.Request.Nexthops = append(input.Request.Nexthops, var1)
		}
	}

	input.Request.Scope = ValueStringFromPlanOrState(plan.Scope, state.Scope)

	input.Request.Tags = ListStringValueOrNil(ctx, plan.Tags)

	input.Request.VrfContextId = ValueStringPointerFromPlanOrState(plan.VrfContextId, state.VrfContextId)

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.AddressFamily = types.StringValue(ans.AddressFamily)

	state.Description = types.StringPointerValue(ans.Description)

	state.DestinationPrefix = types.StringValue(ans.DestinationPrefix)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)

	state.NexthopReachabilityProbe = types.BoolPointerValue(ans.NexthopReachabilityProbe)

	if len(ans.Nexthops) == 0 {
		state.Nexthops = nil
	} else {
		state.Nexthops = make([]staticRouteRsModel_tyOPiTo_Config, 0, len(ans.Nexthops))
		for _, var3 := range ans.Nexthops {
			var4 := staticRouteRsModel_tyOPiTo_Config{}

			var4.AdminDistance = types.Int64PointerValue(var3.AdminDistance)

			var4.NexthopInterfaceId = types.StringPointerValue(var3.NexthopInterfaceId)

			var4.NexthopIp = types.StringPointerValue(var3.NexthopIp)

			var4.Self = types.BoolPointerValue(var3.Self)
			state.Nexthops = append(state.Nexthops, var4)
		}
	}

	state.Scope = types.StringValue(ans.Scope)

	var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var5
	resp.Diagnostics.Append(var6.Errors()...)

	state.VrfContextId = types.StringPointerValue(ans.VrfContextId)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *staticRouteResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_static_route",
		"locMap":                      map[string]int{"element_id": 1, "site_id": 0, "static_route_id": 2},
		"tokens":                      tokens,
	})

	svc := vqtUUHF.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.DeleteInput{}

	input.SiteId = tokens[0]

	input.ElementId = tokens[1]

	input.StaticRouteId = tokens[2]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *staticRouteResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
