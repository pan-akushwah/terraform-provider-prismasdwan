package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	rIUJWmK "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/vpnlink/configuration"
	rrePbcM "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/waninterface/label/screen/v2/n5"
	qRlmEFd "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/wanl3/reachability"
	iujuWin "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v25/api/waninterfacelabels"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &wanInterfaceLabelListDataSource{}
	_ datasource.DataSourceWithConfigure = &wanInterfaceLabelListDataSource{}
)

func NewWanInterfaceLabelListDataSource() datasource.DataSource {
	return &wanInterfaceLabelListDataSource{}
}

type wanInterfaceLabelListDataSource struct {
	client *sdwan.Client
}

// wanInterfaceLabelListDsModel is the model.
type wanInterfaceLabelListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.

	// Output.
	Items      []wanInterfaceLabelListDsModel_rrePbcM_Config `tfsdk:"items"`
	TotalItems types.Int64                                   `tfsdk:"total_items"`
}

type wanInterfaceLabelListDsModel_rrePbcM_Config struct {
	BwcEnabled                          types.Bool                                   `tfsdk:"bwc_enabled"`
	Description                         types.String                                 `tfsdk:"description"`
	Etag                                types.Int64                                  `tfsdk:"etag"`
	Id                                  types.String                                 `tfsdk:"id"`
	L3Reachability                      *wanInterfaceLabelListDsModel_qRlmEFd_Config `tfsdk:"l3_reachability"`
	Label                               types.String                                 `tfsdk:"label"`
	LqmEnabled                          types.Bool                                   `tfsdk:"lqm_enabled"`
	Name                                types.String                                 `tfsdk:"name"`
	ProbeProfileId                      types.String                                 `tfsdk:"probe_profile_id"`
	Tags                                types.List                                   `tfsdk:"tags"`
	UseForApplicationReachabilityProbes types.Bool                                   `tfsdk:"use_for_application_reachability_probes"`
	UseForControllerConnections         types.Bool                                   `tfsdk:"use_for_controller_connections"`
	UseLqmForNonHubPaths                types.Bool                                   `tfsdk:"use_lqm_for_non_hub_paths"`
	VpnlinkConfiguration                *wanInterfaceLabelListDsModel_rIUJWmK_Config `tfsdk:"vpnlink_configuration"`
}

type wanInterfaceLabelListDsModel_qRlmEFd_Config struct {
	ProbeConfigIds    types.List `tfsdk:"probe_config_ids"`
	UseElementDefault types.Bool `tfsdk:"use_element_default"`
}

type wanInterfaceLabelListDsModel_rIUJWmK_Config struct {
	KeepAliveFailureCount types.Int64 `tfsdk:"keep_alive_failure_count"`
	KeepAliveInterval     types.Int64 `tfsdk:"keep_alive_interval"`
}

// Metadata returns the data source type name.
func (d *wanInterfaceLabelListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wan_interface_label_list"
}

// Schema defines the schema for this listing data source.
func (d *wanInterfaceLabelListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{} outputs:map[string]bool{"items":true, "tfid":true, "total_items":true} forceNew:map[string]bool{}
			"items": dsschema.ListNestedAttribute{
				Description: "The Items param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"bwc_enabled":true, "description":true, "etag":true, "id":true, "l3_reachability":true, "label":true, "lqm_enabled":true, "name":true, "probe_profile_id":true, "tags":true, "use_for_application_reachability_probes":true, "use_for_controller_connections":true, "use_lqm_for_non_hub_paths":true, "vpnlink_configuration":true} forceNew:map[string]bool(nil)
						"bwc_enabled": dsschema.BoolAttribute{
							Description: "Bwc Enabled.",
							Computed:    true,
						},
						"description": dsschema.StringAttribute{
							Description: "Description: Size(max = 256, message = PATHGROUP_INVALID_DESCRIPTION, min = 0) .",
							Computed:    true,
						},
						"etag": dsschema.Int64Attribute{
							Description: "Entity tag for the resource.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "Id.",
							Computed:    true,
						},
						"l3_reachability": dsschema.SingleNestedAttribute{
							Description: "The L3Reachability param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"probe_config_ids":true, "use_element_default":true} forceNew:map[string]bool(nil)
								"probe_config_ids": dsschema.ListAttribute{
									Description: "Probe Config Ids.",
									Computed:    true,
									ElementType: types.StringType,
								},
								"use_element_default": dsschema.BoolAttribute{
									Description: "Use Element Default.",
									Computed:    true,
								},
							},
						},
						"label": dsschema.StringAttribute{
							Description: "Label: Pattern(message = INVALID_INTERFACE_LABEL, regexp = (public|private)-(([1-9])|([1-2][0-9])|(3[0-2])|(100[0-9]))) .",
							Computed:    true,
						},
						"lqm_enabled": dsschema.BoolAttribute{
							Description: "Lqm Enabled.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Name: Size(max = 128, message = PATHGROUP_INVALID_NAME, min = 0) .",
							Computed:    true,
						},
						"probe_profile_id": dsschema.StringAttribute{
							Description: "Probe Profile Id.",
							Computed:    true,
						},
						"tags": dsschema.ListAttribute{
							Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
							Computed:    true,
							ElementType: types.StringType,
						},
						"use_for_application_reachability_probes": dsschema.BoolAttribute{
							Description: "Use For Application Reachability Probes: Valid .",
							Computed:    true,
						},
						"use_for_controller_connections": dsschema.BoolAttribute{
							Description: "Use For Controller Connections: Valid .",
							Computed:    true,
						},
						"use_lqm_for_non_hub_paths": dsschema.BoolAttribute{
							Description: "Use Lqm For Non Hub Paths.",
							Computed:    true,
						},
						"vpnlink_configuration": dsschema.SingleNestedAttribute{
							Description: "The VpnlinkConfiguration param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"keep_alive_failure_count":true, "keep_alive_interval":true} forceNew:map[string]bool(nil)
								"keep_alive_failure_count": dsschema.Int64Attribute{
									Description: "Keep Alive Failure Count: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30.) Range(max = 30L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30., min = 3L) .",
									Computed:    true,
								},
								"keep_alive_interval": dsschema.Int64Attribute{
									Description: "Keep Alive Interval: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms.) Range(max = 1740000L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms., min = 100L) .",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total_items": dsschema.Int64Attribute{
				Description: "The TotalItems param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *wanInterfaceLabelListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *wanInterfaceLabelListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state wanInterfaceLabelListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "prismasdwan_wan_interface_label_list",
		"terraform_provider_function": "Read",
	})

	// Prepare to run the command.
	svc := iujuWin.NewClient(d.client)

	// Perform the operation.
	ans, err := svc.List(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Items) == 0 {
		state.Items = nil
	} else {
		state.Items = make([]wanInterfaceLabelListDsModel_rrePbcM_Config, 0, len(ans.Items))
		for _, var0 := range ans.Items {
			var1 := wanInterfaceLabelListDsModel_rrePbcM_Config{}

			var1.BwcEnabled = types.BoolPointerValue(var0.BwcEnabled)

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Etag = types.Int64PointerValue(var0.Etag)

			var1.Id = types.StringPointerValue(var0.Id)

			if var0.L3Reachability == nil {
				var1.L3Reachability = nil
			} else {
				var1.L3Reachability = &wanInterfaceLabelListDsModel_qRlmEFd_Config{}

				var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.L3Reachability.ProbeConfigIds)
				var1.L3Reachability.ProbeConfigIds = var2
				resp.Diagnostics.Append(var3.Errors()...)

				var1.L3Reachability.UseElementDefault = types.BoolPointerValue(var0.L3Reachability.UseElementDefault)
			}

			var1.Label = types.StringPointerValue(var0.Label)

			var1.LqmEnabled = types.BoolPointerValue(var0.LqmEnabled)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.ProbeProfileId = types.StringPointerValue(var0.ProbeProfileId)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var1.UseForApplicationReachabilityProbes = types.BoolPointerValue(var0.UseForApplicationReachabilityProbes)

			var1.UseForControllerConnections = types.BoolPointerValue(var0.UseForControllerConnections)

			var1.UseLqmForNonHubPaths = types.BoolPointerValue(var0.UseLqmForNonHubPaths)

			if var0.VpnlinkConfiguration == nil {
				var1.VpnlinkConfiguration = nil
			} else {
				var1.VpnlinkConfiguration = &wanInterfaceLabelListDsModel_rIUJWmK_Config{}

				var1.VpnlinkConfiguration.KeepAliveFailureCount = types.Int64Value(var0.VpnlinkConfiguration.KeepAliveFailureCount)

				var1.VpnlinkConfiguration.KeepAliveInterval = types.Int64Value(var0.VpnlinkConfiguration.KeepAliveInterval)
			}
			state.Items = append(state.Items, var1)
		}
	}

	state.TotalItems = types.Int64PointerValue(ans.TotalItems)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &wanInterfaceLabelDataSource{}
	_ datasource.DataSourceWithConfigure = &wanInterfaceLabelDataSource{}
)

func NewWanInterfaceLabelDataSource() datasource.DataSource {
	return &wanInterfaceLabelDataSource{}
}

type wanInterfaceLabelDataSource struct {
	client *sdwan.Client
}

// wanInterfaceLabelDsModel is the model.
type wanInterfaceLabelDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	WantinterfaceLabelId types.String `tfsdk:"wantinterface_label_id"`

	// Output.
	BwcEnabled                          types.Bool                               `tfsdk:"bwc_enabled"`
	Description                         types.String                             `tfsdk:"description"`
	Etag                                types.Int64                              `tfsdk:"etag"`
	Id                                  types.String                             `tfsdk:"id"`
	L3Reachability                      *wanInterfaceLabelDsModel_qRlmEFd_Config `tfsdk:"l3_reachability"`
	Label                               types.String                             `tfsdk:"label"`
	LqmEnabled                          types.Bool                               `tfsdk:"lqm_enabled"`
	Name                                types.String                             `tfsdk:"name"`
	ProbeProfileId                      types.String                             `tfsdk:"probe_profile_id"`
	Tags                                types.List                               `tfsdk:"tags"`
	UseForApplicationReachabilityProbes types.Bool                               `tfsdk:"use_for_application_reachability_probes"`
	UseForControllerConnections         types.Bool                               `tfsdk:"use_for_controller_connections"`
	UseLqmForNonHubPaths                types.Bool                               `tfsdk:"use_lqm_for_non_hub_paths"`
	VpnlinkConfiguration                *wanInterfaceLabelDsModel_rIUJWmK_Config `tfsdk:"vpnlink_configuration"`
}

type wanInterfaceLabelDsModel_qRlmEFd_Config struct {
	ProbeConfigIds    types.List `tfsdk:"probe_config_ids"`
	UseElementDefault types.Bool `tfsdk:"use_element_default"`
}

type wanInterfaceLabelDsModel_rIUJWmK_Config struct {
	KeepAliveFailureCount types.Int64 `tfsdk:"keep_alive_failure_count"`
	KeepAliveInterval     types.Int64 `tfsdk:"keep_alive_interval"`
}

// Metadata returns the data source type name.
func (d *wanInterfaceLabelDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wan_interface_label"
}

// Schema defines the schema for this data source.
func (d *wanInterfaceLabelDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"wantinterface_label_id":true} outputs:map[string]bool{"bwc_enabled":true, "description":true, "etag":true, "id":true, "l3_reachability":true, "label":true, "lqm_enabled":true, "name":true, "probe_profile_id":true, "tags":true, "tfid":true, "use_for_application_reachability_probes":true, "use_for_controller_connections":true, "use_lqm_for_non_hub_paths":true, "vpnlink_configuration":true} forceNew:map[string]bool{"wantinterface_label_id":true}
			"bwc_enabled": dsschema.BoolAttribute{
				Description: "Bwc Enabled.",
				Computed:    true,
			},
			"description": dsschema.StringAttribute{
				Description: "Description: Size(max = 256, message = PATHGROUP_INVALID_DESCRIPTION, min = 0) .",
				Computed:    true,
			},
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"l3_reachability": dsschema.SingleNestedAttribute{
				Description: "The L3Reachability param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"probe_config_ids":true, "use_element_default":true} forceNew:map[string]bool(nil)
					"probe_config_ids": dsschema.ListAttribute{
						Description: "Probe Config Ids.",
						Computed:    true,
						ElementType: types.StringType,
					},
					"use_element_default": dsschema.BoolAttribute{
						Description: "Use Element Default.",
						Computed:    true,
					},
				},
			},
			"label": dsschema.StringAttribute{
				Description: "Label: Pattern(message = INVALID_INTERFACE_LABEL, regexp = (public|private)-(([1-9])|([1-2][0-9])|(3[0-2])|(100[0-9]))) .",
				Computed:    true,
			},
			"lqm_enabled": dsschema.BoolAttribute{
				Description: "Lqm Enabled.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Name: Size(max = 128, message = PATHGROUP_INVALID_NAME, min = 0) .",
				Computed:    true,
			},
			"probe_profile_id": dsschema.StringAttribute{
				Description: "Probe Profile Id.",
				Computed:    true,
			},
			"tags": dsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"use_for_application_reachability_probes": dsschema.BoolAttribute{
				Description: "Use For Application Reachability Probes: Valid .",
				Computed:    true,
			},
			"use_for_controller_connections": dsschema.BoolAttribute{
				Description: "Use For Controller Connections: Valid .",
				Computed:    true,
			},
			"use_lqm_for_non_hub_paths": dsschema.BoolAttribute{
				Description: "Use Lqm For Non Hub Paths.",
				Computed:    true,
			},
			"vpnlink_configuration": dsschema.SingleNestedAttribute{
				Description: "The VpnlinkConfiguration param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"keep_alive_failure_count":true, "keep_alive_interval":true} forceNew:map[string]bool(nil)
					"keep_alive_failure_count": dsschema.Int64Attribute{
						Description: "Keep Alive Failure Count: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30.) Range(max = 30L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30., min = 3L) .",
						Computed:    true,
					},
					"keep_alive_interval": dsschema.Int64Attribute{
						Description: "Keep Alive Interval: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms.) Range(max = 1740000L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms., min = 100L) .",
						Computed:    true,
					},
				},
			},
			"wantinterface_label_id": dsschema.StringAttribute{
				Description: "Wantinterface Label Id.",
				Required:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *wanInterfaceLabelDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *wanInterfaceLabelDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state wanInterfaceLabelDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_wan_interface_label",
		"terraform_provider_function": "Read",
		"wantinterface_label_id":      state.WantinterfaceLabelId.ValueString(),
	})

	// Prepare to run the command.
	svc := iujuWin.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := iujuWin.ReadInput{}

	input.WantinterfaceLabelId = StringValue(state.WantinterfaceLabelId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.WantinterfaceLabelId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.BwcEnabled = types.BoolPointerValue(ans.BwcEnabled)

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.L3Reachability == nil {
		state.L3Reachability = nil
	} else {
		state.L3Reachability = &wanInterfaceLabelDsModel_qRlmEFd_Config{}

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.L3Reachability.ProbeConfigIds)
		state.L3Reachability.ProbeConfigIds = var0
		resp.Diagnostics.Append(var1.Errors()...)

		state.L3Reachability.UseElementDefault = types.BoolPointerValue(ans.L3Reachability.UseElementDefault)
	}

	state.Label = types.StringPointerValue(ans.Label)

	state.LqmEnabled = types.BoolPointerValue(ans.LqmEnabled)

	state.Name = types.StringPointerValue(ans.Name)

	state.ProbeProfileId = types.StringPointerValue(ans.ProbeProfileId)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.UseForApplicationReachabilityProbes = types.BoolPointerValue(ans.UseForApplicationReachabilityProbes)

	state.UseForControllerConnections = types.BoolPointerValue(ans.UseForControllerConnections)

	state.UseLqmForNonHubPaths = types.BoolPointerValue(ans.UseLqmForNonHubPaths)

	if ans.VpnlinkConfiguration == nil {
		state.VpnlinkConfiguration = nil
	} else {
		state.VpnlinkConfiguration = &wanInterfaceLabelDsModel_rIUJWmK_Config{}

		state.VpnlinkConfiguration.KeepAliveFailureCount = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveFailureCount)

		state.VpnlinkConfiguration.KeepAliveInterval = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &wanInterfaceLabelResource{}
	_ resource.ResourceWithConfigure   = &wanInterfaceLabelResource{}
	_ resource.ResourceWithImportState = &wanInterfaceLabelResource{}
)

func NewWanInterfaceLabelResource() resource.Resource {
	return &wanInterfaceLabelResource{}
}

type wanInterfaceLabelResource struct {
	client *sdwan.Client
}

// wanInterfaceLabelRsModel is the model.
type wanInterfaceLabelRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	BwcEnabled                          types.Bool                               `tfsdk:"bwc_enabled"`
	Description                         types.String                             `tfsdk:"description"`
	Etag                                types.Int64                              `tfsdk:"etag"`
	Id                                  types.String                             `tfsdk:"id"`
	L3Reachability                      *wanInterfaceLabelRsModel_qRlmEFd_Config `tfsdk:"l3_reachability"`
	Label                               types.String                             `tfsdk:"label"`
	LqmEnabled                          types.Bool                               `tfsdk:"lqm_enabled"`
	Name                                types.String                             `tfsdk:"name"`
	ProbeProfileId                      types.String                             `tfsdk:"probe_profile_id"`
	Tags                                types.List                               `tfsdk:"tags"`
	UseForApplicationReachabilityProbes types.Bool                               `tfsdk:"use_for_application_reachability_probes"`
	UseForControllerConnections         types.Bool                               `tfsdk:"use_for_controller_connections"`
	UseLqmForNonHubPaths                types.Bool                               `tfsdk:"use_lqm_for_non_hub_paths"`
	VpnlinkConfiguration                *wanInterfaceLabelRsModel_rIUJWmK_Config `tfsdk:"vpnlink_configuration"`
	WantinterfaceLabelId                types.String                             `tfsdk:"wantinterface_label_id"`

	// Output.
	// omit input: bwc_enabled
	// omit input: description
	// omit input: etag
	// omit input: id
	// omit input: l3_reachability
	// omit input: label
	// omit input: lqm_enabled
	// omit input: name
	// omit input: probe_profile_id
	// omit input: tags
	// omit input: use_for_application_reachability_probes
	// omit input: use_for_controller_connections
	// omit input: use_lqm_for_non_hub_paths
	// omit input: vpnlink_configuration
}

type wanInterfaceLabelRsModel_qRlmEFd_Config struct {
	ProbeConfigIds    types.List `tfsdk:"probe_config_ids"`
	UseElementDefault types.Bool `tfsdk:"use_element_default"`
}

type wanInterfaceLabelRsModel_rIUJWmK_Config struct {
	KeepAliveFailureCount types.Int64 `tfsdk:"keep_alive_failure_count"`
	KeepAliveInterval     types.Int64 `tfsdk:"keep_alive_interval"`
}

// Metadata returns the data source type name.
func (r *wanInterfaceLabelResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wan_interface_label"
}

// Schema defines the schema for this data source.
func (r *wanInterfaceLabelResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"bwc_enabled":true, "description":true, "etag":true, "id":true, "l3_reachability":true, "label":true, "lqm_enabled":true, "name":true, "probe_profile_id":true, "tags":true, "use_for_application_reachability_probes":true, "use_for_controller_connections":true, "use_lqm_for_non_hub_paths":true, "vpnlink_configuration":true, "wantinterface_label_id":true} outputs:map[string]bool{"bwc_enabled":true, "description":true, "etag":true, "id":true, "l3_reachability":true, "label":true, "lqm_enabled":true, "name":true, "probe_profile_id":true, "tags":true, "tfid":true, "use_for_application_reachability_probes":true, "use_for_controller_connections":true, "use_lqm_for_non_hub_paths":true, "vpnlink_configuration":true} forceNew:map[string]bool{"wantinterface_label_id":true}
			"bwc_enabled": rsschema.BoolAttribute{
				Description: "Bwc Enabled.",
				Optional:    true,
			},
			"description": rsschema.StringAttribute{
				Description: "Description: Size(max = 256, message = PATHGROUP_INVALID_DESCRIPTION, min = 0) .",
				Optional:    true,
			},
			"etag": rsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Optional:    true,
				Computed:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"l3_reachability": rsschema.SingleNestedAttribute{
				Description: "The L3Reachability param.",
				Optional:    true,
				Computed:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"probe_config_ids":true, "use_element_default":true} outputs:map[string]bool{"probe_config_ids":true, "use_element_default":true} forceNew:map[string]bool(nil)
					"probe_config_ids": rsschema.ListAttribute{
						Description: "Probe Config Ids.",
						Optional:    true,
						ElementType: types.StringType,
					},
					"use_element_default": rsschema.BoolAttribute{
						Description: "Use Element Default.",
						Optional:    true,
					},
				},
			},
			"label": rsschema.StringAttribute{
				Description: "Label: Pattern(message = INVALID_INTERFACE_LABEL, regexp = (public|private)-(([1-9])|([1-2][0-9])|(3[0-2])|(100[0-9]))) .",
				Optional:    true,
			},
			"lqm_enabled": rsschema.BoolAttribute{
				Description: "Lqm Enabled.",
				Optional:    true,
			},
			"name": rsschema.StringAttribute{
				Description: "Name: Size(max = 128, message = PATHGROUP_INVALID_NAME, min = 0) .",
				Optional:    true,
			},
			"probe_profile_id": rsschema.StringAttribute{
				Description: "Probe Profile Id.",
				Optional:    true,
			},
			"tags": rsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"use_for_application_reachability_probes": rsschema.BoolAttribute{
				Description: "Use For Application Reachability Probes: Valid .",
				Optional:    true,
			},
			"use_for_controller_connections": rsschema.BoolAttribute{
				Description: "Use For Controller Connections: Valid .",
				Optional:    true,
			},
			"use_lqm_for_non_hub_paths": rsschema.BoolAttribute{
				Description: "Use Lqm For Non Hub Paths.",
				Optional:    true,
			},
			"vpnlink_configuration": rsschema.SingleNestedAttribute{
				Description: "The VpnlinkConfiguration param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"keep_alive_failure_count":true, "keep_alive_interval":true} outputs:map[string]bool{"keep_alive_failure_count":true, "keep_alive_interval":true} forceNew:map[string]bool(nil)
					"keep_alive_failure_count": rsschema.Int64Attribute{
						Description: "Keep Alive Failure Count: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30.) Range(max = 30L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_FAILURE_COUNT: VPN Link keep alive failure count must be between 3 and 30., min = 3L) .",
						Required:    true,
					},
					"keep_alive_interval": rsschema.Int64Attribute{
						Description: "Keep Alive Interval: NotNull(error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms.) Range(max = 1740000L, error = VPNLINK_CONFIG_INVALID_KEEP_ALIVE_INTERVAL: VPN Link keep alive interval must be between 100ms-1740,000ms., min = 100L) .",
						Required:    true,
					},
				},
			},
			"wantinterface_label_id": rsschema.StringAttribute{
				Description: "Wantinterface Label Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *wanInterfaceLabelResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sdwan.Client)
}

// Create resource.
func (r *wanInterfaceLabelResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var state wanInterfaceLabelRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_wan_interface_label",
		"terraform_provider_function": "Create",
		"wantinterface_label_id":      state.WantinterfaceLabelId.ValueString(),
	})

	// Prepare to create the config.
	svc := iujuWin.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := iujuWin.ReadInput{}

	input.WantinterfaceLabelId = StringValue(state.WantinterfaceLabelId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.WantinterfaceLabelId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.BwcEnabled = types.BoolPointerValue(ans.BwcEnabled)

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.L3Reachability == nil {
		state.L3Reachability = nil
	} else {
		state.L3Reachability = &wanInterfaceLabelRsModel_qRlmEFd_Config{}

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.L3Reachability.ProbeConfigIds)
		state.L3Reachability.ProbeConfigIds = var0
		resp.Diagnostics.Append(var1.Errors()...)

		state.L3Reachability.UseElementDefault = types.BoolPointerValue(ans.L3Reachability.UseElementDefault)
	}

	state.Label = types.StringPointerValue(ans.Label)

	state.LqmEnabled = types.BoolPointerValue(ans.LqmEnabled)

	state.Name = types.StringPointerValue(ans.Name)

	state.ProbeProfileId = types.StringPointerValue(ans.ProbeProfileId)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.UseForApplicationReachabilityProbes = types.BoolPointerValue(ans.UseForApplicationReachabilityProbes)

	state.UseForControllerConnections = types.BoolPointerValue(ans.UseForControllerConnections)

	state.UseLqmForNonHubPaths = types.BoolPointerValue(ans.UseLqmForNonHubPaths)

	if ans.VpnlinkConfiguration == nil {
		state.VpnlinkConfiguration = nil
	} else {
		state.VpnlinkConfiguration = &wanInterfaceLabelRsModel_rIUJWmK_Config{}

		state.VpnlinkConfiguration.KeepAliveFailureCount = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveFailureCount)

		state.VpnlinkConfiguration.KeepAliveInterval = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Read performs Read for the struct.
func (r *wanInterfaceLabelResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state wanInterfaceLabelRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_wan_interface_label",
		"locMap":                      map[string]int{"id": 1, "wantinterface_label_id": 0},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := iujuWin.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := iujuWin.ReadInput{}

	input.WantinterfaceLabelId = tokens[0]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.WantinterfaceLabelId = types.StringNull()
	} else {
		state.WantinterfaceLabelId = types.StringValue(tokens[0])
	}
	state.Tfid = savestate.Tfid

	state.BwcEnabled = types.BoolPointerValue(ans.BwcEnabled)

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.L3Reachability == nil {
		state.L3Reachability = nil
	} else {
		state.L3Reachability = &wanInterfaceLabelRsModel_qRlmEFd_Config{}

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.L3Reachability.ProbeConfigIds)
		state.L3Reachability.ProbeConfigIds = var0
		resp.Diagnostics.Append(var1.Errors()...)

		state.L3Reachability.UseElementDefault = types.BoolPointerValue(ans.L3Reachability.UseElementDefault)
	}

	state.Label = types.StringPointerValue(ans.Label)

	state.LqmEnabled = types.BoolPointerValue(ans.LqmEnabled)

	state.Name = types.StringPointerValue(ans.Name)

	state.ProbeProfileId = types.StringPointerValue(ans.ProbeProfileId)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.UseForApplicationReachabilityProbes = types.BoolPointerValue(ans.UseForApplicationReachabilityProbes)

	state.UseForControllerConnections = types.BoolPointerValue(ans.UseForControllerConnections)

	state.UseLqmForNonHubPaths = types.BoolPointerValue(ans.UseLqmForNonHubPaths)

	if ans.VpnlinkConfiguration == nil {
		state.VpnlinkConfiguration = nil
	} else {
		state.VpnlinkConfiguration = &wanInterfaceLabelRsModel_rIUJWmK_Config{}

		state.VpnlinkConfiguration.KeepAliveFailureCount = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveFailureCount)

		state.VpnlinkConfiguration.KeepAliveInterval = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *wanInterfaceLabelResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state wanInterfaceLabelRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_wan_interface_label",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := iujuWin.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := iujuWin.UpdateInput{}

	if tokens[0] != "" {
		input.WantinterfaceLabelId = tokens[0]
	}
	input.Request = &rrePbcM.Config{}

	input.Request.BwcEnabled = ValueBoolPointerFromPlanOrState(plan.BwcEnabled, state.BwcEnabled)

	input.Request.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)

	input.Request.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)

	if plan.L3Reachability != nil {
		input.Request.L3Reachability = &qRlmEFd.Config{}

		input.Request.L3Reachability.ProbeConfigIds = ListStringValueOrNil(ctx, plan.L3Reachability.ProbeConfigIds)

		input.Request.L3Reachability.UseElementDefault = ValueBoolPointerFromPlanOrState(plan.L3Reachability.UseElementDefault, state.L3Reachability.UseElementDefault)
	}

	input.Request.Label = ValueStringPointerFromPlanOrState(plan.Label, state.Label)

	input.Request.LqmEnabled = ValueBoolPointerFromPlanOrState(plan.LqmEnabled, state.LqmEnabled)

	input.Request.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)

	input.Request.ProbeProfileId = ValueStringPointerFromPlanOrState(plan.ProbeProfileId, state.ProbeProfileId)

	input.Request.Tags = ListStringValueOrNil(ctx, plan.Tags)

	input.Request.UseForApplicationReachabilityProbes = ValueBoolPointerFromPlanOrState(plan.UseForApplicationReachabilityProbes, state.UseForApplicationReachabilityProbes)

	input.Request.UseForControllerConnections = ValueBoolPointerFromPlanOrState(plan.UseForControllerConnections, state.UseForControllerConnections)

	input.Request.UseLqmForNonHubPaths = ValueBoolPointerFromPlanOrState(plan.UseLqmForNonHubPaths, state.UseLqmForNonHubPaths)

	if plan.VpnlinkConfiguration != nil {
		input.Request.VpnlinkConfiguration = &rIUJWmK.Config{}

		input.Request.VpnlinkConfiguration.KeepAliveFailureCount = ValueInt64FromPlanOrState(plan.VpnlinkConfiguration.KeepAliveFailureCount, state.VpnlinkConfiguration.KeepAliveFailureCount)

		input.Request.VpnlinkConfiguration.KeepAliveInterval = ValueInt64FromPlanOrState(plan.VpnlinkConfiguration.KeepAliveInterval, state.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.BwcEnabled = types.BoolPointerValue(ans.BwcEnabled)

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.L3Reachability == nil {
		state.L3Reachability = nil
	} else {
		state.L3Reachability = &wanInterfaceLabelRsModel_qRlmEFd_Config{}

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.L3Reachability.ProbeConfigIds)
		state.L3Reachability.ProbeConfigIds = var2
		resp.Diagnostics.Append(var3.Errors()...)

		state.L3Reachability.UseElementDefault = types.BoolPointerValue(ans.L3Reachability.UseElementDefault)
	}

	state.Label = types.StringPointerValue(ans.Label)

	state.LqmEnabled = types.BoolPointerValue(ans.LqmEnabled)

	state.Name = types.StringPointerValue(ans.Name)

	state.ProbeProfileId = types.StringPointerValue(ans.ProbeProfileId)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.UseForApplicationReachabilityProbes = types.BoolPointerValue(ans.UseForApplicationReachabilityProbes)

	state.UseForControllerConnections = types.BoolPointerValue(ans.UseForControllerConnections)

	state.UseLqmForNonHubPaths = types.BoolPointerValue(ans.UseLqmForNonHubPaths)

	if ans.VpnlinkConfiguration == nil {
		state.VpnlinkConfiguration = nil
	} else {
		state.VpnlinkConfiguration = &wanInterfaceLabelRsModel_rIUJWmK_Config{}

		state.VpnlinkConfiguration.KeepAliveFailureCount = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveFailureCount)

		state.VpnlinkConfiguration.KeepAliveInterval = types.Int64Value(ans.VpnlinkConfiguration.KeepAliveInterval)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Dummy Delete resource.
func (r *wanInterfaceLabelResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

}

func (r *wanInterfaceLabelResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
