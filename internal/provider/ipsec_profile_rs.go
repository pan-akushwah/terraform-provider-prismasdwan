package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=8)
// | Computed Resource Name=ipsecprofiles
// +-----------------------------------------------------------------
// | IKEV1Params HasID=false
// | IPSECAuthenticationV1 HasID=false
// | Proposals HasID=false
// | IKEGroup HasID=false
// | Lifesize HasID=false
// | ResponderSaseProposals HasID=false
// | ESPGroup HasID=false
// | IPSECProfileScreenV2N2 HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &ipsecProfileResource{}
	_ resource.ResourceWithConfigure   = &ipsecProfileResource{}
	_ resource.ResourceWithImportState = &ipsecProfileResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewIpsecProfileResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewIpsecProfileResource() resource.Resource {
	return &ipsecProfileResource{}
}

type ipsecProfileResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *ipsecProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_ipsec_profile"
}

// Schema defines the schema for this data source.
func (r *ipsecProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=IPSECProfileScreenV2N2
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=authentication, type=REFERENCE macro=rss_schema
			"authentication": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=certificate, type=STRING macro=rss_schema
					"certificate": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=certificate, type=STRING macro=rss_schema
					// property: name=certificate_profile_id, type=STRING macro=rss_schema
					"certificate_profile_id": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=certificate_profile_id, type=STRING macro=rss_schema
					// property: name=comment, type=STRING macro=rss_schema
					"comment": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=comment, type=STRING macro=rss_schema
					// property: name=ikev1_params, type=REFERENCE macro=rss_schema
					"ikev1_params": rsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]rsschema.Attribute{
							// property: name=xauth_id, type=STRING macro=rss_schema
							"xauth_id": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=xauth_id, type=STRING macro=rss_schema
							// property: name=xauth_secret, type=STRING macro=rss_schema
							"xauth_secret": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: true,
							},
							// key name holder for attribute: name=xauth_secret, type=STRING macro=rss_schema
							"xauth_secret_internal_key_name": rsschema.StringAttribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// property: name=xauth_secret_encrypted, type=STRING macro=rss_schema
							"xauth_secret_encrypted": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: true,
							},
							// key name holder for attribute: name=xauth_secret_encrypted, type=STRING macro=rss_schema
							"xauth_secret_encrypted_internal_key_name": rsschema.StringAttribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// property: name=xauth_secret_hash, type=STRING macro=rss_schema
							"xauth_secret_hash": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: true,
							},
							// key name holder for attribute: name=xauth_secret_hash, type=STRING macro=rss_schema
							"xauth_secret_hash_internal_key_name": rsschema.StringAttribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// property: name=xauth_type, type=STRING macro=rss_schema
							"xauth_type": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=xauth_type, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=xauth_type, type=STRING macro=rss_schema
					// property: name=local_ca_certificate, type=STRING macro=rss_schema
					"local_ca_certificate": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=local_ca_certificate, type=STRING macro=rss_schema
					// property: name=local_id, type=STRING macro=rss_schema
					"local_id": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=local_id, type=STRING macro=rss_schema
					// property: name=local_id_custom, type=STRING macro=rss_schema
					"local_id_custom": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=local_id_custom, type=STRING macro=rss_schema
					// property: name=local_pa_certificate_id, type=STRING macro=rss_schema
					"local_pa_certificate_id": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=local_pa_certificate_id, type=STRING macro=rss_schema
					// property: name=pa_master_key_id, type=STRING macro=rss_schema
					"pa_master_key_id": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=pa_master_key_id, type=STRING macro=rss_schema
					// property: name=passphrase, type=STRING macro=rss_schema
					"passphrase": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=passphrase, type=STRING macro=rss_schema
					// property: name=passphrase_encrypted, type=STRING macro=rss_schema
					"passphrase_encrypted": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=passphrase_encrypted, type=STRING macro=rss_schema
					// property: name=peer_id_check, type=STRING macro=rss_schema
					"peer_id_check": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=peer_id_check, type=STRING macro=rss_schema
					// property: name=permit_peer_id_mismatch, type=BOOLEAN macro=rss_schema
					"permit_peer_id_mismatch": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=permit_peer_id_mismatch, type=BOOLEAN macro=rss_schema
					// property: name=private_key, type=STRING macro=rss_schema
					"private_key": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=private_key, type=STRING macro=rss_schema
					// property: name=private_key_encrypted, type=STRING macro=rss_schema
					"private_key_encrypted": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=private_key_encrypted, type=STRING macro=rss_schema
					// property: name=remote_ca_certificate, type=STRING macro=rss_schema
					"remote_ca_certificate": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=remote_ca_certificate, type=STRING macro=rss_schema
					// property: name=remote_id, type=STRING macro=rss_schema
					"remote_id": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=remote_id, type=STRING macro=rss_schema
					// property: name=secret, type=STRING macro=rss_schema
					"secret": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: true,
					},
					// key name holder for attribute: name=secret, type=STRING macro=rss_schema
					"secret_internal_key_name": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// property: name=secret_encrypted, type=STRING macro=rss_schema
					"secret_encrypted": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: true,
					},
					// key name holder for attribute: name=secret_encrypted, type=STRING macro=rss_schema
					"secret_encrypted_internal_key_name": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// property: name=secret_hash, type=STRING macro=rss_schema
					"secret_hash": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: true,
					},
					// key name holder for attribute: name=secret_hash, type=STRING macro=rss_schema
					"secret_hash_internal_key_name": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// property: name=strict_validation_peer_extended_key_use, type=BOOLEAN macro=rss_schema
					"strict_validation_peer_extended_key_use": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=strict_validation_peer_extended_key_use, type=BOOLEAN macro=rss_schema
					// property: name=type, type=STRING macro=rss_schema
					"type": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=type, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=type, type=STRING macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=dpd_delay, type=INTEGER macro=rss_schema
			"dpd_delay": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=dpd_delay, type=INTEGER macro=rss_schema
			// property: name=dpd_enable, type=BOOLEAN macro=rss_schema
			"dpd_enable": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=dpd_enable, type=BOOLEAN macro=rss_schema
			// property: name=dpd_timeout, type=INTEGER macro=rss_schema
			"dpd_timeout": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=dpd_timeout, type=INTEGER macro=rss_schema
			// property: name=esp_group, type=REFERENCE macro=rss_schema
			"esp_group": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=force_encapsulation, type=BOOLEAN macro=rss_schema
					"force_encapsulation": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=force_encapsulation, type=BOOLEAN macro=rss_schema
					// property: name=lifesize, type=REFERENCE macro=rss_schema
					"lifesize": rsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]rsschema.Attribute{
							// property: name=units, type=STRING macro=rss_schema
							"units": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=units, type=STRING macro=rss_schema
							// property: name=value, type=INTEGER macro=rss_schema
							"value": rsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						},
					},
					// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
					// property: name=lifetime, type=INTEGER macro=rss_schema
					"lifetime": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=lifetime, type=INTEGER macro=rss_schema
					// property: name=lifetime_units, type=STRING macro=rss_schema
					"lifetime_units": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=lifetime_units, type=STRING macro=rss_schema
					// property: name=mode, type=STRING macro=rss_schema
					"mode": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=mode, type=STRING macro=rss_schema
					// property: name=proposals, type=ARRAY_REFERENCE macro=rss_schema
					"proposals": rsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// property: name=dh_groups, type=STRING macro=rss_schema
								"dh_groups": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=dh_groups, type=STRING macro=rss_schema
								// property: name=encryption, type=STRING macro=rss_schema
								"encryption": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=encryption, type=STRING macro=rss_schema
								// property: name=hash, type=STRING macro=rss_schema
								"hash": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=hash, type=STRING macro=rss_schema
								// property: name=prf, type=STRING macro=rss_schema
								"prf": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=prf, type=STRING macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=prf, type=STRING macro=rss_schema
					// property: name=responder_sase_proposals, type=REFERENCE macro=rss_schema
					"responder_sase_proposals": rsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]rsschema.Attribute{
							// property: name=dh_group, type=ARRAY_PRIMITIVE macro=rss_schema
							"dh_group": rsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=dh_group, type=ARRAY_PRIMITIVE macro=rss_schema
							// property: name=encryption, type=ARRAY_PRIMITIVE macro=rss_schema
							"encryption": rsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=encryption, type=ARRAY_PRIMITIVE macro=rss_schema
							// property: name=hash, type=ARRAY_PRIMITIVE macro=rss_schema
							"hash": rsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=hash, type=ARRAY_PRIMITIVE macro=rss_schema
						},
					},
					// key name holder for attribute: name=hash, type=ARRAY_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=hash, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=ike_group, type=REFERENCE macro=rss_schema
			"ike_group": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=aggressive, type=BOOLEAN macro=rss_schema
					"aggressive": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=aggressive, type=BOOLEAN macro=rss_schema
					// property: name=authentication_multiple, type=INTEGER macro=rss_schema
					"authentication_multiple": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=authentication_multiple, type=INTEGER macro=rss_schema
					// property: name=key_exchange, type=STRING macro=rss_schema
					"key_exchange": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=key_exchange, type=STRING macro=rss_schema
					// property: name=lifetime, type=INTEGER macro=rss_schema
					"lifetime": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=lifetime, type=INTEGER macro=rss_schema
					// property: name=lifetime_units, type=STRING macro=rss_schema
					"lifetime_units": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=lifetime_units, type=STRING macro=rss_schema
					// property: name=port, type=INTEGER macro=rss_schema
					"port": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=port, type=INTEGER macro=rss_schema
					// property: name=proposals, type=ARRAY_REFERENCE macro=rss_schema
					"proposals": rsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// property: name=dh_groups, type=STRING macro=rss_schema
								"dh_groups": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=dh_groups, type=STRING macro=rss_schema
								// property: name=encryption, type=STRING macro=rss_schema
								"encryption": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=encryption, type=STRING macro=rss_schema
								// property: name=hash, type=STRING macro=rss_schema
								"hash": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=hash, type=STRING macro=rss_schema
								// property: name=prf, type=STRING macro=rss_schema
								"prf": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=prf, type=STRING macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=prf, type=STRING macro=rss_schema
					// property: name=reauth, type=BOOLEAN macro=rss_schema
					"reauth": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=reauth, type=BOOLEAN macro=rss_schema
				},
			},
			// key name holder for attribute: name=reauth, type=BOOLEAN macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=used_for, type=STRING macro=rss_schema
			"used_for": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=used_for, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *ipsecProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *ipsecProfileResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *ipsecProfileResource) doPost(ctx context.Context, plan *rsModelIPSECProfileScreenV2N2, state *rsModelIPSECProfileScreenV2N2, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_ipsec_profile")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_ipsec_profile",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.2/api/ipsecprofiles"

	// copy parameters from plan always
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.IPSECProfileScreenV2N2{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=13
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=authentication, type=REFERENCE macro=copy_from_plan
	if plan.Authentication != nil {
		body.Authentication = &sdwan_schema.IPSECAuthenticationV1{}
		// copy_from_plan: body=body.Authentication prefix=rsModel plan=plan.Authentication properties=22
		// property: name=certificate, type=STRING macro=copy_from_plan
		body.Authentication.Certificate = StringValueOrNil(plan.Authentication.Certificate)
		// property: name=certificate_profile_id, type=STRING macro=copy_from_plan
		body.Authentication.CertificateProfileId = StringValueOrNil(plan.Authentication.CertificateProfileId)
		// property: name=comment, type=STRING macro=copy_from_plan
		body.Authentication.Comment = StringValueOrNil(plan.Authentication.Comment)
		// property: name=ikev1_params, type=REFERENCE macro=copy_from_plan
		if plan.Authentication.Ikev1Params != nil {
			body.Authentication.Ikev1Params = &sdwan_schema.IKEV1Params{}
			// copy_from_plan: body=body.Authentication.Ikev1Params prefix=rsModel plan=plan.Authentication.Ikev1Params properties=5
			// property: name=xauth_id, type=STRING macro=copy_from_plan
			body.Authentication.Ikev1Params.XauthId = StringValueOrNil(plan.Authentication.Ikev1Params.XauthId)
			// property: name=xauth_secret, type=STRING macro=copy_from_plan
			body.Authentication.Ikev1Params.XauthSecret = StringValueOrNil(plan.Authentication.Ikev1Params.XauthSecret)
			// property: name=xauth_secret_encrypted, type=STRING macro=copy_from_plan
			body.Authentication.Ikev1Params.XauthSecretEncrypted = StringValueOrNil(plan.Authentication.Ikev1Params.XauthSecretEncrypted)
			// property: name=xauth_secret_hash, type=STRING macro=copy_from_plan
			body.Authentication.Ikev1Params.XauthSecretHash = StringValueOrNil(plan.Authentication.Ikev1Params.XauthSecretHash)
			// property: name=xauth_type, type=STRING macro=copy_from_plan
			body.Authentication.Ikev1Params.XauthType = StringValueOrNil(plan.Authentication.Ikev1Params.XauthType)
		}
		// property: name=local_ca_certificate, type=STRING macro=copy_from_plan
		body.Authentication.LocalCaCertificate = StringValueOrNil(plan.Authentication.LocalCaCertificate)
		// property: name=local_id, type=STRING macro=copy_from_plan
		body.Authentication.LocalId = StringValueOrNil(plan.Authentication.LocalId)
		// property: name=local_id_custom, type=STRING macro=copy_from_plan
		body.Authentication.LocalIdCustom = StringValueOrNil(plan.Authentication.LocalIdCustom)
		// property: name=local_pa_certificate_id, type=STRING macro=copy_from_plan
		body.Authentication.LocalPaCertificateId = StringValueOrNil(plan.Authentication.LocalPaCertificateId)
		// property: name=pa_master_key_id, type=STRING macro=copy_from_plan
		body.Authentication.PaMasterKeyId = StringValueOrNil(plan.Authentication.PaMasterKeyId)
		// property: name=passphrase, type=STRING macro=copy_from_plan
		body.Authentication.Passphrase = StringValueOrNil(plan.Authentication.Passphrase)
		// property: name=passphrase_encrypted, type=STRING macro=copy_from_plan
		body.Authentication.PassphraseEncrypted = StringValueOrNil(plan.Authentication.PassphraseEncrypted)
		// property: name=peer_id_check, type=STRING macro=copy_from_plan
		body.Authentication.PeerIdCheck = StringValueOrNil(plan.Authentication.PeerIdCheck)
		// property: name=permit_peer_id_mismatch, type=BOOLEAN macro=copy_from_plan
		body.Authentication.PermitPeerIdMismatch = BoolValueOrNil(plan.Authentication.PermitPeerIdMismatch)
		// property: name=private_key, type=STRING macro=copy_from_plan
		body.Authentication.PrivateKey = StringValueOrNil(plan.Authentication.PrivateKey)
		// property: name=private_key_encrypted, type=STRING macro=copy_from_plan
		body.Authentication.PrivateKeyEncrypted = StringValueOrNil(plan.Authentication.PrivateKeyEncrypted)
		// property: name=remote_ca_certificate, type=STRING macro=copy_from_plan
		body.Authentication.RemoteCaCertificate = StringValueOrNil(plan.Authentication.RemoteCaCertificate)
		// property: name=remote_id, type=STRING macro=copy_from_plan
		body.Authentication.RemoteId = StringValueOrNil(plan.Authentication.RemoteId)
		// property: name=secret, type=STRING macro=copy_from_plan
		body.Authentication.Secret = StringValueOrNil(plan.Authentication.Secret)
		// property: name=secret_encrypted, type=STRING macro=copy_from_plan
		body.Authentication.SecretEncrypted = StringValueOrNil(plan.Authentication.SecretEncrypted)
		// property: name=secret_hash, type=STRING macro=copy_from_plan
		body.Authentication.SecretHash = StringValueOrNil(plan.Authentication.SecretHash)
		// property: name=strict_validation_peer_extended_key_use, type=BOOLEAN macro=copy_from_plan
		body.Authentication.StrictValidationPeerExtendedKeyUse = BoolValueOrNil(plan.Authentication.StrictValidationPeerExtendedKeyUse)
		// property: name=type, type=STRING macro=copy_from_plan
		body.Authentication.Type = StringValueOrNil(plan.Authentication.Type)
	}
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=dpd_delay, type=INTEGER macro=copy_from_plan
	body.DpdDelay = Int64ValueOrNil(plan.DpdDelay)
	// property: name=dpd_enable, type=BOOLEAN macro=copy_from_plan
	body.DpdEnable = BoolValueOrNil(plan.DpdEnable)
	// property: name=dpd_timeout, type=INTEGER macro=copy_from_plan
	body.DpdTimeout = Int64ValueOrNil(plan.DpdTimeout)
	// property: name=esp_group, type=REFERENCE macro=copy_from_plan
	if plan.EspGroup != nil {
		body.EspGroup = &sdwan_schema.ESPGroup{}
		// copy_from_plan: body=body.EspGroup prefix=rsModel plan=plan.EspGroup properties=7
		// property: name=force_encapsulation, type=BOOLEAN macro=copy_from_plan
		body.EspGroup.ForceEncapsulation = BoolValueOrNil(plan.EspGroup.ForceEncapsulation)
		// property: name=lifesize, type=REFERENCE macro=copy_from_plan
		if plan.EspGroup.Lifesize != nil {
			body.EspGroup.Lifesize = &sdwan_schema.Lifesize{}
			// copy_from_plan: body=body.EspGroup.Lifesize prefix=rsModel plan=plan.EspGroup.Lifesize properties=2
			// property: name=units, type=STRING macro=copy_from_plan
			body.EspGroup.Lifesize.Units = StringValueOrNil(plan.EspGroup.Lifesize.Units)
			// property: name=value, type=INTEGER macro=copy_from_plan
			body.EspGroup.Lifesize.Value = Int64ValueOrNil(plan.EspGroup.Lifesize.Value)
		}
		// property: name=lifetime, type=INTEGER macro=copy_from_plan
		body.EspGroup.Lifetime = Int64ValueOrNil(plan.EspGroup.Lifetime)
		// property: name=lifetime_units, type=STRING macro=copy_from_plan
		body.EspGroup.LifetimeUnits = StringValueOrNil(plan.EspGroup.LifetimeUnits)
		// property: name=mode, type=STRING macro=copy_from_plan
		body.EspGroup.Mode = StringValueOrNil(plan.EspGroup.Mode)
		// property: name=proposals, type=ARRAY_REFERENCE macro=copy_from_plan
		if plan.EspGroup.Proposals == nil {
			body.EspGroup.Proposals = nil
		} else if len(plan.EspGroup.Proposals) == 0 {
			body.EspGroup.Proposals = []sdwan_schema.Proposals{}
		} else {
			body.EspGroup.Proposals = make([]sdwan_schema.Proposals, 0, len(plan.EspGroup.Proposals))
			for varLoopProposalsIndex, varLoopProposals := range plan.EspGroup.Proposals {
				// add a new item
				body.EspGroup.Proposals = append(body.EspGroup.Proposals, sdwan_schema.Proposals{})
				// copy_from_plan: body=body.EspGroup.Proposals[varLoopProposalsIndex] prefix=rsModel plan=varLoopProposals properties=4
				// property: name=dh_groups, type=STRING macro=copy_from_plan
				body.EspGroup.Proposals[varLoopProposalsIndex].DhGroups = StringValueOrNil(varLoopProposals.DhGroups)
				// property: name=encryption, type=STRING macro=copy_from_plan
				body.EspGroup.Proposals[varLoopProposalsIndex].Encryption = StringValueOrNil(varLoopProposals.Encryption)
				// property: name=hash, type=STRING macro=copy_from_plan
				body.EspGroup.Proposals[varLoopProposalsIndex].Hash = StringValueOrNil(varLoopProposals.Hash)
				// property: name=prf, type=STRING macro=copy_from_plan
				body.EspGroup.Proposals[varLoopProposalsIndex].Prf = StringValueOrNil(varLoopProposals.Prf)
			}
		}
		// property: name=responder_sase_proposals, type=REFERENCE macro=copy_from_plan
		if plan.EspGroup.ResponderSaseProposals != nil {
			body.EspGroup.ResponderSaseProposals = &sdwan_schema.ResponderSaseProposals{}
			// copy_from_plan: body=body.EspGroup.ResponderSaseProposals prefix=rsModel plan=plan.EspGroup.ResponderSaseProposals properties=3
			// property: name=dh_group, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.EspGroup.ResponderSaseProposals.DhGroup = ListStringValueOrNil(ctx, plan.EspGroup.ResponderSaseProposals.DhGroup)
			// property: name=encryption, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.EspGroup.ResponderSaseProposals.Encryption = ListStringValueOrNil(ctx, plan.EspGroup.ResponderSaseProposals.Encryption)
			// property: name=hash, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.EspGroup.ResponderSaseProposals.Hash = ListStringValueOrNil(ctx, plan.EspGroup.ResponderSaseProposals.Hash)
		}
	}
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=ike_group, type=REFERENCE macro=copy_from_plan
	if plan.IkeGroup != nil {
		body.IkeGroup = &sdwan_schema.IKEGroup{}
		// copy_from_plan: body=body.IkeGroup prefix=rsModel plan=plan.IkeGroup properties=8
		// property: name=aggressive, type=BOOLEAN macro=copy_from_plan
		body.IkeGroup.Aggressive = BoolValueOrNil(plan.IkeGroup.Aggressive)
		// property: name=authentication_multiple, type=INTEGER macro=copy_from_plan
		body.IkeGroup.AuthenticationMultiple = Int64ValueOrNil(plan.IkeGroup.AuthenticationMultiple)
		// property: name=key_exchange, type=STRING macro=copy_from_plan
		body.IkeGroup.KeyExchange = StringValueOrNil(plan.IkeGroup.KeyExchange)
		// property: name=lifetime, type=INTEGER macro=copy_from_plan
		body.IkeGroup.Lifetime = Int64ValueOrNil(plan.IkeGroup.Lifetime)
		// property: name=lifetime_units, type=STRING macro=copy_from_plan
		body.IkeGroup.LifetimeUnits = StringValueOrNil(plan.IkeGroup.LifetimeUnits)
		// property: name=port, type=INTEGER macro=copy_from_plan
		body.IkeGroup.Port = Int64ValueOrNil(plan.IkeGroup.Port)
		// property: name=proposals, type=ARRAY_REFERENCE macro=copy_from_plan
		if plan.IkeGroup.Proposals == nil {
			body.IkeGroup.Proposals = nil
		} else if len(plan.IkeGroup.Proposals) == 0 {
			body.IkeGroup.Proposals = []sdwan_schema.Proposals{}
		} else {
			body.IkeGroup.Proposals = make([]sdwan_schema.Proposals, 0, len(plan.IkeGroup.Proposals))
			for varLoopProposalsIndex, varLoopProposals := range plan.IkeGroup.Proposals {
				// add a new item
				body.IkeGroup.Proposals = append(body.IkeGroup.Proposals, sdwan_schema.Proposals{})
				// copy_from_plan: body=body.IkeGroup.Proposals[varLoopProposalsIndex] prefix=rsModel plan=varLoopProposals properties=4
				// property: name=dh_groups, type=STRING macro=copy_from_plan
				body.IkeGroup.Proposals[varLoopProposalsIndex].DhGroups = StringValueOrNil(varLoopProposals.DhGroups)
				// property: name=encryption, type=STRING macro=copy_from_plan
				body.IkeGroup.Proposals[varLoopProposalsIndex].Encryption = StringValueOrNil(varLoopProposals.Encryption)
				// property: name=hash, type=STRING macro=copy_from_plan
				body.IkeGroup.Proposals[varLoopProposalsIndex].Hash = StringValueOrNil(varLoopProposals.Hash)
				// property: name=prf, type=STRING macro=copy_from_plan
				body.IkeGroup.Proposals[varLoopProposalsIndex].Prf = StringValueOrNil(varLoopProposals.Prf)
			}
		}
		// property: name=reauth, type=BOOLEAN macro=copy_from_plan
		body.IkeGroup.Reauth = BoolValueOrNil(plan.IkeGroup.Reauth)
	}
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=used_for, type=STRING macro=copy_from_plan
	body.UsedFor = StringValueOrNil(plan.UsedFor)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct IPSECProfileScreenV2N2 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_ipsec_profile", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_ipsec_profile",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_ipsec_profile", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_ipsec_profile",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_ipsec_profile", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.IPSECProfileScreenV2N2
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to IPSECProfileScreenV2N2 in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_ipsec_profile with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=IPSECProfileScreenV2N2
	// copy_to_state: state=state prefix=rsModel ans=ans properties=13
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=authentication, type=REFERENCE macro=copy_to_state
	if ans.Authentication == nil {
		state.Authentication = nil
	} else {
		state.Authentication = &rsModelIPSECAuthenticationV1{}
		// copy_to_state: state=state.Authentication prefix=rsModel ans=ans.Authentication properties=22
		// property: name=certificate, type=STRING macro=copy_to_state
		state.Authentication.Certificate = types.StringPointerValue(ans.Authentication.Certificate)
		// property: name=certificate_profile_id, type=STRING macro=copy_to_state
		state.Authentication.CertificateProfileId = types.StringPointerValue(ans.Authentication.CertificateProfileId)
		// property: name=comment, type=STRING macro=copy_to_state
		state.Authentication.Comment = types.StringPointerValue(ans.Authentication.Comment)
		// property: name=ikev1_params, type=REFERENCE macro=copy_to_state
		if ans.Authentication.Ikev1Params == nil {
			state.Authentication.Ikev1Params = nil
		} else {
			state.Authentication.Ikev1Params = &rsModelIKEV1Params{}
			// copy_to_state: state=state.Authentication.Ikev1Params prefix=rsModel ans=ans.Authentication.Ikev1Params properties=5
			// property: name=xauth_id, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthId = types.StringPointerValue(ans.Authentication.Ikev1Params.XauthId)
			// property: name=xauth_secret, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthSecret = types.StringPointerValue(plan.Authentication.Ikev1Params.XauthSecret.ValueStringPointer())
			// this property is sensitive and will be stored in the state's internal key name
			state.Authentication.Ikev1Params.XauthSecretInternalKeyName = types.StringValue(GenerateRandomString(16))
			// store value if needed
			if !state.Authentication.Ikev1Params.XauthSecret.IsNull() {
				encryptedXauthSecret, _ := Encrypt([]byte(state.Authentication.Ikev1Params.XauthSecret.String()))
				resp.Private.SetKey(ctx, state.Authentication.Ikev1Params.XauthSecretInternalKeyName.String(), []byte(encryptedXauthSecret))
			}
			// property: name=xauth_secret_encrypted, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthSecretEncrypted = types.StringPointerValue(plan.Authentication.Ikev1Params.XauthSecretEncrypted.ValueStringPointer())
			// this property is sensitive and will be stored in the state's internal key name
			state.Authentication.Ikev1Params.XauthSecretEncryptedInternalKeyName = types.StringValue(GenerateRandomString(16))
			// store value if needed
			if !state.Authentication.Ikev1Params.XauthSecretEncrypted.IsNull() {
				encryptedXauthSecretEncrypted, _ := Encrypt([]byte(state.Authentication.Ikev1Params.XauthSecretEncrypted.String()))
				resp.Private.SetKey(ctx, state.Authentication.Ikev1Params.XauthSecretEncryptedInternalKeyName.String(), []byte(encryptedXauthSecretEncrypted))
			}
			// property: name=xauth_secret_hash, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthSecretHash = types.StringPointerValue(plan.Authentication.Ikev1Params.XauthSecretHash.ValueStringPointer())
			// this property is sensitive and will be stored in the state's internal key name
			state.Authentication.Ikev1Params.XauthSecretHashInternalKeyName = types.StringValue(GenerateRandomString(16))
			// store value if needed
			if !state.Authentication.Ikev1Params.XauthSecretHash.IsNull() {
				encryptedXauthSecretHash, _ := Encrypt([]byte(state.Authentication.Ikev1Params.XauthSecretHash.String()))
				resp.Private.SetKey(ctx, state.Authentication.Ikev1Params.XauthSecretHashInternalKeyName.String(), []byte(encryptedXauthSecretHash))
			}
			// property: name=xauth_type, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthType = types.StringPointerValue(ans.Authentication.Ikev1Params.XauthType)
		}
		// property: name=local_ca_certificate, type=STRING macro=copy_to_state
		state.Authentication.LocalCaCertificate = types.StringPointerValue(ans.Authentication.LocalCaCertificate)
		// property: name=local_id, type=STRING macro=copy_to_state
		state.Authentication.LocalId = types.StringPointerValue(ans.Authentication.LocalId)
		// property: name=local_id_custom, type=STRING macro=copy_to_state
		state.Authentication.LocalIdCustom = types.StringPointerValue(ans.Authentication.LocalIdCustom)
		// property: name=local_pa_certificate_id, type=STRING macro=copy_to_state
		state.Authentication.LocalPaCertificateId = types.StringPointerValue(ans.Authentication.LocalPaCertificateId)
		// property: name=pa_master_key_id, type=STRING macro=copy_to_state
		state.Authentication.PaMasterKeyId = types.StringPointerValue(ans.Authentication.PaMasterKeyId)
		// property: name=passphrase, type=STRING macro=copy_to_state
		state.Authentication.Passphrase = types.StringPointerValue(ans.Authentication.Passphrase)
		// property: name=passphrase_encrypted, type=STRING macro=copy_to_state
		state.Authentication.PassphraseEncrypted = types.StringPointerValue(ans.Authentication.PassphraseEncrypted)
		// property: name=peer_id_check, type=STRING macro=copy_to_state
		state.Authentication.PeerIdCheck = types.StringPointerValue(ans.Authentication.PeerIdCheck)
		// property: name=permit_peer_id_mismatch, type=BOOLEAN macro=copy_to_state
		state.Authentication.PermitPeerIdMismatch = types.BoolPointerValue(ans.Authentication.PermitPeerIdMismatch)
		// property: name=private_key, type=STRING macro=copy_to_state
		state.Authentication.PrivateKey = types.StringPointerValue(ans.Authentication.PrivateKey)
		// property: name=private_key_encrypted, type=STRING macro=copy_to_state
		state.Authentication.PrivateKeyEncrypted = types.StringPointerValue(ans.Authentication.PrivateKeyEncrypted)
		// property: name=remote_ca_certificate, type=STRING macro=copy_to_state
		state.Authentication.RemoteCaCertificate = types.StringPointerValue(ans.Authentication.RemoteCaCertificate)
		// property: name=remote_id, type=STRING macro=copy_to_state
		state.Authentication.RemoteId = types.StringPointerValue(ans.Authentication.RemoteId)
		// property: name=secret, type=STRING macro=copy_to_state
		state.Authentication.Secret = types.StringPointerValue(plan.Authentication.Secret.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.Authentication.SecretInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.Authentication.Secret.IsNull() {
			encryptedSecret, _ := Encrypt([]byte(state.Authentication.Secret.String()))
			resp.Private.SetKey(ctx, state.Authentication.SecretInternalKeyName.String(), []byte(encryptedSecret))
		}
		// property: name=secret_encrypted, type=STRING macro=copy_to_state
		state.Authentication.SecretEncrypted = types.StringPointerValue(plan.Authentication.SecretEncrypted.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.Authentication.SecretEncryptedInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.Authentication.SecretEncrypted.IsNull() {
			encryptedSecretEncrypted, _ := Encrypt([]byte(state.Authentication.SecretEncrypted.String()))
			resp.Private.SetKey(ctx, state.Authentication.SecretEncryptedInternalKeyName.String(), []byte(encryptedSecretEncrypted))
		}
		// property: name=secret_hash, type=STRING macro=copy_to_state
		state.Authentication.SecretHash = types.StringPointerValue(plan.Authentication.SecretHash.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.Authentication.SecretHashInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.Authentication.SecretHash.IsNull() {
			encryptedSecretHash, _ := Encrypt([]byte(state.Authentication.SecretHash.String()))
			resp.Private.SetKey(ctx, state.Authentication.SecretHashInternalKeyName.String(), []byte(encryptedSecretHash))
		}
		// property: name=strict_validation_peer_extended_key_use, type=BOOLEAN macro=copy_to_state
		state.Authentication.StrictValidationPeerExtendedKeyUse = types.BoolPointerValue(ans.Authentication.StrictValidationPeerExtendedKeyUse)
		// property: name=type, type=STRING macro=copy_to_state
		state.Authentication.Type = types.StringPointerValue(ans.Authentication.Type)
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=dpd_delay, type=INTEGER macro=copy_to_state
	state.DpdDelay = types.Int64PointerValue(ans.DpdDelay)
	// property: name=dpd_enable, type=BOOLEAN macro=copy_to_state
	state.DpdEnable = types.BoolPointerValue(ans.DpdEnable)
	// property: name=dpd_timeout, type=INTEGER macro=copy_to_state
	state.DpdTimeout = types.Int64PointerValue(ans.DpdTimeout)
	// property: name=esp_group, type=REFERENCE macro=copy_to_state
	if ans.EspGroup == nil {
		state.EspGroup = nil
	} else {
		state.EspGroup = &rsModelESPGroup{}
		// copy_to_state: state=state.EspGroup prefix=rsModel ans=ans.EspGroup properties=7
		// property: name=force_encapsulation, type=BOOLEAN macro=copy_to_state
		state.EspGroup.ForceEncapsulation = types.BoolPointerValue(ans.EspGroup.ForceEncapsulation)
		// property: name=lifesize, type=REFERENCE macro=copy_to_state
		if ans.EspGroup.Lifesize == nil {
			state.EspGroup.Lifesize = nil
		} else {
			state.EspGroup.Lifesize = &rsModelLifesize{}
			// copy_to_state: state=state.EspGroup.Lifesize prefix=rsModel ans=ans.EspGroup.Lifesize properties=2
			// property: name=units, type=STRING macro=copy_to_state
			state.EspGroup.Lifesize.Units = types.StringPointerValue(ans.EspGroup.Lifesize.Units)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.EspGroup.Lifesize.Value = types.Int64PointerValue(ans.EspGroup.Lifesize.Value)
		}
		// property: name=lifetime, type=INTEGER macro=copy_to_state
		state.EspGroup.Lifetime = types.Int64PointerValue(ans.EspGroup.Lifetime)
		// property: name=lifetime_units, type=STRING macro=copy_to_state
		state.EspGroup.LifetimeUnits = types.StringPointerValue(ans.EspGroup.LifetimeUnits)
		// property: name=mode, type=STRING macro=copy_to_state
		state.EspGroup.Mode = types.StringPointerValue(ans.EspGroup.Mode)
		// property: name=proposals, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.EspGroup.Proposals == nil {
			state.EspGroup.Proposals = nil
		} else if len(ans.EspGroup.Proposals) == 0 {
			state.EspGroup.Proposals = []rsModelProposals{}
		} else {
			state.EspGroup.Proposals = make([]rsModelProposals, 0, len(ans.EspGroup.Proposals))
			for varLoopProposalsIndex, varLoopProposals := range ans.EspGroup.Proposals {
				// add a new item
				state.EspGroup.Proposals = append(state.EspGroup.Proposals, rsModelProposals{})
				// copy_to_state: state=state.EspGroup.Proposals[varLoopProposalsIndex] prefix=rsModel ans=varLoopProposals properties=4
				// property: name=dh_groups, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].DhGroups = types.StringPointerValue(varLoopProposals.DhGroups)
				// property: name=encryption, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].Encryption = types.StringPointerValue(varLoopProposals.Encryption)
				// property: name=hash, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].Hash = types.StringPointerValue(varLoopProposals.Hash)
				// property: name=prf, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].Prf = types.StringPointerValue(varLoopProposals.Prf)
			}
		}
		// property: name=responder_sase_proposals, type=REFERENCE macro=copy_to_state
		if ans.EspGroup.ResponderSaseProposals == nil {
			state.EspGroup.ResponderSaseProposals = nil
		} else {
			state.EspGroup.ResponderSaseProposals = &rsModelResponderSaseProposals{}
			// copy_to_state: state=state.EspGroup.ResponderSaseProposals prefix=rsModel ans=ans.EspGroup.ResponderSaseProposals properties=3
			// property: name=dh_group, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDhGroup, errDhGroup := types.ListValueFrom(ctx, types.StringType, ans.EspGroup.ResponderSaseProposals.DhGroup)
			state.EspGroup.ResponderSaseProposals.DhGroup = varDhGroup
			resp.Diagnostics.Append(errDhGroup.Errors()...)
			// property: name=encryption, type=ARRAY_PRIMITIVE macro=copy_to_state
			varEncryption, errEncryption := types.ListValueFrom(ctx, types.StringType, ans.EspGroup.ResponderSaseProposals.Encryption)
			state.EspGroup.ResponderSaseProposals.Encryption = varEncryption
			resp.Diagnostics.Append(errEncryption.Errors()...)
			// property: name=hash, type=ARRAY_PRIMITIVE macro=copy_to_state
			varHash, errHash := types.ListValueFrom(ctx, types.StringType, ans.EspGroup.ResponderSaseProposals.Hash)
			state.EspGroup.ResponderSaseProposals.Hash = varHash
			resp.Diagnostics.Append(errHash.Errors()...)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ike_group, type=REFERENCE macro=copy_to_state
	if ans.IkeGroup == nil {
		state.IkeGroup = nil
	} else {
		state.IkeGroup = &rsModelIKEGroup{}
		// copy_to_state: state=state.IkeGroup prefix=rsModel ans=ans.IkeGroup properties=8
		// property: name=aggressive, type=BOOLEAN macro=copy_to_state
		state.IkeGroup.Aggressive = types.BoolPointerValue(ans.IkeGroup.Aggressive)
		// property: name=authentication_multiple, type=INTEGER macro=copy_to_state
		state.IkeGroup.AuthenticationMultiple = types.Int64PointerValue(ans.IkeGroup.AuthenticationMultiple)
		// property: name=key_exchange, type=STRING macro=copy_to_state
		state.IkeGroup.KeyExchange = types.StringPointerValue(ans.IkeGroup.KeyExchange)
		// property: name=lifetime, type=INTEGER macro=copy_to_state
		state.IkeGroup.Lifetime = types.Int64PointerValue(ans.IkeGroup.Lifetime)
		// property: name=lifetime_units, type=STRING macro=copy_to_state
		state.IkeGroup.LifetimeUnits = types.StringPointerValue(ans.IkeGroup.LifetimeUnits)
		// property: name=port, type=INTEGER macro=copy_to_state
		state.IkeGroup.Port = types.Int64PointerValue(ans.IkeGroup.Port)
		// property: name=proposals, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.IkeGroup.Proposals == nil {
			state.IkeGroup.Proposals = nil
		} else if len(ans.IkeGroup.Proposals) == 0 {
			state.IkeGroup.Proposals = []rsModelProposals{}
		} else {
			state.IkeGroup.Proposals = make([]rsModelProposals, 0, len(ans.IkeGroup.Proposals))
			for varLoopProposalsIndex, varLoopProposals := range ans.IkeGroup.Proposals {
				// add a new item
				state.IkeGroup.Proposals = append(state.IkeGroup.Proposals, rsModelProposals{})
				// copy_to_state: state=state.IkeGroup.Proposals[varLoopProposalsIndex] prefix=rsModel ans=varLoopProposals properties=4
				// property: name=dh_groups, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].DhGroups = types.StringPointerValue(varLoopProposals.DhGroups)
				// property: name=encryption, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].Encryption = types.StringPointerValue(varLoopProposals.Encryption)
				// property: name=hash, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].Hash = types.StringPointerValue(varLoopProposals.Hash)
				// property: name=prf, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].Prf = types.StringPointerValue(varLoopProposals.Prf)
			}
		}
		// property: name=reauth, type=BOOLEAN macro=copy_to_state
		state.IkeGroup.Reauth = types.BoolPointerValue(ans.IkeGroup.Reauth)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=used_for, type=STRING macro=copy_to_state
	state.UsedFor = types.StringPointerValue(ans.UsedFor)
	return true
}

func (r *ipsecProfileResource) doGet(ctx context.Context, state *rsModelIPSECProfileScreenV2N2, savestate *rsModelIPSECProfileScreenV2N2, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_ipsec_profile",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_ipsec_profile ID format", "Expected 1 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.2/api/ipsecprofiles/{profile_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["profile_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_ipsec_profile", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_ipsec_profile",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_ipsec_profile from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=IPSECProfileScreenV2N2
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.IPSECProfileScreenV2N2
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to IPSECProfileScreenV2N2 in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=13
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=authentication, type=REFERENCE macro=copy_to_state
	if ans.Authentication == nil {
		state.Authentication = nil
	} else {
		state.Authentication = &rsModelIPSECAuthenticationV1{}
		// copy_to_state: state=state.Authentication prefix=rsModel ans=ans.Authentication properties=22
		// property: name=certificate, type=STRING macro=copy_to_state
		state.Authentication.Certificate = types.StringPointerValue(ans.Authentication.Certificate)
		// property: name=certificate_profile_id, type=STRING macro=copy_to_state
		state.Authentication.CertificateProfileId = types.StringPointerValue(ans.Authentication.CertificateProfileId)
		// property: name=comment, type=STRING macro=copy_to_state
		state.Authentication.Comment = types.StringPointerValue(ans.Authentication.Comment)
		// property: name=ikev1_params, type=REFERENCE macro=copy_to_state
		if ans.Authentication.Ikev1Params == nil {
			state.Authentication.Ikev1Params = nil
		} else {
			state.Authentication.Ikev1Params = &rsModelIKEV1Params{}
			// copy_to_state: state=state.Authentication.Ikev1Params prefix=rsModel ans=ans.Authentication.Ikev1Params properties=5
			// property: name=xauth_id, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthId = types.StringPointerValue(ans.Authentication.Ikev1Params.XauthId)
			// property: name=xauth_secret, type=STRING macro=copy_to_state
			encryptedXauthSecretKeyName := state.Authentication.Ikev1Params.XauthSecretInternalKeyName.String()
			encryptedXauthSecretValueBytes, _ := resp.Private.GetKey(ctx, encryptedXauthSecretKeyName)
			if encryptedXauthSecretValueBytes != nil {
				decryptedXauthSecret, _ := Decrypt(string(encryptedXauthSecretValueBytes))
				state.Authentication.Ikev1Params.XauthSecret = types.StringValue(decryptedXauthSecret)
			}
			// property: name=xauth_secret_encrypted, type=STRING macro=copy_to_state
			encryptedXauthSecretEncryptedKeyName := state.Authentication.Ikev1Params.XauthSecretEncryptedInternalKeyName.String()
			encryptedXauthSecretEncryptedValueBytes, _ := resp.Private.GetKey(ctx, encryptedXauthSecretEncryptedKeyName)
			if encryptedXauthSecretEncryptedValueBytes != nil {
				decryptedXauthSecretEncrypted, _ := Decrypt(string(encryptedXauthSecretEncryptedValueBytes))
				state.Authentication.Ikev1Params.XauthSecretEncrypted = types.StringValue(decryptedXauthSecretEncrypted)
			}
			// property: name=xauth_secret_hash, type=STRING macro=copy_to_state
			encryptedXauthSecretHashKeyName := state.Authentication.Ikev1Params.XauthSecretHashInternalKeyName.String()
			encryptedXauthSecretHashValueBytes, _ := resp.Private.GetKey(ctx, encryptedXauthSecretHashKeyName)
			if encryptedXauthSecretHashValueBytes != nil {
				decryptedXauthSecretHash, _ := Decrypt(string(encryptedXauthSecretHashValueBytes))
				state.Authentication.Ikev1Params.XauthSecretHash = types.StringValue(decryptedXauthSecretHash)
			}
			// property: name=xauth_type, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthType = types.StringPointerValue(ans.Authentication.Ikev1Params.XauthType)
		}
		// property: name=local_ca_certificate, type=STRING macro=copy_to_state
		state.Authentication.LocalCaCertificate = types.StringPointerValue(ans.Authentication.LocalCaCertificate)
		// property: name=local_id, type=STRING macro=copy_to_state
		state.Authentication.LocalId = types.StringPointerValue(ans.Authentication.LocalId)
		// property: name=local_id_custom, type=STRING macro=copy_to_state
		state.Authentication.LocalIdCustom = types.StringPointerValue(ans.Authentication.LocalIdCustom)
		// property: name=local_pa_certificate_id, type=STRING macro=copy_to_state
		state.Authentication.LocalPaCertificateId = types.StringPointerValue(ans.Authentication.LocalPaCertificateId)
		// property: name=pa_master_key_id, type=STRING macro=copy_to_state
		state.Authentication.PaMasterKeyId = types.StringPointerValue(ans.Authentication.PaMasterKeyId)
		// property: name=passphrase, type=STRING macro=copy_to_state
		state.Authentication.Passphrase = types.StringPointerValue(ans.Authentication.Passphrase)
		// property: name=passphrase_encrypted, type=STRING macro=copy_to_state
		state.Authentication.PassphraseEncrypted = types.StringPointerValue(ans.Authentication.PassphraseEncrypted)
		// property: name=peer_id_check, type=STRING macro=copy_to_state
		state.Authentication.PeerIdCheck = types.StringPointerValue(ans.Authentication.PeerIdCheck)
		// property: name=permit_peer_id_mismatch, type=BOOLEAN macro=copy_to_state
		state.Authentication.PermitPeerIdMismatch = types.BoolPointerValue(ans.Authentication.PermitPeerIdMismatch)
		// property: name=private_key, type=STRING macro=copy_to_state
		state.Authentication.PrivateKey = types.StringPointerValue(ans.Authentication.PrivateKey)
		// property: name=private_key_encrypted, type=STRING macro=copy_to_state
		state.Authentication.PrivateKeyEncrypted = types.StringPointerValue(ans.Authentication.PrivateKeyEncrypted)
		// property: name=remote_ca_certificate, type=STRING macro=copy_to_state
		state.Authentication.RemoteCaCertificate = types.StringPointerValue(ans.Authentication.RemoteCaCertificate)
		// property: name=remote_id, type=STRING macro=copy_to_state
		state.Authentication.RemoteId = types.StringPointerValue(ans.Authentication.RemoteId)
		// property: name=secret, type=STRING macro=copy_to_state
		encryptedSecretKeyName := state.Authentication.SecretInternalKeyName.String()
		encryptedSecretValueBytes, _ := resp.Private.GetKey(ctx, encryptedSecretKeyName)
		if encryptedSecretValueBytes != nil {
			decryptedSecret, _ := Decrypt(string(encryptedSecretValueBytes))
			state.Authentication.Secret = types.StringValue(decryptedSecret)
		}
		// property: name=secret_encrypted, type=STRING macro=copy_to_state
		encryptedSecretEncryptedKeyName := state.Authentication.SecretEncryptedInternalKeyName.String()
		encryptedSecretEncryptedValueBytes, _ := resp.Private.GetKey(ctx, encryptedSecretEncryptedKeyName)
		if encryptedSecretEncryptedValueBytes != nil {
			decryptedSecretEncrypted, _ := Decrypt(string(encryptedSecretEncryptedValueBytes))
			state.Authentication.SecretEncrypted = types.StringValue(decryptedSecretEncrypted)
		}
		// property: name=secret_hash, type=STRING macro=copy_to_state
		encryptedSecretHashKeyName := state.Authentication.SecretHashInternalKeyName.String()
		encryptedSecretHashValueBytes, _ := resp.Private.GetKey(ctx, encryptedSecretHashKeyName)
		if encryptedSecretHashValueBytes != nil {
			decryptedSecretHash, _ := Decrypt(string(encryptedSecretHashValueBytes))
			state.Authentication.SecretHash = types.StringValue(decryptedSecretHash)
		}
		// property: name=strict_validation_peer_extended_key_use, type=BOOLEAN macro=copy_to_state
		state.Authentication.StrictValidationPeerExtendedKeyUse = types.BoolPointerValue(ans.Authentication.StrictValidationPeerExtendedKeyUse)
		// property: name=type, type=STRING macro=copy_to_state
		state.Authentication.Type = types.StringPointerValue(ans.Authentication.Type)
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=dpd_delay, type=INTEGER macro=copy_to_state
	state.DpdDelay = types.Int64PointerValue(ans.DpdDelay)
	// property: name=dpd_enable, type=BOOLEAN macro=copy_to_state
	state.DpdEnable = types.BoolPointerValue(ans.DpdEnable)
	// property: name=dpd_timeout, type=INTEGER macro=copy_to_state
	state.DpdTimeout = types.Int64PointerValue(ans.DpdTimeout)
	// property: name=esp_group, type=REFERENCE macro=copy_to_state
	if ans.EspGroup == nil {
		state.EspGroup = nil
	} else {
		state.EspGroup = &rsModelESPGroup{}
		// copy_to_state: state=state.EspGroup prefix=rsModel ans=ans.EspGroup properties=7
		// property: name=force_encapsulation, type=BOOLEAN macro=copy_to_state
		state.EspGroup.ForceEncapsulation = types.BoolPointerValue(ans.EspGroup.ForceEncapsulation)
		// property: name=lifesize, type=REFERENCE macro=copy_to_state
		if ans.EspGroup.Lifesize == nil {
			state.EspGroup.Lifesize = nil
		} else {
			state.EspGroup.Lifesize = &rsModelLifesize{}
			// copy_to_state: state=state.EspGroup.Lifesize prefix=rsModel ans=ans.EspGroup.Lifesize properties=2
			// property: name=units, type=STRING macro=copy_to_state
			state.EspGroup.Lifesize.Units = types.StringPointerValue(ans.EspGroup.Lifesize.Units)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.EspGroup.Lifesize.Value = types.Int64PointerValue(ans.EspGroup.Lifesize.Value)
		}
		// property: name=lifetime, type=INTEGER macro=copy_to_state
		state.EspGroup.Lifetime = types.Int64PointerValue(ans.EspGroup.Lifetime)
		// property: name=lifetime_units, type=STRING macro=copy_to_state
		state.EspGroup.LifetimeUnits = types.StringPointerValue(ans.EspGroup.LifetimeUnits)
		// property: name=mode, type=STRING macro=copy_to_state
		state.EspGroup.Mode = types.StringPointerValue(ans.EspGroup.Mode)
		// property: name=proposals, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.EspGroup.Proposals == nil {
			state.EspGroup.Proposals = nil
		} else if len(ans.EspGroup.Proposals) == 0 {
			state.EspGroup.Proposals = []rsModelProposals{}
		} else {
			state.EspGroup.Proposals = make([]rsModelProposals, 0, len(ans.EspGroup.Proposals))
			for varLoopProposalsIndex, varLoopProposals := range ans.EspGroup.Proposals {
				// add a new item
				state.EspGroup.Proposals = append(state.EspGroup.Proposals, rsModelProposals{})
				// copy_to_state: state=state.EspGroup.Proposals[varLoopProposalsIndex] prefix=rsModel ans=varLoopProposals properties=4
				// property: name=dh_groups, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].DhGroups = types.StringPointerValue(varLoopProposals.DhGroups)
				// property: name=encryption, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].Encryption = types.StringPointerValue(varLoopProposals.Encryption)
				// property: name=hash, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].Hash = types.StringPointerValue(varLoopProposals.Hash)
				// property: name=prf, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].Prf = types.StringPointerValue(varLoopProposals.Prf)
			}
		}
		// property: name=responder_sase_proposals, type=REFERENCE macro=copy_to_state
		if ans.EspGroup.ResponderSaseProposals == nil {
			state.EspGroup.ResponderSaseProposals = nil
		} else {
			state.EspGroup.ResponderSaseProposals = &rsModelResponderSaseProposals{}
			// copy_to_state: state=state.EspGroup.ResponderSaseProposals prefix=rsModel ans=ans.EspGroup.ResponderSaseProposals properties=3
			// property: name=dh_group, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDhGroup, errDhGroup := types.ListValueFrom(ctx, types.StringType, ans.EspGroup.ResponderSaseProposals.DhGroup)
			state.EspGroup.ResponderSaseProposals.DhGroup = varDhGroup
			resp.Diagnostics.Append(errDhGroup.Errors()...)
			// property: name=encryption, type=ARRAY_PRIMITIVE macro=copy_to_state
			varEncryption, errEncryption := types.ListValueFrom(ctx, types.StringType, ans.EspGroup.ResponderSaseProposals.Encryption)
			state.EspGroup.ResponderSaseProposals.Encryption = varEncryption
			resp.Diagnostics.Append(errEncryption.Errors()...)
			// property: name=hash, type=ARRAY_PRIMITIVE macro=copy_to_state
			varHash, errHash := types.ListValueFrom(ctx, types.StringType, ans.EspGroup.ResponderSaseProposals.Hash)
			state.EspGroup.ResponderSaseProposals.Hash = varHash
			resp.Diagnostics.Append(errHash.Errors()...)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ike_group, type=REFERENCE macro=copy_to_state
	if ans.IkeGroup == nil {
		state.IkeGroup = nil
	} else {
		state.IkeGroup = &rsModelIKEGroup{}
		// copy_to_state: state=state.IkeGroup prefix=rsModel ans=ans.IkeGroup properties=8
		// property: name=aggressive, type=BOOLEAN macro=copy_to_state
		state.IkeGroup.Aggressive = types.BoolPointerValue(ans.IkeGroup.Aggressive)
		// property: name=authentication_multiple, type=INTEGER macro=copy_to_state
		state.IkeGroup.AuthenticationMultiple = types.Int64PointerValue(ans.IkeGroup.AuthenticationMultiple)
		// property: name=key_exchange, type=STRING macro=copy_to_state
		state.IkeGroup.KeyExchange = types.StringPointerValue(ans.IkeGroup.KeyExchange)
		// property: name=lifetime, type=INTEGER macro=copy_to_state
		state.IkeGroup.Lifetime = types.Int64PointerValue(ans.IkeGroup.Lifetime)
		// property: name=lifetime_units, type=STRING macro=copy_to_state
		state.IkeGroup.LifetimeUnits = types.StringPointerValue(ans.IkeGroup.LifetimeUnits)
		// property: name=port, type=INTEGER macro=copy_to_state
		state.IkeGroup.Port = types.Int64PointerValue(ans.IkeGroup.Port)
		// property: name=proposals, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.IkeGroup.Proposals == nil {
			state.IkeGroup.Proposals = nil
		} else if len(ans.IkeGroup.Proposals) == 0 {
			state.IkeGroup.Proposals = []rsModelProposals{}
		} else {
			state.IkeGroup.Proposals = make([]rsModelProposals, 0, len(ans.IkeGroup.Proposals))
			for varLoopProposalsIndex, varLoopProposals := range ans.IkeGroup.Proposals {
				// add a new item
				state.IkeGroup.Proposals = append(state.IkeGroup.Proposals, rsModelProposals{})
				// copy_to_state: state=state.IkeGroup.Proposals[varLoopProposalsIndex] prefix=rsModel ans=varLoopProposals properties=4
				// property: name=dh_groups, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].DhGroups = types.StringPointerValue(varLoopProposals.DhGroups)
				// property: name=encryption, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].Encryption = types.StringPointerValue(varLoopProposals.Encryption)
				// property: name=hash, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].Hash = types.StringPointerValue(varLoopProposals.Hash)
				// property: name=prf, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].Prf = types.StringPointerValue(varLoopProposals.Prf)
			}
		}
		// property: name=reauth, type=BOOLEAN macro=copy_to_state
		state.IkeGroup.Reauth = types.BoolPointerValue(ans.IkeGroup.Reauth)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=used_for, type=STRING macro=copy_to_state
	state.UsedFor = types.StringPointerValue(ans.UsedFor)
	return true
}

func (r *ipsecProfileResource) doPut(ctx context.Context, plan *rsModelIPSECProfileScreenV2N2, state *rsModelIPSECProfileScreenV2N2, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_ipsec_profile",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_ipsec_profile", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_ipsec_profile ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.2/api/ipsecprofiles/{profile_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["profile_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.IPSECProfileScreenV2N2{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=13
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=authentication, type=REFERENCE macro=copy_from_plan_or_state
	if plan.Authentication == nil {
		body.Authentication = nil
	} else {
		body.Authentication = &sdwan_schema.IPSECAuthenticationV1{}
		// copy_from_plan_or_state: body=body.Authentication prefix=rsModel state=state.Authentication plan=plan.Authentication properties=22
		// property: name=certificate, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.Certificate = ValueStringPointerFromPlanOrState(plan.Authentication.Certificate, state.Authentication.Certificate)
		} else {
			body.Authentication.Certificate = StringValueOrNil(plan.Authentication.Certificate)
		}
		// property: name=certificate_profile_id, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.CertificateProfileId = ValueStringPointerFromPlanOrState(plan.Authentication.CertificateProfileId, state.Authentication.CertificateProfileId)
		} else {
			body.Authentication.CertificateProfileId = StringValueOrNil(plan.Authentication.CertificateProfileId)
		}
		// property: name=comment, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.Comment = ValueStringPointerFromPlanOrState(plan.Authentication.Comment, state.Authentication.Comment)
		} else {
			body.Authentication.Comment = StringValueOrNil(plan.Authentication.Comment)
		}
		// property: name=ikev1_params, type=REFERENCE macro=copy_from_plan_or_state
		if plan.Authentication.Ikev1Params == nil {
			body.Authentication.Ikev1Params = nil
		} else {
			body.Authentication.Ikev1Params = &sdwan_schema.IKEV1Params{}
			// copy_from_plan_or_state: body=body.Authentication.Ikev1Params prefix=rsModel state=state.Authentication.Ikev1Params plan=plan.Authentication.Ikev1Params properties=5
			// property: name=xauth_id, type=STRING macro=copy_from_plan_or_state
			if state.Authentication.Ikev1Params != nil {
				body.Authentication.Ikev1Params.XauthId = ValueStringPointerFromPlanOrState(plan.Authentication.Ikev1Params.XauthId, state.Authentication.Ikev1Params.XauthId)
			} else {
				body.Authentication.Ikev1Params.XauthId = StringValueOrNil(plan.Authentication.Ikev1Params.XauthId)
			}
			// property: name=xauth_secret, type=STRING macro=copy_from_plan_or_state
			if state.Authentication.Ikev1Params != nil {
				body.Authentication.Ikev1Params.XauthSecret = ValueStringPointerFromPlanOrState(plan.Authentication.Ikev1Params.XauthSecret, state.Authentication.Ikev1Params.XauthSecret)
			} else {
				body.Authentication.Ikev1Params.XauthSecret = StringValueOrNil(plan.Authentication.Ikev1Params.XauthSecret)
			}
			// property: name=xauth_secret_encrypted, type=STRING macro=copy_from_plan_or_state
			if state.Authentication.Ikev1Params != nil {
				body.Authentication.Ikev1Params.XauthSecretEncrypted = ValueStringPointerFromPlanOrState(plan.Authentication.Ikev1Params.XauthSecretEncrypted, state.Authentication.Ikev1Params.XauthSecretEncrypted)
			} else {
				body.Authentication.Ikev1Params.XauthSecretEncrypted = StringValueOrNil(plan.Authentication.Ikev1Params.XauthSecretEncrypted)
			}
			// property: name=xauth_secret_hash, type=STRING macro=copy_from_plan_or_state
			if state.Authentication.Ikev1Params != nil {
				body.Authentication.Ikev1Params.XauthSecretHash = ValueStringPointerFromPlanOrState(plan.Authentication.Ikev1Params.XauthSecretHash, state.Authentication.Ikev1Params.XauthSecretHash)
			} else {
				body.Authentication.Ikev1Params.XauthSecretHash = StringValueOrNil(plan.Authentication.Ikev1Params.XauthSecretHash)
			}
			// property: name=xauth_type, type=STRING macro=copy_from_plan_or_state
			if state.Authentication.Ikev1Params != nil {
				body.Authentication.Ikev1Params.XauthType = ValueStringPointerFromPlanOrState(plan.Authentication.Ikev1Params.XauthType, state.Authentication.Ikev1Params.XauthType)
			} else {
				body.Authentication.Ikev1Params.XauthType = StringValueOrNil(plan.Authentication.Ikev1Params.XauthType)
			}
		}
		// property: name=local_ca_certificate, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.LocalCaCertificate = ValueStringPointerFromPlanOrState(plan.Authentication.LocalCaCertificate, state.Authentication.LocalCaCertificate)
		} else {
			body.Authentication.LocalCaCertificate = StringValueOrNil(plan.Authentication.LocalCaCertificate)
		}
		// property: name=local_id, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.LocalId = ValueStringPointerFromPlanOrState(plan.Authentication.LocalId, state.Authentication.LocalId)
		} else {
			body.Authentication.LocalId = StringValueOrNil(plan.Authentication.LocalId)
		}
		// property: name=local_id_custom, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.LocalIdCustom = ValueStringPointerFromPlanOrState(plan.Authentication.LocalIdCustom, state.Authentication.LocalIdCustom)
		} else {
			body.Authentication.LocalIdCustom = StringValueOrNil(plan.Authentication.LocalIdCustom)
		}
		// property: name=local_pa_certificate_id, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.LocalPaCertificateId = ValueStringPointerFromPlanOrState(plan.Authentication.LocalPaCertificateId, state.Authentication.LocalPaCertificateId)
		} else {
			body.Authentication.LocalPaCertificateId = StringValueOrNil(plan.Authentication.LocalPaCertificateId)
		}
		// property: name=pa_master_key_id, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.PaMasterKeyId = ValueStringPointerFromPlanOrState(plan.Authentication.PaMasterKeyId, state.Authentication.PaMasterKeyId)
		} else {
			body.Authentication.PaMasterKeyId = StringValueOrNil(plan.Authentication.PaMasterKeyId)
		}
		// property: name=passphrase, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.Passphrase = ValueStringPointerFromPlanOrState(plan.Authentication.Passphrase, state.Authentication.Passphrase)
		} else {
			body.Authentication.Passphrase = StringValueOrNil(plan.Authentication.Passphrase)
		}
		// property: name=passphrase_encrypted, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.PassphraseEncrypted = ValueStringPointerFromPlanOrState(plan.Authentication.PassphraseEncrypted, state.Authentication.PassphraseEncrypted)
		} else {
			body.Authentication.PassphraseEncrypted = StringValueOrNil(plan.Authentication.PassphraseEncrypted)
		}
		// property: name=peer_id_check, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.PeerIdCheck = ValueStringPointerFromPlanOrState(plan.Authentication.PeerIdCheck, state.Authentication.PeerIdCheck)
		} else {
			body.Authentication.PeerIdCheck = StringValueOrNil(plan.Authentication.PeerIdCheck)
		}
		// property: name=permit_peer_id_mismatch, type=BOOLEAN macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.PermitPeerIdMismatch = ValueBoolPointerFromPlanOrState(plan.Authentication.PermitPeerIdMismatch, state.Authentication.PermitPeerIdMismatch)
		} else {
			body.Authentication.PermitPeerIdMismatch = BoolValueOrNil(plan.Authentication.PermitPeerIdMismatch)
		}
		// property: name=private_key, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.PrivateKey = ValueStringPointerFromPlanOrState(plan.Authentication.PrivateKey, state.Authentication.PrivateKey)
		} else {
			body.Authentication.PrivateKey = StringValueOrNil(plan.Authentication.PrivateKey)
		}
		// property: name=private_key_encrypted, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.PrivateKeyEncrypted = ValueStringPointerFromPlanOrState(plan.Authentication.PrivateKeyEncrypted, state.Authentication.PrivateKeyEncrypted)
		} else {
			body.Authentication.PrivateKeyEncrypted = StringValueOrNil(plan.Authentication.PrivateKeyEncrypted)
		}
		// property: name=remote_ca_certificate, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.RemoteCaCertificate = ValueStringPointerFromPlanOrState(plan.Authentication.RemoteCaCertificate, state.Authentication.RemoteCaCertificate)
		} else {
			body.Authentication.RemoteCaCertificate = StringValueOrNil(plan.Authentication.RemoteCaCertificate)
		}
		// property: name=remote_id, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.RemoteId = ValueStringPointerFromPlanOrState(plan.Authentication.RemoteId, state.Authentication.RemoteId)
		} else {
			body.Authentication.RemoteId = StringValueOrNil(plan.Authentication.RemoteId)
		}
		// property: name=secret, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.Secret = ValueStringPointerFromPlanOrState(plan.Authentication.Secret, state.Authentication.Secret)
		} else {
			body.Authentication.Secret = StringValueOrNil(plan.Authentication.Secret)
		}
		// property: name=secret_encrypted, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.SecretEncrypted = ValueStringPointerFromPlanOrState(plan.Authentication.SecretEncrypted, state.Authentication.SecretEncrypted)
		} else {
			body.Authentication.SecretEncrypted = StringValueOrNil(plan.Authentication.SecretEncrypted)
		}
		// property: name=secret_hash, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.SecretHash = ValueStringPointerFromPlanOrState(plan.Authentication.SecretHash, state.Authentication.SecretHash)
		} else {
			body.Authentication.SecretHash = StringValueOrNil(plan.Authentication.SecretHash)
		}
		// property: name=strict_validation_peer_extended_key_use, type=BOOLEAN macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.StrictValidationPeerExtendedKeyUse = ValueBoolPointerFromPlanOrState(plan.Authentication.StrictValidationPeerExtendedKeyUse, state.Authentication.StrictValidationPeerExtendedKeyUse)
		} else {
			body.Authentication.StrictValidationPeerExtendedKeyUse = BoolValueOrNil(plan.Authentication.StrictValidationPeerExtendedKeyUse)
		}
		// property: name=type, type=STRING macro=copy_from_plan_or_state
		if state.Authentication != nil {
			body.Authentication.Type = ValueStringPointerFromPlanOrState(plan.Authentication.Type, state.Authentication.Type)
		} else {
			body.Authentication.Type = StringValueOrNil(plan.Authentication.Type)
		}
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=dpd_delay, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.DpdDelay = ValueInt64PointerFromPlanOrState(plan.DpdDelay, state.DpdDelay)
	} else {
		body.DpdDelay = Int64ValueOrNil(plan.DpdDelay)
	}
	// property: name=dpd_enable, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.DpdEnable = ValueBoolPointerFromPlanOrState(plan.DpdEnable, state.DpdEnable)
	} else {
		body.DpdEnable = BoolValueOrNil(plan.DpdEnable)
	}
	// property: name=dpd_timeout, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.DpdTimeout = ValueInt64PointerFromPlanOrState(plan.DpdTimeout, state.DpdTimeout)
	} else {
		body.DpdTimeout = Int64ValueOrNil(plan.DpdTimeout)
	}
	// property: name=esp_group, type=REFERENCE macro=copy_from_plan_or_state
	if plan.EspGroup == nil {
		body.EspGroup = nil
	} else {
		body.EspGroup = &sdwan_schema.ESPGroup{}
		// copy_from_plan_or_state: body=body.EspGroup prefix=rsModel state=state.EspGroup plan=plan.EspGroup properties=7
		// property: name=force_encapsulation, type=BOOLEAN macro=copy_from_plan_or_state
		if state.EspGroup != nil {
			body.EspGroup.ForceEncapsulation = ValueBoolPointerFromPlanOrState(plan.EspGroup.ForceEncapsulation, state.EspGroup.ForceEncapsulation)
		} else {
			body.EspGroup.ForceEncapsulation = BoolValueOrNil(plan.EspGroup.ForceEncapsulation)
		}
		// property: name=lifesize, type=REFERENCE macro=copy_from_plan_or_state
		if plan.EspGroup.Lifesize == nil {
			body.EspGroup.Lifesize = nil
		} else {
			body.EspGroup.Lifesize = &sdwan_schema.Lifesize{}
			// copy_from_plan_or_state: body=body.EspGroup.Lifesize prefix=rsModel state=state.EspGroup.Lifesize plan=plan.EspGroup.Lifesize properties=2
			// property: name=units, type=STRING macro=copy_from_plan_or_state
			if state.EspGroup.Lifesize != nil {
				body.EspGroup.Lifesize.Units = ValueStringPointerFromPlanOrState(plan.EspGroup.Lifesize.Units, state.EspGroup.Lifesize.Units)
			} else {
				body.EspGroup.Lifesize.Units = StringValueOrNil(plan.EspGroup.Lifesize.Units)
			}
			// property: name=value, type=INTEGER macro=copy_from_plan_or_state
			if state.EspGroup.Lifesize != nil {
				body.EspGroup.Lifesize.Value = ValueInt64PointerFromPlanOrState(plan.EspGroup.Lifesize.Value, state.EspGroup.Lifesize.Value)
			} else {
				body.EspGroup.Lifesize.Value = Int64ValueOrNil(plan.EspGroup.Lifesize.Value)
			}
		}
		// property: name=lifetime, type=INTEGER macro=copy_from_plan_or_state
		if state.EspGroup != nil {
			body.EspGroup.Lifetime = ValueInt64PointerFromPlanOrState(plan.EspGroup.Lifetime, state.EspGroup.Lifetime)
		} else {
			body.EspGroup.Lifetime = Int64ValueOrNil(plan.EspGroup.Lifetime)
		}
		// property: name=lifetime_units, type=STRING macro=copy_from_plan_or_state
		if state.EspGroup != nil {
			body.EspGroup.LifetimeUnits = ValueStringPointerFromPlanOrState(plan.EspGroup.LifetimeUnits, state.EspGroup.LifetimeUnits)
		} else {
			body.EspGroup.LifetimeUnits = StringValueOrNil(plan.EspGroup.LifetimeUnits)
		}
		// property: name=mode, type=STRING macro=copy_from_plan_or_state
		if state.EspGroup != nil {
			body.EspGroup.Mode = ValueStringPointerFromPlanOrState(plan.EspGroup.Mode, state.EspGroup.Mode)
		} else {
			body.EspGroup.Mode = StringValueOrNil(plan.EspGroup.Mode)
		}
		// property: name=proposals, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
		if plan.EspGroup.Proposals == nil && (state.EspGroup == nil || state.EspGroup.Proposals == nil) {
			body.EspGroup.Proposals = nil
		} else if len(plan.EspGroup.Proposals) == 0 && (state.EspGroup == nil || len(state.EspGroup.Proposals) == 0) {
			body.EspGroup.Proposals = []sdwan_schema.Proposals{}
		} else if len(plan.EspGroup.Proposals) != 0 || (state.EspGroup != nil && len(state.EspGroup.Proposals) != 0) {
			ProposalsToUse := plan.EspGroup.Proposals
			if len(plan.EspGroup.Proposals) == 0 {
				ProposalsToUse = state.EspGroup.Proposals
			}
			body.EspGroup.Proposals = make([]sdwan_schema.Proposals, 0, len(ProposalsToUse))
			for varLoopProposalsIndex, varLoopProposals := range ProposalsToUse {
				// add a new item
				body.EspGroup.Proposals = append(body.EspGroup.Proposals, sdwan_schema.Proposals{})
				// since we have chosen to stick with either the plan or state, we need to simply copy child properties
				// copy_from_plan: body=body.EspGroup.Proposals[varLoopProposalsIndex] prefix=rsModel plan=varLoopProposals properties=4
				// property: name=dh_groups, type=STRING macro=copy_from_plan
				body.EspGroup.Proposals[varLoopProposalsIndex].DhGroups = StringValueOrNil(varLoopProposals.DhGroups)
				// property: name=encryption, type=STRING macro=copy_from_plan
				body.EspGroup.Proposals[varLoopProposalsIndex].Encryption = StringValueOrNil(varLoopProposals.Encryption)
				// property: name=hash, type=STRING macro=copy_from_plan
				body.EspGroup.Proposals[varLoopProposalsIndex].Hash = StringValueOrNil(varLoopProposals.Hash)
				// property: name=prf, type=STRING macro=copy_from_plan
				body.EspGroup.Proposals[varLoopProposalsIndex].Prf = StringValueOrNil(varLoopProposals.Prf)
			}
		}
		// property: name=responder_sase_proposals, type=REFERENCE macro=copy_from_plan_or_state
		if plan.EspGroup.ResponderSaseProposals == nil {
			body.EspGroup.ResponderSaseProposals = nil
		} else {
			body.EspGroup.ResponderSaseProposals = &sdwan_schema.ResponderSaseProposals{}
			// copy_from_plan_or_state: body=body.EspGroup.ResponderSaseProposals prefix=rsModel state=state.EspGroup.ResponderSaseProposals plan=plan.EspGroup.ResponderSaseProposals properties=3
			// property: name=dh_group, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
			body.EspGroup.ResponderSaseProposals.DhGroup = ListStringValueOrNil(ctx, plan.EspGroup.ResponderSaseProposals.DhGroup)
			// property: name=encryption, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
			body.EspGroup.ResponderSaseProposals.Encryption = ListStringValueOrNil(ctx, plan.EspGroup.ResponderSaseProposals.Encryption)
			// property: name=hash, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
			body.EspGroup.ResponderSaseProposals.Hash = ListStringValueOrNil(ctx, plan.EspGroup.ResponderSaseProposals.Hash)
		}
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=ike_group, type=REFERENCE macro=copy_from_plan_or_state
	if plan.IkeGroup == nil {
		body.IkeGroup = nil
	} else {
		body.IkeGroup = &sdwan_schema.IKEGroup{}
		// copy_from_plan_or_state: body=body.IkeGroup prefix=rsModel state=state.IkeGroup plan=plan.IkeGroup properties=8
		// property: name=aggressive, type=BOOLEAN macro=copy_from_plan_or_state
		if state.IkeGroup != nil {
			body.IkeGroup.Aggressive = ValueBoolPointerFromPlanOrState(plan.IkeGroup.Aggressive, state.IkeGroup.Aggressive)
		} else {
			body.IkeGroup.Aggressive = BoolValueOrNil(plan.IkeGroup.Aggressive)
		}
		// property: name=authentication_multiple, type=INTEGER macro=copy_from_plan_or_state
		if state.IkeGroup != nil {
			body.IkeGroup.AuthenticationMultiple = ValueInt64PointerFromPlanOrState(plan.IkeGroup.AuthenticationMultiple, state.IkeGroup.AuthenticationMultiple)
		} else {
			body.IkeGroup.AuthenticationMultiple = Int64ValueOrNil(plan.IkeGroup.AuthenticationMultiple)
		}
		// property: name=key_exchange, type=STRING macro=copy_from_plan_or_state
		if state.IkeGroup != nil {
			body.IkeGroup.KeyExchange = ValueStringPointerFromPlanOrState(plan.IkeGroup.KeyExchange, state.IkeGroup.KeyExchange)
		} else {
			body.IkeGroup.KeyExchange = StringValueOrNil(plan.IkeGroup.KeyExchange)
		}
		// property: name=lifetime, type=INTEGER macro=copy_from_plan_or_state
		if state.IkeGroup != nil {
			body.IkeGroup.Lifetime = ValueInt64PointerFromPlanOrState(plan.IkeGroup.Lifetime, state.IkeGroup.Lifetime)
		} else {
			body.IkeGroup.Lifetime = Int64ValueOrNil(plan.IkeGroup.Lifetime)
		}
		// property: name=lifetime_units, type=STRING macro=copy_from_plan_or_state
		if state.IkeGroup != nil {
			body.IkeGroup.LifetimeUnits = ValueStringPointerFromPlanOrState(plan.IkeGroup.LifetimeUnits, state.IkeGroup.LifetimeUnits)
		} else {
			body.IkeGroup.LifetimeUnits = StringValueOrNil(plan.IkeGroup.LifetimeUnits)
		}
		// property: name=port, type=INTEGER macro=copy_from_plan_or_state
		if state.IkeGroup != nil {
			body.IkeGroup.Port = ValueInt64PointerFromPlanOrState(plan.IkeGroup.Port, state.IkeGroup.Port)
		} else {
			body.IkeGroup.Port = Int64ValueOrNil(plan.IkeGroup.Port)
		}
		// property: name=proposals, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
		if plan.IkeGroup.Proposals == nil && (state.IkeGroup == nil || state.IkeGroup.Proposals == nil) {
			body.IkeGroup.Proposals = nil
		} else if len(plan.IkeGroup.Proposals) == 0 && (state.IkeGroup == nil || len(state.IkeGroup.Proposals) == 0) {
			body.IkeGroup.Proposals = []sdwan_schema.Proposals{}
		} else if len(plan.IkeGroup.Proposals) != 0 || (state.IkeGroup != nil && len(state.IkeGroup.Proposals) != 0) {
			ProposalsToUse := plan.IkeGroup.Proposals
			if len(plan.IkeGroup.Proposals) == 0 {
				ProposalsToUse = state.IkeGroup.Proposals
			}
			body.IkeGroup.Proposals = make([]sdwan_schema.Proposals, 0, len(ProposalsToUse))
			for varLoopProposalsIndex, varLoopProposals := range ProposalsToUse {
				// add a new item
				body.IkeGroup.Proposals = append(body.IkeGroup.Proposals, sdwan_schema.Proposals{})
				// since we have chosen to stick with either the plan or state, we need to simply copy child properties
				// copy_from_plan: body=body.IkeGroup.Proposals[varLoopProposalsIndex] prefix=rsModel plan=varLoopProposals properties=4
				// property: name=dh_groups, type=STRING macro=copy_from_plan
				body.IkeGroup.Proposals[varLoopProposalsIndex].DhGroups = StringValueOrNil(varLoopProposals.DhGroups)
				// property: name=encryption, type=STRING macro=copy_from_plan
				body.IkeGroup.Proposals[varLoopProposalsIndex].Encryption = StringValueOrNil(varLoopProposals.Encryption)
				// property: name=hash, type=STRING macro=copy_from_plan
				body.IkeGroup.Proposals[varLoopProposalsIndex].Hash = StringValueOrNil(varLoopProposals.Hash)
				// property: name=prf, type=STRING macro=copy_from_plan
				body.IkeGroup.Proposals[varLoopProposalsIndex].Prf = StringValueOrNil(varLoopProposals.Prf)
			}
		}
		// property: name=reauth, type=BOOLEAN macro=copy_from_plan_or_state
		if state.IkeGroup != nil {
			body.IkeGroup.Reauth = ValueBoolPointerFromPlanOrState(plan.IkeGroup.Reauth, state.IkeGroup.Reauth)
		} else {
			body.IkeGroup.Reauth = BoolValueOrNil(plan.IkeGroup.Reauth)
		}
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=used_for, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.UsedFor = ValueStringPointerFromPlanOrState(plan.UsedFor, state.UsedFor)
	} else {
		body.UsedFor = StringValueOrNil(plan.UsedFor)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct IPSECProfileScreenV2N2 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_ipsec_profile", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_ipsec_profile",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_ipsec_profile", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_ipsec_profile",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_ipsec_profile", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.IPSECProfileScreenV2N2
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to IPSECProfileScreenV2N2 in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=IPSECProfileScreenV2N2
	// copy_to_state: state=state prefix=rsModel ans=ans properties=13
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=authentication, type=REFERENCE macro=copy_to_state
	if ans.Authentication == nil {
		state.Authentication = nil
	} else {
		state.Authentication = &rsModelIPSECAuthenticationV1{}
		// copy_to_state: state=state.Authentication prefix=rsModel ans=ans.Authentication properties=22
		// property: name=certificate, type=STRING macro=copy_to_state
		state.Authentication.Certificate = types.StringPointerValue(ans.Authentication.Certificate)
		// property: name=certificate_profile_id, type=STRING macro=copy_to_state
		state.Authentication.CertificateProfileId = types.StringPointerValue(ans.Authentication.CertificateProfileId)
		// property: name=comment, type=STRING macro=copy_to_state
		state.Authentication.Comment = types.StringPointerValue(ans.Authentication.Comment)
		// property: name=ikev1_params, type=REFERENCE macro=copy_to_state
		if ans.Authentication.Ikev1Params == nil {
			state.Authentication.Ikev1Params = nil
		} else {
			state.Authentication.Ikev1Params = &rsModelIKEV1Params{}
			// copy_to_state: state=state.Authentication.Ikev1Params prefix=rsModel ans=ans.Authentication.Ikev1Params properties=5
			// property: name=xauth_id, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthId = types.StringPointerValue(ans.Authentication.Ikev1Params.XauthId)
			// property: name=xauth_secret, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthSecret = types.StringPointerValue(plan.Authentication.Ikev1Params.XauthSecret.ValueStringPointer())
			// this property is sensitive and will be stored in the state's internal key name
			state.Authentication.Ikev1Params.XauthSecretInternalKeyName = types.StringValue(GenerateRandomString(16))
			// store value if needed
			if !state.Authentication.Ikev1Params.XauthSecret.IsNull() {
				encryptedXauthSecret, _ := Encrypt([]byte(state.Authentication.Ikev1Params.XauthSecret.String()))
				resp.Private.SetKey(ctx, state.Authentication.Ikev1Params.XauthSecretInternalKeyName.String(), []byte(encryptedXauthSecret))
			}
			// property: name=xauth_secret_encrypted, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthSecretEncrypted = types.StringPointerValue(plan.Authentication.Ikev1Params.XauthSecretEncrypted.ValueStringPointer())
			// this property is sensitive and will be stored in the state's internal key name
			state.Authentication.Ikev1Params.XauthSecretEncryptedInternalKeyName = types.StringValue(GenerateRandomString(16))
			// store value if needed
			if !state.Authentication.Ikev1Params.XauthSecretEncrypted.IsNull() {
				encryptedXauthSecretEncrypted, _ := Encrypt([]byte(state.Authentication.Ikev1Params.XauthSecretEncrypted.String()))
				resp.Private.SetKey(ctx, state.Authentication.Ikev1Params.XauthSecretEncryptedInternalKeyName.String(), []byte(encryptedXauthSecretEncrypted))
			}
			// property: name=xauth_secret_hash, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthSecretHash = types.StringPointerValue(plan.Authentication.Ikev1Params.XauthSecretHash.ValueStringPointer())
			// this property is sensitive and will be stored in the state's internal key name
			state.Authentication.Ikev1Params.XauthSecretHashInternalKeyName = types.StringValue(GenerateRandomString(16))
			// store value if needed
			if !state.Authentication.Ikev1Params.XauthSecretHash.IsNull() {
				encryptedXauthSecretHash, _ := Encrypt([]byte(state.Authentication.Ikev1Params.XauthSecretHash.String()))
				resp.Private.SetKey(ctx, state.Authentication.Ikev1Params.XauthSecretHashInternalKeyName.String(), []byte(encryptedXauthSecretHash))
			}
			// property: name=xauth_type, type=STRING macro=copy_to_state
			state.Authentication.Ikev1Params.XauthType = types.StringPointerValue(ans.Authentication.Ikev1Params.XauthType)
		}
		// property: name=local_ca_certificate, type=STRING macro=copy_to_state
		state.Authentication.LocalCaCertificate = types.StringPointerValue(ans.Authentication.LocalCaCertificate)
		// property: name=local_id, type=STRING macro=copy_to_state
		state.Authentication.LocalId = types.StringPointerValue(ans.Authentication.LocalId)
		// property: name=local_id_custom, type=STRING macro=copy_to_state
		state.Authentication.LocalIdCustom = types.StringPointerValue(ans.Authentication.LocalIdCustom)
		// property: name=local_pa_certificate_id, type=STRING macro=copy_to_state
		state.Authentication.LocalPaCertificateId = types.StringPointerValue(ans.Authentication.LocalPaCertificateId)
		// property: name=pa_master_key_id, type=STRING macro=copy_to_state
		state.Authentication.PaMasterKeyId = types.StringPointerValue(ans.Authentication.PaMasterKeyId)
		// property: name=passphrase, type=STRING macro=copy_to_state
		state.Authentication.Passphrase = types.StringPointerValue(ans.Authentication.Passphrase)
		// property: name=passphrase_encrypted, type=STRING macro=copy_to_state
		state.Authentication.PassphraseEncrypted = types.StringPointerValue(ans.Authentication.PassphraseEncrypted)
		// property: name=peer_id_check, type=STRING macro=copy_to_state
		state.Authentication.PeerIdCheck = types.StringPointerValue(ans.Authentication.PeerIdCheck)
		// property: name=permit_peer_id_mismatch, type=BOOLEAN macro=copy_to_state
		state.Authentication.PermitPeerIdMismatch = types.BoolPointerValue(ans.Authentication.PermitPeerIdMismatch)
		// property: name=private_key, type=STRING macro=copy_to_state
		state.Authentication.PrivateKey = types.StringPointerValue(ans.Authentication.PrivateKey)
		// property: name=private_key_encrypted, type=STRING macro=copy_to_state
		state.Authentication.PrivateKeyEncrypted = types.StringPointerValue(ans.Authentication.PrivateKeyEncrypted)
		// property: name=remote_ca_certificate, type=STRING macro=copy_to_state
		state.Authentication.RemoteCaCertificate = types.StringPointerValue(ans.Authentication.RemoteCaCertificate)
		// property: name=remote_id, type=STRING macro=copy_to_state
		state.Authentication.RemoteId = types.StringPointerValue(ans.Authentication.RemoteId)
		// property: name=secret, type=STRING macro=copy_to_state
		state.Authentication.Secret = types.StringPointerValue(plan.Authentication.Secret.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.Authentication.SecretInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.Authentication.Secret.IsNull() {
			encryptedSecret, _ := Encrypt([]byte(state.Authentication.Secret.String()))
			resp.Private.SetKey(ctx, state.Authentication.SecretInternalKeyName.String(), []byte(encryptedSecret))
		}
		// property: name=secret_encrypted, type=STRING macro=copy_to_state
		state.Authentication.SecretEncrypted = types.StringPointerValue(plan.Authentication.SecretEncrypted.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.Authentication.SecretEncryptedInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.Authentication.SecretEncrypted.IsNull() {
			encryptedSecretEncrypted, _ := Encrypt([]byte(state.Authentication.SecretEncrypted.String()))
			resp.Private.SetKey(ctx, state.Authentication.SecretEncryptedInternalKeyName.String(), []byte(encryptedSecretEncrypted))
		}
		// property: name=secret_hash, type=STRING macro=copy_to_state
		state.Authentication.SecretHash = types.StringPointerValue(plan.Authentication.SecretHash.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.Authentication.SecretHashInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.Authentication.SecretHash.IsNull() {
			encryptedSecretHash, _ := Encrypt([]byte(state.Authentication.SecretHash.String()))
			resp.Private.SetKey(ctx, state.Authentication.SecretHashInternalKeyName.String(), []byte(encryptedSecretHash))
		}
		// property: name=strict_validation_peer_extended_key_use, type=BOOLEAN macro=copy_to_state
		state.Authentication.StrictValidationPeerExtendedKeyUse = types.BoolPointerValue(ans.Authentication.StrictValidationPeerExtendedKeyUse)
		// property: name=type, type=STRING macro=copy_to_state
		state.Authentication.Type = types.StringPointerValue(ans.Authentication.Type)
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=dpd_delay, type=INTEGER macro=copy_to_state
	state.DpdDelay = types.Int64PointerValue(ans.DpdDelay)
	// property: name=dpd_enable, type=BOOLEAN macro=copy_to_state
	state.DpdEnable = types.BoolPointerValue(ans.DpdEnable)
	// property: name=dpd_timeout, type=INTEGER macro=copy_to_state
	state.DpdTimeout = types.Int64PointerValue(ans.DpdTimeout)
	// property: name=esp_group, type=REFERENCE macro=copy_to_state
	if ans.EspGroup == nil {
		state.EspGroup = nil
	} else {
		state.EspGroup = &rsModelESPGroup{}
		// copy_to_state: state=state.EspGroup prefix=rsModel ans=ans.EspGroup properties=7
		// property: name=force_encapsulation, type=BOOLEAN macro=copy_to_state
		state.EspGroup.ForceEncapsulation = types.BoolPointerValue(ans.EspGroup.ForceEncapsulation)
		// property: name=lifesize, type=REFERENCE macro=copy_to_state
		if ans.EspGroup.Lifesize == nil {
			state.EspGroup.Lifesize = nil
		} else {
			state.EspGroup.Lifesize = &rsModelLifesize{}
			// copy_to_state: state=state.EspGroup.Lifesize prefix=rsModel ans=ans.EspGroup.Lifesize properties=2
			// property: name=units, type=STRING macro=copy_to_state
			state.EspGroup.Lifesize.Units = types.StringPointerValue(ans.EspGroup.Lifesize.Units)
			// property: name=value, type=INTEGER macro=copy_to_state
			state.EspGroup.Lifesize.Value = types.Int64PointerValue(ans.EspGroup.Lifesize.Value)
		}
		// property: name=lifetime, type=INTEGER macro=copy_to_state
		state.EspGroup.Lifetime = types.Int64PointerValue(ans.EspGroup.Lifetime)
		// property: name=lifetime_units, type=STRING macro=copy_to_state
		state.EspGroup.LifetimeUnits = types.StringPointerValue(ans.EspGroup.LifetimeUnits)
		// property: name=mode, type=STRING macro=copy_to_state
		state.EspGroup.Mode = types.StringPointerValue(ans.EspGroup.Mode)
		// property: name=proposals, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.EspGroup.Proposals == nil {
			state.EspGroup.Proposals = nil
		} else if len(ans.EspGroup.Proposals) == 0 {
			state.EspGroup.Proposals = []rsModelProposals{}
		} else {
			state.EspGroup.Proposals = make([]rsModelProposals, 0, len(ans.EspGroup.Proposals))
			for varLoopProposalsIndex, varLoopProposals := range ans.EspGroup.Proposals {
				// add a new item
				state.EspGroup.Proposals = append(state.EspGroup.Proposals, rsModelProposals{})
				// copy_to_state: state=state.EspGroup.Proposals[varLoopProposalsIndex] prefix=rsModel ans=varLoopProposals properties=4
				// property: name=dh_groups, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].DhGroups = types.StringPointerValue(varLoopProposals.DhGroups)
				// property: name=encryption, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].Encryption = types.StringPointerValue(varLoopProposals.Encryption)
				// property: name=hash, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].Hash = types.StringPointerValue(varLoopProposals.Hash)
				// property: name=prf, type=STRING macro=copy_to_state
				state.EspGroup.Proposals[varLoopProposalsIndex].Prf = types.StringPointerValue(varLoopProposals.Prf)
			}
		}
		// property: name=responder_sase_proposals, type=REFERENCE macro=copy_to_state
		if ans.EspGroup.ResponderSaseProposals == nil {
			state.EspGroup.ResponderSaseProposals = nil
		} else {
			state.EspGroup.ResponderSaseProposals = &rsModelResponderSaseProposals{}
			// copy_to_state: state=state.EspGroup.ResponderSaseProposals prefix=rsModel ans=ans.EspGroup.ResponderSaseProposals properties=3
			// property: name=dh_group, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDhGroup, errDhGroup := types.ListValueFrom(ctx, types.StringType, ans.EspGroup.ResponderSaseProposals.DhGroup)
			state.EspGroup.ResponderSaseProposals.DhGroup = varDhGroup
			resp.Diagnostics.Append(errDhGroup.Errors()...)
			// property: name=encryption, type=ARRAY_PRIMITIVE macro=copy_to_state
			varEncryption, errEncryption := types.ListValueFrom(ctx, types.StringType, ans.EspGroup.ResponderSaseProposals.Encryption)
			state.EspGroup.ResponderSaseProposals.Encryption = varEncryption
			resp.Diagnostics.Append(errEncryption.Errors()...)
			// property: name=hash, type=ARRAY_PRIMITIVE macro=copy_to_state
			varHash, errHash := types.ListValueFrom(ctx, types.StringType, ans.EspGroup.ResponderSaseProposals.Hash)
			state.EspGroup.ResponderSaseProposals.Hash = varHash
			resp.Diagnostics.Append(errHash.Errors()...)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ike_group, type=REFERENCE macro=copy_to_state
	if ans.IkeGroup == nil {
		state.IkeGroup = nil
	} else {
		state.IkeGroup = &rsModelIKEGroup{}
		// copy_to_state: state=state.IkeGroup prefix=rsModel ans=ans.IkeGroup properties=8
		// property: name=aggressive, type=BOOLEAN macro=copy_to_state
		state.IkeGroup.Aggressive = types.BoolPointerValue(ans.IkeGroup.Aggressive)
		// property: name=authentication_multiple, type=INTEGER macro=copy_to_state
		state.IkeGroup.AuthenticationMultiple = types.Int64PointerValue(ans.IkeGroup.AuthenticationMultiple)
		// property: name=key_exchange, type=STRING macro=copy_to_state
		state.IkeGroup.KeyExchange = types.StringPointerValue(ans.IkeGroup.KeyExchange)
		// property: name=lifetime, type=INTEGER macro=copy_to_state
		state.IkeGroup.Lifetime = types.Int64PointerValue(ans.IkeGroup.Lifetime)
		// property: name=lifetime_units, type=STRING macro=copy_to_state
		state.IkeGroup.LifetimeUnits = types.StringPointerValue(ans.IkeGroup.LifetimeUnits)
		// property: name=port, type=INTEGER macro=copy_to_state
		state.IkeGroup.Port = types.Int64PointerValue(ans.IkeGroup.Port)
		// property: name=proposals, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.IkeGroup.Proposals == nil {
			state.IkeGroup.Proposals = nil
		} else if len(ans.IkeGroup.Proposals) == 0 {
			state.IkeGroup.Proposals = []rsModelProposals{}
		} else {
			state.IkeGroup.Proposals = make([]rsModelProposals, 0, len(ans.IkeGroup.Proposals))
			for varLoopProposalsIndex, varLoopProposals := range ans.IkeGroup.Proposals {
				// add a new item
				state.IkeGroup.Proposals = append(state.IkeGroup.Proposals, rsModelProposals{})
				// copy_to_state: state=state.IkeGroup.Proposals[varLoopProposalsIndex] prefix=rsModel ans=varLoopProposals properties=4
				// property: name=dh_groups, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].DhGroups = types.StringPointerValue(varLoopProposals.DhGroups)
				// property: name=encryption, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].Encryption = types.StringPointerValue(varLoopProposals.Encryption)
				// property: name=hash, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].Hash = types.StringPointerValue(varLoopProposals.Hash)
				// property: name=prf, type=STRING macro=copy_to_state
				state.IkeGroup.Proposals[varLoopProposalsIndex].Prf = types.StringPointerValue(varLoopProposals.Prf)
			}
		}
		// property: name=reauth, type=BOOLEAN macro=copy_to_state
		state.IkeGroup.Reauth = types.BoolPointerValue(ans.IkeGroup.Reauth)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=used_for, type=STRING macro=copy_to_state
	state.UsedFor = types.StringPointerValue(ans.UsedFor)
	return true
}

func (r *ipsecProfileResource) doDelete(ctx context.Context, state *rsModelIPSECProfileScreenV2N2, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_ipsec_profile",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_ipsec_profile ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.2/api/ipsecprofiles/{profile_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["profile_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_ipsec_profile", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *ipsecProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_ipsec_profile")
	var plan rsModelIPSECProfileScreenV2N2
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelIPSECProfileScreenV2N2
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *ipsecProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_ipsec_profile")
	var savestate, state rsModelIPSECProfileScreenV2N2
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *ipsecProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_ipsec_profile")
	var plan, state rsModelIPSECProfileScreenV2N2
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *ipsecProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_ipsec_profile")
	var state rsModelIPSECProfileScreenV2N2
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *ipsecProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
