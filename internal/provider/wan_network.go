package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	bQFhoWG "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/wannetwork/screen/v2/n1"
	gOMQArS "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v21/api/wannetworks"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &wanNetworkListDataSource{}
	_ datasource.DataSourceWithConfigure = &wanNetworkListDataSource{}
)

func NewWanNetworkListDataSource() datasource.DataSource {
	return &wanNetworkListDataSource{}
}

type wanNetworkListDataSource struct {
	client *sdwan.Client
}

// wanNetworkListDsModel is the model.
type wanNetworkListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.

	// Output.
	Items      []wanNetworkListDsModel_bQFhoWG_Config `tfsdk:"items"`
	TotalItems types.Int64                            `tfsdk:"total_items"`
}

type wanNetworkListDsModel_bQFhoWG_Config struct {
	Description       types.String `tfsdk:"description"`
	Etag              types.Int64  `tfsdk:"etag"`
	Id                types.String `tfsdk:"id"`
	Name              types.String `tfsdk:"name"`
	ProviderAsNumbers types.List   `tfsdk:"provider_as_numbers"`
	Tags              types.List   `tfsdk:"tags"`
	Type              types.String `tfsdk:"type"`
}

// Metadata returns the data source type name.
func (d *wanNetworkListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wan_network_list"
}

// Schema defines the schema for this listing data source.
func (d *wanNetworkListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{} outputs:map[string]bool{"items":true, "tfid":true, "total_items":true} forceNew:map[string]bool{}
			"items": dsschema.ListNestedAttribute{
				Description: "The Items param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "etag":true, "id":true, "name":true, "provider_as_numbers":true, "tags":true, "type":true} forceNew:map[string]bool(nil)
						"description": dsschema.StringAttribute{
							Description: "Description: Size(max = 256, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
							Computed:    true,
						},
						"etag": dsschema.Int64Attribute{
							Description: "Entity tag for the resource.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "Id.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Name: Required(NAME_REQUIRED) Size(max = 128, WANNETWORK_NAME_INVALID_0001, min = 0) .",
							Computed:    true,
						},
						"provider_as_numbers": dsschema.ListAttribute{
							Description: "Provider As Numbers: ListNumber(duplicate = true, max = 65535, error = WAN_CONFIG_PROVIDER_AS_OUT_OF_RANGE: AS numbers of the private network is not within 1-65535., min = 1) .",
							Computed:    true,
							ElementType: types.Int64Type,
						},
						"tags": dsschema.ListAttribute{
							Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
							Computed:    true,
							ElementType: types.StringType,
						},
						"type": dsschema.StringAttribute{
							Description: "Type: Required(error = NETWORK_TYPE_REQUIRED: WAN Network type (publicwan | privatewan) is a mandatory attribute.) ValidateEnum(enumClass = classOf[WANNetworkType], message = Invalid enum string., nullAllowed = false) .",
							Computed:    true,
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total_items": dsschema.Int64Attribute{
				Description: "The TotalItems param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *wanNetworkListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *wanNetworkListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state wanNetworkListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "prismasdwan_wan_network_list",
		"terraform_provider_function": "Read",
	})

	// Prepare to run the command.
	svc := gOMQArS.NewClient(d.client)

	// Perform the operation.
	ans, err := svc.List(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Items) == 0 {
		state.Items = nil
	} else {
		state.Items = make([]wanNetworkListDsModel_bQFhoWG_Config, 0, len(ans.Items))
		for _, var0 := range ans.Items {
			var1 := wanNetworkListDsModel_bQFhoWG_Config{}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Etag = types.Int64PointerValue(var0.Etag)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var2, var3 := types.ListValueFrom(ctx, types.Int64Type, var0.ProviderAsNumbers)
			var1.ProviderAsNumbers = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var1.Type = types.StringValue(var0.Type)
			state.Items = append(state.Items, var1)
		}
	}

	state.TotalItems = types.Int64PointerValue(ans.TotalItems)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &wanNetworkDataSource{}
	_ datasource.DataSourceWithConfigure = &wanNetworkDataSource{}
)

func NewWanNetworkDataSource() datasource.DataSource {
	return &wanNetworkDataSource{}
}

type wanNetworkDataSource struct {
	client *sdwan.Client
}

// wanNetworkDsModel is the model.
type wanNetworkDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	WanNetworkId types.String `tfsdk:"wan_network_id"`

	// Output.
	Description       types.String `tfsdk:"description"`
	Etag              types.Int64  `tfsdk:"etag"`
	Id                types.String `tfsdk:"id"`
	Name              types.String `tfsdk:"name"`
	ProviderAsNumbers types.List   `tfsdk:"provider_as_numbers"`
	Tags              types.List   `tfsdk:"tags"`
	Type              types.String `tfsdk:"type"`
}

// Metadata returns the data source type name.
func (d *wanNetworkDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wan_network"
}

// Schema defines the schema for this data source.
func (d *wanNetworkDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"wan_network_id":true} outputs:map[string]bool{"description":true, "etag":true, "id":true, "name":true, "provider_as_numbers":true, "tags":true, "tfid":true, "type":true} forceNew:map[string]bool{"wan_network_id":true}
			"description": dsschema.StringAttribute{
				Description: "Description: Size(max = 256, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Computed:    true,
			},
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Name: Required(NAME_REQUIRED) Size(max = 128, WANNETWORK_NAME_INVALID_0001, min = 0) .",
				Computed:    true,
			},
			"provider_as_numbers": dsschema.ListAttribute{
				Description: "Provider As Numbers: ListNumber(duplicate = true, max = 65535, error = WAN_CONFIG_PROVIDER_AS_OUT_OF_RANGE: AS numbers of the private network is not within 1-65535., min = 1) .",
				Computed:    true,
				ElementType: types.Int64Type,
			},
			"tags": dsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"type": dsschema.StringAttribute{
				Description: "Type: Required(error = NETWORK_TYPE_REQUIRED: WAN Network type (publicwan | privatewan) is a mandatory attribute.) ValidateEnum(enumClass = classOf[WANNetworkType], message = Invalid enum string., nullAllowed = false) .",
				Computed:    true,
			},
			"wan_network_id": dsschema.StringAttribute{
				Description: "Wan Network Id.",
				Required:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *wanNetworkDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *wanNetworkDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state wanNetworkDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_wan_network",
		"terraform_provider_function": "Read",
		"wan_network_id":              state.WanNetworkId.ValueString(),
	})

	// Prepare to run the command.
	svc := gOMQArS.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.ReadInput{}

	input.WanNetworkId = StringValue(state.WanNetworkId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.WanNetworkId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	var0, var1 := types.ListValueFrom(ctx, types.Int64Type, ans.ProviderAsNumbers)
	state.ProviderAsNumbers = var0
	resp.Diagnostics.Append(var1.Errors()...)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.Type = types.StringValue(ans.Type)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &wanNetworkResource{}
	_ resource.ResourceWithConfigure   = &wanNetworkResource{}
	_ resource.ResourceWithImportState = &wanNetworkResource{}
)

func NewWanNetworkResource() resource.Resource {
	return &wanNetworkResource{}
}

type wanNetworkResource struct {
	client *sdwan.Client
}

// wanNetworkRsModel is the model.
type wanNetworkRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Description       types.String `tfsdk:"description"`
	Etag              types.Int64  `tfsdk:"etag"`
	Id                types.String `tfsdk:"id"`
	Name              types.String `tfsdk:"name"`
	ProviderAsNumbers types.List   `tfsdk:"provider_as_numbers"`
	Tags              types.List   `tfsdk:"tags"`
	Type              types.String `tfsdk:"type"`

	// Output.
	// omit input: description
	// omit input: etag
	// omit input: id
	// omit input: name
	// omit input: provider_as_numbers
	// omit input: tags
	// omit input: type
}

// Metadata returns the data source type name.
func (r *wanNetworkResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wan_network"
}

// Schema defines the schema for this data source.
func (r *wanNetworkResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"description":true, "etag":true, "id":true, "name":true, "provider_as_numbers":true, "tags":true, "type":true} outputs:map[string]bool{"description":true, "etag":true, "id":true, "name":true, "provider_as_numbers":true, "tags":true, "tfid":true, "type":true} forceNew:map[string]bool{}
			"description": rsschema.StringAttribute{
				Description: "Description: Size(max = 256, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Optional:    true,
			},
			"etag": rsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Optional:    true,
				Computed:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Name: Required(NAME_REQUIRED) Size(max = 128, WANNETWORK_NAME_INVALID_0001, min = 0) .",
				Required:    true,
			},
			"provider_as_numbers": rsschema.ListAttribute{
				Description: "Provider As Numbers: ListNumber(duplicate = true, max = 65535, error = WAN_CONFIG_PROVIDER_AS_OUT_OF_RANGE: AS numbers of the private network is not within 1-65535., min = 1) .",
				Optional:    true,
				ElementType: types.Int64Type,
			},
			"tags": rsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"type": rsschema.StringAttribute{
				Description: "Type: Required(error = NETWORK_TYPE_REQUIRED: WAN Network type (publicwan | privatewan) is a mandatory attribute.) ValidateEnum(enumClass = classOf[WANNetworkType], message = Invalid enum string., nullAllowed = false) .",
				Required:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (r *wanNetworkResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sdwan.Client)
}

// Create resource.
func (r *wanNetworkResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state wanNetworkRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_wan_network",
		"terraform_provider_function": "Create",
	})

	// Prepare to create the config.
	svc := gOMQArS.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.CreateInput{}

	input.Request = &bQFhoWG.Config{}

	input.Request.Description = StringValueOrNil(state.Description)

	input.Request.Etag = Int64ValueOrNil(state.Etag)

	input.Request.Name = StringValue(state.Name)

	input.Request.ProviderAsNumbers = ListInt64ValueOrNil(ctx, state.ProviderAsNumbers)

	input.Request.Tags = ListStringValueOrNil(ctx, state.Tags)

	input.Request.Type = StringValue(state.Type)

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	var2, var3 := types.ListValueFrom(ctx, types.Int64Type, ans.ProviderAsNumbers)
	state.ProviderAsNumbers = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.Type = types.StringValue(ans.Type)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *wanNetworkResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state wanNetworkRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_wan_network",
		"locMap":                      map[string]int{"wan_network_id": 0},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := gOMQArS.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.ReadInput{}

	input.WanNetworkId = tokens[0]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.
	state.Tfid = savestate.Tfid

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	var0, var1 := types.ListValueFrom(ctx, types.Int64Type, ans.ProviderAsNumbers)
	state.ProviderAsNumbers = var0
	resp.Diagnostics.Append(var1.Errors()...)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.Type = types.StringValue(ans.Type)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *wanNetworkResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state wanNetworkRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_wan_network",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := gOMQArS.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.UpdateInput{}

	if tokens[0] != "" {
		input.WanNetworkId = tokens[0]
	}
	input.Request = &bQFhoWG.Config{}

	input.Request.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)

	input.Request.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)

	input.Request.Name = ValueStringFromPlanOrState(plan.Name, state.Name)

	input.Request.ProviderAsNumbers = ListInt64ValueOrNil(ctx, plan.ProviderAsNumbers)

	input.Request.Tags = ListStringValueOrNil(ctx, plan.Tags)

	input.Request.Type = ValueStringFromPlanOrState(plan.Type, state.Type)

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	var2, var3 := types.ListValueFrom(ctx, types.Int64Type, ans.ProviderAsNumbers)
	state.ProviderAsNumbers = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.Type = types.StringValue(ans.Type)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *wanNetworkResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_wan_network",
		"locMap":                      map[string]int{"wan_network_id": 0},
		"tokens":                      tokens,
	})

	svc := gOMQArS.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.DeleteInput{}

	input.WanNetworkId = tokens[0]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *wanNetworkResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
