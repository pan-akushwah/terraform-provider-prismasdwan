package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=5)
// | Computed Resource Name=sites
// +-----------------------------------------------------------------
// | SecurityGroupInformationConfig HasID=false
// | ExtendedTag HasID=false
// | Location HasID=false
// | Address HasID=false
// | SiteScreenV4N12 HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &siteResource{}
	_ resource.ResourceWithConfigure   = &siteResource{}
	_ resource.ResourceWithImportState = &siteResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewSiteResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewSiteResource() resource.Resource {
	return &siteResource{}
}

type siteResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *siteResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_site"
}

// Schema defines the schema for this data source.
func (r *siteResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=SiteScreenV4N12
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=address, type=REFERENCE macro=rss_schema
			"address": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=city, type=STRING macro=rss_schema
					"city": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=city, type=STRING macro=rss_schema
					// property: name=country, type=STRING macro=rss_schema
					"country": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=country, type=STRING macro=rss_schema
					// property: name=post_code, type=STRING macro=rss_schema
					"post_code": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=post_code, type=STRING macro=rss_schema
					// property: name=state, type=STRING macro=rss_schema
					"state": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=state, type=STRING macro=rss_schema
					// property: name=street, type=STRING macro=rss_schema
					"street": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=street, type=STRING macro=rss_schema
					// property: name=street2, type=STRING macro=rss_schema
					"street2": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=street2, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=street2, type=STRING macro=rss_schema
			// property: name=admin_state, type=STRING macro=rss_schema
			"admin_state": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=admin_state, type=STRING macro=rss_schema
			// property: name=app_acceleration_enabled, type=BOOLEAN macro=rss_schema
			"app_acceleration_enabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=app_acceleration_enabled, type=BOOLEAN macro=rss_schema
			// property: name=branch_gateway, type=BOOLEAN macro=rss_schema
			"branch_gateway": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=branch_gateway, type=BOOLEAN macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=element_cluster_role, type=STRING macro=rss_schema
			"element_cluster_role": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=element_cluster_role, type=STRING macro=rss_schema
			// property: name=extended_tags, type=ARRAY_REFERENCE macro=rss_schema
			"extended_tags": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=key, type=STRING macro=rss_schema
						"key": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=key, type=STRING macro=rss_schema
						// property: name=value, type=STRING macro=rss_schema
						"value": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
						// property: name=value_type, type=STRING macro=rss_schema
						"value_type": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=value_type, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=value_type, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=location, type=REFERENCE macro=rss_schema
			"location": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=description, type=STRING macro=rss_schema
					"description": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=latitude, type=NUMBER macro=rss_schema
					"latitude": rsschema.Float64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=latitude, type=NUMBER macro=rss_schema
					// property: name=longitude, type=NUMBER macro=rss_schema
					"longitude": rsschema.Float64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=longitude, type=NUMBER macro=rss_schema
				},
			},
			// key name holder for attribute: name=longitude, type=NUMBER macro=rss_schema
			// property: name=multicast_peer_group_id, type=STRING macro=rss_schema
			"multicast_peer_group_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=multicast_peer_group_id, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=nat_policysetstack_id, type=STRING macro=rss_schema
			"nat_policysetstack_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=nat_policysetstack_id, type=STRING macro=rss_schema
			// property: name=network_policysetstack_id, type=STRING macro=rss_schema
			"network_policysetstack_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=network_policysetstack_id, type=STRING macro=rss_schema
			// property: name=perfmgmt_policysetstack_id, type=STRING macro=rss_schema
			"perfmgmt_policysetstack_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=perfmgmt_policysetstack_id, type=STRING macro=rss_schema
			// property: name=policy_set_id, type=STRING macro=rss_schema
			"policy_set_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=policy_set_id, type=STRING macro=rss_schema
			// property: name=prefer_lan_default_over_wan_default_route, type=BOOLEAN macro=rss_schema
			"prefer_lan_default_over_wan_default_route": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=prefer_lan_default_over_wan_default_route, type=BOOLEAN macro=rss_schema
			// property: name=priority_policysetstack_id, type=STRING macro=rss_schema
			"priority_policysetstack_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=priority_policysetstack_id, type=STRING macro=rss_schema
			// property: name=security_policyset_id, type=STRING macro=rss_schema
			"security_policyset_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=security_policyset_id, type=STRING macro=rss_schema
			// property: name=security_policysetstack_id, type=STRING macro=rss_schema
			"security_policysetstack_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=security_policysetstack_id, type=STRING macro=rss_schema
			// property: name=service_binding, type=STRING macro=rss_schema
			"service_binding": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=service_binding, type=STRING macro=rss_schema
			// property: name=sgi_config, type=REFERENCE macro=rss_schema
			"sgi_config": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=sgi_tag, type=INTEGER macro=rss_schema
					"sgi_tag": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=sgi_tag, type=INTEGER macro=rss_schema
					// property: name=sgi_vendor_id, type=STRING macro=rss_schema
					"sgi_vendor_id": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=sgi_vendor_id, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=sgi_vendor_id, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=vrf_context_profile_id, type=STRING macro=rss_schema
			"vrf_context_profile_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=vrf_context_profile_id, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *siteResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *siteResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *siteResource) doPost(ctx context.Context, plan *rsModelSiteScreenV4N12, state *rsModelSiteScreenV4N12, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_site")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_site",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v4.12/api/sites"

	// copy parameters from plan always
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.SiteScreenV4N12{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=25
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=address, type=REFERENCE macro=copy_from_plan
	if plan.Address != nil {
		body.Address = &sdwan_schema.Address{}
		// copy_from_plan: body=body.Address prefix=rsModel plan=plan.Address properties=6
		// property: name=city, type=STRING macro=copy_from_plan
		body.Address.City = StringValueOrNil(plan.Address.City)
		// property: name=country, type=STRING macro=copy_from_plan
		body.Address.Country = StringValueOrNil(plan.Address.Country)
		// property: name=post_code, type=STRING macro=copy_from_plan
		body.Address.PostCode = StringValueOrNil(plan.Address.PostCode)
		// property: name=state, type=STRING macro=copy_from_plan
		body.Address.State = StringValueOrNil(plan.Address.State)
		// property: name=street, type=STRING macro=copy_from_plan
		body.Address.Street = StringValueOrNil(plan.Address.Street)
		// property: name=street2, type=STRING macro=copy_from_plan
		body.Address.Street2 = StringValueOrNil(plan.Address.Street2)
	}
	// property: name=admin_state, type=STRING macro=copy_from_plan
	body.AdminState = StringValueOrNil(plan.AdminState)
	// property: name=app_acceleration_enabled, type=BOOLEAN macro=copy_from_plan
	body.AppAccelerationEnabled = BoolValueOrNil(plan.AppAccelerationEnabled)
	// property: name=branch_gateway, type=BOOLEAN macro=copy_from_plan
	body.BranchGateway = BoolValueOrNil(plan.BranchGateway)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=element_cluster_role, type=STRING macro=copy_from_plan
	body.ElementClusterRole = StringValueOrNil(plan.ElementClusterRole)
	// property: name=extended_tags, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.ExtendedTags == nil {
		body.ExtendedTags = nil
	} else if len(plan.ExtendedTags) == 0 {
		body.ExtendedTags = []sdwan_schema.ExtendedTag{}
	} else {
		body.ExtendedTags = make([]sdwan_schema.ExtendedTag, 0, len(plan.ExtendedTags))
		for varLoopExtendedTagsIndex, varLoopExtendedTags := range plan.ExtendedTags {
			// add a new item
			body.ExtendedTags = append(body.ExtendedTags, sdwan_schema.ExtendedTag{})
			// copy_from_plan: body=body.ExtendedTags[varLoopExtendedTagsIndex] prefix=rsModel plan=varLoopExtendedTags properties=3
			// property: name=key, type=STRING macro=copy_from_plan
			body.ExtendedTags[varLoopExtendedTagsIndex].Key = StringValueOrNil(varLoopExtendedTags.Key)
			// property: name=value, type=STRING macro=copy_from_plan
			body.ExtendedTags[varLoopExtendedTagsIndex].Value = StringValueOrNil(varLoopExtendedTags.Value)
			// property: name=value_type, type=STRING macro=copy_from_plan
			body.ExtendedTags[varLoopExtendedTagsIndex].ValueType = StringValueOrNil(varLoopExtendedTags.ValueType)
		}
	}
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=location, type=REFERENCE macro=copy_from_plan
	if plan.Location != nil {
		body.Location = &sdwan_schema.Location{}
		// copy_from_plan: body=body.Location prefix=rsModel plan=plan.Location properties=3
		// property: name=description, type=STRING macro=copy_from_plan
		body.Location.Description = StringValueOrNil(plan.Location.Description)
		// property: name=latitude, type=NUMBER macro=copy_from_plan
		body.Location.Latitude = Float64ValueOrNil(plan.Location.Latitude)
		// property: name=longitude, type=NUMBER macro=copy_from_plan
		body.Location.Longitude = Float64ValueOrNil(plan.Location.Longitude)
	}
	// property: name=multicast_peer_group_id, type=STRING macro=copy_from_plan
	body.MulticastPeerGroupId = StringValueOrNil(plan.MulticastPeerGroupId)
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=nat_policysetstack_id, type=STRING macro=copy_from_plan
	body.NatPolicysetstackId = StringValueOrNil(plan.NatPolicysetstackId)
	// property: name=network_policysetstack_id, type=STRING macro=copy_from_plan
	body.NetworkPolicysetstackId = StringValueOrNil(plan.NetworkPolicysetstackId)
	// property: name=perfmgmt_policysetstack_id, type=STRING macro=copy_from_plan
	body.PerfmgmtPolicysetstackId = StringValueOrNil(plan.PerfmgmtPolicysetstackId)
	// property: name=policy_set_id, type=STRING macro=copy_from_plan
	body.PolicySetId = StringValueOrNil(plan.PolicySetId)
	// property: name=prefer_lan_default_over_wan_default_route, type=BOOLEAN macro=copy_from_plan
	body.PreferLanDefaultOverWanDefaultRoute = BoolValueOrNil(plan.PreferLanDefaultOverWanDefaultRoute)
	// property: name=priority_policysetstack_id, type=STRING macro=copy_from_plan
	body.PriorityPolicysetstackId = StringValueOrNil(plan.PriorityPolicysetstackId)
	// property: name=security_policyset_id, type=STRING macro=copy_from_plan
	body.SecurityPolicysetId = StringValueOrNil(plan.SecurityPolicysetId)
	// property: name=security_policysetstack_id, type=STRING macro=copy_from_plan
	body.SecurityPolicysetstackId = StringValueOrNil(plan.SecurityPolicysetstackId)
	// property: name=service_binding, type=STRING macro=copy_from_plan
	body.ServiceBinding = StringValueOrNil(plan.ServiceBinding)
	// property: name=sgi_config, type=REFERENCE macro=copy_from_plan
	if plan.SgiConfig != nil {
		body.SgiConfig = &sdwan_schema.SecurityGroupInformationConfig{}
		// copy_from_plan: body=body.SgiConfig prefix=rsModel plan=plan.SgiConfig properties=2
		// property: name=sgi_tag, type=INTEGER macro=copy_from_plan
		body.SgiConfig.SgiTag = Int64ValueOrNil(plan.SgiConfig.SgiTag)
		// property: name=sgi_vendor_id, type=STRING macro=copy_from_plan
		body.SgiConfig.SgiVendorId = StringValueOrNil(plan.SgiConfig.SgiVendorId)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=vrf_context_profile_id, type=STRING macro=copy_from_plan
	body.VrfContextProfileId = StringValueOrNil(plan.VrfContextProfileId)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct SiteScreenV4N12 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_site", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_site",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_site", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_site",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_site", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.SiteScreenV4N12
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to SiteScreenV4N12 in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_site with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=SiteScreenV4N12
	// copy_to_state: state=state prefix=rsModel ans=ans properties=25
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=address, type=REFERENCE macro=copy_to_state
	if ans.Address == nil {
		state.Address = nil
	} else {
		state.Address = &rsModelAddress{}
		// copy_to_state: state=state.Address prefix=rsModel ans=ans.Address properties=6
		// property: name=city, type=STRING macro=copy_to_state
		state.Address.City = types.StringPointerValue(ans.Address.City)
		// property: name=country, type=STRING macro=copy_to_state
		state.Address.Country = types.StringPointerValue(ans.Address.Country)
		// property: name=post_code, type=STRING macro=copy_to_state
		state.Address.PostCode = types.StringPointerValue(ans.Address.PostCode)
		// property: name=state, type=STRING macro=copy_to_state
		state.Address.State = types.StringPointerValue(ans.Address.State)
		// property: name=street, type=STRING macro=copy_to_state
		state.Address.Street = types.StringPointerValue(ans.Address.Street)
		// property: name=street2, type=STRING macro=copy_to_state
		state.Address.Street2 = types.StringPointerValue(ans.Address.Street2)
	}
	// property: name=admin_state, type=STRING macro=copy_to_state
	state.AdminState = types.StringPointerValue(ans.AdminState)
	// property: name=app_acceleration_enabled, type=BOOLEAN macro=copy_to_state
	state.AppAccelerationEnabled = types.BoolPointerValue(ans.AppAccelerationEnabled)
	// property: name=branch_gateway, type=BOOLEAN macro=copy_to_state
	state.BranchGateway = types.BoolPointerValue(ans.BranchGateway)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=element_cluster_role, type=STRING macro=copy_to_state
	state.ElementClusterRole = types.StringPointerValue(ans.ElementClusterRole)
	// property: name=extended_tags, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.ExtendedTags == nil {
		state.ExtendedTags = nil
	} else if len(ans.ExtendedTags) == 0 {
		state.ExtendedTags = []rsModelExtendedTag{}
	} else {
		state.ExtendedTags = make([]rsModelExtendedTag, 0, len(ans.ExtendedTags))
		for varLoopExtendedTagsIndex, varLoopExtendedTags := range ans.ExtendedTags {
			// add a new item
			state.ExtendedTags = append(state.ExtendedTags, rsModelExtendedTag{})
			// copy_to_state: state=state.ExtendedTags[varLoopExtendedTagsIndex] prefix=rsModel ans=varLoopExtendedTags properties=3
			// property: name=key, type=STRING macro=copy_to_state
			state.ExtendedTags[varLoopExtendedTagsIndex].Key = types.StringPointerValue(varLoopExtendedTags.Key)
			// property: name=value, type=STRING macro=copy_to_state
			state.ExtendedTags[varLoopExtendedTagsIndex].Value = types.StringPointerValue(varLoopExtendedTags.Value)
			// property: name=value_type, type=STRING macro=copy_to_state
			state.ExtendedTags[varLoopExtendedTagsIndex].ValueType = types.StringPointerValue(varLoopExtendedTags.ValueType)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=location, type=REFERENCE macro=copy_to_state
	if ans.Location == nil {
		state.Location = nil
	} else {
		state.Location = &rsModelLocation{}
		// copy_to_state: state=state.Location prefix=rsModel ans=ans.Location properties=3
		// property: name=description, type=STRING macro=copy_to_state
		state.Location.Description = types.StringPointerValue(ans.Location.Description)
		// property: name=latitude, type=NUMBER macro=copy_to_state
		state.Location.Latitude = types.Float64PointerValue(ans.Location.Latitude)
		// property: name=longitude, type=NUMBER macro=copy_to_state
		state.Location.Longitude = types.Float64PointerValue(ans.Location.Longitude)
	}
	// property: name=multicast_peer_group_id, type=STRING macro=copy_to_state
	state.MulticastPeerGroupId = types.StringPointerValue(ans.MulticastPeerGroupId)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=nat_policysetstack_id, type=STRING macro=copy_to_state
	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)
	// property: name=network_policysetstack_id, type=STRING macro=copy_to_state
	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)
	// property: name=perfmgmt_policysetstack_id, type=STRING macro=copy_to_state
	state.PerfmgmtPolicysetstackId = types.StringPointerValue(ans.PerfmgmtPolicysetstackId)
	// property: name=policy_set_id, type=STRING macro=copy_to_state
	state.PolicySetId = types.StringPointerValue(ans.PolicySetId)
	// property: name=prefer_lan_default_over_wan_default_route, type=BOOLEAN macro=copy_to_state
	state.PreferLanDefaultOverWanDefaultRoute = types.BoolPointerValue(ans.PreferLanDefaultOverWanDefaultRoute)
	// property: name=priority_policysetstack_id, type=STRING macro=copy_to_state
	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)
	// property: name=security_policyset_id, type=STRING macro=copy_to_state
	state.SecurityPolicysetId = types.StringPointerValue(ans.SecurityPolicysetId)
	// property: name=security_policysetstack_id, type=STRING macro=copy_to_state
	state.SecurityPolicysetstackId = types.StringPointerValue(ans.SecurityPolicysetstackId)
	// property: name=service_binding, type=STRING macro=copy_to_state
	state.ServiceBinding = types.StringPointerValue(ans.ServiceBinding)
	// property: name=sgi_config, type=REFERENCE macro=copy_to_state
	if ans.SgiConfig == nil {
		state.SgiConfig = nil
	} else {
		state.SgiConfig = &rsModelSecurityGroupInformationConfig{}
		// copy_to_state: state=state.SgiConfig prefix=rsModel ans=ans.SgiConfig properties=2
		// property: name=sgi_tag, type=INTEGER macro=copy_to_state
		state.SgiConfig.SgiTag = types.Int64PointerValue(ans.SgiConfig.SgiTag)
		// property: name=sgi_vendor_id, type=STRING macro=copy_to_state
		state.SgiConfig.SgiVendorId = types.StringPointerValue(ans.SgiConfig.SgiVendorId)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=vrf_context_profile_id, type=STRING macro=copy_to_state
	state.VrfContextProfileId = types.StringPointerValue(ans.VrfContextProfileId)
	return true
}

func (r *siteResource) doGet(ctx context.Context, state *rsModelSiteScreenV4N12, savestate *rsModelSiteScreenV4N12, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_site",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_site ID format", "Expected 1 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v4.12/api/sites/{site_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["site_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_site", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_site",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_site from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=SiteScreenV4N12
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.SiteScreenV4N12
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to SiteScreenV4N12 in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=25
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=address, type=REFERENCE macro=copy_to_state
	if ans.Address == nil {
		state.Address = nil
	} else {
		state.Address = &rsModelAddress{}
		// copy_to_state: state=state.Address prefix=rsModel ans=ans.Address properties=6
		// property: name=city, type=STRING macro=copy_to_state
		state.Address.City = types.StringPointerValue(ans.Address.City)
		// property: name=country, type=STRING macro=copy_to_state
		state.Address.Country = types.StringPointerValue(ans.Address.Country)
		// property: name=post_code, type=STRING macro=copy_to_state
		state.Address.PostCode = types.StringPointerValue(ans.Address.PostCode)
		// property: name=state, type=STRING macro=copy_to_state
		state.Address.State = types.StringPointerValue(ans.Address.State)
		// property: name=street, type=STRING macro=copy_to_state
		state.Address.Street = types.StringPointerValue(ans.Address.Street)
		// property: name=street2, type=STRING macro=copy_to_state
		state.Address.Street2 = types.StringPointerValue(ans.Address.Street2)
	}
	// property: name=admin_state, type=STRING macro=copy_to_state
	state.AdminState = types.StringPointerValue(ans.AdminState)
	// property: name=app_acceleration_enabled, type=BOOLEAN macro=copy_to_state
	state.AppAccelerationEnabled = types.BoolPointerValue(ans.AppAccelerationEnabled)
	// property: name=branch_gateway, type=BOOLEAN macro=copy_to_state
	state.BranchGateway = types.BoolPointerValue(ans.BranchGateway)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=element_cluster_role, type=STRING macro=copy_to_state
	state.ElementClusterRole = types.StringPointerValue(ans.ElementClusterRole)
	// property: name=extended_tags, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.ExtendedTags == nil {
		state.ExtendedTags = nil
	} else if len(ans.ExtendedTags) == 0 {
		state.ExtendedTags = []rsModelExtendedTag{}
	} else {
		state.ExtendedTags = make([]rsModelExtendedTag, 0, len(ans.ExtendedTags))
		for varLoopExtendedTagsIndex, varLoopExtendedTags := range ans.ExtendedTags {
			// add a new item
			state.ExtendedTags = append(state.ExtendedTags, rsModelExtendedTag{})
			// copy_to_state: state=state.ExtendedTags[varLoopExtendedTagsIndex] prefix=rsModel ans=varLoopExtendedTags properties=3
			// property: name=key, type=STRING macro=copy_to_state
			state.ExtendedTags[varLoopExtendedTagsIndex].Key = types.StringPointerValue(varLoopExtendedTags.Key)
			// property: name=value, type=STRING macro=copy_to_state
			state.ExtendedTags[varLoopExtendedTagsIndex].Value = types.StringPointerValue(varLoopExtendedTags.Value)
			// property: name=value_type, type=STRING macro=copy_to_state
			state.ExtendedTags[varLoopExtendedTagsIndex].ValueType = types.StringPointerValue(varLoopExtendedTags.ValueType)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=location, type=REFERENCE macro=copy_to_state
	if ans.Location == nil {
		state.Location = nil
	} else {
		state.Location = &rsModelLocation{}
		// copy_to_state: state=state.Location prefix=rsModel ans=ans.Location properties=3
		// property: name=description, type=STRING macro=copy_to_state
		state.Location.Description = types.StringPointerValue(ans.Location.Description)
		// property: name=latitude, type=NUMBER macro=copy_to_state
		state.Location.Latitude = types.Float64PointerValue(ans.Location.Latitude)
		// property: name=longitude, type=NUMBER macro=copy_to_state
		state.Location.Longitude = types.Float64PointerValue(ans.Location.Longitude)
	}
	// property: name=multicast_peer_group_id, type=STRING macro=copy_to_state
	state.MulticastPeerGroupId = types.StringPointerValue(ans.MulticastPeerGroupId)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=nat_policysetstack_id, type=STRING macro=copy_to_state
	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)
	// property: name=network_policysetstack_id, type=STRING macro=copy_to_state
	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)
	// property: name=perfmgmt_policysetstack_id, type=STRING macro=copy_to_state
	state.PerfmgmtPolicysetstackId = types.StringPointerValue(ans.PerfmgmtPolicysetstackId)
	// property: name=policy_set_id, type=STRING macro=copy_to_state
	state.PolicySetId = types.StringPointerValue(ans.PolicySetId)
	// property: name=prefer_lan_default_over_wan_default_route, type=BOOLEAN macro=copy_to_state
	state.PreferLanDefaultOverWanDefaultRoute = types.BoolPointerValue(ans.PreferLanDefaultOverWanDefaultRoute)
	// property: name=priority_policysetstack_id, type=STRING macro=copy_to_state
	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)
	// property: name=security_policyset_id, type=STRING macro=copy_to_state
	state.SecurityPolicysetId = types.StringPointerValue(ans.SecurityPolicysetId)
	// property: name=security_policysetstack_id, type=STRING macro=copy_to_state
	state.SecurityPolicysetstackId = types.StringPointerValue(ans.SecurityPolicysetstackId)
	// property: name=service_binding, type=STRING macro=copy_to_state
	state.ServiceBinding = types.StringPointerValue(ans.ServiceBinding)
	// property: name=sgi_config, type=REFERENCE macro=copy_to_state
	if ans.SgiConfig == nil {
		state.SgiConfig = nil
	} else {
		state.SgiConfig = &rsModelSecurityGroupInformationConfig{}
		// copy_to_state: state=state.SgiConfig prefix=rsModel ans=ans.SgiConfig properties=2
		// property: name=sgi_tag, type=INTEGER macro=copy_to_state
		state.SgiConfig.SgiTag = types.Int64PointerValue(ans.SgiConfig.SgiTag)
		// property: name=sgi_vendor_id, type=STRING macro=copy_to_state
		state.SgiConfig.SgiVendorId = types.StringPointerValue(ans.SgiConfig.SgiVendorId)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=vrf_context_profile_id, type=STRING macro=copy_to_state
	state.VrfContextProfileId = types.StringPointerValue(ans.VrfContextProfileId)
	return true
}

func (r *siteResource) doPut(ctx context.Context, plan *rsModelSiteScreenV4N12, state *rsModelSiteScreenV4N12, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_site",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_site", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_site ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v4.12/api/sites/{site_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["site_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.SiteScreenV4N12{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=25
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=address, type=REFERENCE macro=copy_from_plan_or_state
	if plan.Address == nil {
		body.Address = nil
	} else {
		body.Address = &sdwan_schema.Address{}
		// copy_from_plan_or_state: body=body.Address prefix=rsModel state=state.Address plan=plan.Address properties=6
		// property: name=city, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.City = ValueStringPointerFromPlanOrState(plan.Address.City, state.Address.City)
		} else {
			body.Address.City = StringValueOrNil(plan.Address.City)
		}
		// property: name=country, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.Country = ValueStringPointerFromPlanOrState(plan.Address.Country, state.Address.Country)
		} else {
			body.Address.Country = StringValueOrNil(plan.Address.Country)
		}
		// property: name=post_code, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.PostCode = ValueStringPointerFromPlanOrState(plan.Address.PostCode, state.Address.PostCode)
		} else {
			body.Address.PostCode = StringValueOrNil(plan.Address.PostCode)
		}
		// property: name=state, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.State = ValueStringPointerFromPlanOrState(plan.Address.State, state.Address.State)
		} else {
			body.Address.State = StringValueOrNil(plan.Address.State)
		}
		// property: name=street, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.Street = ValueStringPointerFromPlanOrState(plan.Address.Street, state.Address.Street)
		} else {
			body.Address.Street = StringValueOrNil(plan.Address.Street)
		}
		// property: name=street2, type=STRING macro=copy_from_plan_or_state
		if state.Address != nil {
			body.Address.Street2 = ValueStringPointerFromPlanOrState(plan.Address.Street2, state.Address.Street2)
		} else {
			body.Address.Street2 = StringValueOrNil(plan.Address.Street2)
		}
	}
	// property: name=admin_state, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.AdminState = ValueStringPointerFromPlanOrState(plan.AdminState, state.AdminState)
	} else {
		body.AdminState = StringValueOrNil(plan.AdminState)
	}
	// property: name=app_acceleration_enabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.AppAccelerationEnabled = ValueBoolPointerFromPlanOrState(plan.AppAccelerationEnabled, state.AppAccelerationEnabled)
	} else {
		body.AppAccelerationEnabled = BoolValueOrNil(plan.AppAccelerationEnabled)
	}
	// property: name=branch_gateway, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.BranchGateway = ValueBoolPointerFromPlanOrState(plan.BranchGateway, state.BranchGateway)
	} else {
		body.BranchGateway = BoolValueOrNil(plan.BranchGateway)
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=element_cluster_role, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.ElementClusterRole = ValueStringPointerFromPlanOrState(plan.ElementClusterRole, state.ElementClusterRole)
	} else {
		body.ElementClusterRole = StringValueOrNil(plan.ElementClusterRole)
	}
	// property: name=extended_tags, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.ExtendedTags == nil && (state == nil || state.ExtendedTags == nil) {
		body.ExtendedTags = nil
	} else if len(plan.ExtendedTags) == 0 && (state == nil || len(state.ExtendedTags) == 0) {
		body.ExtendedTags = []sdwan_schema.ExtendedTag{}
	} else if len(plan.ExtendedTags) != 0 || (state != nil && len(state.ExtendedTags) != 0) {
		ExtendedTagsToUse := plan.ExtendedTags
		if len(plan.ExtendedTags) == 0 {
			ExtendedTagsToUse = state.ExtendedTags
		}
		body.ExtendedTags = make([]sdwan_schema.ExtendedTag, 0, len(ExtendedTagsToUse))
		for varLoopExtendedTagsIndex, varLoopExtendedTags := range ExtendedTagsToUse {
			// add a new item
			body.ExtendedTags = append(body.ExtendedTags, sdwan_schema.ExtendedTag{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.ExtendedTags[varLoopExtendedTagsIndex] prefix=rsModel plan=varLoopExtendedTags properties=3
			// property: name=key, type=STRING macro=copy_from_plan
			body.ExtendedTags[varLoopExtendedTagsIndex].Key = StringValueOrNil(varLoopExtendedTags.Key)
			// property: name=value, type=STRING macro=copy_from_plan
			body.ExtendedTags[varLoopExtendedTagsIndex].Value = StringValueOrNil(varLoopExtendedTags.Value)
			// property: name=value_type, type=STRING macro=copy_from_plan
			body.ExtendedTags[varLoopExtendedTagsIndex].ValueType = StringValueOrNil(varLoopExtendedTags.ValueType)
		}
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=location, type=REFERENCE macro=copy_from_plan_or_state
	if plan.Location == nil {
		body.Location = nil
	} else {
		body.Location = &sdwan_schema.Location{}
		// copy_from_plan_or_state: body=body.Location prefix=rsModel state=state.Location plan=plan.Location properties=3
		// property: name=description, type=STRING macro=copy_from_plan_or_state
		if state.Location != nil {
			body.Location.Description = ValueStringPointerFromPlanOrState(plan.Location.Description, state.Location.Description)
		} else {
			body.Location.Description = StringValueOrNil(plan.Location.Description)
		}
		// property: name=latitude, type=NUMBER macro=copy_from_plan_or_state
		if state.Location != nil {
			body.Location.Latitude = ValueFloat64PointerFromPlanOrState(plan.Location.Latitude, state.Location.Latitude)
		} else {
			body.Location.Latitude = Float64ValueOrNil(plan.Location.Latitude)
		}
		// property: name=longitude, type=NUMBER macro=copy_from_plan_or_state
		if state.Location != nil {
			body.Location.Longitude = ValueFloat64PointerFromPlanOrState(plan.Location.Longitude, state.Location.Longitude)
		} else {
			body.Location.Longitude = Float64ValueOrNil(plan.Location.Longitude)
		}
	}
	// property: name=multicast_peer_group_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.MulticastPeerGroupId = ValueStringPointerFromPlanOrState(plan.MulticastPeerGroupId, state.MulticastPeerGroupId)
	} else {
		body.MulticastPeerGroupId = StringValueOrNil(plan.MulticastPeerGroupId)
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=nat_policysetstack_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.NatPolicysetstackId = ValueStringPointerFromPlanOrState(plan.NatPolicysetstackId, state.NatPolicysetstackId)
	} else {
		body.NatPolicysetstackId = StringValueOrNil(plan.NatPolicysetstackId)
	}
	// property: name=network_policysetstack_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.NetworkPolicysetstackId = ValueStringPointerFromPlanOrState(plan.NetworkPolicysetstackId, state.NetworkPolicysetstackId)
	} else {
		body.NetworkPolicysetstackId = StringValueOrNil(plan.NetworkPolicysetstackId)
	}
	// property: name=perfmgmt_policysetstack_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.PerfmgmtPolicysetstackId = ValueStringPointerFromPlanOrState(plan.PerfmgmtPolicysetstackId, state.PerfmgmtPolicysetstackId)
	} else {
		body.PerfmgmtPolicysetstackId = StringValueOrNil(plan.PerfmgmtPolicysetstackId)
	}
	// property: name=policy_set_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.PolicySetId = ValueStringPointerFromPlanOrState(plan.PolicySetId, state.PolicySetId)
	} else {
		body.PolicySetId = StringValueOrNil(plan.PolicySetId)
	}
	// property: name=prefer_lan_default_over_wan_default_route, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.PreferLanDefaultOverWanDefaultRoute = ValueBoolPointerFromPlanOrState(plan.PreferLanDefaultOverWanDefaultRoute, state.PreferLanDefaultOverWanDefaultRoute)
	} else {
		body.PreferLanDefaultOverWanDefaultRoute = BoolValueOrNil(plan.PreferLanDefaultOverWanDefaultRoute)
	}
	// property: name=priority_policysetstack_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.PriorityPolicysetstackId = ValueStringPointerFromPlanOrState(plan.PriorityPolicysetstackId, state.PriorityPolicysetstackId)
	} else {
		body.PriorityPolicysetstackId = StringValueOrNil(plan.PriorityPolicysetstackId)
	}
	// property: name=security_policyset_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.SecurityPolicysetId = ValueStringPointerFromPlanOrState(plan.SecurityPolicysetId, state.SecurityPolicysetId)
	} else {
		body.SecurityPolicysetId = StringValueOrNil(plan.SecurityPolicysetId)
	}
	// property: name=security_policysetstack_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.SecurityPolicysetstackId = ValueStringPointerFromPlanOrState(plan.SecurityPolicysetstackId, state.SecurityPolicysetstackId)
	} else {
		body.SecurityPolicysetstackId = StringValueOrNil(plan.SecurityPolicysetstackId)
	}
	// property: name=service_binding, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.ServiceBinding = ValueStringPointerFromPlanOrState(plan.ServiceBinding, state.ServiceBinding)
	} else {
		body.ServiceBinding = StringValueOrNil(plan.ServiceBinding)
	}
	// property: name=sgi_config, type=REFERENCE macro=copy_from_plan_or_state
	if plan.SgiConfig == nil {
		body.SgiConfig = nil
	} else {
		body.SgiConfig = &sdwan_schema.SecurityGroupInformationConfig{}
		// copy_from_plan_or_state: body=body.SgiConfig prefix=rsModel state=state.SgiConfig plan=plan.SgiConfig properties=2
		// property: name=sgi_tag, type=INTEGER macro=copy_from_plan_or_state
		if state.SgiConfig != nil {
			body.SgiConfig.SgiTag = ValueInt64PointerFromPlanOrState(plan.SgiConfig.SgiTag, state.SgiConfig.SgiTag)
		} else {
			body.SgiConfig.SgiTag = Int64ValueOrNil(plan.SgiConfig.SgiTag)
		}
		// property: name=sgi_vendor_id, type=STRING macro=copy_from_plan_or_state
		if state.SgiConfig != nil {
			body.SgiConfig.SgiVendorId = ValueStringPointerFromPlanOrState(plan.SgiConfig.SgiVendorId, state.SgiConfig.SgiVendorId)
		} else {
			body.SgiConfig.SgiVendorId = StringValueOrNil(plan.SgiConfig.SgiVendorId)
		}
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=vrf_context_profile_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.VrfContextProfileId = ValueStringPointerFromPlanOrState(plan.VrfContextProfileId, state.VrfContextProfileId)
	} else {
		body.VrfContextProfileId = StringValueOrNil(plan.VrfContextProfileId)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct SiteScreenV4N12 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_site", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_site",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_site", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_site",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_site", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.SiteScreenV4N12
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to SiteScreenV4N12 in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=SiteScreenV4N12
	// copy_to_state: state=state prefix=rsModel ans=ans properties=25
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=address, type=REFERENCE macro=copy_to_state
	if ans.Address == nil {
		state.Address = nil
	} else {
		state.Address = &rsModelAddress{}
		// copy_to_state: state=state.Address prefix=rsModel ans=ans.Address properties=6
		// property: name=city, type=STRING macro=copy_to_state
		state.Address.City = types.StringPointerValue(ans.Address.City)
		// property: name=country, type=STRING macro=copy_to_state
		state.Address.Country = types.StringPointerValue(ans.Address.Country)
		// property: name=post_code, type=STRING macro=copy_to_state
		state.Address.PostCode = types.StringPointerValue(ans.Address.PostCode)
		// property: name=state, type=STRING macro=copy_to_state
		state.Address.State = types.StringPointerValue(ans.Address.State)
		// property: name=street, type=STRING macro=copy_to_state
		state.Address.Street = types.StringPointerValue(ans.Address.Street)
		// property: name=street2, type=STRING macro=copy_to_state
		state.Address.Street2 = types.StringPointerValue(ans.Address.Street2)
	}
	// property: name=admin_state, type=STRING macro=copy_to_state
	state.AdminState = types.StringPointerValue(ans.AdminState)
	// property: name=app_acceleration_enabled, type=BOOLEAN macro=copy_to_state
	state.AppAccelerationEnabled = types.BoolPointerValue(ans.AppAccelerationEnabled)
	// property: name=branch_gateway, type=BOOLEAN macro=copy_to_state
	state.BranchGateway = types.BoolPointerValue(ans.BranchGateway)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=element_cluster_role, type=STRING macro=copy_to_state
	state.ElementClusterRole = types.StringPointerValue(ans.ElementClusterRole)
	// property: name=extended_tags, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.ExtendedTags == nil {
		state.ExtendedTags = nil
	} else if len(ans.ExtendedTags) == 0 {
		state.ExtendedTags = []rsModelExtendedTag{}
	} else {
		state.ExtendedTags = make([]rsModelExtendedTag, 0, len(ans.ExtendedTags))
		for varLoopExtendedTagsIndex, varLoopExtendedTags := range ans.ExtendedTags {
			// add a new item
			state.ExtendedTags = append(state.ExtendedTags, rsModelExtendedTag{})
			// copy_to_state: state=state.ExtendedTags[varLoopExtendedTagsIndex] prefix=rsModel ans=varLoopExtendedTags properties=3
			// property: name=key, type=STRING macro=copy_to_state
			state.ExtendedTags[varLoopExtendedTagsIndex].Key = types.StringPointerValue(varLoopExtendedTags.Key)
			// property: name=value, type=STRING macro=copy_to_state
			state.ExtendedTags[varLoopExtendedTagsIndex].Value = types.StringPointerValue(varLoopExtendedTags.Value)
			// property: name=value_type, type=STRING macro=copy_to_state
			state.ExtendedTags[varLoopExtendedTagsIndex].ValueType = types.StringPointerValue(varLoopExtendedTags.ValueType)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=location, type=REFERENCE macro=copy_to_state
	if ans.Location == nil {
		state.Location = nil
	} else {
		state.Location = &rsModelLocation{}
		// copy_to_state: state=state.Location prefix=rsModel ans=ans.Location properties=3
		// property: name=description, type=STRING macro=copy_to_state
		state.Location.Description = types.StringPointerValue(ans.Location.Description)
		// property: name=latitude, type=NUMBER macro=copy_to_state
		state.Location.Latitude = types.Float64PointerValue(ans.Location.Latitude)
		// property: name=longitude, type=NUMBER macro=copy_to_state
		state.Location.Longitude = types.Float64PointerValue(ans.Location.Longitude)
	}
	// property: name=multicast_peer_group_id, type=STRING macro=copy_to_state
	state.MulticastPeerGroupId = types.StringPointerValue(ans.MulticastPeerGroupId)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=nat_policysetstack_id, type=STRING macro=copy_to_state
	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)
	// property: name=network_policysetstack_id, type=STRING macro=copy_to_state
	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)
	// property: name=perfmgmt_policysetstack_id, type=STRING macro=copy_to_state
	state.PerfmgmtPolicysetstackId = types.StringPointerValue(ans.PerfmgmtPolicysetstackId)
	// property: name=policy_set_id, type=STRING macro=copy_to_state
	state.PolicySetId = types.StringPointerValue(ans.PolicySetId)
	// property: name=prefer_lan_default_over_wan_default_route, type=BOOLEAN macro=copy_to_state
	state.PreferLanDefaultOverWanDefaultRoute = types.BoolPointerValue(ans.PreferLanDefaultOverWanDefaultRoute)
	// property: name=priority_policysetstack_id, type=STRING macro=copy_to_state
	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)
	// property: name=security_policyset_id, type=STRING macro=copy_to_state
	state.SecurityPolicysetId = types.StringPointerValue(ans.SecurityPolicysetId)
	// property: name=security_policysetstack_id, type=STRING macro=copy_to_state
	state.SecurityPolicysetstackId = types.StringPointerValue(ans.SecurityPolicysetstackId)
	// property: name=service_binding, type=STRING macro=copy_to_state
	state.ServiceBinding = types.StringPointerValue(ans.ServiceBinding)
	// property: name=sgi_config, type=REFERENCE macro=copy_to_state
	if ans.SgiConfig == nil {
		state.SgiConfig = nil
	} else {
		state.SgiConfig = &rsModelSecurityGroupInformationConfig{}
		// copy_to_state: state=state.SgiConfig prefix=rsModel ans=ans.SgiConfig properties=2
		// property: name=sgi_tag, type=INTEGER macro=copy_to_state
		state.SgiConfig.SgiTag = types.Int64PointerValue(ans.SgiConfig.SgiTag)
		// property: name=sgi_vendor_id, type=STRING macro=copy_to_state
		state.SgiConfig.SgiVendorId = types.StringPointerValue(ans.SgiConfig.SgiVendorId)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=vrf_context_profile_id, type=STRING macro=copy_to_state
	state.VrfContextProfileId = types.StringPointerValue(ans.VrfContextProfileId)
	return true
}

func (r *siteResource) doDelete(ctx context.Context, state *rsModelSiteScreenV4N12, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_site",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_site ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v4.12/api/sites/{site_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["site_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_site", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *siteResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_site")
	var plan rsModelSiteScreenV4N12
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelSiteScreenV4N12
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *siteResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_site")
	var savestate, state rsModelSiteScreenV4N12
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *siteResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_site")
	var plan, state rsModelSiteScreenV4N12
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *siteResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_site")
	var state rsModelSiteScreenV4N12
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *siteResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
