package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=3)
// | Computed Resource Name=prioritypolicysets_prioritypolicyrules
// +-----------------------------------------------------------------
// | UserGroup HasID=false
// | DSCP HasID=false
// | PriorityPolicyRuleV2N2 HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &qosPolicyRuleResource{}
	_ resource.ResourceWithConfigure   = &qosPolicyRuleResource{}
	_ resource.ResourceWithImportState = &qosPolicyRuleResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewQosPolicyRuleResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewQosPolicyRuleResource() resource.Resource {
	return &qosPolicyRuleResource{}
}

type qosPolicyRuleResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *qosPolicyRuleResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_qos_policy_rule"
}

// Schema defines the schema for this data source.
func (r *qosPolicyRuleResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=PriorityPolicyRuleV2N2
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			"app_def_ids": rsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=dest_device_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			"dest_device_ids": rsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=dest_device_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=destination_prefixes_id, type=STRING macro=rss_schema
			"destination_prefixes_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=destination_prefixes_id, type=STRING macro=rss_schema
			// property: name=dscp, type=REFERENCE macro=rss_schema
			"dscp": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=value, type=INTEGER macro=rss_schema
					"value": rsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
			// property: name=enabled, type=BOOLEAN macro=rss_schema
			"enabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=network_context_id, type=STRING macro=rss_schema
			"network_context_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=network_context_id, type=STRING macro=rss_schema
			// property: name=order_number, type=INTEGER macro=rss_schema
			"order_number": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=order_number, type=INTEGER macro=rss_schema
			// property: name=priority_number, type=INTEGER macro=rss_schema
			"priority_number": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=priority_number, type=INTEGER macro=rss_schema
			// property: name=source_prefixes_id, type=STRING macro=rss_schema
			"source_prefixes_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=source_prefixes_id, type=STRING macro=rss_schema
			// property: name=src_device_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			"src_device_ids": rsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=src_device_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=user_or_group, type=REFERENCE macro=rss_schema
			"user_or_group": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=user_group_ids, type=ARRAY_PRIMITIVE macro=rss_schema
					"user_group_ids": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=user_group_ids, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=user_ids, type=ARRAY_PRIMITIVE macro=rss_schema
					"user_ids": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=user_ids, type=ARRAY_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=user_ids, type=ARRAY_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *qosPolicyRuleResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *qosPolicyRuleResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	case "POLICYRULE_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *qosPolicyRuleResource) doPost(ctx context.Context, plan *rsModelPriorityPolicyRuleV2N2, state *rsModelPriorityPolicyRuleV2N2, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_qos_policy_rule")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_qos_policy_rule",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_qos_policy_rule"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.2/api/prioritypolicysets/{policy_set_id}/prioritypolicyrules"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, plan.TfParameters)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.PriorityPolicyRuleV2N2{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=17
	tflog.Debug(ctx, "copy_from_plan body=body prefix=rsModel plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.AppDefIds = ListStringValueOrNil(ctx, plan.AppDefIds)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=dest_device_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.DestDeviceIds = ListStringValueOrNil(ctx, plan.DestDeviceIds)
	// property: name=destination_prefixes_id, type=STRING macro=copy_from_plan
	body.DestinationPrefixesId = StringValueOrNil(plan.DestinationPrefixesId)
	// property: name=dscp, type=REFERENCE macro=copy_from_plan
	if plan.Dscp != nil {
		body.Dscp = &sdwan_schema.DSCP{}
		// copy_from_plan: body=body.Dscp prefix=rsModel plan=plan.Dscp properties=1
		tflog.Debug(ctx, "copy_from_plan body=body.Dscp prefix=rsModel plan=plan.Dscp")
		// property: name=value, type=INTEGER macro=copy_from_plan
		body.Dscp.Value = Int64ValueOrNil(plan.Dscp.Value)
	}
	// property: name=enabled, type=BOOLEAN macro=copy_from_plan
	body.Enabled = BoolValueOrNil(plan.Enabled)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=network_context_id, type=STRING macro=copy_from_plan
	body.NetworkContextId = StringValueOrNil(plan.NetworkContextId)
	// property: name=order_number, type=INTEGER macro=copy_from_plan
	body.OrderNumber = Int64ValueOrNil(plan.OrderNumber)
	// property: name=priority_number, type=INTEGER macro=copy_from_plan
	body.PriorityNumber = Int64ValueOrNil(plan.PriorityNumber)
	// property: name=source_prefixes_id, type=STRING macro=copy_from_plan
	body.SourcePrefixesId = StringValueOrNil(plan.SourcePrefixesId)
	// property: name=src_device_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.SrcDeviceIds = ListStringValueOrNil(ctx, plan.SrcDeviceIds)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=user_or_group, type=REFERENCE macro=copy_from_plan
	if plan.UserOrGroup != nil {
		body.UserOrGroup = &sdwan_schema.UserGroup{}
		// copy_from_plan: body=body.UserOrGroup prefix=rsModel plan=plan.UserOrGroup properties=2
		tflog.Debug(ctx, "copy_from_plan body=body.UserOrGroup prefix=rsModel plan=plan.UserOrGroup")
		// property: name=user_group_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.UserOrGroup.UserGroupIds = ListStringValueOrNil(ctx, plan.UserOrGroup.UserGroupIds)
		// property: name=user_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.UserOrGroup.UserIds = ListStringValueOrNil(ctx, plan.UserOrGroup.UserIds)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct PriorityPolicyRuleV2N2 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete request_body_string::id")
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	tflog.Debug(ctx, "http json override: delete request_body_string::_etag")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	tflog.Debug(ctx, "http json override: set request_body_string::_schema")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_qos_policy_rule", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_qos_policy_rule",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_qos_policy_rule", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_qos_policy_rule",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_qos_policy_rule", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.PriorityPolicyRuleV2N2
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PriorityPolicyRuleV2N2 in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_qos_policy_rule with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=PriorityPolicyRuleV2N2
	// copy_to_state: state=state prefix=rsModel ans=ans properties=17
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, ans.AppDefIds)
	state.AppDefIds = varAppDefIds
	resp.Diagnostics.Append(errAppDefIds.Errors()...)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=dest_device_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDestDeviceIds, errDestDeviceIds := types.ListValueFrom(ctx, types.StringType, ans.DestDeviceIds)
	state.DestDeviceIds = varDestDeviceIds
	resp.Diagnostics.Append(errDestDeviceIds.Errors()...)
	// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
	state.DestinationPrefixesId = types.StringPointerValue(ans.DestinationPrefixesId)
	// property: name=dscp, type=REFERENCE macro=copy_to_state
	if ans.Dscp == nil {
		state.Dscp = nil
	} else {
		state.Dscp = &rsModelDSCP{}
		// copy_to_state: state=state.Dscp prefix=rsModel ans=ans.Dscp properties=1
		tflog.Debug(ctx, "copy_to_state state=state.Dscp prefix=rsModel ans=ans.Dscp")
		// property: name=value, type=INTEGER macro=copy_to_state
		state.Dscp.Value = types.Int64PointerValue(ans.Dscp.Value)
	}
	// property: name=enabled, type=BOOLEAN macro=copy_to_state
	state.Enabled = types.BoolPointerValue(ans.Enabled)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=network_context_id, type=STRING macro=copy_to_state
	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)
	// property: name=order_number, type=INTEGER macro=copy_to_state
	state.OrderNumber = types.Int64PointerValue(ans.OrderNumber)
	// property: name=priority_number, type=INTEGER macro=copy_to_state
	state.PriorityNumber = types.Int64PointerValue(ans.PriorityNumber)
	// property: name=source_prefixes_id, type=STRING macro=copy_to_state
	state.SourcePrefixesId = types.StringPointerValue(ans.SourcePrefixesId)
	// property: name=src_device_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varSrcDeviceIds, errSrcDeviceIds := types.ListValueFrom(ctx, types.StringType, ans.SrcDeviceIds)
	state.SrcDeviceIds = varSrcDeviceIds
	resp.Diagnostics.Append(errSrcDeviceIds.Errors()...)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=user_or_group, type=REFERENCE macro=copy_to_state
	if ans.UserOrGroup == nil {
		state.UserOrGroup = nil
	} else {
		state.UserOrGroup = &rsModelUserGroup{}
		// copy_to_state: state=state.UserOrGroup prefix=rsModel ans=ans.UserOrGroup properties=2
		tflog.Debug(ctx, "copy_to_state state=state.UserOrGroup prefix=rsModel ans=ans.UserOrGroup")
		// property: name=user_group_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
		varUserGroupIds, errUserGroupIds := types.ListValueFrom(ctx, types.StringType, ans.UserOrGroup.UserGroupIds)
		state.UserOrGroup.UserGroupIds = varUserGroupIds
		resp.Diagnostics.Append(errUserGroupIds.Errors()...)
		// property: name=user_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
		varUserIds, errUserIds := types.ListValueFrom(ctx, types.StringType, ans.UserOrGroup.UserIds)
		state.UserOrGroup.UserIds = varUserIds
		resp.Diagnostics.Append(errUserIds.Errors()...)
	}
	return true
}

func (r *qosPolicyRuleResource) doGet(ctx context.Context, state *rsModelPriorityPolicyRuleV2N2, savestate *rsModelPriorityPolicyRuleV2N2, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_qos_policy_rule",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_qos_policy_rule ID format", "Expected 2 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_qos_policy_rule"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.2/api/prioritypolicysets/{policy_set_id}/prioritypolicyrules/{policy_rule_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["policy_rule_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_qos_policy_rule", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_qos_policy_rule",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_qos_policy_rule from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=PriorityPolicyRuleV2N2
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.PriorityPolicyRuleV2N2
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PriorityPolicyRuleV2N2 in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=17
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, ans.AppDefIds)
	state.AppDefIds = varAppDefIds
	resp.Diagnostics.Append(errAppDefIds.Errors()...)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=dest_device_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDestDeviceIds, errDestDeviceIds := types.ListValueFrom(ctx, types.StringType, ans.DestDeviceIds)
	state.DestDeviceIds = varDestDeviceIds
	resp.Diagnostics.Append(errDestDeviceIds.Errors()...)
	// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
	state.DestinationPrefixesId = types.StringPointerValue(ans.DestinationPrefixesId)
	// property: name=dscp, type=REFERENCE macro=copy_to_state
	if ans.Dscp == nil {
		state.Dscp = nil
	} else {
		state.Dscp = &rsModelDSCP{}
		// copy_to_state: state=state.Dscp prefix=rsModel ans=ans.Dscp properties=1
		tflog.Debug(ctx, "copy_to_state state=state.Dscp prefix=rsModel ans=ans.Dscp")
		// property: name=value, type=INTEGER macro=copy_to_state
		state.Dscp.Value = types.Int64PointerValue(ans.Dscp.Value)
	}
	// property: name=enabled, type=BOOLEAN macro=copy_to_state
	state.Enabled = types.BoolPointerValue(ans.Enabled)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=network_context_id, type=STRING macro=copy_to_state
	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)
	// property: name=order_number, type=INTEGER macro=copy_to_state
	state.OrderNumber = types.Int64PointerValue(ans.OrderNumber)
	// property: name=priority_number, type=INTEGER macro=copy_to_state
	state.PriorityNumber = types.Int64PointerValue(ans.PriorityNumber)
	// property: name=source_prefixes_id, type=STRING macro=copy_to_state
	state.SourcePrefixesId = types.StringPointerValue(ans.SourcePrefixesId)
	// property: name=src_device_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varSrcDeviceIds, errSrcDeviceIds := types.ListValueFrom(ctx, types.StringType, ans.SrcDeviceIds)
	state.SrcDeviceIds = varSrcDeviceIds
	resp.Diagnostics.Append(errSrcDeviceIds.Errors()...)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=user_or_group, type=REFERENCE macro=copy_to_state
	if ans.UserOrGroup == nil {
		state.UserOrGroup = nil
	} else {
		state.UserOrGroup = &rsModelUserGroup{}
		// copy_to_state: state=state.UserOrGroup prefix=rsModel ans=ans.UserOrGroup properties=2
		tflog.Debug(ctx, "copy_to_state state=state.UserOrGroup prefix=rsModel ans=ans.UserOrGroup")
		// property: name=user_group_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
		varUserGroupIds, errUserGroupIds := types.ListValueFrom(ctx, types.StringType, ans.UserOrGroup.UserGroupIds)
		state.UserOrGroup.UserGroupIds = varUserGroupIds
		resp.Diagnostics.Append(errUserGroupIds.Errors()...)
		// property: name=user_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
		varUserIds, errUserIds := types.ListValueFrom(ctx, types.StringType, ans.UserOrGroup.UserIds)
		state.UserOrGroup.UserIds = varUserIds
		resp.Diagnostics.Append(errUserIds.Errors()...)
	}
	return true
}

func (r *qosPolicyRuleResource) doPut(ctx context.Context, plan *rsModelPriorityPolicyRuleV2N2, state *rsModelPriorityPolicyRuleV2N2, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_qos_policy_rule",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_qos_policy_rule", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_qos_policy_rule ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_qos_policy_rule"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.2/api/prioritypolicysets/{policy_set_id}/prioritypolicyrules/{policy_rule_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["policy_rule_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.PriorityPolicyRuleV2N2{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=17
	tflog.Debug(ctx, "copy_from_plan_or_state body=body prefix=rsModel state=state plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.AppDefIds = ListStringValueOrNil(ctx, plan.AppDefIds)
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=dest_device_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.DestDeviceIds = ListStringValueOrNil(ctx, plan.DestDeviceIds)
	// property: name=destination_prefixes_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.DestinationPrefixesId = ValueStringPointerFromPlanOrState(plan.DestinationPrefixesId, state.DestinationPrefixesId)
	} else {
		body.DestinationPrefixesId = StringValueOrNil(plan.DestinationPrefixesId)
	}
	// property: name=dscp, type=REFERENCE macro=copy_from_plan_or_state
	if plan.Dscp == nil {
		body.Dscp = nil
	} else {
		body.Dscp = &sdwan_schema.DSCP{}
		// copy_from_plan_or_state: body=body.Dscp prefix=rsModel state=state.Dscp plan=plan.Dscp properties=1
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.Dscp prefix=rsModel state=state.Dscp plan=plan.Dscp")
		// property: name=value, type=INTEGER macro=copy_from_plan_or_state
		if state.Dscp != nil {
			body.Dscp.Value = ValueInt64PointerFromPlanOrState(plan.Dscp.Value, state.Dscp.Value)
		} else {
			body.Dscp.Value = Int64ValueOrNil(plan.Dscp.Value)
		}
	}
	// property: name=enabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Enabled = ValueBoolPointerFromPlanOrState(plan.Enabled, state.Enabled)
	} else {
		body.Enabled = BoolValueOrNil(plan.Enabled)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=network_context_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.NetworkContextId = ValueStringPointerFromPlanOrState(plan.NetworkContextId, state.NetworkContextId)
	} else {
		body.NetworkContextId = StringValueOrNil(plan.NetworkContextId)
	}
	// property: name=order_number, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.OrderNumber = ValueInt64PointerFromPlanOrState(plan.OrderNumber, state.OrderNumber)
	} else {
		body.OrderNumber = Int64ValueOrNil(plan.OrderNumber)
	}
	// property: name=priority_number, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.PriorityNumber = ValueInt64PointerFromPlanOrState(plan.PriorityNumber, state.PriorityNumber)
	} else {
		body.PriorityNumber = Int64ValueOrNil(plan.PriorityNumber)
	}
	// property: name=source_prefixes_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.SourcePrefixesId = ValueStringPointerFromPlanOrState(plan.SourcePrefixesId, state.SourcePrefixesId)
	} else {
		body.SourcePrefixesId = StringValueOrNil(plan.SourcePrefixesId)
	}
	// property: name=src_device_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.SrcDeviceIds = ListStringValueOrNil(ctx, plan.SrcDeviceIds)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=user_or_group, type=REFERENCE macro=copy_from_plan_or_state
	if plan.UserOrGroup == nil {
		body.UserOrGroup = nil
	} else {
		body.UserOrGroup = &sdwan_schema.UserGroup{}
		// copy_from_plan_or_state: body=body.UserOrGroup prefix=rsModel state=state.UserOrGroup plan=plan.UserOrGroup properties=2
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.UserOrGroup prefix=rsModel state=state.UserOrGroup plan=plan.UserOrGroup")
		// property: name=user_group_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.UserOrGroup.UserGroupIds = ListStringValueOrNil(ctx, plan.UserOrGroup.UserGroupIds)
		// property: name=user_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.UserOrGroup.UserIds = ListStringValueOrNil(ctx, plan.UserOrGroup.UserIds)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct PriorityPolicyRuleV2N2 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_qos_policy_rule", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_qos_policy_rule",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_qos_policy_rule", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_qos_policy_rule",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_qos_policy_rule", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.PriorityPolicyRuleV2N2
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PriorityPolicyRuleV2N2 in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=PriorityPolicyRuleV2N2
	// copy_to_state: state=state prefix=rsModel ans=ans properties=17
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, ans.AppDefIds)
	state.AppDefIds = varAppDefIds
	resp.Diagnostics.Append(errAppDefIds.Errors()...)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=dest_device_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDestDeviceIds, errDestDeviceIds := types.ListValueFrom(ctx, types.StringType, ans.DestDeviceIds)
	state.DestDeviceIds = varDestDeviceIds
	resp.Diagnostics.Append(errDestDeviceIds.Errors()...)
	// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
	state.DestinationPrefixesId = types.StringPointerValue(ans.DestinationPrefixesId)
	// property: name=dscp, type=REFERENCE macro=copy_to_state
	if ans.Dscp == nil {
		state.Dscp = nil
	} else {
		state.Dscp = &rsModelDSCP{}
		// copy_to_state: state=state.Dscp prefix=rsModel ans=ans.Dscp properties=1
		tflog.Debug(ctx, "copy_to_state state=state.Dscp prefix=rsModel ans=ans.Dscp")
		// property: name=value, type=INTEGER macro=copy_to_state
		state.Dscp.Value = types.Int64PointerValue(ans.Dscp.Value)
	}
	// property: name=enabled, type=BOOLEAN macro=copy_to_state
	state.Enabled = types.BoolPointerValue(ans.Enabled)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=network_context_id, type=STRING macro=copy_to_state
	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)
	// property: name=order_number, type=INTEGER macro=copy_to_state
	state.OrderNumber = types.Int64PointerValue(ans.OrderNumber)
	// property: name=priority_number, type=INTEGER macro=copy_to_state
	state.PriorityNumber = types.Int64PointerValue(ans.PriorityNumber)
	// property: name=source_prefixes_id, type=STRING macro=copy_to_state
	state.SourcePrefixesId = types.StringPointerValue(ans.SourcePrefixesId)
	// property: name=src_device_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varSrcDeviceIds, errSrcDeviceIds := types.ListValueFrom(ctx, types.StringType, ans.SrcDeviceIds)
	state.SrcDeviceIds = varSrcDeviceIds
	resp.Diagnostics.Append(errSrcDeviceIds.Errors()...)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=user_or_group, type=REFERENCE macro=copy_to_state
	if ans.UserOrGroup == nil {
		state.UserOrGroup = nil
	} else {
		state.UserOrGroup = &rsModelUserGroup{}
		// copy_to_state: state=state.UserOrGroup prefix=rsModel ans=ans.UserOrGroup properties=2
		tflog.Debug(ctx, "copy_to_state state=state.UserOrGroup prefix=rsModel ans=ans.UserOrGroup")
		// property: name=user_group_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
		varUserGroupIds, errUserGroupIds := types.ListValueFrom(ctx, types.StringType, ans.UserOrGroup.UserGroupIds)
		state.UserOrGroup.UserGroupIds = varUserGroupIds
		resp.Diagnostics.Append(errUserGroupIds.Errors()...)
		// property: name=user_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
		varUserIds, errUserIds := types.ListValueFrom(ctx, types.StringType, ans.UserOrGroup.UserIds)
		state.UserOrGroup.UserIds = varUserIds
		resp.Diagnostics.Append(errUserIds.Errors()...)
	}
	return true
}

func (r *qosPolicyRuleResource) doDelete(ctx context.Context, state *rsModelPriorityPolicyRuleV2N2, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_qos_policy_rule",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_qos_policy_rule ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_qos_policy_rule"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.2/api/prioritypolicysets/{policy_set_id}/prioritypolicyrules/{policy_rule_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["policy_rule_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_qos_policy_rule", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *qosPolicyRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_qos_policy_rule")
	var plan rsModelPriorityPolicyRuleV2N2
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelPriorityPolicyRuleV2N2
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *qosPolicyRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_qos_policy_rule")
	var savestate, state rsModelPriorityPolicyRuleV2N2
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *qosPolicyRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_qos_policy_rule")
	var plan, state rsModelPriorityPolicyRuleV2N2
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *qosPolicyRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_qos_policy_rule")
	var state rsModelPriorityPolicyRuleV2N2
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *qosPolicyRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
