package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	ljRBvXJ "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v20/api/bulkconfigurations/sitetemplates"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source.
var (
	_ datasource.DataSource              = &bulkConfigCreateDataSource{}
	_ datasource.DataSourceWithConfigure = &bulkConfigCreateDataSource{}
)

func NewBulkConfigCreateDataSource() datasource.DataSource {
	return &bulkConfigCreateDataSource{}
}

type bulkConfigCreateDataSource struct {
	client *sdwan.Client
}

// bulkConfigCreateDsModel is the model.
type bulkConfigCreateDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	SiteTemplateId types.String `tfsdk:"site_template_id"`

	// Output.
	Data                types.String `tfsdk:"data"`
	Etag                types.Int64  `tfsdk:"etag"`
	Id                  types.String `tfsdk:"id"`
	SiteId              types.String `tfsdk:"site_id"`
	SiteType            types.String `tfsdk:"site_type"`
	TemplateDescription types.String `tfsdk:"template_description"`
	TemplateName        types.String `tfsdk:"template_name"`
	VariableMap         types.Bool   `tfsdk:"variable_map"`
}

// Metadata returns the data source type name.
func (d *bulkConfigCreateDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_bulk_config_create"
}

// Schema defines the schema for this data source.
func (d *bulkConfigCreateDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"site_template_id":true} outputs:map[string]bool{"data":true, "etag":true, "id":true, "site_id":true, "site_type":true, "template_description":true, "template_name":true, "tfid":true, "variable_map":true} forceNew:map[string]bool{"site_template_id":true}
			"data": dsschema.StringAttribute{
				Description: "Data.",
				Computed:    true,
			},
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id: Digits(fraction = 0, integer = 50, SITEID_INVALID) .",
				Computed:    true,
			},
			"site_template_id": dsschema.StringAttribute{
				Description: "Site Template Id.",
				Required:    true,
			},
			"site_type": dsschema.StringAttribute{
				Description: "Site Type: Required(error = SITE_ROLE_MISSING: Site role missing.) ValidateEnum(enumClass = classOf[ElementClusterRole], error = INVALID_SITE_TYPE: Invalid site type, nullAllowed = false) .",
				Computed:    true,
			},
			"template_description": dsschema.StringAttribute{
				Description: "Template Description: Size(max = 256, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Computed:    true,
			},
			"template_name": dsschema.StringAttribute{
				Description: "Template Name: Required(error = TEMPLATE_NAME_REQUIRED: Template name missing) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"variable_map": dsschema.BoolAttribute{
				Description: "The VariableMap param. Default: `false`.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *bulkConfigCreateDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *bulkConfigCreateDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state bulkConfigCreateDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_bulk_config_create",
		"terraform_provider_function": "Read",
		"site_template_id":            state.SiteTemplateId.ValueString(),
	})

	// Prepare to run the command.
	svc := ljRBvXJ.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.ReadInput{}

	input.SiteTemplateId = StringValue(state.SiteTemplateId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteTemplateId)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Data = types.StringPointerValue(ans.Data)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.SiteId = types.StringPointerValue(ans.SiteId)

	state.SiteType = types.StringValue(ans.SiteType)

	state.TemplateDescription = types.StringPointerValue(ans.TemplateDescription)

	state.TemplateName = types.StringValue(ans.TemplateName)

	if ans.VariableMap != nil {
		state.VariableMap = types.BoolValue(true)
	} else {
		state.VariableMap = types.BoolPointerValue(nil)
	}
	//state.VariableMap = types.BoolValue(ans.VariableMap != nil)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
