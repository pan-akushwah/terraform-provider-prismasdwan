package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=6)
// | Computed Resource Name=appdefs_overrides
// +-----------------------------------------------------------------
// | DSCP HasID=false
// | IPRuleV2 HasID=false
// | Port HasID=false
// | UdpRuleV2 HasID=false
// | TcpRuleV2 HasID=false
// | AppdefOverrideScreenV2N3 HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &appDefOverrideResource{}
	_ resource.ResourceWithConfigure   = &appDefOverrideResource{}
	_ resource.ResourceWithImportState = &appDefOverrideResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewAppDefOverrideResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewAppDefOverrideResource() resource.Resource {
	return &appDefOverrideResource{}
}

type appDefOverrideResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *appDefOverrideResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_app_def_override"
}

// Schema defines the schema for this data source.
func (r *appDefOverrideResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=AppdefOverrideScreenV2N3
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=aggregate_flows, type=BOOLEAN macro=rss_schema
			"aggregate_flows": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=aggregate_flows, type=BOOLEAN macro=rss_schema
			// property: name=app_unreachability_detection, type=BOOLEAN macro=rss_schema
			"app_unreachability_detection": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=app_unreachability_detection, type=BOOLEAN macro=rss_schema
			// property: name=category, type=STRING macro=rss_schema
			"category": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=category, type=STRING macro=rss_schema
			// property: name=conn_idle_timeout, type=INTEGER macro=rss_schema
			"conn_idle_timeout": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=conn_idle_timeout, type=INTEGER macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=domains, type=ARRAY_PRIMITIVE macro=rss_schema
			"domains": rsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=domains, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=ingress_traffic_pct, type=INTEGER macro=rss_schema
			"ingress_traffic_pct": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=ingress_traffic_pct, type=INTEGER macro=rss_schema
			// property: name=ip_rules, type=ARRAY_REFERENCE macro=rss_schema
			"ip_rules": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=dest_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						"dest_filters": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=dest_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
						"dest_prefixes": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=dscp, type=REFERENCE macro=rss_schema
						"dscp": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// property: name=value, type=INTEGER macro=rss_schema
								"value": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						// property: name=protocol, type=STRING macro=rss_schema
						"protocol": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=protocol, type=STRING macro=rss_schema
						// property: name=src_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						"src_filters": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=src_filters, type=ARRAY_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=src_filters, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=override_default_ip_rules, type=BOOLEAN macro=rss_schema
			"override_default_ip_rules": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=override_default_ip_rules, type=BOOLEAN macro=rss_schema
			// property: name=override_default_tcp_rules, type=BOOLEAN macro=rss_schema
			"override_default_tcp_rules": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=override_default_tcp_rules, type=BOOLEAN macro=rss_schema
			// property: name=override_default_udp_rules, type=BOOLEAN macro=rss_schema
			"override_default_udp_rules": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=override_default_udp_rules, type=BOOLEAN macro=rss_schema
			// property: name=override_domains, type=BOOLEAN macro=rss_schema
			"override_domains": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=override_domains, type=BOOLEAN macro=rss_schema
			// property: name=overrides_disable, type=BOOLEAN macro=rss_schema
			"overrides_disable": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=overrides_disable, type=BOOLEAN macro=rss_schema
			// property: name=p_category, type=STRING macro=rss_schema
			"p_category": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=p_category, type=STRING macro=rss_schema
			// property: name=path_affinity, type=STRING macro=rss_schema
			"path_affinity": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=path_affinity, type=STRING macro=rss_schema
			// property: name=session_timeout, type=INTEGER macro=rss_schema
			"session_timeout": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=session_timeout, type=INTEGER macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=tcp_rules, type=ARRAY_REFERENCE macro=rss_schema
			"tcp_rules": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=client_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						"client_filters": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=client_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=client_port, type=REFERENCE macro=rss_schema
						"client_port": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// property: name=end, type=INTEGER macro=rss_schema
								"end": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=end, type=INTEGER macro=rss_schema
								// property: name=start, type=INTEGER macro=rss_schema
								"start": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
						// property: name=dscp, type=REFERENCE macro=rss_schema
						"dscp": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// property: name=value, type=INTEGER macro=rss_schema
								"value": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						// property: name=server_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						"server_filters": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=server_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=server_port, type=REFERENCE macro=rss_schema
						"server_port": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// property: name=end, type=INTEGER macro=rss_schema
								"end": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=end, type=INTEGER macro=rss_schema
								// property: name=start, type=INTEGER macro=rss_schema
								"start": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
						// property: name=server_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
						"server_prefixes": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=server_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=server_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=transfer_type, type=STRING macro=rss_schema
			"transfer_type": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=transfer_type, type=STRING macro=rss_schema
			// property: name=udp_rules, type=ARRAY_REFERENCE macro=rss_schema
			"udp_rules": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
						"dest_prefixes": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=dscp, type=REFERENCE macro=rss_schema
						"dscp": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// property: name=value, type=INTEGER macro=rss_schema
								"value": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						// property: name=udp_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						"udp_filters": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=udp_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=udp_port, type=REFERENCE macro=rss_schema
						"udp_port": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// property: name=end, type=INTEGER macro=rss_schema
								"end": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=end, type=INTEGER macro=rss_schema
								// property: name=start, type=INTEGER macro=rss_schema
								"start": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
			// property: name=use_parentapp_network_policy, type=BOOLEAN macro=rss_schema
			"use_parentapp_network_policy": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=use_parentapp_network_policy, type=BOOLEAN macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *appDefOverrideResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *appDefOverrideResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *appDefOverrideResource) doPost(ctx context.Context, plan *rsModelAppdefOverrideScreenV2N3, state *rsModelAppdefOverrideScreenV2N3, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_app_def_override")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_app_def_override",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_app_def_override"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.3/api/appdefs/{appdef_id}/overrides"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, plan.TfParameters)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.AppdefOverrideScreenV2N3{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=24
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=aggregate_flows, type=BOOLEAN macro=copy_from_plan
	body.AggregateFlows = BoolValueOrNil(plan.AggregateFlows)
	// property: name=app_unreachability_detection, type=BOOLEAN macro=copy_from_plan
	body.AppUnreachabilityDetection = BoolValueOrNil(plan.AppUnreachabilityDetection)
	// property: name=category, type=STRING macro=copy_from_plan
	body.Category = StringValueOrNil(plan.Category)
	// property: name=conn_idle_timeout, type=INTEGER macro=copy_from_plan
	body.ConnIdleTimeout = Int64ValueOrNil(plan.ConnIdleTimeout)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=domains, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.Domains = ListStringValueOrNil(ctx, plan.Domains)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=ingress_traffic_pct, type=INTEGER macro=copy_from_plan
	body.IngressTrafficPct = Int64ValueOrNil(plan.IngressTrafficPct)
	// property: name=ip_rules, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.IpRules == nil {
		body.IpRules = nil
	} else if len(plan.IpRules) == 0 {
		body.IpRules = []sdwan_schema.IPRuleV2{}
	} else {
		body.IpRules = make([]sdwan_schema.IPRuleV2, 0, len(plan.IpRules))
		for varLoopIpRulesIndex, varLoopIpRules := range plan.IpRules {
			// add a new item
			body.IpRules = append(body.IpRules, sdwan_schema.IPRuleV2{})
			// copy_from_plan: body=body.IpRules[varLoopIpRulesIndex] prefix=rsModel plan=varLoopIpRules properties=5
			// property: name=dest_filters, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.IpRules[varLoopIpRulesIndex].DestFilters = ListStringValueOrNil(ctx, varLoopIpRules.DestFilters)
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.IpRules[varLoopIpRulesIndex].DestPrefixes = ListStringValueOrNil(ctx, varLoopIpRules.DestPrefixes)
			// property: name=dscp, type=REFERENCE macro=copy_from_plan
			if varLoopIpRules.Dscp != nil {
				body.IpRules[varLoopIpRulesIndex].Dscp = &sdwan_schema.DSCP{}
				// copy_from_plan: body=body.IpRules[varLoopIpRulesIndex].Dscp prefix=rsModel plan=varLoopIpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_from_plan
				body.IpRules[varLoopIpRulesIndex].Dscp.Value = Int64ValueOrNil(varLoopIpRules.Dscp.Value)
			}
			// property: name=protocol, type=STRING macro=copy_from_plan
			body.IpRules[varLoopIpRulesIndex].Protocol = StringValueOrNil(varLoopIpRules.Protocol)
			// property: name=src_filters, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.IpRules[varLoopIpRulesIndex].SrcFilters = ListStringValueOrNil(ctx, varLoopIpRules.SrcFilters)
		}
	}
	// property: name=override_default_ip_rules, type=BOOLEAN macro=copy_from_plan
	body.OverrideDefaultIpRules = BoolValueOrNil(plan.OverrideDefaultIpRules)
	// property: name=override_default_tcp_rules, type=BOOLEAN macro=copy_from_plan
	body.OverrideDefaultTcpRules = BoolValueOrNil(plan.OverrideDefaultTcpRules)
	// property: name=override_default_udp_rules, type=BOOLEAN macro=copy_from_plan
	body.OverrideDefaultUdpRules = BoolValueOrNil(plan.OverrideDefaultUdpRules)
	// property: name=override_domains, type=BOOLEAN macro=copy_from_plan
	body.OverrideDomains = BoolValueOrNil(plan.OverrideDomains)
	// property: name=overrides_disable, type=BOOLEAN macro=copy_from_plan
	body.OverridesDisable = BoolValueOrNil(plan.OverridesDisable)
	// property: name=p_category, type=STRING macro=copy_from_plan
	body.PCategory = StringValueOrNil(plan.PCategory)
	// property: name=path_affinity, type=STRING macro=copy_from_plan
	body.PathAffinity = StringValueOrNil(plan.PathAffinity)
	// property: name=session_timeout, type=INTEGER macro=copy_from_plan
	body.SessionTimeout = Int64ValueOrNil(plan.SessionTimeout)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=tcp_rules, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.TcpRules == nil {
		body.TcpRules = nil
	} else if len(plan.TcpRules) == 0 {
		body.TcpRules = []sdwan_schema.TcpRuleV2{}
	} else {
		body.TcpRules = make([]sdwan_schema.TcpRuleV2, 0, len(plan.TcpRules))
		for varLoopTcpRulesIndex, varLoopTcpRules := range plan.TcpRules {
			// add a new item
			body.TcpRules = append(body.TcpRules, sdwan_schema.TcpRuleV2{})
			// copy_from_plan: body=body.TcpRules[varLoopTcpRulesIndex] prefix=rsModel plan=varLoopTcpRules properties=6
			// property: name=client_filters, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.TcpRules[varLoopTcpRulesIndex].ClientFilters = ListStringValueOrNil(ctx, varLoopTcpRules.ClientFilters)
			// property: name=client_port, type=REFERENCE macro=copy_from_plan
			if varLoopTcpRules.ClientPort != nil {
				body.TcpRules[varLoopTcpRulesIndex].ClientPort = &sdwan_schema.Port{}
				// copy_from_plan: body=body.TcpRules[varLoopTcpRulesIndex].ClientPort prefix=rsModel plan=varLoopTcpRules.ClientPort properties=2
				// property: name=end, type=INTEGER macro=copy_from_plan
				body.TcpRules[varLoopTcpRulesIndex].ClientPort.End = Int64ValueOrNil(varLoopTcpRules.ClientPort.End)
				// property: name=start, type=INTEGER macro=copy_from_plan
				body.TcpRules[varLoopTcpRulesIndex].ClientPort.Start = Int64ValueOrNil(varLoopTcpRules.ClientPort.Start)
			}
			// property: name=dscp, type=REFERENCE macro=copy_from_plan
			if varLoopTcpRules.Dscp != nil {
				body.TcpRules[varLoopTcpRulesIndex].Dscp = &sdwan_schema.DSCP{}
				// copy_from_plan: body=body.TcpRules[varLoopTcpRulesIndex].Dscp prefix=rsModel plan=varLoopTcpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_from_plan
				body.TcpRules[varLoopTcpRulesIndex].Dscp.Value = Int64ValueOrNil(varLoopTcpRules.Dscp.Value)
			}
			// property: name=server_filters, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.TcpRules[varLoopTcpRulesIndex].ServerFilters = ListStringValueOrNil(ctx, varLoopTcpRules.ServerFilters)
			// property: name=server_port, type=REFERENCE macro=copy_from_plan
			if varLoopTcpRules.ServerPort != nil {
				body.TcpRules[varLoopTcpRulesIndex].ServerPort = &sdwan_schema.Port{}
				// copy_from_plan: body=body.TcpRules[varLoopTcpRulesIndex].ServerPort prefix=rsModel plan=varLoopTcpRules.ServerPort properties=2
				// property: name=end, type=INTEGER macro=copy_from_plan
				body.TcpRules[varLoopTcpRulesIndex].ServerPort.End = Int64ValueOrNil(varLoopTcpRules.ServerPort.End)
				// property: name=start, type=INTEGER macro=copy_from_plan
				body.TcpRules[varLoopTcpRulesIndex].ServerPort.Start = Int64ValueOrNil(varLoopTcpRules.ServerPort.Start)
			}
			// property: name=server_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.TcpRules[varLoopTcpRulesIndex].ServerPrefixes = ListStringValueOrNil(ctx, varLoopTcpRules.ServerPrefixes)
		}
	}
	// property: name=transfer_type, type=STRING macro=copy_from_plan
	body.TransferType = StringValueOrNil(plan.TransferType)
	// property: name=udp_rules, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.UdpRules == nil {
		body.UdpRules = nil
	} else if len(plan.UdpRules) == 0 {
		body.UdpRules = []sdwan_schema.UdpRuleV2{}
	} else {
		body.UdpRules = make([]sdwan_schema.UdpRuleV2, 0, len(plan.UdpRules))
		for varLoopUdpRulesIndex, varLoopUdpRules := range plan.UdpRules {
			// add a new item
			body.UdpRules = append(body.UdpRules, sdwan_schema.UdpRuleV2{})
			// copy_from_plan: body=body.UdpRules[varLoopUdpRulesIndex] prefix=rsModel plan=varLoopUdpRules properties=4
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.UdpRules[varLoopUdpRulesIndex].DestPrefixes = ListStringValueOrNil(ctx, varLoopUdpRules.DestPrefixes)
			// property: name=dscp, type=REFERENCE macro=copy_from_plan
			if varLoopUdpRules.Dscp != nil {
				body.UdpRules[varLoopUdpRulesIndex].Dscp = &sdwan_schema.DSCP{}
				// copy_from_plan: body=body.UdpRules[varLoopUdpRulesIndex].Dscp prefix=rsModel plan=varLoopUdpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_from_plan
				body.UdpRules[varLoopUdpRulesIndex].Dscp.Value = Int64ValueOrNil(varLoopUdpRules.Dscp.Value)
			}
			// property: name=udp_filters, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.UdpRules[varLoopUdpRulesIndex].UdpFilters = ListStringValueOrNil(ctx, varLoopUdpRules.UdpFilters)
			// property: name=udp_port, type=REFERENCE macro=copy_from_plan
			if varLoopUdpRules.UdpPort != nil {
				body.UdpRules[varLoopUdpRulesIndex].UdpPort = &sdwan_schema.Port{}
				// copy_from_plan: body=body.UdpRules[varLoopUdpRulesIndex].UdpPort prefix=rsModel plan=varLoopUdpRules.UdpPort properties=2
				// property: name=end, type=INTEGER macro=copy_from_plan
				body.UdpRules[varLoopUdpRulesIndex].UdpPort.End = Int64ValueOrNil(varLoopUdpRules.UdpPort.End)
				// property: name=start, type=INTEGER macro=copy_from_plan
				body.UdpRules[varLoopUdpRulesIndex].UdpPort.Start = Int64ValueOrNil(varLoopUdpRules.UdpPort.Start)
			}
		}
	}
	// property: name=use_parentapp_network_policy, type=BOOLEAN macro=copy_from_plan
	body.UseParentappNetworkPolicy = BoolValueOrNil(plan.UseParentappNetworkPolicy)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct AppdefOverrideScreenV2N3 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_app_def_override", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_app_def_override",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_app_def_override", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_app_def_override",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_app_def_override", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.AppdefOverrideScreenV2N3
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to AppdefOverrideScreenV2N3 in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_app_def_override with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=AppdefOverrideScreenV2N3
	// copy_to_state: state=state prefix=rsModel ans=ans properties=24
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=aggregate_flows, type=BOOLEAN macro=copy_to_state
	state.AggregateFlows = types.BoolPointerValue(ans.AggregateFlows)
	// property: name=app_unreachability_detection, type=BOOLEAN macro=copy_to_state
	state.AppUnreachabilityDetection = types.BoolPointerValue(ans.AppUnreachabilityDetection)
	// property: name=category, type=STRING macro=copy_to_state
	state.Category = types.StringPointerValue(ans.Category)
	// property: name=conn_idle_timeout, type=INTEGER macro=copy_to_state
	state.ConnIdleTimeout = types.Int64PointerValue(ans.ConnIdleTimeout)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=domains, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDomains, errDomains := types.ListValueFrom(ctx, types.StringType, ans.Domains)
	state.Domains = varDomains
	resp.Diagnostics.Append(errDomains.Errors()...)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ingress_traffic_pct, type=INTEGER macro=copy_to_state
	state.IngressTrafficPct = types.Int64PointerValue(ans.IngressTrafficPct)
	// property: name=ip_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.IpRules == nil {
		state.IpRules = nil
	} else if len(ans.IpRules) == 0 {
		state.IpRules = []rsModelIPRuleV2{}
	} else {
		state.IpRules = make([]rsModelIPRuleV2, 0, len(ans.IpRules))
		for varLoopIpRulesIndex, varLoopIpRules := range ans.IpRules {
			// add a new item
			state.IpRules = append(state.IpRules, rsModelIPRuleV2{})
			// copy_to_state: state=state.IpRules[varLoopIpRulesIndex] prefix=rsModel ans=varLoopIpRules properties=5
			// property: name=dest_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestFilters, errDestFilters := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.DestFilters)
			state.IpRules[varLoopIpRulesIndex].DestFilters = varDestFilters
			resp.Diagnostics.Append(errDestFilters.Errors()...)
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestPrefixes, errDestPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.DestPrefixes)
			state.IpRules[varLoopIpRulesIndex].DestPrefixes = varDestPrefixes
			resp.Diagnostics.Append(errDestPrefixes.Errors()...)
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopIpRules.Dscp == nil {
				state.IpRules[varLoopIpRulesIndex].Dscp = nil
			} else {
				state.IpRules[varLoopIpRulesIndex].Dscp = &rsModelDSCP{}
				// copy_to_state: state=state.IpRules[varLoopIpRulesIndex].Dscp prefix=rsModel ans=varLoopIpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_to_state
				state.IpRules[varLoopIpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopIpRules.Dscp.Value)
			}
			// property: name=protocol, type=STRING macro=copy_to_state
			state.IpRules[varLoopIpRulesIndex].Protocol = types.StringPointerValue(varLoopIpRules.Protocol)
			// property: name=src_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varSrcFilters, errSrcFilters := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.SrcFilters)
			state.IpRules[varLoopIpRulesIndex].SrcFilters = varSrcFilters
			resp.Diagnostics.Append(errSrcFilters.Errors()...)
		}
	}
	// property: name=override_default_ip_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultIpRules = types.BoolPointerValue(ans.OverrideDefaultIpRules)
	// property: name=override_default_tcp_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultTcpRules = types.BoolPointerValue(ans.OverrideDefaultTcpRules)
	// property: name=override_default_udp_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultUdpRules = types.BoolPointerValue(ans.OverrideDefaultUdpRules)
	// property: name=override_domains, type=BOOLEAN macro=copy_to_state
	state.OverrideDomains = types.BoolPointerValue(ans.OverrideDomains)
	// property: name=overrides_disable, type=BOOLEAN macro=copy_to_state
	state.OverridesDisable = types.BoolPointerValue(ans.OverridesDisable)
	// property: name=p_category, type=STRING macro=copy_to_state
	state.PCategory = types.StringPointerValue(ans.PCategory)
	// property: name=path_affinity, type=STRING macro=copy_to_state
	state.PathAffinity = types.StringPointerValue(ans.PathAffinity)
	// property: name=session_timeout, type=INTEGER macro=copy_to_state
	state.SessionTimeout = types.Int64PointerValue(ans.SessionTimeout)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=tcp_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.TcpRules == nil {
		state.TcpRules = nil
	} else if len(ans.TcpRules) == 0 {
		state.TcpRules = []rsModelTcpRuleV2{}
	} else {
		state.TcpRules = make([]rsModelTcpRuleV2, 0, len(ans.TcpRules))
		for varLoopTcpRulesIndex, varLoopTcpRules := range ans.TcpRules {
			// add a new item
			state.TcpRules = append(state.TcpRules, rsModelTcpRuleV2{})
			// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex] prefix=rsModel ans=varLoopTcpRules properties=6
			// property: name=client_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varClientFilters, errClientFilters := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ClientFilters)
			state.TcpRules[varLoopTcpRulesIndex].ClientFilters = varClientFilters
			resp.Diagnostics.Append(errClientFilters.Errors()...)
			// property: name=client_port, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.ClientPort == nil {
				state.TcpRules[varLoopTcpRulesIndex].ClientPort = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].ClientPort = &rsModelPort{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].ClientPort prefix=rsModel ans=varLoopTcpRules.ClientPort properties=2
				// property: name=end, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ClientPort.End = types.Int64PointerValue(varLoopTcpRules.ClientPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ClientPort.Start = types.Int64PointerValue(varLoopTcpRules.ClientPort.Start)
			}
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.Dscp == nil {
				state.TcpRules[varLoopTcpRulesIndex].Dscp = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].Dscp = &rsModelDSCP{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].Dscp prefix=rsModel ans=varLoopTcpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopTcpRules.Dscp.Value)
			}
			// property: name=server_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerFilters, errServerFilters := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ServerFilters)
			state.TcpRules[varLoopTcpRulesIndex].ServerFilters = varServerFilters
			resp.Diagnostics.Append(errServerFilters.Errors()...)
			// property: name=server_port, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.ServerPort == nil {
				state.TcpRules[varLoopTcpRulesIndex].ServerPort = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].ServerPort = &rsModelPort{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].ServerPort prefix=rsModel ans=varLoopTcpRules.ServerPort properties=2
				// property: name=end, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ServerPort.End = types.Int64PointerValue(varLoopTcpRules.ServerPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ServerPort.Start = types.Int64PointerValue(varLoopTcpRules.ServerPort.Start)
			}
			// property: name=server_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerPrefixes, errServerPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ServerPrefixes)
			state.TcpRules[varLoopTcpRulesIndex].ServerPrefixes = varServerPrefixes
			resp.Diagnostics.Append(errServerPrefixes.Errors()...)
		}
	}
	// property: name=transfer_type, type=STRING macro=copy_to_state
	state.TransferType = types.StringPointerValue(ans.TransferType)
	// property: name=udp_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.UdpRules == nil {
		state.UdpRules = nil
	} else if len(ans.UdpRules) == 0 {
		state.UdpRules = []rsModelUdpRuleV2{}
	} else {
		state.UdpRules = make([]rsModelUdpRuleV2, 0, len(ans.UdpRules))
		for varLoopUdpRulesIndex, varLoopUdpRules := range ans.UdpRules {
			// add a new item
			state.UdpRules = append(state.UdpRules, rsModelUdpRuleV2{})
			// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex] prefix=rsModel ans=varLoopUdpRules properties=4
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestPrefixes, errDestPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopUdpRules.DestPrefixes)
			state.UdpRules[varLoopUdpRulesIndex].DestPrefixes = varDestPrefixes
			resp.Diagnostics.Append(errDestPrefixes.Errors()...)
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopUdpRules.Dscp == nil {
				state.UdpRules[varLoopUdpRulesIndex].Dscp = nil
			} else {
				state.UdpRules[varLoopUdpRulesIndex].Dscp = &rsModelDSCP{}
				// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex].Dscp prefix=rsModel ans=varLoopUdpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopUdpRules.Dscp.Value)
			}
			// property: name=udp_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varUdpFilters, errUdpFilters := types.ListValueFrom(ctx, types.StringType, varLoopUdpRules.UdpFilters)
			state.UdpRules[varLoopUdpRulesIndex].UdpFilters = varUdpFilters
			resp.Diagnostics.Append(errUdpFilters.Errors()...)
			// property: name=udp_port, type=REFERENCE macro=copy_to_state
			if varLoopUdpRules.UdpPort == nil {
				state.UdpRules[varLoopUdpRulesIndex].UdpPort = nil
			} else {
				state.UdpRules[varLoopUdpRulesIndex].UdpPort = &rsModelPort{}
				// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex].UdpPort prefix=rsModel ans=varLoopUdpRules.UdpPort properties=2
				// property: name=end, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].UdpPort.End = types.Int64PointerValue(varLoopUdpRules.UdpPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].UdpPort.Start = types.Int64PointerValue(varLoopUdpRules.UdpPort.Start)
			}
		}
	}
	// property: name=use_parentapp_network_policy, type=BOOLEAN macro=copy_to_state
	state.UseParentappNetworkPolicy = types.BoolPointerValue(ans.UseParentappNetworkPolicy)
	return true
}

func (r *appDefOverrideResource) doGet(ctx context.Context, state *rsModelAppdefOverrideScreenV2N3, savestate *rsModelAppdefOverrideScreenV2N3, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_app_def_override",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_app_def_override ID format", "Expected 2 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_app_def_override"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.3/api/appdefs/{appdef_id}/overrides/{override_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["override_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_app_def_override", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_app_def_override",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_app_def_override from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=AppdefOverrideScreenV2N3
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.AppdefOverrideScreenV2N3
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to AppdefOverrideScreenV2N3 in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=24
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=aggregate_flows, type=BOOLEAN macro=copy_to_state
	state.AggregateFlows = types.BoolPointerValue(ans.AggregateFlows)
	// property: name=app_unreachability_detection, type=BOOLEAN macro=copy_to_state
	state.AppUnreachabilityDetection = types.BoolPointerValue(ans.AppUnreachabilityDetection)
	// property: name=category, type=STRING macro=copy_to_state
	state.Category = types.StringPointerValue(ans.Category)
	// property: name=conn_idle_timeout, type=INTEGER macro=copy_to_state
	state.ConnIdleTimeout = types.Int64PointerValue(ans.ConnIdleTimeout)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=domains, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDomains, errDomains := types.ListValueFrom(ctx, types.StringType, ans.Domains)
	state.Domains = varDomains
	resp.Diagnostics.Append(errDomains.Errors()...)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ingress_traffic_pct, type=INTEGER macro=copy_to_state
	state.IngressTrafficPct = types.Int64PointerValue(ans.IngressTrafficPct)
	// property: name=ip_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.IpRules == nil {
		state.IpRules = nil
	} else if len(ans.IpRules) == 0 {
		state.IpRules = []rsModelIPRuleV2{}
	} else {
		state.IpRules = make([]rsModelIPRuleV2, 0, len(ans.IpRules))
		for varLoopIpRulesIndex, varLoopIpRules := range ans.IpRules {
			// add a new item
			state.IpRules = append(state.IpRules, rsModelIPRuleV2{})
			// copy_to_state: state=state.IpRules[varLoopIpRulesIndex] prefix=rsModel ans=varLoopIpRules properties=5
			// property: name=dest_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestFilters, errDestFilters := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.DestFilters)
			state.IpRules[varLoopIpRulesIndex].DestFilters = varDestFilters
			resp.Diagnostics.Append(errDestFilters.Errors()...)
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestPrefixes, errDestPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.DestPrefixes)
			state.IpRules[varLoopIpRulesIndex].DestPrefixes = varDestPrefixes
			resp.Diagnostics.Append(errDestPrefixes.Errors()...)
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopIpRules.Dscp == nil {
				state.IpRules[varLoopIpRulesIndex].Dscp = nil
			} else {
				state.IpRules[varLoopIpRulesIndex].Dscp = &rsModelDSCP{}
				// copy_to_state: state=state.IpRules[varLoopIpRulesIndex].Dscp prefix=rsModel ans=varLoopIpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_to_state
				state.IpRules[varLoopIpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopIpRules.Dscp.Value)
			}
			// property: name=protocol, type=STRING macro=copy_to_state
			state.IpRules[varLoopIpRulesIndex].Protocol = types.StringPointerValue(varLoopIpRules.Protocol)
			// property: name=src_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varSrcFilters, errSrcFilters := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.SrcFilters)
			state.IpRules[varLoopIpRulesIndex].SrcFilters = varSrcFilters
			resp.Diagnostics.Append(errSrcFilters.Errors()...)
		}
	}
	// property: name=override_default_ip_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultIpRules = types.BoolPointerValue(ans.OverrideDefaultIpRules)
	// property: name=override_default_tcp_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultTcpRules = types.BoolPointerValue(ans.OverrideDefaultTcpRules)
	// property: name=override_default_udp_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultUdpRules = types.BoolPointerValue(ans.OverrideDefaultUdpRules)
	// property: name=override_domains, type=BOOLEAN macro=copy_to_state
	state.OverrideDomains = types.BoolPointerValue(ans.OverrideDomains)
	// property: name=overrides_disable, type=BOOLEAN macro=copy_to_state
	state.OverridesDisable = types.BoolPointerValue(ans.OverridesDisable)
	// property: name=p_category, type=STRING macro=copy_to_state
	state.PCategory = types.StringPointerValue(ans.PCategory)
	// property: name=path_affinity, type=STRING macro=copy_to_state
	state.PathAffinity = types.StringPointerValue(ans.PathAffinity)
	// property: name=session_timeout, type=INTEGER macro=copy_to_state
	state.SessionTimeout = types.Int64PointerValue(ans.SessionTimeout)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=tcp_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.TcpRules == nil {
		state.TcpRules = nil
	} else if len(ans.TcpRules) == 0 {
		state.TcpRules = []rsModelTcpRuleV2{}
	} else {
		state.TcpRules = make([]rsModelTcpRuleV2, 0, len(ans.TcpRules))
		for varLoopTcpRulesIndex, varLoopTcpRules := range ans.TcpRules {
			// add a new item
			state.TcpRules = append(state.TcpRules, rsModelTcpRuleV2{})
			// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex] prefix=rsModel ans=varLoopTcpRules properties=6
			// property: name=client_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varClientFilters, errClientFilters := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ClientFilters)
			state.TcpRules[varLoopTcpRulesIndex].ClientFilters = varClientFilters
			resp.Diagnostics.Append(errClientFilters.Errors()...)
			// property: name=client_port, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.ClientPort == nil {
				state.TcpRules[varLoopTcpRulesIndex].ClientPort = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].ClientPort = &rsModelPort{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].ClientPort prefix=rsModel ans=varLoopTcpRules.ClientPort properties=2
				// property: name=end, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ClientPort.End = types.Int64PointerValue(varLoopTcpRules.ClientPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ClientPort.Start = types.Int64PointerValue(varLoopTcpRules.ClientPort.Start)
			}
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.Dscp == nil {
				state.TcpRules[varLoopTcpRulesIndex].Dscp = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].Dscp = &rsModelDSCP{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].Dscp prefix=rsModel ans=varLoopTcpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopTcpRules.Dscp.Value)
			}
			// property: name=server_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerFilters, errServerFilters := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ServerFilters)
			state.TcpRules[varLoopTcpRulesIndex].ServerFilters = varServerFilters
			resp.Diagnostics.Append(errServerFilters.Errors()...)
			// property: name=server_port, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.ServerPort == nil {
				state.TcpRules[varLoopTcpRulesIndex].ServerPort = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].ServerPort = &rsModelPort{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].ServerPort prefix=rsModel ans=varLoopTcpRules.ServerPort properties=2
				// property: name=end, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ServerPort.End = types.Int64PointerValue(varLoopTcpRules.ServerPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ServerPort.Start = types.Int64PointerValue(varLoopTcpRules.ServerPort.Start)
			}
			// property: name=server_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerPrefixes, errServerPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ServerPrefixes)
			state.TcpRules[varLoopTcpRulesIndex].ServerPrefixes = varServerPrefixes
			resp.Diagnostics.Append(errServerPrefixes.Errors()...)
		}
	}
	// property: name=transfer_type, type=STRING macro=copy_to_state
	state.TransferType = types.StringPointerValue(ans.TransferType)
	// property: name=udp_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.UdpRules == nil {
		state.UdpRules = nil
	} else if len(ans.UdpRules) == 0 {
		state.UdpRules = []rsModelUdpRuleV2{}
	} else {
		state.UdpRules = make([]rsModelUdpRuleV2, 0, len(ans.UdpRules))
		for varLoopUdpRulesIndex, varLoopUdpRules := range ans.UdpRules {
			// add a new item
			state.UdpRules = append(state.UdpRules, rsModelUdpRuleV2{})
			// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex] prefix=rsModel ans=varLoopUdpRules properties=4
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestPrefixes, errDestPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopUdpRules.DestPrefixes)
			state.UdpRules[varLoopUdpRulesIndex].DestPrefixes = varDestPrefixes
			resp.Diagnostics.Append(errDestPrefixes.Errors()...)
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopUdpRules.Dscp == nil {
				state.UdpRules[varLoopUdpRulesIndex].Dscp = nil
			} else {
				state.UdpRules[varLoopUdpRulesIndex].Dscp = &rsModelDSCP{}
				// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex].Dscp prefix=rsModel ans=varLoopUdpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopUdpRules.Dscp.Value)
			}
			// property: name=udp_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varUdpFilters, errUdpFilters := types.ListValueFrom(ctx, types.StringType, varLoopUdpRules.UdpFilters)
			state.UdpRules[varLoopUdpRulesIndex].UdpFilters = varUdpFilters
			resp.Diagnostics.Append(errUdpFilters.Errors()...)
			// property: name=udp_port, type=REFERENCE macro=copy_to_state
			if varLoopUdpRules.UdpPort == nil {
				state.UdpRules[varLoopUdpRulesIndex].UdpPort = nil
			} else {
				state.UdpRules[varLoopUdpRulesIndex].UdpPort = &rsModelPort{}
				// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex].UdpPort prefix=rsModel ans=varLoopUdpRules.UdpPort properties=2
				// property: name=end, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].UdpPort.End = types.Int64PointerValue(varLoopUdpRules.UdpPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].UdpPort.Start = types.Int64PointerValue(varLoopUdpRules.UdpPort.Start)
			}
		}
	}
	// property: name=use_parentapp_network_policy, type=BOOLEAN macro=copy_to_state
	state.UseParentappNetworkPolicy = types.BoolPointerValue(ans.UseParentappNetworkPolicy)
	return true
}

func (r *appDefOverrideResource) doPut(ctx context.Context, plan *rsModelAppdefOverrideScreenV2N3, state *rsModelAppdefOverrideScreenV2N3, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_app_def_override",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_app_def_override", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_app_def_override ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_app_def_override"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.3/api/appdefs/{appdef_id}/overrides/{override_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["override_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.AppdefOverrideScreenV2N3{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=24
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=aggregate_flows, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.AggregateFlows = ValueBoolPointerFromPlanOrState(plan.AggregateFlows, state.AggregateFlows)
	} else {
		body.AggregateFlows = BoolValueOrNil(plan.AggregateFlows)
	}
	// property: name=app_unreachability_detection, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.AppUnreachabilityDetection = ValueBoolPointerFromPlanOrState(plan.AppUnreachabilityDetection, state.AppUnreachabilityDetection)
	} else {
		body.AppUnreachabilityDetection = BoolValueOrNil(plan.AppUnreachabilityDetection)
	}
	// property: name=category, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Category = ValueStringPointerFromPlanOrState(plan.Category, state.Category)
	} else {
		body.Category = StringValueOrNil(plan.Category)
	}
	// property: name=conn_idle_timeout, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.ConnIdleTimeout = ValueInt64PointerFromPlanOrState(plan.ConnIdleTimeout, state.ConnIdleTimeout)
	} else {
		body.ConnIdleTimeout = Int64ValueOrNil(plan.ConnIdleTimeout)
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=domains, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.Domains = ListStringValueOrNil(ctx, plan.Domains)
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=ingress_traffic_pct, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.IngressTrafficPct = ValueInt64PointerFromPlanOrState(plan.IngressTrafficPct, state.IngressTrafficPct)
	} else {
		body.IngressTrafficPct = Int64ValueOrNil(plan.IngressTrafficPct)
	}
	// property: name=ip_rules, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.IpRules == nil && (state == nil || state.IpRules == nil) {
		body.IpRules = nil
	} else if len(plan.IpRules) == 0 && (state == nil || len(state.IpRules) == 0) {
		body.IpRules = []sdwan_schema.IPRuleV2{}
	} else if len(plan.IpRules) != 0 || (state != nil && len(state.IpRules) != 0) {
		IpRulesToUse := plan.IpRules
		if len(plan.IpRules) == 0 {
			IpRulesToUse = state.IpRules
		}
		body.IpRules = make([]sdwan_schema.IPRuleV2, 0, len(IpRulesToUse))
		for varLoopIpRulesIndex, varLoopIpRules := range IpRulesToUse {
			// add a new item
			body.IpRules = append(body.IpRules, sdwan_schema.IPRuleV2{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.IpRules[varLoopIpRulesIndex] prefix=rsModel plan=varLoopIpRules properties=5
			// property: name=dest_filters, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.IpRules[varLoopIpRulesIndex].DestFilters = ListStringValueOrNil(ctx, varLoopIpRules.DestFilters)
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.IpRules[varLoopIpRulesIndex].DestPrefixes = ListStringValueOrNil(ctx, varLoopIpRules.DestPrefixes)
			// property: name=dscp, type=REFERENCE macro=copy_from_plan
			if varLoopIpRules.Dscp != nil {
				body.IpRules[varLoopIpRulesIndex].Dscp = &sdwan_schema.DSCP{}
				// copy_from_plan: body=body.IpRules[varLoopIpRulesIndex].Dscp prefix=rsModel plan=varLoopIpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_from_plan
				body.IpRules[varLoopIpRulesIndex].Dscp.Value = Int64ValueOrNil(varLoopIpRules.Dscp.Value)
			}
			// property: name=protocol, type=STRING macro=copy_from_plan
			body.IpRules[varLoopIpRulesIndex].Protocol = StringValueOrNil(varLoopIpRules.Protocol)
			// property: name=src_filters, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.IpRules[varLoopIpRulesIndex].SrcFilters = ListStringValueOrNil(ctx, varLoopIpRules.SrcFilters)
		}
	}
	// property: name=override_default_ip_rules, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.OverrideDefaultIpRules = ValueBoolPointerFromPlanOrState(plan.OverrideDefaultIpRules, state.OverrideDefaultIpRules)
	} else {
		body.OverrideDefaultIpRules = BoolValueOrNil(plan.OverrideDefaultIpRules)
	}
	// property: name=override_default_tcp_rules, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.OverrideDefaultTcpRules = ValueBoolPointerFromPlanOrState(plan.OverrideDefaultTcpRules, state.OverrideDefaultTcpRules)
	} else {
		body.OverrideDefaultTcpRules = BoolValueOrNil(plan.OverrideDefaultTcpRules)
	}
	// property: name=override_default_udp_rules, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.OverrideDefaultUdpRules = ValueBoolPointerFromPlanOrState(plan.OverrideDefaultUdpRules, state.OverrideDefaultUdpRules)
	} else {
		body.OverrideDefaultUdpRules = BoolValueOrNil(plan.OverrideDefaultUdpRules)
	}
	// property: name=override_domains, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.OverrideDomains = ValueBoolPointerFromPlanOrState(plan.OverrideDomains, state.OverrideDomains)
	} else {
		body.OverrideDomains = BoolValueOrNil(plan.OverrideDomains)
	}
	// property: name=overrides_disable, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.OverridesDisable = ValueBoolPointerFromPlanOrState(plan.OverridesDisable, state.OverridesDisable)
	} else {
		body.OverridesDisable = BoolValueOrNil(plan.OverridesDisable)
	}
	// property: name=p_category, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.PCategory = ValueStringPointerFromPlanOrState(plan.PCategory, state.PCategory)
	} else {
		body.PCategory = StringValueOrNil(plan.PCategory)
	}
	// property: name=path_affinity, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.PathAffinity = ValueStringPointerFromPlanOrState(plan.PathAffinity, state.PathAffinity)
	} else {
		body.PathAffinity = StringValueOrNil(plan.PathAffinity)
	}
	// property: name=session_timeout, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.SessionTimeout = ValueInt64PointerFromPlanOrState(plan.SessionTimeout, state.SessionTimeout)
	} else {
		body.SessionTimeout = Int64ValueOrNil(plan.SessionTimeout)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=tcp_rules, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.TcpRules == nil && (state == nil || state.TcpRules == nil) {
		body.TcpRules = nil
	} else if len(plan.TcpRules) == 0 && (state == nil || len(state.TcpRules) == 0) {
		body.TcpRules = []sdwan_schema.TcpRuleV2{}
	} else if len(plan.TcpRules) != 0 || (state != nil && len(state.TcpRules) != 0) {
		TcpRulesToUse := plan.TcpRules
		if len(plan.TcpRules) == 0 {
			TcpRulesToUse = state.TcpRules
		}
		body.TcpRules = make([]sdwan_schema.TcpRuleV2, 0, len(TcpRulesToUse))
		for varLoopTcpRulesIndex, varLoopTcpRules := range TcpRulesToUse {
			// add a new item
			body.TcpRules = append(body.TcpRules, sdwan_schema.TcpRuleV2{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.TcpRules[varLoopTcpRulesIndex] prefix=rsModel plan=varLoopTcpRules properties=6
			// property: name=client_filters, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.TcpRules[varLoopTcpRulesIndex].ClientFilters = ListStringValueOrNil(ctx, varLoopTcpRules.ClientFilters)
			// property: name=client_port, type=REFERENCE macro=copy_from_plan
			if varLoopTcpRules.ClientPort != nil {
				body.TcpRules[varLoopTcpRulesIndex].ClientPort = &sdwan_schema.Port{}
				// copy_from_plan: body=body.TcpRules[varLoopTcpRulesIndex].ClientPort prefix=rsModel plan=varLoopTcpRules.ClientPort properties=2
				// property: name=end, type=INTEGER macro=copy_from_plan
				body.TcpRules[varLoopTcpRulesIndex].ClientPort.End = Int64ValueOrNil(varLoopTcpRules.ClientPort.End)
				// property: name=start, type=INTEGER macro=copy_from_plan
				body.TcpRules[varLoopTcpRulesIndex].ClientPort.Start = Int64ValueOrNil(varLoopTcpRules.ClientPort.Start)
			}
			// property: name=dscp, type=REFERENCE macro=copy_from_plan
			if varLoopTcpRules.Dscp != nil {
				body.TcpRules[varLoopTcpRulesIndex].Dscp = &sdwan_schema.DSCP{}
				// copy_from_plan: body=body.TcpRules[varLoopTcpRulesIndex].Dscp prefix=rsModel plan=varLoopTcpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_from_plan
				body.TcpRules[varLoopTcpRulesIndex].Dscp.Value = Int64ValueOrNil(varLoopTcpRules.Dscp.Value)
			}
			// property: name=server_filters, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.TcpRules[varLoopTcpRulesIndex].ServerFilters = ListStringValueOrNil(ctx, varLoopTcpRules.ServerFilters)
			// property: name=server_port, type=REFERENCE macro=copy_from_plan
			if varLoopTcpRules.ServerPort != nil {
				body.TcpRules[varLoopTcpRulesIndex].ServerPort = &sdwan_schema.Port{}
				// copy_from_plan: body=body.TcpRules[varLoopTcpRulesIndex].ServerPort prefix=rsModel plan=varLoopTcpRules.ServerPort properties=2
				// property: name=end, type=INTEGER macro=copy_from_plan
				body.TcpRules[varLoopTcpRulesIndex].ServerPort.End = Int64ValueOrNil(varLoopTcpRules.ServerPort.End)
				// property: name=start, type=INTEGER macro=copy_from_plan
				body.TcpRules[varLoopTcpRulesIndex].ServerPort.Start = Int64ValueOrNil(varLoopTcpRules.ServerPort.Start)
			}
			// property: name=server_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.TcpRules[varLoopTcpRulesIndex].ServerPrefixes = ListStringValueOrNil(ctx, varLoopTcpRules.ServerPrefixes)
		}
	}
	// property: name=transfer_type, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.TransferType = ValueStringPointerFromPlanOrState(plan.TransferType, state.TransferType)
	} else {
		body.TransferType = StringValueOrNil(plan.TransferType)
	}
	// property: name=udp_rules, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.UdpRules == nil && (state == nil || state.UdpRules == nil) {
		body.UdpRules = nil
	} else if len(plan.UdpRules) == 0 && (state == nil || len(state.UdpRules) == 0) {
		body.UdpRules = []sdwan_schema.UdpRuleV2{}
	} else if len(plan.UdpRules) != 0 || (state != nil && len(state.UdpRules) != 0) {
		UdpRulesToUse := plan.UdpRules
		if len(plan.UdpRules) == 0 {
			UdpRulesToUse = state.UdpRules
		}
		body.UdpRules = make([]sdwan_schema.UdpRuleV2, 0, len(UdpRulesToUse))
		for varLoopUdpRulesIndex, varLoopUdpRules := range UdpRulesToUse {
			// add a new item
			body.UdpRules = append(body.UdpRules, sdwan_schema.UdpRuleV2{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.UdpRules[varLoopUdpRulesIndex] prefix=rsModel plan=varLoopUdpRules properties=4
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.UdpRules[varLoopUdpRulesIndex].DestPrefixes = ListStringValueOrNil(ctx, varLoopUdpRules.DestPrefixes)
			// property: name=dscp, type=REFERENCE macro=copy_from_plan
			if varLoopUdpRules.Dscp != nil {
				body.UdpRules[varLoopUdpRulesIndex].Dscp = &sdwan_schema.DSCP{}
				// copy_from_plan: body=body.UdpRules[varLoopUdpRulesIndex].Dscp prefix=rsModel plan=varLoopUdpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_from_plan
				body.UdpRules[varLoopUdpRulesIndex].Dscp.Value = Int64ValueOrNil(varLoopUdpRules.Dscp.Value)
			}
			// property: name=udp_filters, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.UdpRules[varLoopUdpRulesIndex].UdpFilters = ListStringValueOrNil(ctx, varLoopUdpRules.UdpFilters)
			// property: name=udp_port, type=REFERENCE macro=copy_from_plan
			if varLoopUdpRules.UdpPort != nil {
				body.UdpRules[varLoopUdpRulesIndex].UdpPort = &sdwan_schema.Port{}
				// copy_from_plan: body=body.UdpRules[varLoopUdpRulesIndex].UdpPort prefix=rsModel plan=varLoopUdpRules.UdpPort properties=2
				// property: name=end, type=INTEGER macro=copy_from_plan
				body.UdpRules[varLoopUdpRulesIndex].UdpPort.End = Int64ValueOrNil(varLoopUdpRules.UdpPort.End)
				// property: name=start, type=INTEGER macro=copy_from_plan
				body.UdpRules[varLoopUdpRulesIndex].UdpPort.Start = Int64ValueOrNil(varLoopUdpRules.UdpPort.Start)
			}
		}
	}
	// property: name=use_parentapp_network_policy, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.UseParentappNetworkPolicy = ValueBoolPointerFromPlanOrState(plan.UseParentappNetworkPolicy, state.UseParentappNetworkPolicy)
	} else {
		body.UseParentappNetworkPolicy = BoolValueOrNil(plan.UseParentappNetworkPolicy)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct AppdefOverrideScreenV2N3 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_app_def_override", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_app_def_override",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_app_def_override", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_app_def_override",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_app_def_override", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.AppdefOverrideScreenV2N3
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to AppdefOverrideScreenV2N3 in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=AppdefOverrideScreenV2N3
	// copy_to_state: state=state prefix=rsModel ans=ans properties=24
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=aggregate_flows, type=BOOLEAN macro=copy_to_state
	state.AggregateFlows = types.BoolPointerValue(ans.AggregateFlows)
	// property: name=app_unreachability_detection, type=BOOLEAN macro=copy_to_state
	state.AppUnreachabilityDetection = types.BoolPointerValue(ans.AppUnreachabilityDetection)
	// property: name=category, type=STRING macro=copy_to_state
	state.Category = types.StringPointerValue(ans.Category)
	// property: name=conn_idle_timeout, type=INTEGER macro=copy_to_state
	state.ConnIdleTimeout = types.Int64PointerValue(ans.ConnIdleTimeout)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=domains, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDomains, errDomains := types.ListValueFrom(ctx, types.StringType, ans.Domains)
	state.Domains = varDomains
	resp.Diagnostics.Append(errDomains.Errors()...)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ingress_traffic_pct, type=INTEGER macro=copy_to_state
	state.IngressTrafficPct = types.Int64PointerValue(ans.IngressTrafficPct)
	// property: name=ip_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.IpRules == nil {
		state.IpRules = nil
	} else if len(ans.IpRules) == 0 {
		state.IpRules = []rsModelIPRuleV2{}
	} else {
		state.IpRules = make([]rsModelIPRuleV2, 0, len(ans.IpRules))
		for varLoopIpRulesIndex, varLoopIpRules := range ans.IpRules {
			// add a new item
			state.IpRules = append(state.IpRules, rsModelIPRuleV2{})
			// copy_to_state: state=state.IpRules[varLoopIpRulesIndex] prefix=rsModel ans=varLoopIpRules properties=5
			// property: name=dest_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestFilters, errDestFilters := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.DestFilters)
			state.IpRules[varLoopIpRulesIndex].DestFilters = varDestFilters
			resp.Diagnostics.Append(errDestFilters.Errors()...)
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestPrefixes, errDestPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.DestPrefixes)
			state.IpRules[varLoopIpRulesIndex].DestPrefixes = varDestPrefixes
			resp.Diagnostics.Append(errDestPrefixes.Errors()...)
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopIpRules.Dscp == nil {
				state.IpRules[varLoopIpRulesIndex].Dscp = nil
			} else {
				state.IpRules[varLoopIpRulesIndex].Dscp = &rsModelDSCP{}
				// copy_to_state: state=state.IpRules[varLoopIpRulesIndex].Dscp prefix=rsModel ans=varLoopIpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_to_state
				state.IpRules[varLoopIpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopIpRules.Dscp.Value)
			}
			// property: name=protocol, type=STRING macro=copy_to_state
			state.IpRules[varLoopIpRulesIndex].Protocol = types.StringPointerValue(varLoopIpRules.Protocol)
			// property: name=src_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varSrcFilters, errSrcFilters := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.SrcFilters)
			state.IpRules[varLoopIpRulesIndex].SrcFilters = varSrcFilters
			resp.Diagnostics.Append(errSrcFilters.Errors()...)
		}
	}
	// property: name=override_default_ip_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultIpRules = types.BoolPointerValue(ans.OverrideDefaultIpRules)
	// property: name=override_default_tcp_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultTcpRules = types.BoolPointerValue(ans.OverrideDefaultTcpRules)
	// property: name=override_default_udp_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultUdpRules = types.BoolPointerValue(ans.OverrideDefaultUdpRules)
	// property: name=override_domains, type=BOOLEAN macro=copy_to_state
	state.OverrideDomains = types.BoolPointerValue(ans.OverrideDomains)
	// property: name=overrides_disable, type=BOOLEAN macro=copy_to_state
	state.OverridesDisable = types.BoolPointerValue(ans.OverridesDisable)
	// property: name=p_category, type=STRING macro=copy_to_state
	state.PCategory = types.StringPointerValue(ans.PCategory)
	// property: name=path_affinity, type=STRING macro=copy_to_state
	state.PathAffinity = types.StringPointerValue(ans.PathAffinity)
	// property: name=session_timeout, type=INTEGER macro=copy_to_state
	state.SessionTimeout = types.Int64PointerValue(ans.SessionTimeout)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=tcp_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.TcpRules == nil {
		state.TcpRules = nil
	} else if len(ans.TcpRules) == 0 {
		state.TcpRules = []rsModelTcpRuleV2{}
	} else {
		state.TcpRules = make([]rsModelTcpRuleV2, 0, len(ans.TcpRules))
		for varLoopTcpRulesIndex, varLoopTcpRules := range ans.TcpRules {
			// add a new item
			state.TcpRules = append(state.TcpRules, rsModelTcpRuleV2{})
			// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex] prefix=rsModel ans=varLoopTcpRules properties=6
			// property: name=client_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varClientFilters, errClientFilters := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ClientFilters)
			state.TcpRules[varLoopTcpRulesIndex].ClientFilters = varClientFilters
			resp.Diagnostics.Append(errClientFilters.Errors()...)
			// property: name=client_port, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.ClientPort == nil {
				state.TcpRules[varLoopTcpRulesIndex].ClientPort = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].ClientPort = &rsModelPort{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].ClientPort prefix=rsModel ans=varLoopTcpRules.ClientPort properties=2
				// property: name=end, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ClientPort.End = types.Int64PointerValue(varLoopTcpRules.ClientPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ClientPort.Start = types.Int64PointerValue(varLoopTcpRules.ClientPort.Start)
			}
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.Dscp == nil {
				state.TcpRules[varLoopTcpRulesIndex].Dscp = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].Dscp = &rsModelDSCP{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].Dscp prefix=rsModel ans=varLoopTcpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopTcpRules.Dscp.Value)
			}
			// property: name=server_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerFilters, errServerFilters := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ServerFilters)
			state.TcpRules[varLoopTcpRulesIndex].ServerFilters = varServerFilters
			resp.Diagnostics.Append(errServerFilters.Errors()...)
			// property: name=server_port, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.ServerPort == nil {
				state.TcpRules[varLoopTcpRulesIndex].ServerPort = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].ServerPort = &rsModelPort{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].ServerPort prefix=rsModel ans=varLoopTcpRules.ServerPort properties=2
				// property: name=end, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ServerPort.End = types.Int64PointerValue(varLoopTcpRules.ServerPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ServerPort.Start = types.Int64PointerValue(varLoopTcpRules.ServerPort.Start)
			}
			// property: name=server_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerPrefixes, errServerPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ServerPrefixes)
			state.TcpRules[varLoopTcpRulesIndex].ServerPrefixes = varServerPrefixes
			resp.Diagnostics.Append(errServerPrefixes.Errors()...)
		}
	}
	// property: name=transfer_type, type=STRING macro=copy_to_state
	state.TransferType = types.StringPointerValue(ans.TransferType)
	// property: name=udp_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.UdpRules == nil {
		state.UdpRules = nil
	} else if len(ans.UdpRules) == 0 {
		state.UdpRules = []rsModelUdpRuleV2{}
	} else {
		state.UdpRules = make([]rsModelUdpRuleV2, 0, len(ans.UdpRules))
		for varLoopUdpRulesIndex, varLoopUdpRules := range ans.UdpRules {
			// add a new item
			state.UdpRules = append(state.UdpRules, rsModelUdpRuleV2{})
			// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex] prefix=rsModel ans=varLoopUdpRules properties=4
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestPrefixes, errDestPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopUdpRules.DestPrefixes)
			state.UdpRules[varLoopUdpRulesIndex].DestPrefixes = varDestPrefixes
			resp.Diagnostics.Append(errDestPrefixes.Errors()...)
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopUdpRules.Dscp == nil {
				state.UdpRules[varLoopUdpRulesIndex].Dscp = nil
			} else {
				state.UdpRules[varLoopUdpRulesIndex].Dscp = &rsModelDSCP{}
				// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex].Dscp prefix=rsModel ans=varLoopUdpRules.Dscp properties=1
				// property: name=value, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopUdpRules.Dscp.Value)
			}
			// property: name=udp_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varUdpFilters, errUdpFilters := types.ListValueFrom(ctx, types.StringType, varLoopUdpRules.UdpFilters)
			state.UdpRules[varLoopUdpRulesIndex].UdpFilters = varUdpFilters
			resp.Diagnostics.Append(errUdpFilters.Errors()...)
			// property: name=udp_port, type=REFERENCE macro=copy_to_state
			if varLoopUdpRules.UdpPort == nil {
				state.UdpRules[varLoopUdpRulesIndex].UdpPort = nil
			} else {
				state.UdpRules[varLoopUdpRulesIndex].UdpPort = &rsModelPort{}
				// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex].UdpPort prefix=rsModel ans=varLoopUdpRules.UdpPort properties=2
				// property: name=end, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].UdpPort.End = types.Int64PointerValue(varLoopUdpRules.UdpPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].UdpPort.Start = types.Int64PointerValue(varLoopUdpRules.UdpPort.Start)
			}
		}
	}
	// property: name=use_parentapp_network_policy, type=BOOLEAN macro=copy_to_state
	state.UseParentappNetworkPolicy = types.BoolPointerValue(ans.UseParentappNetworkPolicy)
	return true
}

func (r *appDefOverrideResource) doDelete(ctx context.Context, state *rsModelAppdefOverrideScreenV2N3, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_app_def_override",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_app_def_override ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_app_def_override"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.3/api/appdefs/{appdef_id}/overrides/{override_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["override_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_app_def_override", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *appDefOverrideResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_app_def_override")
	var plan rsModelAppdefOverrideScreenV2N3
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelAppdefOverrideScreenV2N3
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *appDefOverrideResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_app_def_override")
	var savestate, state rsModelAppdefOverrideScreenV2N3
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *appDefOverrideResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_app_def_override")
	var plan, state rsModelAppdefOverrideScreenV2N3
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *appDefOverrideResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_app_def_override")
	var state rsModelAppdefOverrideScreenV2N3
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *appDefOverrideResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
