package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	mSjVWwC "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/element/ntp"
	wwbhsxr "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/ntpserver"
	ctlHcHg "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v20/api/elements/elementid/ntp"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &elementNtpListDataSource{}
	_ datasource.DataSourceWithConfigure = &elementNtpListDataSource{}
)

func NewElementNtpListDataSource() datasource.DataSource {
	return &elementNtpListDataSource{}
}

type elementNtpListDataSource struct {
	client *sdwan.Client
}

// elementNtpListDsModel is the model.
type elementNtpListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ElementId types.String `tfsdk:"element_id"`

	// Output.
	Items      []elementNtpListDsModel_mSjVWwC_Config `tfsdk:"items"`
	TotalItems types.Int64                            `tfsdk:"total_items"`
}

type elementNtpListDsModel_mSjVWwC_Config struct {
	Description        types.String                           `tfsdk:"description"`
	Etag               types.Int64                            `tfsdk:"etag"`
	Id                 types.String                           `tfsdk:"id"`
	Name               types.String                           `tfsdk:"name"`
	NtpServers         []elementNtpListDsModel_wwbhsxr_Config `tfsdk:"ntp_servers"`
	SourceInterfaceIds types.List                             `tfsdk:"source_interface_ids"`
	Tags               types.List                             `tfsdk:"tags"`
}

type elementNtpListDsModel_wwbhsxr_Config struct {
	Host    types.String `tfsdk:"host"`
	MaxPoll types.Int64  `tfsdk:"max_poll"`
	MinPoll types.Int64  `tfsdk:"min_poll"`
	Version types.Int64  `tfsdk:"version"`
}

// Metadata returns the data source type name.
func (d *elementNtpListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_element_ntp_list"
}

// Schema defines the schema for this listing data source.
func (d *elementNtpListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"element_id":true} outputs:map[string]bool{"items":true, "tfid":true, "total_items":true} forceNew:map[string]bool{"element_id":true}
			"element_id": dsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
			},
			"items": dsschema.ListNestedAttribute{
				Description: "The Items param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "etag":true, "id":true, "name":true, "ntp_servers":true, "source_interface_ids":true, "tags":true} forceNew:map[string]bool(nil)
						"description": dsschema.StringAttribute{
							Description: "Description: Size(max = 256, error = NTP_CONFIG_DESCRIPTION_INVALID: NTP description is invalid. The maximum length is 256., min = 0) .",
							Computed:    true,
						},
						"etag": dsschema.Int64Attribute{
							Description: "Entity tag for the resource.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "Id.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Name: NotEmpty(error = NTP_CONFIG_NAME_REQD: Name is mandatory for NTP configuration.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
							Computed:    true,
						},
						"ntp_servers": dsschema.ListNestedAttribute{
							Description: "Ntp Servers: NotEmpty(error = NTP_CONFIG_INVALID_SERVER_SIZE: A minimum of 1 and a maximum of 10 NTP servers can be configured.) Size(max = 10, error = NTP_CONFIG_INVALID_SERVER_SIZE: A minimum of 1 and a maximum of 10 NTP servers can be configured., min = 1) Valid .",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"host":true, "max_poll":true, "min_poll":true, "version":true} forceNew:map[string]bool(nil)
									"host": dsschema.StringAttribute{
										Description: "Host: ValidateHostName(allowNull = false, error = NTP_CONFIG_INVALID_HOST: Host can be only domain name or IP address.) .",
										Computed:    true,
									},
									"max_poll": dsschema.Int64Attribute{
										Description: "Max Poll: Required(message = required) ValidateDecimal(allowZero = false, increment = 0, max = 0, error = NTP_CONFIG_INVALID_MAXPOLL_VALUE: The range for maximum poll values is between 4-17., min = 0) .",
										Computed:    true,
									},
									"min_poll": dsschema.Int64Attribute{
										Description: "Min Poll: Required(message = required) ValidateDecimal(allowZero = false, increment = 0, max = 0, error = NTP_CONFIG_INVALID_MINPOLL_VALUE: The range for minimum poll values is between 4-17., min = 0) .",
										Computed:    true,
									},
									"version": dsschema.Int64Attribute{
										Description: "Version: Required(message = required) ValidateDecimal(allowZero = false, increment = 0, max = 0, error = NTP_CONFIG_INVALID_VERSION: Allowed versions are 2,3 & 4., min = 0) .",
										Computed:    true,
									},
								},
							},
						},
						"source_interface_ids": dsschema.ListAttribute{
							Description: "Source Interface Ids: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 0, listMaxSize = 10, error = NTP_CONFIG_INVALID_INTERFACE_IDS: Source interface ids cannot be empty and should be valid.Interface ids should not be port that is part of logical interface group like bypass pair., noTrim = false, regex = , required = false) .",
							Computed:    true,
							ElementType: types.StringType,
						},
						"tags": dsschema.ListAttribute{
							Description: "Tags.",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total_items": dsschema.Int64Attribute{
				Description: "The TotalItems param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *elementNtpListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *elementNtpListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state elementNtpListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "prismasdwan_element_ntp_list",
		"terraform_provider_function": "Read",
		"element_id":                  state.ElementId.ValueString(),
	})

	// Prepare to run the command.
	svc := ctlHcHg.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := ctlHcHg.ListInput{}

	input.ElementId = StringValue(state.ElementId)

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.ElementId)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Items) == 0 {
		state.Items = nil
	} else {
		state.Items = make([]elementNtpListDsModel_mSjVWwC_Config, 0, len(ans.Items))
		for _, var0 := range ans.Items {
			var1 := elementNtpListDsModel_mSjVWwC_Config{}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Etag = types.Int64PointerValue(var0.Etag)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			if len(var0.NtpServers) == 0 {
				var1.NtpServers = nil
			} else {
				var1.NtpServers = make([]elementNtpListDsModel_wwbhsxr_Config, 0, len(var0.NtpServers))
				for _, var2 := range var0.NtpServers {
					var3 := elementNtpListDsModel_wwbhsxr_Config{}

					var3.Host = types.StringValue(var2.Host)

					var3.MaxPoll = types.Int64Value(var2.MaxPoll)

					var3.MinPoll = types.Int64Value(var2.MinPoll)

					var3.Version = types.Int64Value(var2.Version)
					var1.NtpServers = append(var1.NtpServers, var3)
				}
			}

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.SourceInterfaceIds)
			var1.SourceInterfaceIds = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var6
			resp.Diagnostics.Append(var7.Errors()...)
			state.Items = append(state.Items, var1)
		}
	}

	state.TotalItems = types.Int64PointerValue(ans.TotalItems)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &elementNtpDataSource{}
	_ datasource.DataSourceWithConfigure = &elementNtpDataSource{}
)

func NewElementNtpDataSource() datasource.DataSource {
	return &elementNtpDataSource{}
}

type elementNtpDataSource struct {
	client *sdwan.Client
}

// elementNtpDsModel is the model.
type elementNtpDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ElementId types.String `tfsdk:"element_id"`
	NtpId     types.String `tfsdk:"ntp_id"`

	// Output.
	Description        types.String                       `tfsdk:"description"`
	Etag               types.Int64                        `tfsdk:"etag"`
	Id                 types.String                       `tfsdk:"id"`
	Name               types.String                       `tfsdk:"name"`
	NtpServers         []elementNtpDsModel_wwbhsxr_Config `tfsdk:"ntp_servers"`
	SourceInterfaceIds types.List                         `tfsdk:"source_interface_ids"`
	Tags               types.List                         `tfsdk:"tags"`
}

type elementNtpDsModel_wwbhsxr_Config struct {
	Host    types.String `tfsdk:"host"`
	MaxPoll types.Int64  `tfsdk:"max_poll"`
	MinPoll types.Int64  `tfsdk:"min_poll"`
	Version types.Int64  `tfsdk:"version"`
}

// Metadata returns the data source type name.
func (d *elementNtpDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_element_ntp"
}

// Schema defines the schema for this data source.
func (d *elementNtpDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"element_id":true, "ntp_id":true} outputs:map[string]bool{"description":true, "etag":true, "id":true, "name":true, "ntp_servers":true, "source_interface_ids":true, "tags":true, "tfid":true} forceNew:map[string]bool{"element_id":true, "ntp_id":true}
			"description": dsschema.StringAttribute{
				Description: "Description: Size(max = 256, error = NTP_CONFIG_DESCRIPTION_INVALID: NTP description is invalid. The maximum length is 256., min = 0) .",
				Computed:    true,
			},
			"element_id": dsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
			},
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Name: NotEmpty(error = NTP_CONFIG_NAME_REQD: Name is mandatory for NTP configuration.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Computed:    true,
			},
			"ntp_id": dsschema.StringAttribute{
				Description: "Ntp Id.",
				Required:    true,
			},
			"ntp_servers": dsschema.ListNestedAttribute{
				Description: "Ntp Servers: NotEmpty(error = NTP_CONFIG_INVALID_SERVER_SIZE: A minimum of 1 and a maximum of 10 NTP servers can be configured.) Size(max = 10, error = NTP_CONFIG_INVALID_SERVER_SIZE: A minimum of 1 and a maximum of 10 NTP servers can be configured., min = 1) Valid .",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"host":true, "max_poll":true, "min_poll":true, "version":true} forceNew:map[string]bool(nil)
						"host": dsschema.StringAttribute{
							Description: "Host: ValidateHostName(allowNull = false, error = NTP_CONFIG_INVALID_HOST: Host can be only domain name or IP address.) .",
							Computed:    true,
						},
						"max_poll": dsschema.Int64Attribute{
							Description: "Max Poll: Required(message = required) ValidateDecimal(allowZero = false, increment = 0, max = 0, error = NTP_CONFIG_INVALID_MAXPOLL_VALUE: The range for maximum poll values is between 4-17., min = 0) .",
							Computed:    true,
						},
						"min_poll": dsschema.Int64Attribute{
							Description: "Min Poll: Required(message = required) ValidateDecimal(allowZero = false, increment = 0, max = 0, error = NTP_CONFIG_INVALID_MINPOLL_VALUE: The range for minimum poll values is between 4-17., min = 0) .",
							Computed:    true,
						},
						"version": dsschema.Int64Attribute{
							Description: "Version: Required(message = required) ValidateDecimal(allowZero = false, increment = 0, max = 0, error = NTP_CONFIG_INVALID_VERSION: Allowed versions are 2,3 & 4., min = 0) .",
							Computed:    true,
						},
					},
				},
			},
			"source_interface_ids": dsschema.ListAttribute{
				Description: "Source Interface Ids: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 0, listMaxSize = 10, error = NTP_CONFIG_INVALID_INTERFACE_IDS: Source interface ids cannot be empty and should be valid.Interface ids should not be port that is part of logical interface group like bypass pair., noTrim = false, regex = , required = false) .",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tags": dsschema.ListAttribute{
				Description: "Tags.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *elementNtpDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *elementNtpDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state elementNtpDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_element_ntp",
		"terraform_provider_function": "Read",
		"element_id":                  state.ElementId.ValueString(),
		"ntp_id":                      state.NtpId.ValueString(),
	})

	// Prepare to run the command.
	svc := ctlHcHg.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := ctlHcHg.ReadInput{}

	input.ElementId = StringValue(state.ElementId)

	input.NtpId = StringValue(state.NtpId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.ElementId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.NtpId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if len(ans.NtpServers) == 0 {
		state.NtpServers = nil
	} else {
		state.NtpServers = make([]elementNtpDsModel_wwbhsxr_Config, 0, len(ans.NtpServers))
		for _, var0 := range ans.NtpServers {
			var1 := elementNtpDsModel_wwbhsxr_Config{}

			var1.Host = types.StringValue(var0.Host)

			var1.MaxPoll = types.Int64Value(var0.MaxPoll)

			var1.MinPoll = types.Int64Value(var0.MinPoll)

			var1.Version = types.Int64Value(var0.Version)
			state.NtpServers = append(state.NtpServers, var1)
		}
	}

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.SourceInterfaceIds)
	state.SourceInterfaceIds = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &elementNtpResource{}
	_ resource.ResourceWithConfigure   = &elementNtpResource{}
	_ resource.ResourceWithImportState = &elementNtpResource{}
)

func NewElementNtpResource() resource.Resource {
	return &elementNtpResource{}
}

type elementNtpResource struct {
	client *sdwan.Client
}

// elementNtpRsModel is the model.
type elementNtpRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Description        types.String                       `tfsdk:"description"`
	ElementId          types.String                       `tfsdk:"element_id"`
	Etag               types.Int64                        `tfsdk:"etag"`
	Id                 types.String                       `tfsdk:"id"`
	Name               types.String                       `tfsdk:"name"`
	NtpId              types.String                       `tfsdk:"ntp_id"`
	NtpServers         []elementNtpRsModel_wwbhsxr_Config `tfsdk:"ntp_servers"`
	SourceInterfaceIds types.List                         `tfsdk:"source_interface_ids"`
	Tags               types.List                         `tfsdk:"tags"`

	// Output.
	// omit input: description
	// omit input: etag
	// omit input: id
	// omit input: name
	// omit input: ntp_servers
	// omit input: source_interface_ids
	// omit input: tags
}

type elementNtpRsModel_wwbhsxr_Config struct {
	Host    types.String `tfsdk:"host"`
	MaxPoll types.Int64  `tfsdk:"max_poll"`
	MinPoll types.Int64  `tfsdk:"min_poll"`
	Version types.Int64  `tfsdk:"version"`
}

// Metadata returns the data source type name.
func (r *elementNtpResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_element_ntp"
}

// Schema defines the schema for this data source.
func (r *elementNtpResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"description":true, "element_id":true, "etag":true, "id":true, "name":true, "ntp_id":true, "ntp_servers":true, "source_interface_ids":true, "tags":true} outputs:map[string]bool{"description":true, "etag":true, "id":true, "name":true, "ntp_servers":true, "source_interface_ids":true, "tags":true, "tfid":true} forceNew:map[string]bool{"element_id":true, "ntp_id":true}
			"description": rsschema.StringAttribute{
				Description: "Description: Size(max = 256, error = NTP_CONFIG_DESCRIPTION_INVALID: NTP description is invalid. The maximum length is 256., min = 0) .",
				Optional:    true,
				Computed:    true,
			},
			"element_id": rsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"etag": rsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Optional:    true,
				Computed:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Name: NotEmpty(error = NTP_CONFIG_NAME_REQD: Name is mandatory for NTP configuration.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Required:    true,
			},
			"ntp_id": rsschema.StringAttribute{
				Description: "Ntp Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"ntp_servers": rsschema.ListNestedAttribute{
				Description: "Ntp Servers: NotEmpty(error = NTP_CONFIG_INVALID_SERVER_SIZE: A minimum of 1 and a maximum of 10 NTP servers can be configured.) Size(max = 10, error = NTP_CONFIG_INVALID_SERVER_SIZE: A minimum of 1 and a maximum of 10 NTP servers can be configured., min = 1) Valid .",
				Required:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"host":true, "max_poll":true, "min_poll":true, "version":true} outputs:map[string]bool{"host":true, "max_poll":true, "min_poll":true, "version":true} forceNew:map[string]bool(nil)
						"host": rsschema.StringAttribute{
							Description: "Host: ValidateHostName(allowNull = false, error = NTP_CONFIG_INVALID_HOST: Host can be only domain name or IP address.) .",
							Required:    true,
						},
						"max_poll": rsschema.Int64Attribute{
							Description: "Max Poll: Required(message = required) ValidateDecimal(allowZero = false, increment = 0, max = 0, error = NTP_CONFIG_INVALID_MAXPOLL_VALUE: The range for maximum poll values is between 4-17., min = 0) .",
							Required:    true,
						},
						"min_poll": rsschema.Int64Attribute{
							Description: "Min Poll: Required(message = required) ValidateDecimal(allowZero = false, increment = 0, max = 0, error = NTP_CONFIG_INVALID_MINPOLL_VALUE: The range for minimum poll values is between 4-17., min = 0) .",
							Required:    true,
						},
						"version": rsschema.Int64Attribute{
							Description: "Version: Required(message = required) ValidateDecimal(allowZero = false, increment = 0, max = 0, error = NTP_CONFIG_INVALID_VERSION: Allowed versions are 2,3 & 4., min = 0) .",
							Required:    true,
						},
					},
				},
			},
			"source_interface_ids": rsschema.ListAttribute{
				Description: "Source Interface Ids: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 0, listMaxSize = 10, error = NTP_CONFIG_INVALID_INTERFACE_IDS: Source interface ids cannot be empty and should be valid.Interface ids should not be port that is part of logical interface group like bypass pair., noTrim = false, regex = , required = false) .",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tags": rsschema.ListAttribute{
				Description: "Tags.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *elementNtpResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sdwan.Client)
}

// Create resource.
func (r *elementNtpResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var state elementNtpRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_element_ntp",
		"terraform_provider_function": "Create",
		"element_id":                  state.ElementId.ValueString(),
		"ntp_id":                      state.NtpId.ValueString(),
	})

	// Prepare to create the config.
	svc := ctlHcHg.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ctlHcHg.ReadInput{}

	input.ElementId = StringValue(state.ElementId)

	input.NtpId = StringValue(state.NtpId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.ElementId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.NtpId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if len(ans.NtpServers) == 0 {
		state.NtpServers = nil
	} else {
		state.NtpServers = make([]elementNtpRsModel_wwbhsxr_Config, 0, len(ans.NtpServers))
		for _, var0 := range ans.NtpServers {
			var1 := elementNtpRsModel_wwbhsxr_Config{}

			var1.Host = types.StringValue(var0.Host)

			var1.MaxPoll = types.Int64Value(var0.MaxPoll)

			var1.MinPoll = types.Int64Value(var0.MinPoll)

			var1.Version = types.Int64Value(var0.Version)
			state.NtpServers = append(state.NtpServers, var1)
		}
	}

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.SourceInterfaceIds)
	state.SourceInterfaceIds = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Read performs Read for the struct.
func (r *elementNtpResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state elementNtpRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_element_ntp",
		"locMap":                      map[string]int{"element_id": 0, "id": 2, "ntp_id": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := ctlHcHg.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ctlHcHg.ReadInput{}

	input.ElementId = tokens[0]

	input.NtpId = tokens[1]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.ElementId = types.StringNull()
	} else {
		state.ElementId = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.NtpId = types.StringNull()
	} else {
		state.NtpId = types.StringValue(tokens[1])
	}
	state.Tfid = savestate.Tfid

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if len(ans.NtpServers) == 0 {
		state.NtpServers = nil
	} else {
		state.NtpServers = make([]elementNtpRsModel_wwbhsxr_Config, 0, len(ans.NtpServers))
		for _, var0 := range ans.NtpServers {
			var1 := elementNtpRsModel_wwbhsxr_Config{}

			var1.Host = types.StringValue(var0.Host)

			var1.MaxPoll = types.Int64Value(var0.MaxPoll)

			var1.MinPoll = types.Int64Value(var0.MinPoll)

			var1.Version = types.Int64Value(var0.Version)
			state.NtpServers = append(state.NtpServers, var1)
		}
	}

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.SourceInterfaceIds)
	state.SourceInterfaceIds = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *elementNtpResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state elementNtpRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_element_ntp",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := ctlHcHg.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ctlHcHg.UpdateInput{}

	if tokens[0] != "" {
		input.ElementId = tokens[0]
	}

	if tokens[1] != "" {
		input.NtpId = tokens[1]
	}
	input.Request = &mSjVWwC.Config{}

	input.Request.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)

	input.Request.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)

	input.Request.Name = ValueStringFromPlanOrState(plan.Name, state.Name)

	if len(plan.NtpServers) != 0 || len(state.NtpServers) != 0 {
		NtpServersToUse := plan.NtpServers
		if len(plan.NtpServers) == 0 {
			NtpServersToUse = state.NtpServers
		}
		input.Request.NtpServers = make([]wwbhsxr.Config, 0, len(NtpServersToUse))
		for _, var0 := range plan.NtpServers {
			var var1 wwbhsxr.Config

			var1.Host = StringValue(var0.Host)

			var1.MaxPoll = Int64Value(var0.MaxPoll)

			var1.MinPoll = Int64Value(var0.MinPoll)

			var1.Version = Int64Value(var0.Version)
			input.Request.NtpServers = append(input.Request.NtpServers, var1)
		}
	}

	input.Request.SourceInterfaceIds = ListStringValueOrNil(ctx, plan.SourceInterfaceIds)

	input.Request.Tags = ListStringValueOrNil(ctx, plan.Tags)

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Description = types.StringPointerValue(ans.Description)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if len(ans.NtpServers) == 0 {
		state.NtpServers = nil
	} else {
		state.NtpServers = make([]elementNtpRsModel_wwbhsxr_Config, 0, len(ans.NtpServers))
		for _, var4 := range ans.NtpServers {
			var5 := elementNtpRsModel_wwbhsxr_Config{}

			var5.Host = types.StringValue(var4.Host)

			var5.MaxPoll = types.Int64Value(var4.MaxPoll)

			var5.MinPoll = types.Int64Value(var4.MinPoll)

			var5.Version = types.Int64Value(var4.Version)
			state.NtpServers = append(state.NtpServers, var5)
		}
	}

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.SourceInterfaceIds)
	state.SourceInterfaceIds = var6
	resp.Diagnostics.Append(var7.Errors()...)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var8
	resp.Diagnostics.Append(var9.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Dummy Delete resource.
func (r *elementNtpResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

}

func (r *elementNtpResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
