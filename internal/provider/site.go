package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	mhJDwSQ "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/address"
	oPPPeKY "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/extended/tag"
	hUAfQlh "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/location"
	uewNibC "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/site/screen/v4/n10"
	vMYBRZK "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v410/api/sites"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &siteListDataSource{}
	_ datasource.DataSourceWithConfigure = &siteListDataSource{}
)

func NewSiteListDataSource() datasource.DataSource {
	return &siteListDataSource{}
}

type siteListDataSource struct {
	client *sdwan.Client
}

// siteListDsModel is the model.
type siteListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.

	// Output.
	Items      []siteListDsModel_uewNibC_Config `tfsdk:"items"`
	TotalItems types.Int64                      `tfsdk:"total_items"`
}

type siteListDsModel_uewNibC_Config struct {
	Address                             *siteListDsModel_mhJDwSQ_Config  `tfsdk:"address"`
	AdminState                          types.String                     `tfsdk:"admin_state"`
	BranchGateway                       types.Bool                       `tfsdk:"branch_gateway"`
	Description                         types.String                     `tfsdk:"description"`
	ElementClusterRole                  types.String                     `tfsdk:"element_cluster_role"`
	Etag                                types.Int64                      `tfsdk:"etag"`
	ExtendedTags                        []siteListDsModel_oPPPeKY_Config `tfsdk:"extended_tags"`
	Id                                  types.String                     `tfsdk:"id"`
	Location                            *siteListDsModel_hUAfQlh_Config  `tfsdk:"location"`
	MulticastPeerGroupId                types.String                     `tfsdk:"multicast_peer_group_id"`
	Name                                types.String                     `tfsdk:"name"`
	NatPolicysetstackId                 types.String                     `tfsdk:"nat_policysetstack_id"`
	NetworkPolicysetstackId             types.String                     `tfsdk:"network_policysetstack_id"`
	PerfmgmtPolicysetstackId            types.String                     `tfsdk:"perfmgmt_policysetstack_id"`
	PolicySetId                         types.String                     `tfsdk:"policy_set_id"`
	PreferLanDefaultOverWanDefaultRoute types.Bool                       `tfsdk:"prefer_lan_default_over_wan_default_route"`
	PriorityPolicysetstackId            types.String                     `tfsdk:"priority_policysetstack_id"`
	SecurityPolicysetId                 types.String                     `tfsdk:"security_policyset_id"`
	SecurityPolicysetstackId            types.String                     `tfsdk:"security_policysetstack_id"`
	ServiceBinding                      types.String                     `tfsdk:"service_binding"`
	Tags                                types.List                       `tfsdk:"tags"`
	VrfContextProfileId                 types.String                     `tfsdk:"vrf_context_profile_id"`
}

type siteListDsModel_mhJDwSQ_Config struct {
	City     types.String `tfsdk:"city"`
	Country  types.String `tfsdk:"country"`
	PostCode types.String `tfsdk:"post_code"`
	State    types.String `tfsdk:"state"`
	Street   types.String `tfsdk:"street"`
	Street2  types.String `tfsdk:"street2"`
}

type siteListDsModel_oPPPeKY_Config struct {
	Key       types.String `tfsdk:"key"`
	Value     types.String `tfsdk:"value"`
	ValueType types.String `tfsdk:"value_type"`
}

type siteListDsModel_hUAfQlh_Config struct {
	Description types.String  `tfsdk:"description"`
	Latitude    types.Float64 `tfsdk:"latitude"`
	Longitude   types.Float64 `tfsdk:"longitude"`
}

// Metadata returns the data source type name.
func (d *siteListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_site_list"
}

// Schema defines the schema for this listing data source.
func (d *siteListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{} outputs:map[string]bool{"items":true, "tfid":true, "total_items":true} forceNew:map[string]bool{}
			"items": dsschema.ListNestedAttribute{
				Description: "The Items param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"address":true, "admin_state":true, "branch_gateway":true, "description":true, "element_cluster_role":true, "etag":true, "extended_tags":true, "id":true, "location":true, "multicast_peer_group_id":true, "name":true, "nat_policysetstack_id":true, "network_policysetstack_id":true, "perfmgmt_policysetstack_id":true, "policy_set_id":true, "prefer_lan_default_over_wan_default_route":true, "priority_policysetstack_id":true, "security_policyset_id":true, "security_policysetstack_id":true, "service_binding":true, "tags":true, "vrf_context_profile_id":true} forceNew:map[string]bool(nil)
						"address": dsschema.SingleNestedAttribute{
							Description: "The Address param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"city":true, "country":true, "post_code":true, "state":true, "street":true, "street2":true} forceNew:map[string]bool(nil)
								"city": dsschema.StringAttribute{
									Description: "City: Length(max = 100, , min = 0) .",
									Computed:    true,
								},
								"country": dsschema.StringAttribute{
									Description: "Country: Length(max = 100, , min = 0) .",
									Computed:    true,
								},
								"post_code": dsschema.StringAttribute{
									Description: "Post Code: Length(max = 100, , min = 0) .",
									Computed:    true,
								},
								"state": dsschema.StringAttribute{
									Description: "State: Length(max = 100, , min = 0) .",
									Computed:    true,
								},
								"street": dsschema.StringAttribute{
									Description: "Street: Length(max = 100, , min = 0) .",
									Computed:    true,
								},
								"street2": dsschema.StringAttribute{
									Description: "Street2: Length(max = 100, , min = 0) .",
									Computed:    true,
								},
							},
						},
						"admin_state": dsschema.StringAttribute{
							Description: "Admin State: Required(error = SITE_ADMIN_STATE_MISSING: Site admin state missing.) ValidateEnum(enumClass = classOf[SiteState], message = Invalid enum string., nullAllowed = false) .",
							Computed:    true,
						},
						"branch_gateway": dsschema.BoolAttribute{
							Description: "Branch Gateway.",
							Computed:    true,
						},
						"description": dsschema.StringAttribute{
							Description: "Description: Size(max = 1024, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
							Computed:    true,
						},
						"element_cluster_role": dsschema.StringAttribute{
							Description: "Element Cluster Role: Required(error = SITE_ROLE_MISSING: Site role missing.) ValidateEnum(enumClass = classOf[ElementClusterRole], message = Invalid enum string., nullAllowed = false) .",
							Computed:    true,
						},
						"etag": dsschema.Int64Attribute{
							Description: "Entity tag for the resource.",
							Computed:    true,
						},
						"extended_tags": dsschema.ListNestedAttribute{
							Description: "Extended Tags: Valid ListObject(allowDuplicate = false, allowEmpty = true, allowNull = true, listMaxSize = 10, message = INVALID_EXTENDED_TAG_SIZE_OR_DUPLICATE, required = false) .",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"key":true, "value":true, "value_type":true} forceNew:map[string]bool(nil)
									"key": dsschema.StringAttribute{
										Description: "Key.",
										Computed:    true,
									},
									"value": dsschema.StringAttribute{
										Description: "Value.",
										Computed:    true,
									},
									"value_type": dsschema.StringAttribute{
										Description: "Value Type.",
										Computed:    true,
									},
								},
							},
						},
						"id": dsschema.StringAttribute{
							Description: "Id.",
							Computed:    true,
						},
						"location": dsschema.SingleNestedAttribute{
							Description: "The Location param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "latitude":true, "longitude":true} forceNew:map[string]bool(nil)
								"description": dsschema.StringAttribute{
									Description: "Description.",
									Computed:    true,
								},
								"latitude": dsschema.Float64Attribute{
									Description: "Latitude: Range(max = 90L, INVALID_LATITUDE_VALUE, min = -90L) .",
									Computed:    true,
								},
								"longitude": dsschema.Float64Attribute{
									Description: "Longitude: Range(max = 180L, INVALID_LONGITUDE_VALUE, min = -180L) .",
									Computed:    true,
								},
							},
						},
						"multicast_peer_group_id": dsschema.StringAttribute{
							Description: "Multicast Peer Group Id.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Name: Required(error = NAME_REQD: Please provide resource name.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
							Computed:    true,
						},
						"nat_policysetstack_id": dsschema.StringAttribute{
							Description: "Nat Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NAT_POLICYSETSTACK_ID: Invalid nat policy set stack id.) .",
							Computed:    true,
						},
						"network_policysetstack_id": dsschema.StringAttribute{
							Description: "Network Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NETWORK_POLICYSETSTACK_ID: Invalid network policy set stack id) .",
							Computed:    true,
						},
						"perfmgmt_policysetstack_id": dsschema.StringAttribute{
							Description: "Perfmgmt Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_PERFMGMT_POLICYSETSTACK_ID: Invalid performance management policy set stack id) .",
							Computed:    true,
						},
						"policy_set_id": dsschema.StringAttribute{
							Description: "Policy Set Id.",
							Computed:    true,
						},
						"prefer_lan_default_over_wan_default_route": dsschema.BoolAttribute{
							Description: "Prefer Lan Default Over Wan Default Route. Default: `false`.",
							Computed:    true,
						},
						"priority_policysetstack_id": dsschema.StringAttribute{
							Description: "Priority Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_PRIORITY_POLICYSETSTACK_ID: Invalid priority policy set stack id) .",
							Computed:    true,
						},
						"security_policyset_id": dsschema.StringAttribute{
							Description: "Security Policyset Id.",
							Computed:    true,
						},
						"security_policysetstack_id": dsschema.StringAttribute{
							Description: "Security Policysetstack Id.",
							Computed:    true,
						},
						"service_binding": dsschema.StringAttribute{
							Description: "Service Binding.",
							Computed:    true,
						},
						"tags": dsschema.ListAttribute{
							Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 1024, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
							Computed:    true,
							ElementType: types.StringType,
						},
						"vrf_context_profile_id": dsschema.StringAttribute{
							Description: "Vrf Context Profile Id.",
							Computed:    true,
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total_items": dsschema.Int64Attribute{
				Description: "The TotalItems param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *siteListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *siteListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state siteListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "prismasdwan_site_list",
		"terraform_provider_function": "Read",
	})

	// Prepare to run the command.
	svc := vMYBRZK.NewClient(d.client)

	// Perform the operation.
	ans, err := svc.List(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Items) == 0 {
		state.Items = nil
	} else {
		state.Items = make([]siteListDsModel_uewNibC_Config, 0, len(ans.Items))
		for _, var0 := range ans.Items {
			var1 := siteListDsModel_uewNibC_Config{}

			if var0.Address == nil {
				var1.Address = nil
			} else {
				var1.Address = &siteListDsModel_mhJDwSQ_Config{}

				var1.Address.City = types.StringPointerValue(var0.Address.City)

				var1.Address.Country = types.StringPointerValue(var0.Address.Country)

				var1.Address.PostCode = types.StringPointerValue(var0.Address.PostCode)

				var1.Address.State = types.StringPointerValue(var0.Address.State)

				var1.Address.Street = types.StringPointerValue(var0.Address.Street)

				var1.Address.Street2 = types.StringPointerValue(var0.Address.Street2)
			}

			var1.AdminState = types.StringValue(var0.AdminState)

			var1.BranchGateway = types.BoolPointerValue(var0.BranchGateway)

			var1.Description = types.StringPointerValue(var0.Description)

			var1.ElementClusterRole = types.StringValue(var0.ElementClusterRole)

			var1.Etag = types.Int64PointerValue(var0.Etag)

			if len(var0.ExtendedTags) == 0 {
				var1.ExtendedTags = nil
			} else {
				var1.ExtendedTags = make([]siteListDsModel_oPPPeKY_Config, 0, len(var0.ExtendedTags))
				for _, var2 := range var0.ExtendedTags {
					var3 := siteListDsModel_oPPPeKY_Config{}

					var3.Key = types.StringPointerValue(var2.Key)

					var3.Value = types.StringPointerValue(var2.Value)

					var3.ValueType = types.StringPointerValue(var2.ValueType)
					var1.ExtendedTags = append(var1.ExtendedTags, var3)
				}
			}

			var1.Id = types.StringPointerValue(var0.Id)

			if var0.Location == nil {
				var1.Location = nil
			} else {
				var1.Location = &siteListDsModel_hUAfQlh_Config{}

				var1.Location.Description = types.StringPointerValue(var0.Location.Description)

				var1.Location.Latitude = types.Float64PointerValue(var0.Location.Latitude)

				var1.Location.Longitude = types.Float64PointerValue(var0.Location.Longitude)
			}

			var1.MulticastPeerGroupId = types.StringPointerValue(var0.MulticastPeerGroupId)

			var1.Name = types.StringValue(var0.Name)

			var1.NatPolicysetstackId = types.StringPointerValue(var0.NatPolicysetstackId)

			var1.NetworkPolicysetstackId = types.StringPointerValue(var0.NetworkPolicysetstackId)

			var1.PerfmgmtPolicysetstackId = types.StringPointerValue(var0.PerfmgmtPolicysetstackId)

			var1.PolicySetId = types.StringPointerValue(var0.PolicySetId)

			var1.PreferLanDefaultOverWanDefaultRoute = types.BoolPointerValue(var0.PreferLanDefaultOverWanDefaultRoute)

			var1.PriorityPolicysetstackId = types.StringPointerValue(var0.PriorityPolicysetstackId)

			var1.SecurityPolicysetId = types.StringPointerValue(var0.SecurityPolicysetId)

			var1.SecurityPolicysetstackId = types.StringPointerValue(var0.SecurityPolicysetstackId)

			var1.ServiceBinding = types.StringPointerValue(var0.ServiceBinding)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var1.VrfContextProfileId = types.StringPointerValue(var0.VrfContextProfileId)
			state.Items = append(state.Items, var1)
		}
	}

	state.TotalItems = types.Int64PointerValue(ans.TotalItems)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &siteDataSource{}
	_ datasource.DataSourceWithConfigure = &siteDataSource{}
)

func NewSiteDataSource() datasource.DataSource {
	return &siteDataSource{}
}

type siteDataSource struct {
	client *sdwan.Client
}

// siteDsModel is the model.
type siteDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	SiteId types.String `tfsdk:"site_id"`

	// Output.
	Address                             *siteDsModel_mhJDwSQ_Config  `tfsdk:"address"`
	AdminState                          types.String                 `tfsdk:"admin_state"`
	BranchGateway                       types.Bool                   `tfsdk:"branch_gateway"`
	Description                         types.String                 `tfsdk:"description"`
	ElementClusterRole                  types.String                 `tfsdk:"element_cluster_role"`
	Etag                                types.Int64                  `tfsdk:"etag"`
	ExtendedTags                        []siteDsModel_oPPPeKY_Config `tfsdk:"extended_tags"`
	Id                                  types.String                 `tfsdk:"id"`
	Location                            *siteDsModel_hUAfQlh_Config  `tfsdk:"location"`
	MulticastPeerGroupId                types.String                 `tfsdk:"multicast_peer_group_id"`
	Name                                types.String                 `tfsdk:"name"`
	NatPolicysetstackId                 types.String                 `tfsdk:"nat_policysetstack_id"`
	NetworkPolicysetstackId             types.String                 `tfsdk:"network_policysetstack_id"`
	PerfmgmtPolicysetstackId            types.String                 `tfsdk:"perfmgmt_policysetstack_id"`
	PolicySetId                         types.String                 `tfsdk:"policy_set_id"`
	PreferLanDefaultOverWanDefaultRoute types.Bool                   `tfsdk:"prefer_lan_default_over_wan_default_route"`
	PriorityPolicysetstackId            types.String                 `tfsdk:"priority_policysetstack_id"`
	SecurityPolicysetId                 types.String                 `tfsdk:"security_policyset_id"`
	SecurityPolicysetstackId            types.String                 `tfsdk:"security_policysetstack_id"`
	ServiceBinding                      types.String                 `tfsdk:"service_binding"`
	Tags                                types.List                   `tfsdk:"tags"`
	VrfContextProfileId                 types.String                 `tfsdk:"vrf_context_profile_id"`
}

type siteDsModel_mhJDwSQ_Config struct {
	City     types.String `tfsdk:"city"`
	Country  types.String `tfsdk:"country"`
	PostCode types.String `tfsdk:"post_code"`
	State    types.String `tfsdk:"state"`
	Street   types.String `tfsdk:"street"`
	Street2  types.String `tfsdk:"street2"`
}

type siteDsModel_oPPPeKY_Config struct {
	Key       types.String `tfsdk:"key"`
	Value     types.String `tfsdk:"value"`
	ValueType types.String `tfsdk:"value_type"`
}

type siteDsModel_hUAfQlh_Config struct {
	Description types.String  `tfsdk:"description"`
	Latitude    types.Float64 `tfsdk:"latitude"`
	Longitude   types.Float64 `tfsdk:"longitude"`
}

// Metadata returns the data source type name.
func (d *siteDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_site"
}

// Schema defines the schema for this data source.
func (d *siteDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"site_id":true} outputs:map[string]bool{"address":true, "admin_state":true, "branch_gateway":true, "description":true, "element_cluster_role":true, "etag":true, "extended_tags":true, "id":true, "location":true, "multicast_peer_group_id":true, "name":true, "nat_policysetstack_id":true, "network_policysetstack_id":true, "perfmgmt_policysetstack_id":true, "policy_set_id":true, "prefer_lan_default_over_wan_default_route":true, "priority_policysetstack_id":true, "security_policyset_id":true, "security_policysetstack_id":true, "service_binding":true, "tags":true, "tfid":true, "vrf_context_profile_id":true} forceNew:map[string]bool{"site_id":true}
			"address": dsschema.SingleNestedAttribute{
				Description: "The Address param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"city":true, "country":true, "post_code":true, "state":true, "street":true, "street2":true} forceNew:map[string]bool(nil)
					"city": dsschema.StringAttribute{
						Description: "City: Length(max = 100, , min = 0) .",
						Computed:    true,
					},
					"country": dsschema.StringAttribute{
						Description: "Country: Length(max = 100, , min = 0) .",
						Computed:    true,
					},
					"post_code": dsschema.StringAttribute{
						Description: "Post Code: Length(max = 100, , min = 0) .",
						Computed:    true,
					},
					"state": dsschema.StringAttribute{
						Description: "State: Length(max = 100, , min = 0) .",
						Computed:    true,
					},
					"street": dsschema.StringAttribute{
						Description: "Street: Length(max = 100, , min = 0) .",
						Computed:    true,
					},
					"street2": dsschema.StringAttribute{
						Description: "Street2: Length(max = 100, , min = 0) .",
						Computed:    true,
					},
				},
			},
			"admin_state": dsschema.StringAttribute{
				Description: "Admin State: Required(error = SITE_ADMIN_STATE_MISSING: Site admin state missing.) ValidateEnum(enumClass = classOf[SiteState], message = Invalid enum string., nullAllowed = false) .",
				Computed:    true,
			},
			"branch_gateway": dsschema.BoolAttribute{
				Description: "Branch Gateway.",
				Computed:    true,
			},
			"description": dsschema.StringAttribute{
				Description: "Description: Size(max = 1024, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Computed:    true,
			},
			"element_cluster_role": dsschema.StringAttribute{
				Description: "Element Cluster Role: Required(error = SITE_ROLE_MISSING: Site role missing.) ValidateEnum(enumClass = classOf[ElementClusterRole], message = Invalid enum string., nullAllowed = false) .",
				Computed:    true,
			},
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"extended_tags": dsschema.ListNestedAttribute{
				Description: "Extended Tags: Valid ListObject(allowDuplicate = false, allowEmpty = true, allowNull = true, listMaxSize = 10, message = INVALID_EXTENDED_TAG_SIZE_OR_DUPLICATE, required = false) .",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"key":true, "value":true, "value_type":true} forceNew:map[string]bool(nil)
						"key": dsschema.StringAttribute{
							Description: "Key.",
							Computed:    true,
						},
						"value": dsschema.StringAttribute{
							Description: "Value.",
							Computed:    true,
						},
						"value_type": dsschema.StringAttribute{
							Description: "Value Type.",
							Computed:    true,
						},
					},
				},
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"location": dsschema.SingleNestedAttribute{
				Description: "The Location param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "latitude":true, "longitude":true} forceNew:map[string]bool(nil)
					"description": dsschema.StringAttribute{
						Description: "Description.",
						Computed:    true,
					},
					"latitude": dsschema.Float64Attribute{
						Description: "Latitude: Range(max = 90L, INVALID_LATITUDE_VALUE, min = -90L) .",
						Computed:    true,
					},
					"longitude": dsschema.Float64Attribute{
						Description: "Longitude: Range(max = 180L, INVALID_LONGITUDE_VALUE, min = -180L) .",
						Computed:    true,
					},
				},
			},
			"multicast_peer_group_id": dsschema.StringAttribute{
				Description: "Multicast Peer Group Id.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Name: Required(error = NAME_REQD: Please provide resource name.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Computed:    true,
			},
			"nat_policysetstack_id": dsschema.StringAttribute{
				Description: "Nat Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NAT_POLICYSETSTACK_ID: Invalid nat policy set stack id.) .",
				Computed:    true,
			},
			"network_policysetstack_id": dsschema.StringAttribute{
				Description: "Network Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NETWORK_POLICYSETSTACK_ID: Invalid network policy set stack id) .",
				Computed:    true,
			},
			"perfmgmt_policysetstack_id": dsschema.StringAttribute{
				Description: "Perfmgmt Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_PERFMGMT_POLICYSETSTACK_ID: Invalid performance management policy set stack id) .",
				Computed:    true,
			},
			"policy_set_id": dsschema.StringAttribute{
				Description: "Policy Set Id.",
				Computed:    true,
			},
			"prefer_lan_default_over_wan_default_route": dsschema.BoolAttribute{
				Description: "Prefer Lan Default Over Wan Default Route. Default: `false`.",
				Computed:    true,
			},
			"priority_policysetstack_id": dsschema.StringAttribute{
				Description: "Priority Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_PRIORITY_POLICYSETSTACK_ID: Invalid priority policy set stack id) .",
				Computed:    true,
			},
			"security_policyset_id": dsschema.StringAttribute{
				Description: "Security Policyset Id.",
				Computed:    true,
			},
			"security_policysetstack_id": dsschema.StringAttribute{
				Description: "Security Policysetstack Id.",
				Computed:    true,
			},
			"service_binding": dsschema.StringAttribute{
				Description: "Service Binding.",
				Computed:    true,
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
			},
			"tags": dsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 1024, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"vrf_context_profile_id": dsschema.StringAttribute{
				Description: "Vrf Context Profile Id.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *siteDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *siteDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state siteDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_site",
		"terraform_provider_function": "Read",
		"site_id":                     state.SiteId.ValueString(),
	})

	// Prepare to run the command.
	svc := vMYBRZK.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := vMYBRZK.ReadInput{}

	input.SiteId = StringValue(state.SiteId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.Address == nil {
		state.Address = nil
	} else {
		state.Address = &siteDsModel_mhJDwSQ_Config{}

		state.Address.City = types.StringPointerValue(ans.Address.City)

		state.Address.Country = types.StringPointerValue(ans.Address.Country)

		state.Address.PostCode = types.StringPointerValue(ans.Address.PostCode)

		state.Address.State = types.StringPointerValue(ans.Address.State)

		state.Address.Street = types.StringPointerValue(ans.Address.Street)

		state.Address.Street2 = types.StringPointerValue(ans.Address.Street2)
	}

	state.AdminState = types.StringValue(ans.AdminState)

	state.BranchGateway = types.BoolPointerValue(ans.BranchGateway)

	state.Description = types.StringPointerValue(ans.Description)

	state.ElementClusterRole = types.StringValue(ans.ElementClusterRole)

	state.Etag = types.Int64PointerValue(ans.Etag)

	if len(ans.ExtendedTags) == 0 {
		state.ExtendedTags = nil
	} else {
		state.ExtendedTags = make([]siteDsModel_oPPPeKY_Config, 0, len(ans.ExtendedTags))
		for _, var0 := range ans.ExtendedTags {
			var1 := siteDsModel_oPPPeKY_Config{}

			var1.Key = types.StringPointerValue(var0.Key)

			var1.Value = types.StringPointerValue(var0.Value)

			var1.ValueType = types.StringPointerValue(var0.ValueType)
			state.ExtendedTags = append(state.ExtendedTags, var1)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Location == nil {
		state.Location = nil
	} else {
		state.Location = &siteDsModel_hUAfQlh_Config{}

		state.Location.Description = types.StringPointerValue(ans.Location.Description)

		state.Location.Latitude = types.Float64PointerValue(ans.Location.Latitude)

		state.Location.Longitude = types.Float64PointerValue(ans.Location.Longitude)
	}

	state.MulticastPeerGroupId = types.StringPointerValue(ans.MulticastPeerGroupId)

	state.Name = types.StringValue(ans.Name)

	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)

	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)

	state.PerfmgmtPolicysetstackId = types.StringPointerValue(ans.PerfmgmtPolicysetstackId)

	state.PolicySetId = types.StringPointerValue(ans.PolicySetId)

	state.PreferLanDefaultOverWanDefaultRoute = types.BoolPointerValue(ans.PreferLanDefaultOverWanDefaultRoute)

	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)

	state.SecurityPolicysetId = types.StringPointerValue(ans.SecurityPolicysetId)

	state.SecurityPolicysetstackId = types.StringPointerValue(ans.SecurityPolicysetstackId)

	state.ServiceBinding = types.StringPointerValue(ans.ServiceBinding)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.VrfContextProfileId = types.StringPointerValue(ans.VrfContextProfileId)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &siteResource{}
	_ resource.ResourceWithConfigure   = &siteResource{}
	_ resource.ResourceWithImportState = &siteResource{}
)

func NewSiteResource() resource.Resource {
	return &siteResource{}
}

type siteResource struct {
	client *sdwan.Client
}

// siteRsModel is the model.
type siteRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Address                             *siteRsModel_mhJDwSQ_Config  `tfsdk:"address"`
	AdminState                          types.String                 `tfsdk:"admin_state"`
	BranchGateway                       types.Bool                   `tfsdk:"branch_gateway"`
	Description                         types.String                 `tfsdk:"description"`
	ElementClusterRole                  types.String                 `tfsdk:"element_cluster_role"`
	Etag                                types.Int64                  `tfsdk:"etag"`
	ExtendedTags                        []siteRsModel_oPPPeKY_Config `tfsdk:"extended_tags"`
	Id                                  types.String                 `tfsdk:"id"`
	Location                            *siteRsModel_hUAfQlh_Config  `tfsdk:"location"`
	MulticastPeerGroupId                types.String                 `tfsdk:"multicast_peer_group_id"`
	Name                                types.String                 `tfsdk:"name"`
	NatPolicysetstackId                 types.String                 `tfsdk:"nat_policysetstack_id"`
	NetworkPolicysetstackId             types.String                 `tfsdk:"network_policysetstack_id"`
	PerfmgmtPolicysetstackId            types.String                 `tfsdk:"perfmgmt_policysetstack_id"`
	PolicySetId                         types.String                 `tfsdk:"policy_set_id"`
	PreferLanDefaultOverWanDefaultRoute types.Bool                   `tfsdk:"prefer_lan_default_over_wan_default_route"`
	PriorityPolicysetstackId            types.String                 `tfsdk:"priority_policysetstack_id"`
	SecurityPolicysetId                 types.String                 `tfsdk:"security_policyset_id"`
	SecurityPolicysetstackId            types.String                 `tfsdk:"security_policysetstack_id"`
	ServiceBinding                      types.String                 `tfsdk:"service_binding"`
	Tags                                types.List                   `tfsdk:"tags"`
	VrfContextProfileId                 types.String                 `tfsdk:"vrf_context_profile_id"`

	// Output.
	// omit input: address
	// omit input: admin_state
	// omit input: branch_gateway
	// omit input: description
	// omit input: element_cluster_role
	// omit input: etag
	// omit input: extended_tags
	// omit input: id
	// omit input: location
	// omit input: multicast_peer_group_id
	// omit input: name
	// omit input: nat_policysetstack_id
	// omit input: network_policysetstack_id
	// omit input: perfmgmt_policysetstack_id
	// omit input: policy_set_id
	// omit input: prefer_lan_default_over_wan_default_route
	// omit input: priority_policysetstack_id
	// omit input: security_policyset_id
	// omit input: security_policysetstack_id
	// omit input: service_binding
	// omit input: tags
	// omit input: vrf_context_profile_id
}

type siteRsModel_mhJDwSQ_Config struct {
	City     types.String `tfsdk:"city"`
	Country  types.String `tfsdk:"country"`
	PostCode types.String `tfsdk:"post_code"`
	State    types.String `tfsdk:"state"`
	Street   types.String `tfsdk:"street"`
	Street2  types.String `tfsdk:"street2"`
}

type siteRsModel_oPPPeKY_Config struct {
	Key       types.String `tfsdk:"key"`
	Value     types.String `tfsdk:"value"`
	ValueType types.String `tfsdk:"value_type"`
}

type siteRsModel_hUAfQlh_Config struct {
	Description types.String  `tfsdk:"description"`
	Latitude    types.Float64 `tfsdk:"latitude"`
	Longitude   types.Float64 `tfsdk:"longitude"`
}

// Metadata returns the data source type name.
func (r *siteResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_site"
}

// Schema defines the schema for this data source.
func (r *siteResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"address":true, "admin_state":true, "branch_gateway":true, "description":true, "element_cluster_role":true, "etag":true, "extended_tags":true, "id":true, "location":true, "multicast_peer_group_id":true, "name":true, "nat_policysetstack_id":true, "network_policysetstack_id":true, "perfmgmt_policysetstack_id":true, "policy_set_id":true, "prefer_lan_default_over_wan_default_route":true, "priority_policysetstack_id":true, "security_policyset_id":true, "security_policysetstack_id":true, "service_binding":true, "tags":true, "vrf_context_profile_id":true} outputs:map[string]bool{"address":true, "admin_state":true, "branch_gateway":true, "description":true, "element_cluster_role":true, "etag":true, "extended_tags":true, "id":true, "location":true, "multicast_peer_group_id":true, "name":true, "nat_policysetstack_id":true, "network_policysetstack_id":true, "perfmgmt_policysetstack_id":true, "policy_set_id":true, "prefer_lan_default_over_wan_default_route":true, "priority_policysetstack_id":true, "security_policyset_id":true, "security_policysetstack_id":true, "service_binding":true, "tags":true, "tfid":true, "vrf_context_profile_id":true} forceNew:map[string]bool{}
			"address": rsschema.SingleNestedAttribute{
				Description: "The Address param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"city":true, "country":true, "post_code":true, "state":true, "street":true, "street2":true} outputs:map[string]bool{"city":true, "country":true, "post_code":true, "state":true, "street":true, "street2":true} forceNew:map[string]bool(nil)
					"city": rsschema.StringAttribute{
						Description: "City: Length(max = 100, , min = 0) .",
						Optional:    true,
					},
					"country": rsschema.StringAttribute{
						Description: "Country: Length(max = 100, , min = 0) .",
						Optional:    true,
					},
					"post_code": rsschema.StringAttribute{
						Description: "Post Code: Length(max = 100, , min = 0) .",
						Optional:    true,
					},
					"state": rsschema.StringAttribute{
						Description: "State: Length(max = 100, , min = 0) .",
						Optional:    true,
					},
					"street": rsschema.StringAttribute{
						Description: "Street: Length(max = 100, , min = 0) .",
						Optional:    true,
					},
					"street2": rsschema.StringAttribute{
						Description: "Street2: Length(max = 100, , min = 0) .",
						Optional:    true,
					},
				},
			},
			"admin_state": rsschema.StringAttribute{
				Description: "Admin State: Required(error = SITE_ADMIN_STATE_MISSING: Site admin state missing.) ValidateEnum(enumClass = classOf[SiteState], message = Invalid enum string., nullAllowed = false) .",
				Required:    true,
			},
			"branch_gateway": rsschema.BoolAttribute{
				Description: "Branch Gateway.",
				Optional:    true,
				Computed:    true,
			},
			"description": rsschema.StringAttribute{
				Description: "Description: Size(max = 1024, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Optional:    true,
			},
			"element_cluster_role": rsschema.StringAttribute{
				Description: "Element Cluster Role: Required(error = SITE_ROLE_MISSING: Site role missing.) ValidateEnum(enumClass = classOf[ElementClusterRole], message = Invalid enum string., nullAllowed = false) .",
				Required:    true,
			},
			"etag": rsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Optional:    true,
				Computed:    true,
			},
			"extended_tags": rsschema.ListNestedAttribute{
				Description: "Extended Tags: Valid ListObject(allowDuplicate = false, allowEmpty = true, allowNull = true, listMaxSize = 10, message = INVALID_EXTENDED_TAG_SIZE_OR_DUPLICATE, required = false) .",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"key":true, "value":true, "value_type":true} outputs:map[string]bool{"key":true, "value":true, "value_type":true} forceNew:map[string]bool(nil)
						"key": rsschema.StringAttribute{
							Description: "Key.",
							Optional:    true,
						},
						"value": rsschema.StringAttribute{
							Description: "Value.",
							Optional:    true,
						},
						"value_type": rsschema.StringAttribute{
							Description: "Value Type.",
							Optional:    true,
						},
					},
				},
			},
			"id": rsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"location": rsschema.SingleNestedAttribute{
				Description: "The Location param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"description":true, "latitude":true, "longitude":true} outputs:map[string]bool{"description":true, "latitude":true, "longitude":true} forceNew:map[string]bool(nil)
					"description": rsschema.StringAttribute{
						Description: "Description.",
						Optional:    true,
					},
					"latitude": rsschema.Float64Attribute{
						Description: "Latitude: Range(max = 90L, INVALID_LATITUDE_VALUE, min = -90L) .",
						Optional:    true,
					},
					"longitude": rsschema.Float64Attribute{
						Description: "Longitude: Range(max = 180L, INVALID_LONGITUDE_VALUE, min = -180L) .",
						Optional:    true,
					},
				},
			},
			"multicast_peer_group_id": rsschema.StringAttribute{
				Description: "Multicast Peer Group Id.",
				Optional:    true,
			},
			"name": rsschema.StringAttribute{
				Description: "Name: Required(error = NAME_REQD: Please provide resource name.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Required:    true,
			},
			"nat_policysetstack_id": rsschema.StringAttribute{
				Description: "Nat Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NAT_POLICYSETSTACK_ID: Invalid nat policy set stack id.) .",
				Optional:    true,
				Computed:    true,
			},
			"network_policysetstack_id": rsschema.StringAttribute{
				Description: "Network Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NETWORK_POLICYSETSTACK_ID: Invalid network policy set stack id) .",
				Optional:    true,
				Computed:    true,
			},
			"perfmgmt_policysetstack_id": rsschema.StringAttribute{
				Description: "Perfmgmt Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_PERFMGMT_POLICYSETSTACK_ID: Invalid performance management policy set stack id) .",
				Optional:    true,
				Computed:    true,
			},
			"policy_set_id": rsschema.StringAttribute{
				Description: "Policy Set Id.",
				Optional:    true,
			},
			"prefer_lan_default_over_wan_default_route": rsschema.BoolAttribute{
				Description: "Prefer Lan Default Over Wan Default Route. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"priority_policysetstack_id": rsschema.StringAttribute{
				Description: "Priority Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_PRIORITY_POLICYSETSTACK_ID: Invalid priority policy set stack id) .",
				Optional:    true,
				Computed:    true,
			},
			"security_policyset_id": rsschema.StringAttribute{
				Description: "Security Policyset Id.",
				Optional:    true,
			},
			"security_policysetstack_id": rsschema.StringAttribute{
				Description: "Security Policysetstack Id.",
				Optional:    true,
			},
			"service_binding": rsschema.StringAttribute{
				Description: "Service Binding.",
				Optional:    true,
				Computed:    true,
			},
			"tags": rsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 1024, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Optional:    true,
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"vrf_context_profile_id": rsschema.StringAttribute{
				Description: "Vrf Context Profile Id.",
				Optional:    true,
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (r *siteResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sdwan.Client)
}

// Create resource.
func (r *siteResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state siteRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_site",
		"terraform_provider_function": "Create",
	})

	// Prepare to create the config.
	svc := vMYBRZK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vMYBRZK.CreateInput{}

	input.Request = &uewNibC.Config{}

	if state.Address != nil {
		input.Request.Address = &mhJDwSQ.Config{}

		input.Request.Address.City = StringValueOrNil(state.Address.City)

		input.Request.Address.Country = StringValueOrNil(state.Address.Country)

		input.Request.Address.PostCode = StringValueOrNil(state.Address.PostCode)

		input.Request.Address.State = StringValueOrNil(state.Address.State)

		input.Request.Address.Street = StringValueOrNil(state.Address.Street)

		input.Request.Address.Street2 = StringValueOrNil(state.Address.Street2)
	}

	input.Request.AdminState = StringValue(state.AdminState)

	input.Request.BranchGateway = BoolValueOrNil(state.BranchGateway)

	input.Request.Description = StringValueOrNil(state.Description)

	input.Request.ElementClusterRole = StringValue(state.ElementClusterRole)

	input.Request.Etag = Int64ValueOrNil(state.Etag)

	if len(state.ExtendedTags) != 0 {
		input.Request.ExtendedTags = make([]oPPPeKY.Config, 0, len(state.ExtendedTags))
		for _, var0 := range state.ExtendedTags {
			var var1 oPPPeKY.Config

			var1.Key = StringValueOrNil(var0.Key)

			var1.Value = StringValueOrNil(var0.Value)

			var1.ValueType = StringValueOrNil(var0.ValueType)
			input.Request.ExtendedTags = append(input.Request.ExtendedTags, var1)
		}
	}

	if state.Location != nil {
		input.Request.Location = &hUAfQlh.Config{}

		input.Request.Location.Description = StringValueOrNil(state.Location.Description)

		input.Request.Location.Latitude = Float64ValueOrNil(state.Location.Latitude)

		input.Request.Location.Longitude = Float64ValueOrNil(state.Location.Longitude)
	}

	input.Request.MulticastPeerGroupId = StringValueOrNil(state.MulticastPeerGroupId)

	input.Request.Name = StringValue(state.Name)

	input.Request.NatPolicysetstackId = StringValueOrNil(state.NatPolicysetstackId)

	input.Request.NetworkPolicysetstackId = StringValueOrNil(state.NetworkPolicysetstackId)

	input.Request.PerfmgmtPolicysetstackId = StringValueOrNil(state.PerfmgmtPolicysetstackId)

	input.Request.PolicySetId = StringValueOrNil(state.PolicySetId)

	input.Request.PreferLanDefaultOverWanDefaultRoute = BoolValueOrNil(state.PreferLanDefaultOverWanDefaultRoute)

	input.Request.PriorityPolicysetstackId = StringValueOrNil(state.PriorityPolicysetstackId)

	input.Request.SecurityPolicysetId = StringValueOrNil(state.SecurityPolicysetId)

	input.Request.SecurityPolicysetstackId = StringValueOrNil(state.SecurityPolicysetstackId)

	input.Request.ServiceBinding = StringValueOrNil(state.ServiceBinding)

	input.Request.Tags = ListStringValueOrNil(ctx, state.Tags)

	input.Request.VrfContextProfileId = StringValueOrNil(state.VrfContextProfileId)

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.Address == nil {
		state.Address = nil
	} else {
		state.Address = &siteRsModel_mhJDwSQ_Config{}

		state.Address.City = types.StringPointerValue(ans.Address.City)

		state.Address.Country = types.StringPointerValue(ans.Address.Country)

		state.Address.PostCode = types.StringPointerValue(ans.Address.PostCode)

		state.Address.State = types.StringPointerValue(ans.Address.State)

		state.Address.Street = types.StringPointerValue(ans.Address.Street)

		state.Address.Street2 = types.StringPointerValue(ans.Address.Street2)
	}

	state.AdminState = types.StringValue(ans.AdminState)

	state.BranchGateway = types.BoolPointerValue(ans.BranchGateway)

	state.Description = types.StringPointerValue(ans.Description)

	state.ElementClusterRole = types.StringValue(ans.ElementClusterRole)

	state.Etag = types.Int64PointerValue(ans.Etag)

	if len(ans.ExtendedTags) == 0 {
		state.ExtendedTags = nil
	} else {
		state.ExtendedTags = make([]siteRsModel_oPPPeKY_Config, 0, len(ans.ExtendedTags))
		for _, var3 := range ans.ExtendedTags {
			var4 := siteRsModel_oPPPeKY_Config{}

			var4.Key = types.StringPointerValue(var3.Key)

			var4.Value = types.StringPointerValue(var3.Value)

			var4.ValueType = types.StringPointerValue(var3.ValueType)
			state.ExtendedTags = append(state.ExtendedTags, var4)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Location == nil {
		state.Location = nil
	} else {
		state.Location = &siteRsModel_hUAfQlh_Config{}

		state.Location.Description = types.StringPointerValue(ans.Location.Description)

		state.Location.Latitude = types.Float64PointerValue(ans.Location.Latitude)

		state.Location.Longitude = types.Float64PointerValue(ans.Location.Longitude)
	}

	state.MulticastPeerGroupId = types.StringPointerValue(ans.MulticastPeerGroupId)

	state.Name = types.StringValue(ans.Name)

	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)

	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)

	state.PerfmgmtPolicysetstackId = types.StringPointerValue(ans.PerfmgmtPolicysetstackId)

	state.PolicySetId = types.StringPointerValue(ans.PolicySetId)

	state.PreferLanDefaultOverWanDefaultRoute = types.BoolPointerValue(ans.PreferLanDefaultOverWanDefaultRoute)

	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)

	state.SecurityPolicysetId = types.StringPointerValue(ans.SecurityPolicysetId)

	state.SecurityPolicysetstackId = types.StringPointerValue(ans.SecurityPolicysetstackId)

	state.ServiceBinding = types.StringPointerValue(ans.ServiceBinding)

	var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var5
	resp.Diagnostics.Append(var6.Errors()...)

	state.VrfContextProfileId = types.StringPointerValue(ans.VrfContextProfileId)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *siteResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state siteRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_site",
		"locMap":                      map[string]int{"site_id": 0},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := vMYBRZK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vMYBRZK.ReadInput{}

	input.SiteId = tokens[0]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.
	state.Tfid = savestate.Tfid

	if ans.Address == nil {
		state.Address = nil
	} else {
		state.Address = &siteRsModel_mhJDwSQ_Config{}

		state.Address.City = types.StringPointerValue(ans.Address.City)

		state.Address.Country = types.StringPointerValue(ans.Address.Country)

		state.Address.PostCode = types.StringPointerValue(ans.Address.PostCode)

		state.Address.State = types.StringPointerValue(ans.Address.State)

		state.Address.Street = types.StringPointerValue(ans.Address.Street)

		state.Address.Street2 = types.StringPointerValue(ans.Address.Street2)
	}

	state.AdminState = types.StringValue(ans.AdminState)

	state.BranchGateway = types.BoolPointerValue(ans.BranchGateway)

	state.Description = types.StringPointerValue(ans.Description)

	state.ElementClusterRole = types.StringValue(ans.ElementClusterRole)

	state.Etag = types.Int64PointerValue(ans.Etag)

	if len(ans.ExtendedTags) == 0 {
		state.ExtendedTags = nil
	} else {
		state.ExtendedTags = make([]siteRsModel_oPPPeKY_Config, 0, len(ans.ExtendedTags))
		for _, var0 := range ans.ExtendedTags {
			var1 := siteRsModel_oPPPeKY_Config{}

			var1.Key = types.StringPointerValue(var0.Key)

			var1.Value = types.StringPointerValue(var0.Value)

			var1.ValueType = types.StringPointerValue(var0.ValueType)
			state.ExtendedTags = append(state.ExtendedTags, var1)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Location == nil {
		state.Location = nil
	} else {
		state.Location = &siteRsModel_hUAfQlh_Config{}

		state.Location.Description = types.StringPointerValue(ans.Location.Description)

		state.Location.Latitude = types.Float64PointerValue(ans.Location.Latitude)

		state.Location.Longitude = types.Float64PointerValue(ans.Location.Longitude)
	}

	state.MulticastPeerGroupId = types.StringPointerValue(ans.MulticastPeerGroupId)

	state.Name = types.StringValue(ans.Name)

	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)

	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)

	state.PerfmgmtPolicysetstackId = types.StringPointerValue(ans.PerfmgmtPolicysetstackId)

	state.PolicySetId = types.StringPointerValue(ans.PolicySetId)

	state.PreferLanDefaultOverWanDefaultRoute = types.BoolPointerValue(ans.PreferLanDefaultOverWanDefaultRoute)

	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)

	state.SecurityPolicysetId = types.StringPointerValue(ans.SecurityPolicysetId)

	state.SecurityPolicysetstackId = types.StringPointerValue(ans.SecurityPolicysetstackId)

	state.ServiceBinding = types.StringPointerValue(ans.ServiceBinding)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.VrfContextProfileId = types.StringPointerValue(ans.VrfContextProfileId)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *siteResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state siteRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_site",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := vMYBRZK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vMYBRZK.UpdateInput{}

	if tokens[0] != "" {
		input.SiteId = tokens[0]
	}
	input.Request = &uewNibC.Config{}

	if plan.Address != nil {
		input.Request.Address = &mhJDwSQ.Config{}

		input.Request.Address.City = ValueStringPointerFromPlanOrState(plan.Address.City, state.Address.City)

		input.Request.Address.Country = ValueStringPointerFromPlanOrState(plan.Address.Country, state.Address.Country)

		input.Request.Address.PostCode = ValueStringPointerFromPlanOrState(plan.Address.PostCode, state.Address.PostCode)

		input.Request.Address.State = ValueStringPointerFromPlanOrState(plan.Address.State, state.Address.State)

		input.Request.Address.Street = ValueStringPointerFromPlanOrState(plan.Address.Street, state.Address.Street)

		input.Request.Address.Street2 = ValueStringPointerFromPlanOrState(plan.Address.Street2, state.Address.Street2)
	}

	input.Request.AdminState = ValueStringFromPlanOrState(plan.AdminState, state.AdminState)

	input.Request.BranchGateway = ValueBoolPointerFromPlanOrState(plan.BranchGateway, state.BranchGateway)

	input.Request.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)

	input.Request.ElementClusterRole = ValueStringFromPlanOrState(plan.ElementClusterRole, state.ElementClusterRole)

	input.Request.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)

	if len(plan.ExtendedTags) != 0 || len(state.ExtendedTags) != 0 {
		ExtendedTagsToUse := plan.ExtendedTags
		if len(plan.ExtendedTags) == 0 {
			ExtendedTagsToUse = state.ExtendedTags
		}
		input.Request.ExtendedTags = make([]oPPPeKY.Config, 0, len(ExtendedTagsToUse))
		for _, var0 := range plan.ExtendedTags {
			var var1 oPPPeKY.Config

			var1.Key = StringValueOrNil(var0.Key)

			var1.Value = StringValueOrNil(var0.Value)

			var1.ValueType = StringValueOrNil(var0.ValueType)
			input.Request.ExtendedTags = append(input.Request.ExtendedTags, var1)
		}
	}

	if plan.Location != nil {
		input.Request.Location = &hUAfQlh.Config{}

		input.Request.Location.Description = ValueStringPointerFromPlanOrState(plan.Location.Description, state.Location.Description)

		input.Request.Location.Latitude = ValueFloat64PointerFromPlanOrState(plan.Location.Latitude, state.Location.Latitude)

		input.Request.Location.Longitude = ValueFloat64PointerFromPlanOrState(plan.Location.Longitude, state.Location.Longitude)
	}

	input.Request.MulticastPeerGroupId = ValueStringPointerFromPlanOrState(plan.MulticastPeerGroupId, state.MulticastPeerGroupId)

	input.Request.Name = ValueStringFromPlanOrState(plan.Name, state.Name)

	input.Request.NatPolicysetstackId = ValueStringPointerFromPlanOrState(plan.NatPolicysetstackId, state.NatPolicysetstackId)

	input.Request.NetworkPolicysetstackId = ValueStringPointerFromPlanOrState(plan.NetworkPolicysetstackId, state.NetworkPolicysetstackId)

	input.Request.PerfmgmtPolicysetstackId = ValueStringPointerFromPlanOrState(plan.PerfmgmtPolicysetstackId, state.PerfmgmtPolicysetstackId)

	input.Request.PolicySetId = ValueStringPointerFromPlanOrState(plan.PolicySetId, state.PolicySetId)

	input.Request.PreferLanDefaultOverWanDefaultRoute = ValueBoolPointerFromPlanOrState(plan.PreferLanDefaultOverWanDefaultRoute, state.PreferLanDefaultOverWanDefaultRoute)

	input.Request.PriorityPolicysetstackId = ValueStringPointerFromPlanOrState(plan.PriorityPolicysetstackId, state.PriorityPolicysetstackId)

	input.Request.SecurityPolicysetId = ValueStringPointerFromPlanOrState(plan.SecurityPolicysetId, state.SecurityPolicysetId)

	input.Request.SecurityPolicysetstackId = ValueStringPointerFromPlanOrState(plan.SecurityPolicysetstackId, state.SecurityPolicysetstackId)

	input.Request.ServiceBinding = ValueStringPointerFromPlanOrState(plan.ServiceBinding, state.ServiceBinding)

	input.Request.Tags = ListStringValueOrNil(ctx, plan.Tags)

	input.Request.VrfContextProfileId = ValueStringPointerFromPlanOrState(plan.VrfContextProfileId, state.VrfContextProfileId)

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	if ans.Address == nil {
		state.Address = nil
	} else {
		state.Address = &siteRsModel_mhJDwSQ_Config{}

		state.Address.City = types.StringPointerValue(ans.Address.City)

		state.Address.Country = types.StringPointerValue(ans.Address.Country)

		state.Address.PostCode = types.StringPointerValue(ans.Address.PostCode)

		state.Address.State = types.StringPointerValue(ans.Address.State)

		state.Address.Street = types.StringPointerValue(ans.Address.Street)

		state.Address.Street2 = types.StringPointerValue(ans.Address.Street2)
	}

	state.AdminState = types.StringValue(ans.AdminState)

	state.BranchGateway = types.BoolPointerValue(ans.BranchGateway)

	state.Description = types.StringPointerValue(ans.Description)

	state.ElementClusterRole = types.StringValue(ans.ElementClusterRole)

	state.Etag = types.Int64PointerValue(ans.Etag)

	if len(ans.ExtendedTags) == 0 {
		state.ExtendedTags = nil
	} else {
		state.ExtendedTags = make([]siteRsModel_oPPPeKY_Config, 0, len(ans.ExtendedTags))
		for _, var3 := range ans.ExtendedTags {
			var4 := siteRsModel_oPPPeKY_Config{}

			var4.Key = types.StringPointerValue(var3.Key)

			var4.Value = types.StringPointerValue(var3.Value)

			var4.ValueType = types.StringPointerValue(var3.ValueType)
			state.ExtendedTags = append(state.ExtendedTags, var4)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Location == nil {
		state.Location = nil
	} else {
		state.Location = &siteRsModel_hUAfQlh_Config{}

		state.Location.Description = types.StringPointerValue(ans.Location.Description)

		state.Location.Latitude = types.Float64PointerValue(ans.Location.Latitude)

		state.Location.Longitude = types.Float64PointerValue(ans.Location.Longitude)
	}

	state.MulticastPeerGroupId = types.StringPointerValue(ans.MulticastPeerGroupId)

	state.Name = types.StringValue(ans.Name)

	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)

	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)

	state.PerfmgmtPolicysetstackId = types.StringPointerValue(ans.PerfmgmtPolicysetstackId)

	state.PolicySetId = types.StringPointerValue(ans.PolicySetId)

	state.PreferLanDefaultOverWanDefaultRoute = types.BoolPointerValue(ans.PreferLanDefaultOverWanDefaultRoute)

	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)

	state.SecurityPolicysetId = types.StringPointerValue(ans.SecurityPolicysetId)

	state.SecurityPolicysetstackId = types.StringPointerValue(ans.SecurityPolicysetstackId)

	state.ServiceBinding = types.StringPointerValue(ans.ServiceBinding)

	var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var5
	resp.Diagnostics.Append(var6.Errors()...)

	state.VrfContextProfileId = types.StringPointerValue(ans.VrfContextProfileId)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *siteResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_site",
		"locMap":                      map[string]int{"site_id": 0},
		"tokens":                      tokens,
	})

	svc := vMYBRZK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vMYBRZK.DeleteInput{}

	input.SiteId = tokens[0]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *siteResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
