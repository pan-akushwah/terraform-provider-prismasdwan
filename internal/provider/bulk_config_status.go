package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	dvnOhnM "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v20/api/bulkconfigurations/sitetemplates/sitetemplateid/status"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source.
var (
	_ datasource.DataSource              = &bulkConfigStatusDataSource{}
	_ datasource.DataSourceWithConfigure = &bulkConfigStatusDataSource{}
)

func NewBulkConfigStatusDataSource() datasource.DataSource {
	return &bulkConfigStatusDataSource{}
}

type bulkConfigStatusDataSource struct {
	client *sdwan.Client
}

// bulkConfigStatusDsModel is the model.
type bulkConfigStatusDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	SiteTemplateId types.String `tfsdk:"site_template_id"`

	// Output.
	Etag              types.Int64  `tfsdk:"etag"`
	Id                types.String `tfsdk:"id"`
	Status            types.String `tfsdk:"status"`
	StatusDescription types.String `tfsdk:"status_description"`
}

// Metadata returns the data source type name.
func (d *bulkConfigStatusDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_bulk_config_status"
}

// Schema defines the schema for this data source.
func (d *bulkConfigStatusDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"site_template_id":true} outputs:map[string]bool{"etag":true, "id":true, "status":true, "status_description":true, "tfid":true} forceNew:map[string]bool{"site_template_id":true}
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"site_template_id": dsschema.StringAttribute{
				Description: "Site Template Id.",
				Required:    true,
			},
			"status": dsschema.StringAttribute{
				Description: "Status.",
				Computed:    true,
			},
			"status_description": dsschema.StringAttribute{
				Description: "Status Description.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *bulkConfigStatusDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *bulkConfigStatusDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state bulkConfigStatusDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_bulk_config_status",
		"terraform_provider_function": "Read",
		"site_template_id":            state.SiteTemplateId.ValueString(),
	})

	// Prepare to run the command.
	svc := dvnOhnM.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.ReadInput{}

	input.SiteTemplateId = StringValue(state.SiteTemplateId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteTemplateId)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Status = types.StringPointerValue(ans.Status)

	state.StatusDescription = types.StringPointerValue(ans.StatusDescription)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
