package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=6)
// | Computed Resource Name=natpolicysets_natpolicyrules
// +-----------------------------------------------------------------
// | NATPolicyZone HasID=true
// | NATPolicyPool HasID=true
// | BasePolicyPrefixS HasID=true
// | NATAction HasID=false
// | PortRange HasID=false
// | NATPolicyRule HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &natPolicyRuleResource{}
	_ resource.ResourceWithConfigure   = &natPolicyRuleResource{}
	_ resource.ResourceWithImportState = &natPolicyRuleResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewNatPolicyRuleResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewNatPolicyRuleResource() resource.Resource {
	return &natPolicyRuleResource{}
}

type natPolicyRuleResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *natPolicyRuleResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_nat_policy_rule"
}

// Schema defines the schema for this data source.
func (r *natPolicyRuleResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=NATPolicyRule
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=actions, type=ARRAY_REFERENCE macro=rss_schema
			"actions": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=nat_pool_id, type=STRING macro=rss_schema
						"nat_pool_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=nat_pool_id, type=STRING macro=rss_schema
						// property: name=port, type=INTEGER macro=rss_schema
						"port": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=port, type=INTEGER macro=rss_schema
						// property: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
						"protocols": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=type, type=STRING macro=rss_schema
						"type": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=type, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=type, type=STRING macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=destination_ports, type=ARRAY_REFERENCE macro=rss_schema
			"destination_ports": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=from, type=INTEGER macro=rss_schema
						"from": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=from, type=INTEGER macro=rss_schema
						// property: name=to, type=INTEGER macro=rss_schema
						"to": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
			// property: name=destination_prefixes, type=REFERENCE macro=rss_schema
			"destination_prefixes": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// generic x_parameters is added to accomodate path parameters
					"x_parameters": rsschema.MapAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						ElementType: types.StringType,
					},
					// property: name=_etag, type=INTEGER macro=rss_schema
					"x_etag": rsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
					// property: name=_schema, type=INTEGER macro=rss_schema
					"x_schema": rsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
					// property: name=description, type=STRING macro=rss_schema
					"description": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=id, type=STRING macro=rss_schema
					"id": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=id, type=STRING macro=rss_schema
					// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"ipv4_prefixes": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"ipv6_prefixes": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=name, type=STRING macro=rss_schema
					"name": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=name, type=STRING macro=rss_schema
					// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
					"tags": rsschema.SetAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=destination_prefixes_id, type=STRING macro=rss_schema
			"destination_prefixes_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=destination_prefixes_id, type=STRING macro=rss_schema
			// property: name=destination_zone, type=REFERENCE macro=rss_schema
			"destination_zone": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// generic x_parameters is added to accomodate path parameters
					"x_parameters": rsschema.MapAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						ElementType: types.StringType,
					},
					// property: name=_etag, type=INTEGER macro=rss_schema
					"x_etag": rsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
					// property: name=_schema, type=INTEGER macro=rss_schema
					"x_schema": rsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
					// property: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
					"default_for_public_interfaces": rsschema.BoolAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
					// property: name=description, type=STRING macro=rss_schema
					"description": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=disabled, type=BOOLEAN macro=rss_schema
					"disabled": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
					// property: name=disabled_reason, type=STRING macro=rss_schema
					"disabled_reason": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
					// property: name=id, type=STRING macro=rss_schema
					"id": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=id, type=STRING macro=rss_schema
					// property: name=inactive, type=BOOLEAN macro=rss_schema
					"inactive": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
					// property: name=inactive_reason, type=STRING macro=rss_schema
					"inactive_reason": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
					// property: name=name, type=STRING macro=rss_schema
					"name": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=name, type=STRING macro=rss_schema
					// property: name=region, type=STRING macro=rss_schema
					"region": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=region, type=STRING macro=rss_schema
					// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
					"tags": rsschema.SetAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=destination_zone_id, type=STRING macro=rss_schema
			"destination_zone_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=destination_zone_id, type=STRING macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=enabled, type=BOOLEAN macro=rss_schema
			"enabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=natpolicypools, type=ARRAY_REFERENCE macro=rss_schema
			"natpolicypools": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": rsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=description, type=STRING macro=rss_schema
						"description": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=description, type=STRING macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": rsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
						"tags": rsschema.SetAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=policyset_id, type=STRING macro=rss_schema
			"policyset_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=policyset_id, type=STRING macro=rss_schema
			// property: name=protocol, type=INTEGER macro=rss_schema
			"protocol": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=protocol, type=INTEGER macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=source_ports, type=ARRAY_REFERENCE macro=rss_schema
			"source_ports": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=from, type=INTEGER macro=rss_schema
						"from": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=from, type=INTEGER macro=rss_schema
						// property: name=to, type=INTEGER macro=rss_schema
						"to": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
			// property: name=source_prefixes, type=REFERENCE macro=rss_schema
			"source_prefixes": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// generic x_parameters is added to accomodate path parameters
					"x_parameters": rsschema.MapAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						ElementType: types.StringType,
					},
					// property: name=_etag, type=INTEGER macro=rss_schema
					"x_etag": rsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
					// property: name=_schema, type=INTEGER macro=rss_schema
					"x_schema": rsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
					// property: name=description, type=STRING macro=rss_schema
					"description": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=id, type=STRING macro=rss_schema
					"id": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=id, type=STRING macro=rss_schema
					// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"ipv4_prefixes": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"ipv6_prefixes": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=name, type=STRING macro=rss_schema
					"name": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=name, type=STRING macro=rss_schema
					// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
					"tags": rsschema.SetAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=source_prefixes_id, type=STRING macro=rss_schema
			"source_prefixes_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=source_prefixes_id, type=STRING macro=rss_schema
			// property: name=source_zone, type=REFERENCE macro=rss_schema
			"source_zone": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// generic x_parameters is added to accomodate path parameters
					"x_parameters": rsschema.MapAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						ElementType: types.StringType,
					},
					// property: name=_etag, type=INTEGER macro=rss_schema
					"x_etag": rsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
					// property: name=_schema, type=INTEGER macro=rss_schema
					"x_schema": rsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
					// property: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
					"default_for_public_interfaces": rsschema.BoolAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
					// property: name=description, type=STRING macro=rss_schema
					"description": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=disabled, type=BOOLEAN macro=rss_schema
					"disabled": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
					// property: name=disabled_reason, type=STRING macro=rss_schema
					"disabled_reason": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
					// property: name=id, type=STRING macro=rss_schema
					"id": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=id, type=STRING macro=rss_schema
					// property: name=inactive, type=BOOLEAN macro=rss_schema
					"inactive": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
					// property: name=inactive_reason, type=STRING macro=rss_schema
					"inactive_reason": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
					// property: name=name, type=STRING macro=rss_schema
					"name": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=name, type=STRING macro=rss_schema
					// property: name=region, type=STRING macro=rss_schema
					"region": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=region, type=STRING macro=rss_schema
					// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
					"tags": rsschema.SetAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=source_zone_id, type=STRING macro=rss_schema
			"source_zone_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=source_zone_id, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *natPolicyRuleResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *natPolicyRuleResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	case "POLICYRULE_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *natPolicyRuleResource) doPost(ctx context.Context, plan *rsModelNATPolicyRule, state *rsModelNATPolicyRule, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_nat_policy_rule")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_nat_policy_rule",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.0/api/natpolicysets/{nat_policy_set_id}/natpolicyrules"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, plan.TfParameters)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.NATPolicyRule{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=26
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=actions, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.Actions == nil {
		body.Actions = nil
	} else if len(plan.Actions) == 0 {
		body.Actions = []sdwan_schema.NATAction{}
	} else {
		body.Actions = make([]sdwan_schema.NATAction, 0, len(plan.Actions))
		for varLoopActionsIndex, varLoopActions := range plan.Actions {
			// add a new item
			body.Actions = append(body.Actions, sdwan_schema.NATAction{})
			// copy_from_plan: body=body.Actions[varLoopActionsIndex] prefix=rsModel plan=varLoopActions properties=4
			// property: name=nat_pool_id, type=STRING macro=copy_from_plan
			body.Actions[varLoopActionsIndex].NatPoolId = StringValueOrNil(varLoopActions.NatPoolId)
			// property: name=port, type=INTEGER macro=copy_from_plan
			body.Actions[varLoopActionsIndex].Port = Int64ValueOrNil(varLoopActions.Port)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Actions[varLoopActionsIndex].Protocols = ListStringValueOrNil(ctx, varLoopActions.Protocols)
			// property: name=type, type=STRING macro=copy_from_plan
			body.Actions[varLoopActionsIndex].Type = StringValueOrNil(varLoopActions.Type)
		}
	}
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.DestinationPorts == nil {
		body.DestinationPorts = nil
	} else if len(plan.DestinationPorts) == 0 {
		body.DestinationPorts = []sdwan_schema.PortRange{}
	} else {
		body.DestinationPorts = make([]sdwan_schema.PortRange, 0, len(plan.DestinationPorts))
		for varLoopDestinationPortsIndex, varLoopDestinationPorts := range plan.DestinationPorts {
			// add a new item
			body.DestinationPorts = append(body.DestinationPorts, sdwan_schema.PortRange{})
			// copy_from_plan: body=body.DestinationPorts[varLoopDestinationPortsIndex] prefix=rsModel plan=varLoopDestinationPorts properties=2
			// property: name=from, type=INTEGER macro=copy_from_plan
			body.DestinationPorts[varLoopDestinationPortsIndex].From = Int64ValueOrNil(varLoopDestinationPorts.From)
			// property: name=to, type=INTEGER macro=copy_from_plan
			body.DestinationPorts[varLoopDestinationPortsIndex].To = Int64ValueOrNil(varLoopDestinationPorts.To)
		}
	}
	// property: name=destination_prefixes, type=REFERENCE macro=copy_from_plan
	if plan.DestinationPrefixes != nil {
		body.DestinationPrefixes = &sdwan_schema.BasePolicyPrefixS{}
		// copy_from_plan: body=body.DestinationPrefixes prefix=rsModel plan=plan.DestinationPrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_from_plan
		body.DestinationPrefixes.Etag = Int64ValueOrNil(plan.DestinationPrefixes.Etag)
		// property: name=_schema, type=INTEGER macro=copy_from_plan
		body.DestinationPrefixes.Schema = Int64ValueOrNil(plan.DestinationPrefixes.Schema)
		// property: name=description, type=STRING macro=copy_from_plan
		body.DestinationPrefixes.Description = StringValueOrNil(plan.DestinationPrefixes.Description)
		// property: name=id, type=STRING macro=copy_from_plan
		body.DestinationPrefixes.Id = StringValueOrNil(plan.DestinationPrefixes.Id)
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.DestinationPrefixes.Ipv4Prefixes = ListStringValueOrNil(ctx, plan.DestinationPrefixes.Ipv4Prefixes)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.DestinationPrefixes.Ipv6Prefixes = ListStringValueOrNil(ctx, plan.DestinationPrefixes.Ipv6Prefixes)
		// property: name=name, type=STRING macro=copy_from_plan
		body.DestinationPrefixes.Name = StringValueOrNil(plan.DestinationPrefixes.Name)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
		body.DestinationPrefixes.Tags = SetStringValueOrNil(ctx, plan.DestinationPrefixes.Tags)
	}
	// property: name=destination_prefixes_id, type=STRING macro=copy_from_plan
	body.DestinationPrefixesId = StringValueOrNil(plan.DestinationPrefixesId)
	// property: name=destination_zone, type=REFERENCE macro=copy_from_plan
	if plan.DestinationZone != nil {
		body.DestinationZone = &sdwan_schema.NATPolicyZone{}
		// copy_from_plan: body=body.DestinationZone prefix=rsModel plan=plan.DestinationZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_from_plan
		body.DestinationZone.Etag = Int64ValueOrNil(plan.DestinationZone.Etag)
		// property: name=_schema, type=INTEGER macro=copy_from_plan
		body.DestinationZone.Schema = Int64ValueOrNil(plan.DestinationZone.Schema)
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_from_plan
		body.DestinationZone.DefaultForPublicInterfaces = BoolValueOrNil(plan.DestinationZone.DefaultForPublicInterfaces)
		// property: name=description, type=STRING macro=copy_from_plan
		body.DestinationZone.Description = StringValueOrNil(plan.DestinationZone.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_from_plan
		body.DestinationZone.Disabled = BoolValueOrNil(plan.DestinationZone.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_from_plan
		body.DestinationZone.DisabledReason = StringValueOrNil(plan.DestinationZone.DisabledReason)
		// property: name=id, type=STRING macro=copy_from_plan
		body.DestinationZone.Id = StringValueOrNil(plan.DestinationZone.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_from_plan
		body.DestinationZone.Inactive = BoolValueOrNil(plan.DestinationZone.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_from_plan
		body.DestinationZone.InactiveReason = StringValueOrNil(plan.DestinationZone.InactiveReason)
		// property: name=name, type=STRING macro=copy_from_plan
		body.DestinationZone.Name = StringValueOrNil(plan.DestinationZone.Name)
		// property: name=region, type=STRING macro=copy_from_plan
		body.DestinationZone.Region = StringValueOrNil(plan.DestinationZone.Region)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
		body.DestinationZone.Tags = SetStringValueOrNil(ctx, plan.DestinationZone.Tags)
	}
	// property: name=destination_zone_id, type=STRING macro=copy_from_plan
	body.DestinationZoneId = StringValueOrNil(plan.DestinationZoneId)
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan
	body.Disabled = BoolValueOrNil(plan.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_from_plan
	body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	// property: name=enabled, type=BOOLEAN macro=copy_from_plan
	body.Enabled = BoolValueOrNil(plan.Enabled)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan
	body.Inactive = BoolValueOrNil(plan.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_from_plan
	body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.Natpolicypools == nil {
		body.Natpolicypools = nil
	} else if len(plan.Natpolicypools) == 0 {
		body.Natpolicypools = []sdwan_schema.NATPolicyPool{}
	} else {
		body.Natpolicypools = make([]sdwan_schema.NATPolicyPool, 0, len(plan.Natpolicypools))
		for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range plan.Natpolicypools {
			// add a new item
			body.Natpolicypools = append(body.Natpolicypools, sdwan_schema.NATPolicyPool{})
			// copy_from_plan: body=body.Natpolicypools[varLoopNatpolicypoolsIndex] prefix=rsModel plan=varLoopNatpolicypools properties=6
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Etag = Int64ValueOrNil(varLoopNatpolicypools.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Schema = Int64ValueOrNil(varLoopNatpolicypools.Schema)
			// property: name=description, type=STRING macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Description = StringValueOrNil(varLoopNatpolicypools.Description)
			// property: name=id, type=STRING macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Id = StringValueOrNil(varLoopNatpolicypools.Id)
			// property: name=name, type=STRING macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Name = StringValueOrNil(varLoopNatpolicypools.Name)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Tags = SetStringValueOrNil(ctx, varLoopNatpolicypools.Tags)
		}
	}
	// property: name=policyset_id, type=STRING macro=copy_from_plan
	body.PolicysetId = StringValueOrNil(plan.PolicysetId)
	// property: name=protocol, type=INTEGER macro=copy_from_plan
	body.Protocol = Int64ValueOrNil(plan.Protocol)
	// property: name=region, type=STRING macro=copy_from_plan
	body.Region = StringValueOrNil(plan.Region)
	// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.SourcePorts == nil {
		body.SourcePorts = nil
	} else if len(plan.SourcePorts) == 0 {
		body.SourcePorts = []sdwan_schema.PortRange{}
	} else {
		body.SourcePorts = make([]sdwan_schema.PortRange, 0, len(plan.SourcePorts))
		for varLoopSourcePortsIndex, varLoopSourcePorts := range plan.SourcePorts {
			// add a new item
			body.SourcePorts = append(body.SourcePorts, sdwan_schema.PortRange{})
			// copy_from_plan: body=body.SourcePorts[varLoopSourcePortsIndex] prefix=rsModel plan=varLoopSourcePorts properties=2
			// property: name=from, type=INTEGER macro=copy_from_plan
			body.SourcePorts[varLoopSourcePortsIndex].From = Int64ValueOrNil(varLoopSourcePorts.From)
			// property: name=to, type=INTEGER macro=copy_from_plan
			body.SourcePorts[varLoopSourcePortsIndex].To = Int64ValueOrNil(varLoopSourcePorts.To)
		}
	}
	// property: name=source_prefixes, type=REFERENCE macro=copy_from_plan
	if plan.SourcePrefixes != nil {
		body.SourcePrefixes = &sdwan_schema.BasePolicyPrefixS{}
		// copy_from_plan: body=body.SourcePrefixes prefix=rsModel plan=plan.SourcePrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_from_plan
		body.SourcePrefixes.Etag = Int64ValueOrNil(plan.SourcePrefixes.Etag)
		// property: name=_schema, type=INTEGER macro=copy_from_plan
		body.SourcePrefixes.Schema = Int64ValueOrNil(plan.SourcePrefixes.Schema)
		// property: name=description, type=STRING macro=copy_from_plan
		body.SourcePrefixes.Description = StringValueOrNil(plan.SourcePrefixes.Description)
		// property: name=id, type=STRING macro=copy_from_plan
		body.SourcePrefixes.Id = StringValueOrNil(plan.SourcePrefixes.Id)
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.SourcePrefixes.Ipv4Prefixes = ListStringValueOrNil(ctx, plan.SourcePrefixes.Ipv4Prefixes)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.SourcePrefixes.Ipv6Prefixes = ListStringValueOrNil(ctx, plan.SourcePrefixes.Ipv6Prefixes)
		// property: name=name, type=STRING macro=copy_from_plan
		body.SourcePrefixes.Name = StringValueOrNil(plan.SourcePrefixes.Name)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
		body.SourcePrefixes.Tags = SetStringValueOrNil(ctx, plan.SourcePrefixes.Tags)
	}
	// property: name=source_prefixes_id, type=STRING macro=copy_from_plan
	body.SourcePrefixesId = StringValueOrNil(plan.SourcePrefixesId)
	// property: name=source_zone, type=REFERENCE macro=copy_from_plan
	if plan.SourceZone != nil {
		body.SourceZone = &sdwan_schema.NATPolicyZone{}
		// copy_from_plan: body=body.SourceZone prefix=rsModel plan=plan.SourceZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_from_plan
		body.SourceZone.Etag = Int64ValueOrNil(plan.SourceZone.Etag)
		// property: name=_schema, type=INTEGER macro=copy_from_plan
		body.SourceZone.Schema = Int64ValueOrNil(plan.SourceZone.Schema)
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_from_plan
		body.SourceZone.DefaultForPublicInterfaces = BoolValueOrNil(plan.SourceZone.DefaultForPublicInterfaces)
		// property: name=description, type=STRING macro=copy_from_plan
		body.SourceZone.Description = StringValueOrNil(plan.SourceZone.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_from_plan
		body.SourceZone.Disabled = BoolValueOrNil(plan.SourceZone.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_from_plan
		body.SourceZone.DisabledReason = StringValueOrNil(plan.SourceZone.DisabledReason)
		// property: name=id, type=STRING macro=copy_from_plan
		body.SourceZone.Id = StringValueOrNil(plan.SourceZone.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_from_plan
		body.SourceZone.Inactive = BoolValueOrNil(plan.SourceZone.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_from_plan
		body.SourceZone.InactiveReason = StringValueOrNil(plan.SourceZone.InactiveReason)
		// property: name=name, type=STRING macro=copy_from_plan
		body.SourceZone.Name = StringValueOrNil(plan.SourceZone.Name)
		// property: name=region, type=STRING macro=copy_from_plan
		body.SourceZone.Region = StringValueOrNil(plan.SourceZone.Region)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
		body.SourceZone.Tags = SetStringValueOrNil(ctx, plan.SourceZone.Tags)
	}
	// property: name=source_zone_id, type=STRING macro=copy_from_plan
	body.SourceZoneId = StringValueOrNil(plan.SourceZoneId)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct NATPolicyRule to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_req_version")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "send_to_element")
	request_body_string, _ = sjson.Delete(request_body_string, "update_order")
	request_body_string, _ = sjson.Delete(request_body_string, "policyset_id")
	request_body_string, _ = sjson.Delete(request_body_string, "destination_prefixes")
	request_body_string, _ = sjson.Delete(request_body_string, "source_prefixes")
	request_body_string, _ = sjson.Delete(request_body_string, "destination_zone")
	request_body_string, _ = sjson.Delete(request_body_string, "source_zone")
	request_body_string, _ = sjson.Delete(request_body_string, "natpolicypools")
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_nat_policy_rule", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_nat_policy_rule",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_nat_policy_rule", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_nat_policy_rule",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_nat_policy_rule", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.NATPolicyRule
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATPolicyRule in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_nat_policy_rule with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=NATPolicyRule
	// copy_to_state: state=state prefix=rsModel ans=ans properties=26
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Actions == nil {
		state.Actions = nil
	} else if len(ans.Actions) == 0 {
		state.Actions = []rsModelNATAction{}
	} else {
		state.Actions = make([]rsModelNATAction, 0, len(ans.Actions))
		for varLoopActionsIndex, varLoopActions := range ans.Actions {
			// add a new item
			state.Actions = append(state.Actions, rsModelNATAction{})
			// copy_to_state: state=state.Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions properties=4
			// property: name=nat_pool_id, type=STRING macro=copy_to_state
			state.Actions[varLoopActionsIndex].NatPoolId = types.StringPointerValue(varLoopActions.NatPoolId)
			// property: name=port, type=INTEGER macro=copy_to_state
			state.Actions[varLoopActionsIndex].Port = types.Int64PointerValue(varLoopActions.Port)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
			varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopActions.Protocols)
			state.Actions[varLoopActionsIndex].Protocols = varProtocols
			resp.Diagnostics.Append(errProtocols.Errors()...)
			// property: name=type, type=STRING macro=copy_to_state
			state.Actions[varLoopActionsIndex].Type = types.StringPointerValue(varLoopActions.Type)
		}
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DestinationPorts == nil {
		state.DestinationPorts = nil
	} else if len(ans.DestinationPorts) == 0 {
		state.DestinationPorts = []rsModelPortRange{}
	} else {
		state.DestinationPorts = make([]rsModelPortRange, 0, len(ans.DestinationPorts))
		for varLoopDestinationPortsIndex, varLoopDestinationPorts := range ans.DestinationPorts {
			// add a new item
			state.DestinationPorts = append(state.DestinationPorts, rsModelPortRange{})
			// copy_to_state: state=state.DestinationPorts[varLoopDestinationPortsIndex] prefix=rsModel ans=varLoopDestinationPorts properties=2
			// property: name=from, type=INTEGER macro=copy_to_state
			state.DestinationPorts[varLoopDestinationPortsIndex].From = types.Int64PointerValue(varLoopDestinationPorts.From)
			// property: name=to, type=INTEGER macro=copy_to_state
			state.DestinationPorts[varLoopDestinationPortsIndex].To = types.Int64PointerValue(varLoopDestinationPorts.To)
		}
	}
	// property: name=destination_prefixes, type=REFERENCE macro=copy_to_state
	if ans.DestinationPrefixes == nil {
		state.DestinationPrefixes = nil
	} else {
		state.DestinationPrefixes = &rsModelBasePolicyPrefixS{}
		// copy_to_state: state=state.DestinationPrefixes prefix=rsModel ans=ans.DestinationPrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DestinationPrefixes.Etag = types.Int64PointerValue(ans.DestinationPrefixes.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DestinationPrefixes.Schema = types.Int64PointerValue(ans.DestinationPrefixes.Schema)
		// property: name=description, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Description = types.StringPointerValue(ans.DestinationPrefixes.Description)
		// property: name=id, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Id = types.StringPointerValue(ans.DestinationPrefixes.Id)
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Ipv4Prefixes)
		state.DestinationPrefixes.Ipv4Prefixes = varIpv4Prefixes
		resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Ipv6Prefixes)
		state.DestinationPrefixes.Ipv6Prefixes = varIpv6Prefixes
		resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
		// property: name=name, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Name = types.StringPointerValue(ans.DestinationPrefixes.Name)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Tags)
		state.DestinationPrefixes.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
	state.DestinationPrefixesId = types.StringPointerValue(ans.DestinationPrefixesId)
	// property: name=destination_zone, type=REFERENCE macro=copy_to_state
	if ans.DestinationZone == nil {
		state.DestinationZone = nil
	} else {
		state.DestinationZone = &rsModelNATPolicyZone{}
		// copy_to_state: state=state.DestinationZone prefix=rsModel ans=ans.DestinationZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DestinationZone.Etag = types.Int64PointerValue(ans.DestinationZone.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DestinationZone.Schema = types.Int64PointerValue(ans.DestinationZone.Schema)
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.DefaultForPublicInterfaces = types.BoolPointerValue(ans.DestinationZone.DefaultForPublicInterfaces)
		// property: name=description, type=STRING macro=copy_to_state
		state.DestinationZone.Description = types.StringPointerValue(ans.DestinationZone.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.Disabled = types.BoolPointerValue(ans.DestinationZone.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.DestinationZone.DisabledReason = types.StringPointerValue(ans.DestinationZone.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.DestinationZone.Id = types.StringPointerValue(ans.DestinationZone.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.Inactive = types.BoolPointerValue(ans.DestinationZone.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.DestinationZone.InactiveReason = types.StringPointerValue(ans.DestinationZone.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.DestinationZone.Name = types.StringPointerValue(ans.DestinationZone.Name)
		// property: name=region, type=STRING macro=copy_to_state
		state.DestinationZone.Region = types.StringPointerValue(ans.DestinationZone.Region)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DestinationZone.Tags)
		state.DestinationZone.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=destination_zone_id, type=STRING macro=copy_to_state
	state.DestinationZoneId = types.StringPointerValue(ans.DestinationZoneId)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=enabled, type=BOOLEAN macro=copy_to_state
	state.Enabled = types.BoolPointerValue(ans.Enabled)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Natpolicypools == nil {
		state.Natpolicypools = nil
	} else if len(ans.Natpolicypools) == 0 {
		state.Natpolicypools = []rsModelNATPolicyPool{}
	} else {
		state.Natpolicypools = make([]rsModelNATPolicyPool, 0, len(ans.Natpolicypools))
		for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range ans.Natpolicypools {
			// add a new item
			state.Natpolicypools = append(state.Natpolicypools, rsModelNATPolicyPool{})
			// copy_to_state: state=state.Natpolicypools[varLoopNatpolicypoolsIndex] prefix=rsModel ans=varLoopNatpolicypools properties=6
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Etag = types.Int64PointerValue(varLoopNatpolicypools.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Schema = types.Int64PointerValue(varLoopNatpolicypools.Schema)
			// property: name=description, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Description = types.StringPointerValue(varLoopNatpolicypools.Description)
			// property: name=id, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Id = types.StringPointerValue(varLoopNatpolicypools.Id)
			// property: name=name, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Name = types.StringPointerValue(varLoopNatpolicypools.Name)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopNatpolicypools.Tags)
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=policyset_id, type=STRING macro=copy_to_state
	state.PolicysetId = types.StringPointerValue(ans.PolicysetId)
	// property: name=protocol, type=INTEGER macro=copy_to_state
	state.Protocol = types.Int64PointerValue(ans.Protocol)
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.SourcePorts == nil {
		state.SourcePorts = nil
	} else if len(ans.SourcePorts) == 0 {
		state.SourcePorts = []rsModelPortRange{}
	} else {
		state.SourcePorts = make([]rsModelPortRange, 0, len(ans.SourcePorts))
		for varLoopSourcePortsIndex, varLoopSourcePorts := range ans.SourcePorts {
			// add a new item
			state.SourcePorts = append(state.SourcePorts, rsModelPortRange{})
			// copy_to_state: state=state.SourcePorts[varLoopSourcePortsIndex] prefix=rsModel ans=varLoopSourcePorts properties=2
			// property: name=from, type=INTEGER macro=copy_to_state
			state.SourcePorts[varLoopSourcePortsIndex].From = types.Int64PointerValue(varLoopSourcePorts.From)
			// property: name=to, type=INTEGER macro=copy_to_state
			state.SourcePorts[varLoopSourcePortsIndex].To = types.Int64PointerValue(varLoopSourcePorts.To)
		}
	}
	// property: name=source_prefixes, type=REFERENCE macro=copy_to_state
	if ans.SourcePrefixes == nil {
		state.SourcePrefixes = nil
	} else {
		state.SourcePrefixes = &rsModelBasePolicyPrefixS{}
		// copy_to_state: state=state.SourcePrefixes prefix=rsModel ans=ans.SourcePrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.SourcePrefixes.Etag = types.Int64PointerValue(ans.SourcePrefixes.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.SourcePrefixes.Schema = types.Int64PointerValue(ans.SourcePrefixes.Schema)
		// property: name=description, type=STRING macro=copy_to_state
		state.SourcePrefixes.Description = types.StringPointerValue(ans.SourcePrefixes.Description)
		// property: name=id, type=STRING macro=copy_to_state
		state.SourcePrefixes.Id = types.StringPointerValue(ans.SourcePrefixes.Id)
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, ans.SourcePrefixes.Ipv4Prefixes)
		state.SourcePrefixes.Ipv4Prefixes = varIpv4Prefixes
		resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, ans.SourcePrefixes.Ipv6Prefixes)
		state.SourcePrefixes.Ipv6Prefixes = varIpv6Prefixes
		resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
		// property: name=name, type=STRING macro=copy_to_state
		state.SourcePrefixes.Name = types.StringPointerValue(ans.SourcePrefixes.Name)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.SourcePrefixes.Tags)
		state.SourcePrefixes.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=source_prefixes_id, type=STRING macro=copy_to_state
	state.SourcePrefixesId = types.StringPointerValue(ans.SourcePrefixesId)
	// property: name=source_zone, type=REFERENCE macro=copy_to_state
	if ans.SourceZone == nil {
		state.SourceZone = nil
	} else {
		state.SourceZone = &rsModelNATPolicyZone{}
		// copy_to_state: state=state.SourceZone prefix=rsModel ans=ans.SourceZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.SourceZone.Etag = types.Int64PointerValue(ans.SourceZone.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.SourceZone.Schema = types.Int64PointerValue(ans.SourceZone.Schema)
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
		state.SourceZone.DefaultForPublicInterfaces = types.BoolPointerValue(ans.SourceZone.DefaultForPublicInterfaces)
		// property: name=description, type=STRING macro=copy_to_state
		state.SourceZone.Description = types.StringPointerValue(ans.SourceZone.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.SourceZone.Disabled = types.BoolPointerValue(ans.SourceZone.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.SourceZone.DisabledReason = types.StringPointerValue(ans.SourceZone.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.SourceZone.Id = types.StringPointerValue(ans.SourceZone.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.SourceZone.Inactive = types.BoolPointerValue(ans.SourceZone.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.SourceZone.InactiveReason = types.StringPointerValue(ans.SourceZone.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.SourceZone.Name = types.StringPointerValue(ans.SourceZone.Name)
		// property: name=region, type=STRING macro=copy_to_state
		state.SourceZone.Region = types.StringPointerValue(ans.SourceZone.Region)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.SourceZone.Tags)
		state.SourceZone.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=source_zone_id, type=STRING macro=copy_to_state
	state.SourceZoneId = types.StringPointerValue(ans.SourceZoneId)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *natPolicyRuleResource) doGet(ctx context.Context, state *rsModelNATPolicyRule, savestate *rsModelNATPolicyRule, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_nat_policy_rule",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_policy_rule ID format", "Expected 2 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/natpolicysets/{nat_policy_set_id}/natpolicyrules/{nat_policy_rule_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["nat_policy_rule_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_nat_policy_rule", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_nat_policy_rule",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_nat_policy_rule from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=NATPolicyRule
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.NATPolicyRule
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATPolicyRule in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=26
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Actions == nil {
		state.Actions = nil
	} else if len(ans.Actions) == 0 {
		state.Actions = []rsModelNATAction{}
	} else {
		state.Actions = make([]rsModelNATAction, 0, len(ans.Actions))
		for varLoopActionsIndex, varLoopActions := range ans.Actions {
			// add a new item
			state.Actions = append(state.Actions, rsModelNATAction{})
			// copy_to_state: state=state.Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions properties=4
			// property: name=nat_pool_id, type=STRING macro=copy_to_state
			state.Actions[varLoopActionsIndex].NatPoolId = types.StringPointerValue(varLoopActions.NatPoolId)
			// property: name=port, type=INTEGER macro=copy_to_state
			state.Actions[varLoopActionsIndex].Port = types.Int64PointerValue(varLoopActions.Port)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
			varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopActions.Protocols)
			state.Actions[varLoopActionsIndex].Protocols = varProtocols
			resp.Diagnostics.Append(errProtocols.Errors()...)
			// property: name=type, type=STRING macro=copy_to_state
			state.Actions[varLoopActionsIndex].Type = types.StringPointerValue(varLoopActions.Type)
		}
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DestinationPorts == nil {
		state.DestinationPorts = nil
	} else if len(ans.DestinationPorts) == 0 {
		state.DestinationPorts = []rsModelPortRange{}
	} else {
		state.DestinationPorts = make([]rsModelPortRange, 0, len(ans.DestinationPorts))
		for varLoopDestinationPortsIndex, varLoopDestinationPorts := range ans.DestinationPorts {
			// add a new item
			state.DestinationPorts = append(state.DestinationPorts, rsModelPortRange{})
			// copy_to_state: state=state.DestinationPorts[varLoopDestinationPortsIndex] prefix=rsModel ans=varLoopDestinationPorts properties=2
			// property: name=from, type=INTEGER macro=copy_to_state
			state.DestinationPorts[varLoopDestinationPortsIndex].From = types.Int64PointerValue(varLoopDestinationPorts.From)
			// property: name=to, type=INTEGER macro=copy_to_state
			state.DestinationPorts[varLoopDestinationPortsIndex].To = types.Int64PointerValue(varLoopDestinationPorts.To)
		}
	}
	// property: name=destination_prefixes, type=REFERENCE macro=copy_to_state
	if ans.DestinationPrefixes == nil {
		state.DestinationPrefixes = nil
	} else {
		state.DestinationPrefixes = &rsModelBasePolicyPrefixS{}
		// copy_to_state: state=state.DestinationPrefixes prefix=rsModel ans=ans.DestinationPrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DestinationPrefixes.Etag = types.Int64PointerValue(ans.DestinationPrefixes.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DestinationPrefixes.Schema = types.Int64PointerValue(ans.DestinationPrefixes.Schema)
		// property: name=description, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Description = types.StringPointerValue(ans.DestinationPrefixes.Description)
		// property: name=id, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Id = types.StringPointerValue(ans.DestinationPrefixes.Id)
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Ipv4Prefixes)
		state.DestinationPrefixes.Ipv4Prefixes = varIpv4Prefixes
		resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Ipv6Prefixes)
		state.DestinationPrefixes.Ipv6Prefixes = varIpv6Prefixes
		resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
		// property: name=name, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Name = types.StringPointerValue(ans.DestinationPrefixes.Name)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Tags)
		state.DestinationPrefixes.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
	state.DestinationPrefixesId = types.StringPointerValue(ans.DestinationPrefixesId)
	// property: name=destination_zone, type=REFERENCE macro=copy_to_state
	if ans.DestinationZone == nil {
		state.DestinationZone = nil
	} else {
		state.DestinationZone = &rsModelNATPolicyZone{}
		// copy_to_state: state=state.DestinationZone prefix=rsModel ans=ans.DestinationZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DestinationZone.Etag = types.Int64PointerValue(ans.DestinationZone.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DestinationZone.Schema = types.Int64PointerValue(ans.DestinationZone.Schema)
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.DefaultForPublicInterfaces = types.BoolPointerValue(ans.DestinationZone.DefaultForPublicInterfaces)
		// property: name=description, type=STRING macro=copy_to_state
		state.DestinationZone.Description = types.StringPointerValue(ans.DestinationZone.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.Disabled = types.BoolPointerValue(ans.DestinationZone.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.DestinationZone.DisabledReason = types.StringPointerValue(ans.DestinationZone.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.DestinationZone.Id = types.StringPointerValue(ans.DestinationZone.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.Inactive = types.BoolPointerValue(ans.DestinationZone.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.DestinationZone.InactiveReason = types.StringPointerValue(ans.DestinationZone.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.DestinationZone.Name = types.StringPointerValue(ans.DestinationZone.Name)
		// property: name=region, type=STRING macro=copy_to_state
		state.DestinationZone.Region = types.StringPointerValue(ans.DestinationZone.Region)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DestinationZone.Tags)
		state.DestinationZone.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=destination_zone_id, type=STRING macro=copy_to_state
	state.DestinationZoneId = types.StringPointerValue(ans.DestinationZoneId)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=enabled, type=BOOLEAN macro=copy_to_state
	state.Enabled = types.BoolPointerValue(ans.Enabled)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Natpolicypools == nil {
		state.Natpolicypools = nil
	} else if len(ans.Natpolicypools) == 0 {
		state.Natpolicypools = []rsModelNATPolicyPool{}
	} else {
		state.Natpolicypools = make([]rsModelNATPolicyPool, 0, len(ans.Natpolicypools))
		for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range ans.Natpolicypools {
			// add a new item
			state.Natpolicypools = append(state.Natpolicypools, rsModelNATPolicyPool{})
			// copy_to_state: state=state.Natpolicypools[varLoopNatpolicypoolsIndex] prefix=rsModel ans=varLoopNatpolicypools properties=6
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Etag = types.Int64PointerValue(varLoopNatpolicypools.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Schema = types.Int64PointerValue(varLoopNatpolicypools.Schema)
			// property: name=description, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Description = types.StringPointerValue(varLoopNatpolicypools.Description)
			// property: name=id, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Id = types.StringPointerValue(varLoopNatpolicypools.Id)
			// property: name=name, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Name = types.StringPointerValue(varLoopNatpolicypools.Name)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopNatpolicypools.Tags)
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=policyset_id, type=STRING macro=copy_to_state
	state.PolicysetId = types.StringPointerValue(ans.PolicysetId)
	// property: name=protocol, type=INTEGER macro=copy_to_state
	state.Protocol = types.Int64PointerValue(ans.Protocol)
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.SourcePorts == nil {
		state.SourcePorts = nil
	} else if len(ans.SourcePorts) == 0 {
		state.SourcePorts = []rsModelPortRange{}
	} else {
		state.SourcePorts = make([]rsModelPortRange, 0, len(ans.SourcePorts))
		for varLoopSourcePortsIndex, varLoopSourcePorts := range ans.SourcePorts {
			// add a new item
			state.SourcePorts = append(state.SourcePorts, rsModelPortRange{})
			// copy_to_state: state=state.SourcePorts[varLoopSourcePortsIndex] prefix=rsModel ans=varLoopSourcePorts properties=2
			// property: name=from, type=INTEGER macro=copy_to_state
			state.SourcePorts[varLoopSourcePortsIndex].From = types.Int64PointerValue(varLoopSourcePorts.From)
			// property: name=to, type=INTEGER macro=copy_to_state
			state.SourcePorts[varLoopSourcePortsIndex].To = types.Int64PointerValue(varLoopSourcePorts.To)
		}
	}
	// property: name=source_prefixes, type=REFERENCE macro=copy_to_state
	if ans.SourcePrefixes == nil {
		state.SourcePrefixes = nil
	} else {
		state.SourcePrefixes = &rsModelBasePolicyPrefixS{}
		// copy_to_state: state=state.SourcePrefixes prefix=rsModel ans=ans.SourcePrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.SourcePrefixes.Etag = types.Int64PointerValue(ans.SourcePrefixes.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.SourcePrefixes.Schema = types.Int64PointerValue(ans.SourcePrefixes.Schema)
		// property: name=description, type=STRING macro=copy_to_state
		state.SourcePrefixes.Description = types.StringPointerValue(ans.SourcePrefixes.Description)
		// property: name=id, type=STRING macro=copy_to_state
		state.SourcePrefixes.Id = types.StringPointerValue(ans.SourcePrefixes.Id)
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, ans.SourcePrefixes.Ipv4Prefixes)
		state.SourcePrefixes.Ipv4Prefixes = varIpv4Prefixes
		resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, ans.SourcePrefixes.Ipv6Prefixes)
		state.SourcePrefixes.Ipv6Prefixes = varIpv6Prefixes
		resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
		// property: name=name, type=STRING macro=copy_to_state
		state.SourcePrefixes.Name = types.StringPointerValue(ans.SourcePrefixes.Name)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.SourcePrefixes.Tags)
		state.SourcePrefixes.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=source_prefixes_id, type=STRING macro=copy_to_state
	state.SourcePrefixesId = types.StringPointerValue(ans.SourcePrefixesId)
	// property: name=source_zone, type=REFERENCE macro=copy_to_state
	if ans.SourceZone == nil {
		state.SourceZone = nil
	} else {
		state.SourceZone = &rsModelNATPolicyZone{}
		// copy_to_state: state=state.SourceZone prefix=rsModel ans=ans.SourceZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.SourceZone.Etag = types.Int64PointerValue(ans.SourceZone.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.SourceZone.Schema = types.Int64PointerValue(ans.SourceZone.Schema)
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
		state.SourceZone.DefaultForPublicInterfaces = types.BoolPointerValue(ans.SourceZone.DefaultForPublicInterfaces)
		// property: name=description, type=STRING macro=copy_to_state
		state.SourceZone.Description = types.StringPointerValue(ans.SourceZone.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.SourceZone.Disabled = types.BoolPointerValue(ans.SourceZone.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.SourceZone.DisabledReason = types.StringPointerValue(ans.SourceZone.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.SourceZone.Id = types.StringPointerValue(ans.SourceZone.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.SourceZone.Inactive = types.BoolPointerValue(ans.SourceZone.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.SourceZone.InactiveReason = types.StringPointerValue(ans.SourceZone.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.SourceZone.Name = types.StringPointerValue(ans.SourceZone.Name)
		// property: name=region, type=STRING macro=copy_to_state
		state.SourceZone.Region = types.StringPointerValue(ans.SourceZone.Region)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.SourceZone.Tags)
		state.SourceZone.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=source_zone_id, type=STRING macro=copy_to_state
	state.SourceZoneId = types.StringPointerValue(ans.SourceZoneId)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *natPolicyRuleResource) doPut(ctx context.Context, plan *rsModelNATPolicyRule, state *rsModelNATPolicyRule, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_nat_policy_rule",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_nat_policy_rule", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_policy_rule ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.0/api/natpolicysets/{nat_policy_set_id}/natpolicyrules/{nat_policy_rule_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["nat_policy_rule_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.NATPolicyRule{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=26
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=actions, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.Actions == nil && (state == nil || state.Actions == nil) {
		body.Actions = nil
	} else if len(plan.Actions) == 0 && (state == nil || len(state.Actions) == 0) {
		body.Actions = []sdwan_schema.NATAction{}
	} else if len(plan.Actions) != 0 || (state != nil && len(state.Actions) != 0) {
		ActionsToUse := plan.Actions
		if len(plan.Actions) == 0 {
			ActionsToUse = state.Actions
		}
		body.Actions = make([]sdwan_schema.NATAction, 0, len(ActionsToUse))
		for varLoopActionsIndex, varLoopActions := range ActionsToUse {
			// add a new item
			body.Actions = append(body.Actions, sdwan_schema.NATAction{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.Actions[varLoopActionsIndex] prefix=rsModel plan=varLoopActions properties=4
			// property: name=nat_pool_id, type=STRING macro=copy_from_plan
			body.Actions[varLoopActionsIndex].NatPoolId = StringValueOrNil(varLoopActions.NatPoolId)
			// property: name=port, type=INTEGER macro=copy_from_plan
			body.Actions[varLoopActionsIndex].Port = Int64ValueOrNil(varLoopActions.Port)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Actions[varLoopActionsIndex].Protocols = ListStringValueOrNil(ctx, varLoopActions.Protocols)
			// property: name=type, type=STRING macro=copy_from_plan
			body.Actions[varLoopActionsIndex].Type = StringValueOrNil(varLoopActions.Type)
		}
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.DestinationPorts == nil && (state == nil || state.DestinationPorts == nil) {
		body.DestinationPorts = nil
	} else if len(plan.DestinationPorts) == 0 && (state == nil || len(state.DestinationPorts) == 0) {
		body.DestinationPorts = []sdwan_schema.PortRange{}
	} else if len(plan.DestinationPorts) != 0 || (state != nil && len(state.DestinationPorts) != 0) {
		DestinationPortsToUse := plan.DestinationPorts
		if len(plan.DestinationPorts) == 0 {
			DestinationPortsToUse = state.DestinationPorts
		}
		body.DestinationPorts = make([]sdwan_schema.PortRange, 0, len(DestinationPortsToUse))
		for varLoopDestinationPortsIndex, varLoopDestinationPorts := range DestinationPortsToUse {
			// add a new item
			body.DestinationPorts = append(body.DestinationPorts, sdwan_schema.PortRange{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.DestinationPorts[varLoopDestinationPortsIndex] prefix=rsModel plan=varLoopDestinationPorts properties=2
			// property: name=from, type=INTEGER macro=copy_from_plan
			body.DestinationPorts[varLoopDestinationPortsIndex].From = Int64ValueOrNil(varLoopDestinationPorts.From)
			// property: name=to, type=INTEGER macro=copy_from_plan
			body.DestinationPorts[varLoopDestinationPortsIndex].To = Int64ValueOrNil(varLoopDestinationPorts.To)
		}
	}
	// property: name=destination_prefixes, type=REFERENCE macro=copy_from_plan_or_state
	if plan.DestinationPrefixes == nil {
		body.DestinationPrefixes = nil
	} else {
		body.DestinationPrefixes = &sdwan_schema.BasePolicyPrefixS{}
		// copy_from_plan_or_state: body=body.DestinationPrefixes prefix=rsModel state=state.DestinationPrefixes plan=plan.DestinationPrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
		if state.DestinationPrefixes != nil {
			body.DestinationPrefixes.Etag = ValueInt64PointerFromPlanOrState(plan.DestinationPrefixes.Etag, state.DestinationPrefixes.Etag)
		} else {
			body.DestinationPrefixes.Etag = Int64ValueOrNil(plan.DestinationPrefixes.Etag)
		}
		// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
		if state.DestinationPrefixes != nil {
			body.DestinationPrefixes.Schema = ValueInt64PointerFromPlanOrState(plan.DestinationPrefixes.Schema, state.DestinationPrefixes.Schema)
		} else {
			body.DestinationPrefixes.Schema = Int64ValueOrNil(plan.DestinationPrefixes.Schema)
		}
		// property: name=description, type=STRING macro=copy_from_plan_or_state
		if state.DestinationPrefixes != nil {
			body.DestinationPrefixes.Description = ValueStringPointerFromPlanOrState(plan.DestinationPrefixes.Description, state.DestinationPrefixes.Description)
		} else {
			body.DestinationPrefixes.Description = StringValueOrNil(plan.DestinationPrefixes.Description)
		}
		// property: name=id, type=STRING macro=copy_from_plan_or_state
		if state.DestinationPrefixes != nil {
			body.DestinationPrefixes.Id = ValueStringPointerFromPlanOrState(plan.DestinationPrefixes.Id, state.DestinationPrefixes.Id)
		} else {
			body.DestinationPrefixes.Id = StringValueOrNil(plan.DestinationPrefixes.Id)
		}
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.DestinationPrefixes.Ipv4Prefixes = ListStringValueOrNil(ctx, plan.DestinationPrefixes.Ipv4Prefixes)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.DestinationPrefixes.Ipv6Prefixes = ListStringValueOrNil(ctx, plan.DestinationPrefixes.Ipv6Prefixes)
		// property: name=name, type=STRING macro=copy_from_plan_or_state
		if state.DestinationPrefixes != nil {
			body.DestinationPrefixes.Name = ValueStringPointerFromPlanOrState(plan.DestinationPrefixes.Name, state.DestinationPrefixes.Name)
		} else {
			body.DestinationPrefixes.Name = StringValueOrNil(plan.DestinationPrefixes.Name)
		}
		// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
		body.DestinationPrefixes.Tags = SetStringValueOrNil(ctx, plan.DestinationPrefixes.Tags)
	}
	// property: name=destination_prefixes_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.DestinationPrefixesId = ValueStringPointerFromPlanOrState(plan.DestinationPrefixesId, state.DestinationPrefixesId)
	} else {
		body.DestinationPrefixesId = StringValueOrNil(plan.DestinationPrefixesId)
	}
	// property: name=destination_zone, type=REFERENCE macro=copy_from_plan_or_state
	if plan.DestinationZone == nil {
		body.DestinationZone = nil
	} else {
		body.DestinationZone = &sdwan_schema.NATPolicyZone{}
		// copy_from_plan_or_state: body=body.DestinationZone prefix=rsModel state=state.DestinationZone plan=plan.DestinationZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.Etag = ValueInt64PointerFromPlanOrState(plan.DestinationZone.Etag, state.DestinationZone.Etag)
		} else {
			body.DestinationZone.Etag = Int64ValueOrNil(plan.DestinationZone.Etag)
		}
		// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.Schema = ValueInt64PointerFromPlanOrState(plan.DestinationZone.Schema, state.DestinationZone.Schema)
		} else {
			body.DestinationZone.Schema = Int64ValueOrNil(plan.DestinationZone.Schema)
		}
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.DefaultForPublicInterfaces = ValueBoolPointerFromPlanOrState(plan.DestinationZone.DefaultForPublicInterfaces, state.DestinationZone.DefaultForPublicInterfaces)
		} else {
			body.DestinationZone.DefaultForPublicInterfaces = BoolValueOrNil(plan.DestinationZone.DefaultForPublicInterfaces)
		}
		// property: name=description, type=STRING macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.Description = ValueStringPointerFromPlanOrState(plan.DestinationZone.Description, state.DestinationZone.Description)
		} else {
			body.DestinationZone.Description = StringValueOrNil(plan.DestinationZone.Description)
		}
		// property: name=disabled, type=BOOLEAN macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.Disabled = ValueBoolPointerFromPlanOrState(plan.DestinationZone.Disabled, state.DestinationZone.Disabled)
		} else {
			body.DestinationZone.Disabled = BoolValueOrNil(plan.DestinationZone.Disabled)
		}
		// property: name=disabled_reason, type=STRING macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.DisabledReason = ValueStringPointerFromPlanOrState(plan.DestinationZone.DisabledReason, state.DestinationZone.DisabledReason)
		} else {
			body.DestinationZone.DisabledReason = StringValueOrNil(plan.DestinationZone.DisabledReason)
		}
		// property: name=id, type=STRING macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.Id = ValueStringPointerFromPlanOrState(plan.DestinationZone.Id, state.DestinationZone.Id)
		} else {
			body.DestinationZone.Id = StringValueOrNil(plan.DestinationZone.Id)
		}
		// property: name=inactive, type=BOOLEAN macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.Inactive = ValueBoolPointerFromPlanOrState(plan.DestinationZone.Inactive, state.DestinationZone.Inactive)
		} else {
			body.DestinationZone.Inactive = BoolValueOrNil(plan.DestinationZone.Inactive)
		}
		// property: name=inactive_reason, type=STRING macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.InactiveReason = ValueStringPointerFromPlanOrState(plan.DestinationZone.InactiveReason, state.DestinationZone.InactiveReason)
		} else {
			body.DestinationZone.InactiveReason = StringValueOrNil(plan.DestinationZone.InactiveReason)
		}
		// property: name=name, type=STRING macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.Name = ValueStringPointerFromPlanOrState(plan.DestinationZone.Name, state.DestinationZone.Name)
		} else {
			body.DestinationZone.Name = StringValueOrNil(plan.DestinationZone.Name)
		}
		// property: name=region, type=STRING macro=copy_from_plan_or_state
		if state.DestinationZone != nil {
			body.DestinationZone.Region = ValueStringPointerFromPlanOrState(plan.DestinationZone.Region, state.DestinationZone.Region)
		} else {
			body.DestinationZone.Region = StringValueOrNil(plan.DestinationZone.Region)
		}
		// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
		body.DestinationZone.Tags = SetStringValueOrNil(ctx, plan.DestinationZone.Tags)
	}
	// property: name=destination_zone_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.DestinationZoneId = ValueStringPointerFromPlanOrState(plan.DestinationZoneId, state.DestinationZoneId)
	} else {
		body.DestinationZoneId = StringValueOrNil(plan.DestinationZoneId)
	}
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Disabled = ValueBoolPointerFromPlanOrState(plan.Disabled, state.Disabled)
	} else {
		body.Disabled = BoolValueOrNil(plan.Disabled)
	}
	// property: name=disabled_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.DisabledReason = ValueStringPointerFromPlanOrState(plan.DisabledReason, state.DisabledReason)
	} else {
		body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	}
	// property: name=enabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Enabled = ValueBoolPointerFromPlanOrState(plan.Enabled, state.Enabled)
	} else {
		body.Enabled = BoolValueOrNil(plan.Enabled)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Inactive = ValueBoolPointerFromPlanOrState(plan.Inactive, state.Inactive)
	} else {
		body.Inactive = BoolValueOrNil(plan.Inactive)
	}
	// property: name=inactive_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.InactiveReason = ValueStringPointerFromPlanOrState(plan.InactiveReason, state.InactiveReason)
	} else {
		body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.Natpolicypools == nil && (state == nil || state.Natpolicypools == nil) {
		body.Natpolicypools = nil
	} else if len(plan.Natpolicypools) == 0 && (state == nil || len(state.Natpolicypools) == 0) {
		body.Natpolicypools = []sdwan_schema.NATPolicyPool{}
	} else if len(plan.Natpolicypools) != 0 || (state != nil && len(state.Natpolicypools) != 0) {
		NatpolicypoolsToUse := plan.Natpolicypools
		if len(plan.Natpolicypools) == 0 {
			NatpolicypoolsToUse = state.Natpolicypools
		}
		body.Natpolicypools = make([]sdwan_schema.NATPolicyPool, 0, len(NatpolicypoolsToUse))
		for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range NatpolicypoolsToUse {
			// add a new item
			body.Natpolicypools = append(body.Natpolicypools, sdwan_schema.NATPolicyPool{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.Natpolicypools[varLoopNatpolicypoolsIndex] prefix=rsModel plan=varLoopNatpolicypools properties=6
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Etag = Int64ValueOrNil(varLoopNatpolicypools.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Schema = Int64ValueOrNil(varLoopNatpolicypools.Schema)
			// property: name=description, type=STRING macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Description = StringValueOrNil(varLoopNatpolicypools.Description)
			// property: name=id, type=STRING macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Id = StringValueOrNil(varLoopNatpolicypools.Id)
			// property: name=name, type=STRING macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Name = StringValueOrNil(varLoopNatpolicypools.Name)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.Natpolicypools[varLoopNatpolicypoolsIndex].Tags = SetStringValueOrNil(ctx, varLoopNatpolicypools.Tags)
		}
	}
	// property: name=policyset_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.PolicysetId = ValueStringPointerFromPlanOrState(plan.PolicysetId, state.PolicysetId)
	} else {
		body.PolicysetId = StringValueOrNil(plan.PolicysetId)
	}
	// property: name=protocol, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Protocol = ValueInt64PointerFromPlanOrState(plan.Protocol, state.Protocol)
	} else {
		body.Protocol = Int64ValueOrNil(plan.Protocol)
	}
	// property: name=region, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Region = ValueStringPointerFromPlanOrState(plan.Region, state.Region)
	} else {
		body.Region = StringValueOrNil(plan.Region)
	}
	// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.SourcePorts == nil && (state == nil || state.SourcePorts == nil) {
		body.SourcePorts = nil
	} else if len(plan.SourcePorts) == 0 && (state == nil || len(state.SourcePorts) == 0) {
		body.SourcePorts = []sdwan_schema.PortRange{}
	} else if len(plan.SourcePorts) != 0 || (state != nil && len(state.SourcePorts) != 0) {
		SourcePortsToUse := plan.SourcePorts
		if len(plan.SourcePorts) == 0 {
			SourcePortsToUse = state.SourcePorts
		}
		body.SourcePorts = make([]sdwan_schema.PortRange, 0, len(SourcePortsToUse))
		for varLoopSourcePortsIndex, varLoopSourcePorts := range SourcePortsToUse {
			// add a new item
			body.SourcePorts = append(body.SourcePorts, sdwan_schema.PortRange{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.SourcePorts[varLoopSourcePortsIndex] prefix=rsModel plan=varLoopSourcePorts properties=2
			// property: name=from, type=INTEGER macro=copy_from_plan
			body.SourcePorts[varLoopSourcePortsIndex].From = Int64ValueOrNil(varLoopSourcePorts.From)
			// property: name=to, type=INTEGER macro=copy_from_plan
			body.SourcePorts[varLoopSourcePortsIndex].To = Int64ValueOrNil(varLoopSourcePorts.To)
		}
	}
	// property: name=source_prefixes, type=REFERENCE macro=copy_from_plan_or_state
	if plan.SourcePrefixes == nil {
		body.SourcePrefixes = nil
	} else {
		body.SourcePrefixes = &sdwan_schema.BasePolicyPrefixS{}
		// copy_from_plan_or_state: body=body.SourcePrefixes prefix=rsModel state=state.SourcePrefixes plan=plan.SourcePrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
		if state.SourcePrefixes != nil {
			body.SourcePrefixes.Etag = ValueInt64PointerFromPlanOrState(plan.SourcePrefixes.Etag, state.SourcePrefixes.Etag)
		} else {
			body.SourcePrefixes.Etag = Int64ValueOrNil(plan.SourcePrefixes.Etag)
		}
		// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
		if state.SourcePrefixes != nil {
			body.SourcePrefixes.Schema = ValueInt64PointerFromPlanOrState(plan.SourcePrefixes.Schema, state.SourcePrefixes.Schema)
		} else {
			body.SourcePrefixes.Schema = Int64ValueOrNil(plan.SourcePrefixes.Schema)
		}
		// property: name=description, type=STRING macro=copy_from_plan_or_state
		if state.SourcePrefixes != nil {
			body.SourcePrefixes.Description = ValueStringPointerFromPlanOrState(plan.SourcePrefixes.Description, state.SourcePrefixes.Description)
		} else {
			body.SourcePrefixes.Description = StringValueOrNil(plan.SourcePrefixes.Description)
		}
		// property: name=id, type=STRING macro=copy_from_plan_or_state
		if state.SourcePrefixes != nil {
			body.SourcePrefixes.Id = ValueStringPointerFromPlanOrState(plan.SourcePrefixes.Id, state.SourcePrefixes.Id)
		} else {
			body.SourcePrefixes.Id = StringValueOrNil(plan.SourcePrefixes.Id)
		}
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.SourcePrefixes.Ipv4Prefixes = ListStringValueOrNil(ctx, plan.SourcePrefixes.Ipv4Prefixes)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.SourcePrefixes.Ipv6Prefixes = ListStringValueOrNil(ctx, plan.SourcePrefixes.Ipv6Prefixes)
		// property: name=name, type=STRING macro=copy_from_plan_or_state
		if state.SourcePrefixes != nil {
			body.SourcePrefixes.Name = ValueStringPointerFromPlanOrState(plan.SourcePrefixes.Name, state.SourcePrefixes.Name)
		} else {
			body.SourcePrefixes.Name = StringValueOrNil(plan.SourcePrefixes.Name)
		}
		// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
		body.SourcePrefixes.Tags = SetStringValueOrNil(ctx, plan.SourcePrefixes.Tags)
	}
	// property: name=source_prefixes_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.SourcePrefixesId = ValueStringPointerFromPlanOrState(plan.SourcePrefixesId, state.SourcePrefixesId)
	} else {
		body.SourcePrefixesId = StringValueOrNil(plan.SourcePrefixesId)
	}
	// property: name=source_zone, type=REFERENCE macro=copy_from_plan_or_state
	if plan.SourceZone == nil {
		body.SourceZone = nil
	} else {
		body.SourceZone = &sdwan_schema.NATPolicyZone{}
		// copy_from_plan_or_state: body=body.SourceZone prefix=rsModel state=state.SourceZone plan=plan.SourceZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.Etag = ValueInt64PointerFromPlanOrState(plan.SourceZone.Etag, state.SourceZone.Etag)
		} else {
			body.SourceZone.Etag = Int64ValueOrNil(plan.SourceZone.Etag)
		}
		// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.Schema = ValueInt64PointerFromPlanOrState(plan.SourceZone.Schema, state.SourceZone.Schema)
		} else {
			body.SourceZone.Schema = Int64ValueOrNil(plan.SourceZone.Schema)
		}
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.DefaultForPublicInterfaces = ValueBoolPointerFromPlanOrState(plan.SourceZone.DefaultForPublicInterfaces, state.SourceZone.DefaultForPublicInterfaces)
		} else {
			body.SourceZone.DefaultForPublicInterfaces = BoolValueOrNil(plan.SourceZone.DefaultForPublicInterfaces)
		}
		// property: name=description, type=STRING macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.Description = ValueStringPointerFromPlanOrState(plan.SourceZone.Description, state.SourceZone.Description)
		} else {
			body.SourceZone.Description = StringValueOrNil(plan.SourceZone.Description)
		}
		// property: name=disabled, type=BOOLEAN macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.Disabled = ValueBoolPointerFromPlanOrState(plan.SourceZone.Disabled, state.SourceZone.Disabled)
		} else {
			body.SourceZone.Disabled = BoolValueOrNil(plan.SourceZone.Disabled)
		}
		// property: name=disabled_reason, type=STRING macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.DisabledReason = ValueStringPointerFromPlanOrState(plan.SourceZone.DisabledReason, state.SourceZone.DisabledReason)
		} else {
			body.SourceZone.DisabledReason = StringValueOrNil(plan.SourceZone.DisabledReason)
		}
		// property: name=id, type=STRING macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.Id = ValueStringPointerFromPlanOrState(plan.SourceZone.Id, state.SourceZone.Id)
		} else {
			body.SourceZone.Id = StringValueOrNil(plan.SourceZone.Id)
		}
		// property: name=inactive, type=BOOLEAN macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.Inactive = ValueBoolPointerFromPlanOrState(plan.SourceZone.Inactive, state.SourceZone.Inactive)
		} else {
			body.SourceZone.Inactive = BoolValueOrNil(plan.SourceZone.Inactive)
		}
		// property: name=inactive_reason, type=STRING macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.InactiveReason = ValueStringPointerFromPlanOrState(plan.SourceZone.InactiveReason, state.SourceZone.InactiveReason)
		} else {
			body.SourceZone.InactiveReason = StringValueOrNil(plan.SourceZone.InactiveReason)
		}
		// property: name=name, type=STRING macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.Name = ValueStringPointerFromPlanOrState(plan.SourceZone.Name, state.SourceZone.Name)
		} else {
			body.SourceZone.Name = StringValueOrNil(plan.SourceZone.Name)
		}
		// property: name=region, type=STRING macro=copy_from_plan_or_state
		if state.SourceZone != nil {
			body.SourceZone.Region = ValueStringPointerFromPlanOrState(plan.SourceZone.Region, state.SourceZone.Region)
		} else {
			body.SourceZone.Region = StringValueOrNil(plan.SourceZone.Region)
		}
		// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
		body.SourceZone.Tags = SetStringValueOrNil(ctx, plan.SourceZone.Tags)
	}
	// property: name=source_zone_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.SourceZoneId = ValueStringPointerFromPlanOrState(plan.SourceZoneId, state.SourceZoneId)
	} else {
		body.SourceZoneId = StringValueOrNil(plan.SourceZoneId)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct NATPolicyRule to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_req_version")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "send_to_element")
	request_body_string, _ = sjson.Delete(request_body_string, "update_order")
	request_body_string, _ = sjson.Delete(request_body_string, "policyset_id")
	request_body_string, _ = sjson.Delete(request_body_string, "destination_prefixes")
	request_body_string, _ = sjson.Delete(request_body_string, "source_prefixes")
	request_body_string, _ = sjson.Delete(request_body_string, "destination_zone")
	request_body_string, _ = sjson.Delete(request_body_string, "source_zone")
	request_body_string, _ = sjson.Delete(request_body_string, "natpolicypools")
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_nat_policy_rule", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_nat_policy_rule",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_nat_policy_rule", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_nat_policy_rule",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_nat_policy_rule", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.NATPolicyRule
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATPolicyRule in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=NATPolicyRule
	// copy_to_state: state=state prefix=rsModel ans=ans properties=26
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Actions == nil {
		state.Actions = nil
	} else if len(ans.Actions) == 0 {
		state.Actions = []rsModelNATAction{}
	} else {
		state.Actions = make([]rsModelNATAction, 0, len(ans.Actions))
		for varLoopActionsIndex, varLoopActions := range ans.Actions {
			// add a new item
			state.Actions = append(state.Actions, rsModelNATAction{})
			// copy_to_state: state=state.Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions properties=4
			// property: name=nat_pool_id, type=STRING macro=copy_to_state
			state.Actions[varLoopActionsIndex].NatPoolId = types.StringPointerValue(varLoopActions.NatPoolId)
			// property: name=port, type=INTEGER macro=copy_to_state
			state.Actions[varLoopActionsIndex].Port = types.Int64PointerValue(varLoopActions.Port)
			// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
			varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopActions.Protocols)
			state.Actions[varLoopActionsIndex].Protocols = varProtocols
			resp.Diagnostics.Append(errProtocols.Errors()...)
			// property: name=type, type=STRING macro=copy_to_state
			state.Actions[varLoopActionsIndex].Type = types.StringPointerValue(varLoopActions.Type)
		}
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DestinationPorts == nil {
		state.DestinationPorts = nil
	} else if len(ans.DestinationPorts) == 0 {
		state.DestinationPorts = []rsModelPortRange{}
	} else {
		state.DestinationPorts = make([]rsModelPortRange, 0, len(ans.DestinationPorts))
		for varLoopDestinationPortsIndex, varLoopDestinationPorts := range ans.DestinationPorts {
			// add a new item
			state.DestinationPorts = append(state.DestinationPorts, rsModelPortRange{})
			// copy_to_state: state=state.DestinationPorts[varLoopDestinationPortsIndex] prefix=rsModel ans=varLoopDestinationPorts properties=2
			// property: name=from, type=INTEGER macro=copy_to_state
			state.DestinationPorts[varLoopDestinationPortsIndex].From = types.Int64PointerValue(varLoopDestinationPorts.From)
			// property: name=to, type=INTEGER macro=copy_to_state
			state.DestinationPorts[varLoopDestinationPortsIndex].To = types.Int64PointerValue(varLoopDestinationPorts.To)
		}
	}
	// property: name=destination_prefixes, type=REFERENCE macro=copy_to_state
	if ans.DestinationPrefixes == nil {
		state.DestinationPrefixes = nil
	} else {
		state.DestinationPrefixes = &rsModelBasePolicyPrefixS{}
		// copy_to_state: state=state.DestinationPrefixes prefix=rsModel ans=ans.DestinationPrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DestinationPrefixes.Etag = types.Int64PointerValue(ans.DestinationPrefixes.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DestinationPrefixes.Schema = types.Int64PointerValue(ans.DestinationPrefixes.Schema)
		// property: name=description, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Description = types.StringPointerValue(ans.DestinationPrefixes.Description)
		// property: name=id, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Id = types.StringPointerValue(ans.DestinationPrefixes.Id)
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Ipv4Prefixes)
		state.DestinationPrefixes.Ipv4Prefixes = varIpv4Prefixes
		resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Ipv6Prefixes)
		state.DestinationPrefixes.Ipv6Prefixes = varIpv6Prefixes
		resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
		// property: name=name, type=STRING macro=copy_to_state
		state.DestinationPrefixes.Name = types.StringPointerValue(ans.DestinationPrefixes.Name)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DestinationPrefixes.Tags)
		state.DestinationPrefixes.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
	state.DestinationPrefixesId = types.StringPointerValue(ans.DestinationPrefixesId)
	// property: name=destination_zone, type=REFERENCE macro=copy_to_state
	if ans.DestinationZone == nil {
		state.DestinationZone = nil
	} else {
		state.DestinationZone = &rsModelNATPolicyZone{}
		// copy_to_state: state=state.DestinationZone prefix=rsModel ans=ans.DestinationZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DestinationZone.Etag = types.Int64PointerValue(ans.DestinationZone.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DestinationZone.Schema = types.Int64PointerValue(ans.DestinationZone.Schema)
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.DefaultForPublicInterfaces = types.BoolPointerValue(ans.DestinationZone.DefaultForPublicInterfaces)
		// property: name=description, type=STRING macro=copy_to_state
		state.DestinationZone.Description = types.StringPointerValue(ans.DestinationZone.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.Disabled = types.BoolPointerValue(ans.DestinationZone.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.DestinationZone.DisabledReason = types.StringPointerValue(ans.DestinationZone.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.DestinationZone.Id = types.StringPointerValue(ans.DestinationZone.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.DestinationZone.Inactive = types.BoolPointerValue(ans.DestinationZone.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.DestinationZone.InactiveReason = types.StringPointerValue(ans.DestinationZone.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.DestinationZone.Name = types.StringPointerValue(ans.DestinationZone.Name)
		// property: name=region, type=STRING macro=copy_to_state
		state.DestinationZone.Region = types.StringPointerValue(ans.DestinationZone.Region)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DestinationZone.Tags)
		state.DestinationZone.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=destination_zone_id, type=STRING macro=copy_to_state
	state.DestinationZoneId = types.StringPointerValue(ans.DestinationZoneId)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=enabled, type=BOOLEAN macro=copy_to_state
	state.Enabled = types.BoolPointerValue(ans.Enabled)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Natpolicypools == nil {
		state.Natpolicypools = nil
	} else if len(ans.Natpolicypools) == 0 {
		state.Natpolicypools = []rsModelNATPolicyPool{}
	} else {
		state.Natpolicypools = make([]rsModelNATPolicyPool, 0, len(ans.Natpolicypools))
		for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range ans.Natpolicypools {
			// add a new item
			state.Natpolicypools = append(state.Natpolicypools, rsModelNATPolicyPool{})
			// copy_to_state: state=state.Natpolicypools[varLoopNatpolicypoolsIndex] prefix=rsModel ans=varLoopNatpolicypools properties=6
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Etag = types.Int64PointerValue(varLoopNatpolicypools.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Schema = types.Int64PointerValue(varLoopNatpolicypools.Schema)
			// property: name=description, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Description = types.StringPointerValue(varLoopNatpolicypools.Description)
			// property: name=id, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Id = types.StringPointerValue(varLoopNatpolicypools.Id)
			// property: name=name, type=STRING macro=copy_to_state
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Name = types.StringPointerValue(varLoopNatpolicypools.Name)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopNatpolicypools.Tags)
			state.Natpolicypools[varLoopNatpolicypoolsIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=policyset_id, type=STRING macro=copy_to_state
	state.PolicysetId = types.StringPointerValue(ans.PolicysetId)
	// property: name=protocol, type=INTEGER macro=copy_to_state
	state.Protocol = types.Int64PointerValue(ans.Protocol)
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.SourcePorts == nil {
		state.SourcePorts = nil
	} else if len(ans.SourcePorts) == 0 {
		state.SourcePorts = []rsModelPortRange{}
	} else {
		state.SourcePorts = make([]rsModelPortRange, 0, len(ans.SourcePorts))
		for varLoopSourcePortsIndex, varLoopSourcePorts := range ans.SourcePorts {
			// add a new item
			state.SourcePorts = append(state.SourcePorts, rsModelPortRange{})
			// copy_to_state: state=state.SourcePorts[varLoopSourcePortsIndex] prefix=rsModel ans=varLoopSourcePorts properties=2
			// property: name=from, type=INTEGER macro=copy_to_state
			state.SourcePorts[varLoopSourcePortsIndex].From = types.Int64PointerValue(varLoopSourcePorts.From)
			// property: name=to, type=INTEGER macro=copy_to_state
			state.SourcePorts[varLoopSourcePortsIndex].To = types.Int64PointerValue(varLoopSourcePorts.To)
		}
	}
	// property: name=source_prefixes, type=REFERENCE macro=copy_to_state
	if ans.SourcePrefixes == nil {
		state.SourcePrefixes = nil
	} else {
		state.SourcePrefixes = &rsModelBasePolicyPrefixS{}
		// copy_to_state: state=state.SourcePrefixes prefix=rsModel ans=ans.SourcePrefixes properties=8
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.SourcePrefixes.Etag = types.Int64PointerValue(ans.SourcePrefixes.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.SourcePrefixes.Schema = types.Int64PointerValue(ans.SourcePrefixes.Schema)
		// property: name=description, type=STRING macro=copy_to_state
		state.SourcePrefixes.Description = types.StringPointerValue(ans.SourcePrefixes.Description)
		// property: name=id, type=STRING macro=copy_to_state
		state.SourcePrefixes.Id = types.StringPointerValue(ans.SourcePrefixes.Id)
		// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, ans.SourcePrefixes.Ipv4Prefixes)
		state.SourcePrefixes.Ipv4Prefixes = varIpv4Prefixes
		resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
		// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, ans.SourcePrefixes.Ipv6Prefixes)
		state.SourcePrefixes.Ipv6Prefixes = varIpv6Prefixes
		resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
		// property: name=name, type=STRING macro=copy_to_state
		state.SourcePrefixes.Name = types.StringPointerValue(ans.SourcePrefixes.Name)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.SourcePrefixes.Tags)
		state.SourcePrefixes.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=source_prefixes_id, type=STRING macro=copy_to_state
	state.SourcePrefixesId = types.StringPointerValue(ans.SourcePrefixesId)
	// property: name=source_zone, type=REFERENCE macro=copy_to_state
	if ans.SourceZone == nil {
		state.SourceZone = nil
	} else {
		state.SourceZone = &rsModelNATPolicyZone{}
		// copy_to_state: state=state.SourceZone prefix=rsModel ans=ans.SourceZone properties=12
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.SourceZone.Etag = types.Int64PointerValue(ans.SourceZone.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.SourceZone.Schema = types.Int64PointerValue(ans.SourceZone.Schema)
		// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
		state.SourceZone.DefaultForPublicInterfaces = types.BoolPointerValue(ans.SourceZone.DefaultForPublicInterfaces)
		// property: name=description, type=STRING macro=copy_to_state
		state.SourceZone.Description = types.StringPointerValue(ans.SourceZone.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.SourceZone.Disabled = types.BoolPointerValue(ans.SourceZone.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.SourceZone.DisabledReason = types.StringPointerValue(ans.SourceZone.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.SourceZone.Id = types.StringPointerValue(ans.SourceZone.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.SourceZone.Inactive = types.BoolPointerValue(ans.SourceZone.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.SourceZone.InactiveReason = types.StringPointerValue(ans.SourceZone.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.SourceZone.Name = types.StringPointerValue(ans.SourceZone.Name)
		// property: name=region, type=STRING macro=copy_to_state
		state.SourceZone.Region = types.StringPointerValue(ans.SourceZone.Region)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.SourceZone.Tags)
		state.SourceZone.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=source_zone_id, type=STRING macro=copy_to_state
	state.SourceZoneId = types.StringPointerValue(ans.SourceZoneId)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *natPolicyRuleResource) doDelete(ctx context.Context, state *rsModelNATPolicyRule, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_nat_policy_rule",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_policy_rule ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.0/api/natpolicysets/{nat_policy_set_id}/natpolicyrules/{nat_policy_rule_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["nat_policy_rule_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_nat_policy_rule", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *natPolicyRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_nat_policy_rule")
	var plan rsModelNATPolicyRule
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelNATPolicyRule
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *natPolicyRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_nat_policy_rule")
	var savestate, state rsModelNATPolicyRule
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *natPolicyRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_nat_policy_rule")
	var plan, state rsModelNATPolicyRule
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *natPolicyRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_nat_policy_rule")
	var state rsModelNATPolicyRule
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *natPolicyRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
