package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	nNBVXzb "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/element/screen/v3/n1"
	xtSEgxw "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/led/config"
	ndabCzl "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/software"
	urOXkAM "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/spoke/haconfig/v2"
	abEEBQk "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/switch/config"
	uvXdTvM "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/track/intf"
	gvOEngs "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/track/v2"
	kBpyQPJ "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/track/waninterface"
	fZwFwyb "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v31/api/elements"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &elementListDataSource{}
	_ datasource.DataSourceWithConfigure = &elementListDataSource{}
)

func NewElementListDataSource() datasource.DataSource {
	return &elementListDataSource{}
}

type elementListDataSource struct {
	client *sdwan.Client
}

// elementListDsModel is the model.
type elementListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.

	// Output.
	Items      []elementListDsModel_nNBVXzb_Config `tfsdk:"items"`
	TotalItems types.Int64                         `tfsdk:"total_items"`
}

type elementListDsModel_nNBVXzb_Config struct {
	ClusterId                    types.String                       `tfsdk:"cluster_id"`
	Description                  types.String                       `tfsdk:"description"`
	DeviceProfileId              types.String                       `tfsdk:"device_profile_id"`
	Etag                         types.Int64                        `tfsdk:"etag"`
	Id                           types.String                       `tfsdk:"id"`
	L3DirectPrivateWanForwarding types.Bool                         `tfsdk:"l3_direct_private_wan_forwarding"`
	L3LanForwarding              types.Bool                         `tfsdk:"l3_lan_forwarding"`
	LedConfig                    *elementListDsModel_xtSEgxw_Config `tfsdk:"led_config"`
	MainPowerUsageThreshold      types.Int64                        `tfsdk:"main_power_usage_threshold"`
	Name                         types.String                       `tfsdk:"name"`
	NatPolicysetstackId          types.String                       `tfsdk:"nat_policysetstack_id"`
	NetworkPolicysetstackId      types.String                       `tfsdk:"network_policysetstack_id"`
	PriorityPolicysetstackId     types.String                       `tfsdk:"priority_policysetstack_id"`
	SiteId                       types.String                       `tfsdk:"site_id"`
	SpokeHaConfig                *elementListDsModel_urOXkAM_Config `tfsdk:"spoke_ha_config"`
	SwObj                        *elementListDsModel_ndabCzl_Config `tfsdk:"sw_obj"`
	SwitchConfig                 *elementListDsModel_abEEBQk_Config `tfsdk:"switch_config"`
	Tags                         types.List                         `tfsdk:"tags"`
	VpnToVpnForwarding           types.Bool                         `tfsdk:"vpn_to_vpn_forwarding"`
}

type elementListDsModel_xtSEgxw_Config struct {
	ServiceLedOn types.Bool `tfsdk:"service_led_on"`
}

type elementListDsModel_urOXkAM_Config struct {
	ClusterId       types.String                       `tfsdk:"cluster_id"`
	Enable          types.Bool                         `tfsdk:"enable"`
	Priority        types.Int64                        `tfsdk:"priority"`
	SourceInterface types.String                       `tfsdk:"source_interface"`
	Track           *elementListDsModel_gvOEngs_Config `tfsdk:"track"`
}

type elementListDsModel_gvOEngs_Config struct {
	Interfaces    []elementListDsModel_uvXdTvM_Config `tfsdk:"interfaces"`
	Waninterfaces []elementListDsModel_kBpyQPJ_Config `tfsdk:"waninterfaces"`
}

type elementListDsModel_uvXdTvM_Config struct {
	InterfaceId    types.String `tfsdk:"interface_id"`
	ReducePriority types.Int64  `tfsdk:"reduce_priority"`
}

type elementListDsModel_kBpyQPJ_Config struct {
	ReducePriority types.Int64  `tfsdk:"reduce_priority"`
	WanInterfaceId types.String `tfsdk:"wan_interface_id"`
}

type elementListDsModel_ndabCzl_Config struct {
	Location types.String `tfsdk:"location"`
	Version  types.String `tfsdk:"version"`
}

type elementListDsModel_abEEBQk_Config struct {
	DefaultVlanId   types.Int64  `tfsdk:"default_vlan_id"`
	MstpEnabled     types.Bool   `tfsdk:"mstp_enabled"`
	StpAgingTimer   types.Int64  `tfsdk:"stp_aging_timer"`
	StpForwardDelay types.Int64  `tfsdk:"stp_forward_delay"`
	StpHelloTime    types.Int64  `tfsdk:"stp_hello_time"`
	StpMaxAge       types.Int64  `tfsdk:"stp_max_age"`
	StpMode         types.String `tfsdk:"stp_mode"`
	StpPriority     types.Int64  `tfsdk:"stp_priority"`
}

// Metadata returns the data source type name.
func (d *elementListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_element_list"
}

// Schema defines the schema for this listing data source.
func (d *elementListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{} outputs:map[string]bool{"items":true, "tfid":true, "total_items":true} forceNew:map[string]bool{}
			"items": dsschema.ListNestedAttribute{
				Description: "The Items param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"cluster_id":true, "description":true, "device_profile_id":true, "etag":true, "id":true, "l3_direct_private_wan_forwarding":true, "l3_lan_forwarding":true, "led_config":true, "main_power_usage_threshold":true, "name":true, "nat_policysetstack_id":true, "network_policysetstack_id":true, "priority_policysetstack_id":true, "site_id":true, "spoke_ha_config":true, "sw_obj":true, "switch_config":true, "tags":true, "vpn_to_vpn_forwarding":true} forceNew:map[string]bool(nil)
						"cluster_id": dsschema.StringAttribute{
							Description: "Cluster Id.",
							Computed:    true,
						},
						"description": dsschema.StringAttribute{
							Description: "Description: Size(max = 256, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
							Computed:    true,
						},
						"device_profile_id": dsschema.StringAttribute{
							Description: "Device Profile Id.",
							Computed:    true,
						},
						"etag": dsschema.Int64Attribute{
							Description: "Entity tag for the resource.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "Id.",
							Computed:    true,
						},
						"l3_direct_private_wan_forwarding": dsschema.BoolAttribute{
							Description: "L3 Direct Private Wan Forwarding.",
							Computed:    true,
						},
						"l3_lan_forwarding": dsschema.BoolAttribute{
							Description: "L3 Lan Forwarding.",
							Computed:    true,
						},
						"led_config": dsschema.SingleNestedAttribute{
							Description: "The LedConfig param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"service_led_on":true} forceNew:map[string]bool(nil)
								"service_led_on": dsschema.BoolAttribute{
									Description: "Service Led On.",
									Computed:    true,
								},
							},
						},
						"main_power_usage_threshold": dsschema.Int64Attribute{
							Description: "Main Power Usage Threshold: ValidateDecimal(allowZero = true, increment = 0, max = 0, error = INVALID_MAIN_POWER_USAGE_THRESHOLD: Invalid main power usage threshold. Allowed range is 50-100., min = 0) .",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Name: Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
							Computed:    true,
						},
						"nat_policysetstack_id": dsschema.StringAttribute{
							Description: "Nat Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NAT_POLICYSETSTACK_ID: Invalid nat policy set stack id.) .",
							Computed:    true,
						},
						"network_policysetstack_id": dsschema.StringAttribute{
							Description: "Network Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NETWORK_POLICYSETSTACK_ID: Invalid network policy set stack id) .",
							Computed:    true,
						},
						"priority_policysetstack_id": dsschema.StringAttribute{
							Description: "Priority Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_PRIORITY_POLICYSETSTACK_ID: Invalid priority policy set stack id) .",
							Computed:    true,
						},
						"site_id": dsschema.StringAttribute{
							Description: "Site Id: Digits(fraction = 0, integer = 50, SITEID_INVALID) NotNull .",
							Computed:    true,
						},
						"spoke_ha_config": dsschema.SingleNestedAttribute{
							Description: "The SpokeHaConfig param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"cluster_id":true, "enable":true, "priority":true, "source_interface":true, "track":true} forceNew:map[string]bool(nil)
								"cluster_id": dsschema.StringAttribute{
									Description: "Cluster Id: Required(SPOKEHA_CONFIG_CLUSTER_ID_REQD) .",
									Computed:    true,
								},
								"enable": dsschema.BoolAttribute{
									Description: "Enable: Required(SPOKEHA_CONFIG_ENABLE_REQD) .",
									Computed:    true,
								},
								"priority": dsschema.Int64Attribute{
									Description: "Priority: Required(SPOKEHA_CONFIG_PRIORITY_REQD) Range(max = 254L, SPOKEHA_CONFIG_INVALID_PRIORITY, min = 1L) .",
									Computed:    true,
								},
								"source_interface": dsschema.StringAttribute{
									Description: "Source Interface: Required(SPOKEHA_CONFIG_SOURCE_INTERFACE_ID_REQD) .",
									Computed:    true,
								},
								"track": dsschema.SingleNestedAttribute{
									Description: "The Track param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"interfaces":true, "waninterfaces":true} forceNew:map[string]bool(nil)
										"interfaces": dsschema.ListNestedAttribute{
											Description: "Interfaces: Valid .",
											Computed:    true,
											NestedObject: dsschema.NestedAttributeObject{
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"interface_id":true, "reduce_priority":true} forceNew:map[string]bool(nil)
													"interface_id": dsschema.StringAttribute{
														Description: "Interface Id.",
														Computed:    true,
													},
													"reduce_priority": dsschema.Int64Attribute{
														Description: "Reduce Priority: Range(max = 254L, SPOKEHA_CONFIG_INVALID_REDUCE_PRIORITY, min = 1L) .",
														Computed:    true,
													},
												},
											},
										},
										"waninterfaces": dsschema.ListNestedAttribute{
											Description: "Waninterfaces: Valid .",
											Computed:    true,
											NestedObject: dsschema.NestedAttributeObject{
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"reduce_priority":true, "wan_interface_id":true} forceNew:map[string]bool(nil)
													"reduce_priority": dsschema.Int64Attribute{
														Description: "Reduce Priority: Range(max = 254L, SPOKEHA_CONFIG_INVALID_REDUCE_PRIORITY, min = 1L) .",
														Computed:    true,
													},
													"wan_interface_id": dsschema.StringAttribute{
														Description: "Wan Interface Id.",
														Computed:    true,
													},
												},
											},
										},
									},
								},
							},
						},
						"sw_obj": dsschema.SingleNestedAttribute{
							Description: "The SwObj param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"location":true, "version":true} forceNew:map[string]bool(nil)
								"location": dsschema.StringAttribute{
									Description: "Location.",
									Computed:    true,
								},
								"version": dsschema.StringAttribute{
									Description: "Version.",
									Computed:    true,
								},
							},
						},
						"switch_config": dsschema.SingleNestedAttribute{
							Description: "The SwitchConfig param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"default_vlan_id":true, "mstp_enabled":true, "stp_aging_timer":true, "stp_forward_delay":true, "stp_hello_time":true, "stp_max_age":true, "stp_mode":true, "stp_priority":true} forceNew:map[string]bool(nil)
								"default_vlan_id": dsschema.Int64Attribute{
									Description: "Default Vlan Id: Range(max = 4000L, error = INVALID_VLAN_ID: Invalid VLAN id. VLAN id must be between 1-4000., min = 1L) .",
									Computed:    true,
								},
								"mstp_enabled": dsschema.BoolAttribute{
									Description: "Mstp Enabled.",
									Computed:    true,
								},
								"stp_aging_timer": dsschema.Int64Attribute{
									Description: "Stp Aging Timer: Range(max = 1000000L, error = INVALID_STP_AGING_TIMER: Invalid STP aging timer. Allowed range is 10-1000000., min = 10L) .",
									Computed:    true,
								},
								"stp_forward_delay": dsschema.Int64Attribute{
									Description: "Stp Forward Delay: Range(max = 30L, error = INVALID_STP_FORWARD_DELAY: Invalid STP forward delay. Allowed range is 4-30 and given value should also meet the criteria: (2 * (stp_forward_delay - 1)) >= stp_max_age., min = 4L) .",
									Computed:    true,
								},
								"stp_hello_time": dsschema.Int64Attribute{
									Description: "Stp Hello Time: Range(max = 10L, error = INVALID_STP_HELLO_TIME: Invalid STP hello time. Allowed range is 1-10., min = 1L) .",
									Computed:    true,
								},
								"stp_max_age": dsschema.Int64Attribute{
									Description: "Stp Max Age: Range(max = 40L, error = INVALID_STP_MAX_AGE: Invalid STP max age. Allowed range is 6-40., min = 6L) .",
									Computed:    true,
								},
								"stp_mode": dsschema.StringAttribute{
									Description: "Stp Mode: ValidateEnum(enumClass = classOf[STPMode], error = INVALID_STP_MODE: Invalid STP mode. Allowed values are stp, rstp or mstp., nullAllowed = false) . String must be one of these: `\"RSTP\"`.",
									Computed:    true,
								},
								"stp_priority": dsschema.Int64Attribute{
									Description: "Stp Priority: Range(max = 61440L, error = INVALID_STP_PRIORITY: Invalid STP priority. Value should be in the multiples of 4096., min = 0L) .",
									Computed:    true,
								},
							},
						},
						"tags": dsschema.ListAttribute{
							Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
							Computed:    true,
							ElementType: types.StringType,
						},
						"vpn_to_vpn_forwarding": dsschema.BoolAttribute{
							Description: "Vpn To Vpn Forwarding.",
							Computed:    true,
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total_items": dsschema.Int64Attribute{
				Description: "The TotalItems param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *elementListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *elementListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state elementListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "prismasdwan_element_list",
		"terraform_provider_function": "Read",
	})

	// Prepare to run the command.
	svc := fZwFwyb.NewClient(d.client)

	// Perform the operation.
	ans, err := svc.List(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Items) == 0 {
		state.Items = nil
	} else {
		state.Items = make([]elementListDsModel_nNBVXzb_Config, 0, len(ans.Items))
		for _, var0 := range ans.Items {
			var1 := elementListDsModel_nNBVXzb_Config{}

			var1.ClusterId = types.StringPointerValue(var0.ClusterId)

			var1.Description = types.StringPointerValue(var0.Description)

			var1.DeviceProfileId = types.StringPointerValue(var0.DeviceProfileId)

			var1.Etag = types.Int64PointerValue(var0.Etag)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.L3DirectPrivateWanForwarding = types.BoolPointerValue(var0.L3DirectPrivateWanForwarding)

			var1.L3LanForwarding = types.BoolPointerValue(var0.L3LanForwarding)

			if var0.LedConfig == nil {
				var1.LedConfig = nil
			} else {
				var1.LedConfig = &elementListDsModel_xtSEgxw_Config{}

				var1.LedConfig.ServiceLedOn = types.BoolPointerValue(var0.LedConfig.ServiceLedOn)
			}

			var1.MainPowerUsageThreshold = types.Int64PointerValue(var0.MainPowerUsageThreshold)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.NatPolicysetstackId = types.StringPointerValue(var0.NatPolicysetstackId)

			var1.NetworkPolicysetstackId = types.StringPointerValue(var0.NetworkPolicysetstackId)

			var1.PriorityPolicysetstackId = types.StringPointerValue(var0.PriorityPolicysetstackId)

			var1.SiteId = types.StringValue(var0.SiteId)

			if var0.SpokeHaConfig == nil {
				var1.SpokeHaConfig = nil
			} else {
				var1.SpokeHaConfig = &elementListDsModel_urOXkAM_Config{}

				var1.SpokeHaConfig.ClusterId = types.StringValue(var0.SpokeHaConfig.ClusterId)

				var1.SpokeHaConfig.Enable = types.BoolValue(var0.SpokeHaConfig.Enable)

				var1.SpokeHaConfig.Priority = types.Int64Value(var0.SpokeHaConfig.Priority)

				var1.SpokeHaConfig.SourceInterface = types.StringValue(var0.SpokeHaConfig.SourceInterface)

				if var0.SpokeHaConfig.Track == nil {
					var1.SpokeHaConfig.Track = nil
				} else {
					var1.SpokeHaConfig.Track = &elementListDsModel_gvOEngs_Config{}

					if len(var0.SpokeHaConfig.Track.Interfaces) == 0 {
						var1.SpokeHaConfig.Track.Interfaces = nil
					} else {
						var1.SpokeHaConfig.Track.Interfaces = make([]elementListDsModel_uvXdTvM_Config, 0, len(var0.SpokeHaConfig.Track.Interfaces))
						for _, var2 := range var0.SpokeHaConfig.Track.Interfaces {
							var3 := elementListDsModel_uvXdTvM_Config{}

							var3.InterfaceId = types.StringPointerValue(var2.InterfaceId)

							var3.ReducePriority = types.Int64PointerValue(var2.ReducePriority)
							var1.SpokeHaConfig.Track.Interfaces = append(var1.SpokeHaConfig.Track.Interfaces, var3)
						}
					}

					if len(var0.SpokeHaConfig.Track.Waninterfaces) == 0 {
						var1.SpokeHaConfig.Track.Waninterfaces = nil
					} else {
						var1.SpokeHaConfig.Track.Waninterfaces = make([]elementListDsModel_kBpyQPJ_Config, 0, len(var0.SpokeHaConfig.Track.Waninterfaces))
						for _, var4 := range var0.SpokeHaConfig.Track.Waninterfaces {
							var5 := elementListDsModel_kBpyQPJ_Config{}

							var5.ReducePriority = types.Int64PointerValue(var4.ReducePriority)

							var5.WanInterfaceId = types.StringPointerValue(var4.WanInterfaceId)
							var1.SpokeHaConfig.Track.Waninterfaces = append(var1.SpokeHaConfig.Track.Waninterfaces, var5)
						}
					}
				}
			}

			if var0.SwObj == nil {
				var1.SwObj = nil
			} else {
				var1.SwObj = &elementListDsModel_ndabCzl_Config{}

				var1.SwObj.Location = types.StringPointerValue(var0.SwObj.Location)

				var1.SwObj.Version = types.StringPointerValue(var0.SwObj.Version)
			}

			if var0.SwitchConfig == nil {
				var1.SwitchConfig = nil
			} else {
				var1.SwitchConfig = &elementListDsModel_abEEBQk_Config{}

				var1.SwitchConfig.DefaultVlanId = types.Int64PointerValue(var0.SwitchConfig.DefaultVlanId)

				var1.SwitchConfig.MstpEnabled = types.BoolPointerValue(var0.SwitchConfig.MstpEnabled)

				var1.SwitchConfig.StpAgingTimer = types.Int64PointerValue(var0.SwitchConfig.StpAgingTimer)

				var1.SwitchConfig.StpForwardDelay = types.Int64PointerValue(var0.SwitchConfig.StpForwardDelay)

				var1.SwitchConfig.StpHelloTime = types.Int64PointerValue(var0.SwitchConfig.StpHelloTime)

				var1.SwitchConfig.StpMaxAge = types.Int64PointerValue(var0.SwitchConfig.StpMaxAge)

				var1.SwitchConfig.StpMode = types.StringValue(var0.SwitchConfig.StpMode)

				var1.SwitchConfig.StpPriority = types.Int64PointerValue(var0.SwitchConfig.StpPriority)
			}

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var1.VpnToVpnForwarding = types.BoolPointerValue(var0.VpnToVpnForwarding)
			state.Items = append(state.Items, var1)
		}
	}

	state.TotalItems = types.Int64PointerValue(ans.TotalItems)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &elementDataSource{}
	_ datasource.DataSourceWithConfigure = &elementDataSource{}
)

func NewElementDataSource() datasource.DataSource {
	return &elementDataSource{}
}

type elementDataSource struct {
	client *sdwan.Client
}

// elementDsModel is the model.
type elementDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ElementId types.String `tfsdk:"element_id"`

	// Output.
	ClusterId                    types.String                   `tfsdk:"cluster_id"`
	Description                  types.String                   `tfsdk:"description"`
	DeviceProfileId              types.String                   `tfsdk:"device_profile_id"`
	Etag                         types.Int64                    `tfsdk:"etag"`
	Id                           types.String                   `tfsdk:"id"`
	L3DirectPrivateWanForwarding types.Bool                     `tfsdk:"l3_direct_private_wan_forwarding"`
	L3LanForwarding              types.Bool                     `tfsdk:"l3_lan_forwarding"`
	LedConfig                    *elementDsModel_xtSEgxw_Config `tfsdk:"led_config"`
	MainPowerUsageThreshold      types.Int64                    `tfsdk:"main_power_usage_threshold"`
	Name                         types.String                   `tfsdk:"name"`
	NatPolicysetstackId          types.String                   `tfsdk:"nat_policysetstack_id"`
	NetworkPolicysetstackId      types.String                   `tfsdk:"network_policysetstack_id"`
	PriorityPolicysetstackId     types.String                   `tfsdk:"priority_policysetstack_id"`
	SiteId                       types.String                   `tfsdk:"site_id"`
	SpokeHaConfig                *elementDsModel_urOXkAM_Config `tfsdk:"spoke_ha_config"`
	SwObj                        *elementDsModel_ndabCzl_Config `tfsdk:"sw_obj"`
	SwitchConfig                 *elementDsModel_abEEBQk_Config `tfsdk:"switch_config"`
	Tags                         types.List                     `tfsdk:"tags"`
	VpnToVpnForwarding           types.Bool                     `tfsdk:"vpn_to_vpn_forwarding"`
}

type elementDsModel_xtSEgxw_Config struct {
	ServiceLedOn types.Bool `tfsdk:"service_led_on"`
}

type elementDsModel_urOXkAM_Config struct {
	ClusterId       types.String                   `tfsdk:"cluster_id"`
	Enable          types.Bool                     `tfsdk:"enable"`
	Priority        types.Int64                    `tfsdk:"priority"`
	SourceInterface types.String                   `tfsdk:"source_interface"`
	Track           *elementDsModel_gvOEngs_Config `tfsdk:"track"`
}

type elementDsModel_gvOEngs_Config struct {
	Interfaces    []elementDsModel_uvXdTvM_Config `tfsdk:"interfaces"`
	Waninterfaces []elementDsModel_kBpyQPJ_Config `tfsdk:"waninterfaces"`
}

type elementDsModel_uvXdTvM_Config struct {
	InterfaceId    types.String `tfsdk:"interface_id"`
	ReducePriority types.Int64  `tfsdk:"reduce_priority"`
}

type elementDsModel_kBpyQPJ_Config struct {
	ReducePriority types.Int64  `tfsdk:"reduce_priority"`
	WanInterfaceId types.String `tfsdk:"wan_interface_id"`
}

type elementDsModel_ndabCzl_Config struct {
	Location types.String `tfsdk:"location"`
	Version  types.String `tfsdk:"version"`
}

type elementDsModel_abEEBQk_Config struct {
	DefaultVlanId   types.Int64  `tfsdk:"default_vlan_id"`
	MstpEnabled     types.Bool   `tfsdk:"mstp_enabled"`
	StpAgingTimer   types.Int64  `tfsdk:"stp_aging_timer"`
	StpForwardDelay types.Int64  `tfsdk:"stp_forward_delay"`
	StpHelloTime    types.Int64  `tfsdk:"stp_hello_time"`
	StpMaxAge       types.Int64  `tfsdk:"stp_max_age"`
	StpMode         types.String `tfsdk:"stp_mode"`
	StpPriority     types.Int64  `tfsdk:"stp_priority"`
}

// Metadata returns the data source type name.
func (d *elementDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_element"
}

// Schema defines the schema for this data source.
func (d *elementDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"element_id":true} outputs:map[string]bool{"cluster_id":true, "description":true, "device_profile_id":true, "etag":true, "id":true, "l3_direct_private_wan_forwarding":true, "l3_lan_forwarding":true, "led_config":true, "main_power_usage_threshold":true, "name":true, "nat_policysetstack_id":true, "network_policysetstack_id":true, "priority_policysetstack_id":true, "site_id":true, "spoke_ha_config":true, "sw_obj":true, "switch_config":true, "tags":true, "tfid":true, "vpn_to_vpn_forwarding":true} forceNew:map[string]bool{"element_id":true}
			"cluster_id": dsschema.StringAttribute{
				Description: "Cluster Id.",
				Computed:    true,
			},
			"description": dsschema.StringAttribute{
				Description: "Description: Size(max = 256, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Computed:    true,
			},
			"device_profile_id": dsschema.StringAttribute{
				Description: "Device Profile Id.",
				Computed:    true,
			},
			"element_id": dsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
			},
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"l3_direct_private_wan_forwarding": dsschema.BoolAttribute{
				Description: "L3 Direct Private Wan Forwarding.",
				Computed:    true,
			},
			"l3_lan_forwarding": dsschema.BoolAttribute{
				Description: "L3 Lan Forwarding.",
				Computed:    true,
			},
			"led_config": dsschema.SingleNestedAttribute{
				Description: "The LedConfig param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"service_led_on":true} forceNew:map[string]bool(nil)
					"service_led_on": dsschema.BoolAttribute{
						Description: "Service Led On.",
						Computed:    true,
					},
				},
			},
			"main_power_usage_threshold": dsschema.Int64Attribute{
				Description: "Main Power Usage Threshold: ValidateDecimal(allowZero = true, increment = 0, max = 0, error = INVALID_MAIN_POWER_USAGE_THRESHOLD: Invalid main power usage threshold. Allowed range is 50-100., min = 0) .",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Name: Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Computed:    true,
			},
			"nat_policysetstack_id": dsschema.StringAttribute{
				Description: "Nat Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NAT_POLICYSETSTACK_ID: Invalid nat policy set stack id.) .",
				Computed:    true,
			},
			"network_policysetstack_id": dsschema.StringAttribute{
				Description: "Network Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NETWORK_POLICYSETSTACK_ID: Invalid network policy set stack id) .",
				Computed:    true,
			},
			"priority_policysetstack_id": dsschema.StringAttribute{
				Description: "Priority Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_PRIORITY_POLICYSETSTACK_ID: Invalid priority policy set stack id) .",
				Computed:    true,
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id: Digits(fraction = 0, integer = 50, SITEID_INVALID) NotNull .",
				Computed:    true,
			},
			"spoke_ha_config": dsschema.SingleNestedAttribute{
				Description: "The SpokeHaConfig param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"cluster_id":true, "enable":true, "priority":true, "source_interface":true, "track":true} forceNew:map[string]bool(nil)
					"cluster_id": dsschema.StringAttribute{
						Description: "Cluster Id: Required(SPOKEHA_CONFIG_CLUSTER_ID_REQD) .",
						Computed:    true,
					},
					"enable": dsschema.BoolAttribute{
						Description: "Enable: Required(SPOKEHA_CONFIG_ENABLE_REQD) .",
						Computed:    true,
					},
					"priority": dsschema.Int64Attribute{
						Description: "Priority: Required(SPOKEHA_CONFIG_PRIORITY_REQD) Range(max = 254L, SPOKEHA_CONFIG_INVALID_PRIORITY, min = 1L) .",
						Computed:    true,
					},
					"source_interface": dsschema.StringAttribute{
						Description: "Source Interface: Required(SPOKEHA_CONFIG_SOURCE_INTERFACE_ID_REQD) .",
						Computed:    true,
					},
					"track": dsschema.SingleNestedAttribute{
						Description: "The Track param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"interfaces":true, "waninterfaces":true} forceNew:map[string]bool(nil)
							"interfaces": dsschema.ListNestedAttribute{
								Description: "Interfaces: Valid .",
								Computed:    true,
								NestedObject: dsschema.NestedAttributeObject{
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"interface_id":true, "reduce_priority":true} forceNew:map[string]bool(nil)
										"interface_id": dsschema.StringAttribute{
											Description: "Interface Id.",
											Computed:    true,
										},
										"reduce_priority": dsschema.Int64Attribute{
											Description: "Reduce Priority: Range(max = 254L, SPOKEHA_CONFIG_INVALID_REDUCE_PRIORITY, min = 1L) .",
											Computed:    true,
										},
									},
								},
							},
							"waninterfaces": dsschema.ListNestedAttribute{
								Description: "Waninterfaces: Valid .",
								Computed:    true,
								NestedObject: dsschema.NestedAttributeObject{
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"reduce_priority":true, "wan_interface_id":true} forceNew:map[string]bool(nil)
										"reduce_priority": dsschema.Int64Attribute{
											Description: "Reduce Priority: Range(max = 254L, SPOKEHA_CONFIG_INVALID_REDUCE_PRIORITY, min = 1L) .",
											Computed:    true,
										},
										"wan_interface_id": dsschema.StringAttribute{
											Description: "Wan Interface Id.",
											Computed:    true,
										},
									},
								},
							},
						},
					},
				},
			},
			"sw_obj": dsschema.SingleNestedAttribute{
				Description: "The SwObj param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"location":true, "version":true} forceNew:map[string]bool(nil)
					"location": dsschema.StringAttribute{
						Description: "Location.",
						Computed:    true,
					},
					"version": dsschema.StringAttribute{
						Description: "Version.",
						Computed:    true,
					},
				},
			},
			"switch_config": dsschema.SingleNestedAttribute{
				Description: "The SwitchConfig param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"default_vlan_id":true, "mstp_enabled":true, "stp_aging_timer":true, "stp_forward_delay":true, "stp_hello_time":true, "stp_max_age":true, "stp_mode":true, "stp_priority":true} forceNew:map[string]bool(nil)
					"default_vlan_id": dsschema.Int64Attribute{
						Description: "Default Vlan Id: Range(max = 4000L, error = INVALID_VLAN_ID: Invalid VLAN id. VLAN id must be between 1-4000., min = 1L) .",
						Computed:    true,
					},
					"mstp_enabled": dsschema.BoolAttribute{
						Description: "Mstp Enabled.",
						Computed:    true,
					},
					"stp_aging_timer": dsschema.Int64Attribute{
						Description: "Stp Aging Timer: Range(max = 1000000L, error = INVALID_STP_AGING_TIMER: Invalid STP aging timer. Allowed range is 10-1000000., min = 10L) .",
						Computed:    true,
					},
					"stp_forward_delay": dsschema.Int64Attribute{
						Description: "Stp Forward Delay: Range(max = 30L, error = INVALID_STP_FORWARD_DELAY: Invalid STP forward delay. Allowed range is 4-30 and given value should also meet the criteria: (2 * (stp_forward_delay - 1)) >= stp_max_age., min = 4L) .",
						Computed:    true,
					},
					"stp_hello_time": dsschema.Int64Attribute{
						Description: "Stp Hello Time: Range(max = 10L, error = INVALID_STP_HELLO_TIME: Invalid STP hello time. Allowed range is 1-10., min = 1L) .",
						Computed:    true,
					},
					"stp_max_age": dsschema.Int64Attribute{
						Description: "Stp Max Age: Range(max = 40L, error = INVALID_STP_MAX_AGE: Invalid STP max age. Allowed range is 6-40., min = 6L) .",
						Computed:    true,
					},
					"stp_mode": dsschema.StringAttribute{
						Description: "Stp Mode: ValidateEnum(enumClass = classOf[STPMode], error = INVALID_STP_MODE: Invalid STP mode. Allowed values are stp, rstp or mstp., nullAllowed = false) . String must be one of these: `\"RSTP\"`.",
						Computed:    true,
					},
					"stp_priority": dsschema.Int64Attribute{
						Description: "Stp Priority: Range(max = 61440L, error = INVALID_STP_PRIORITY: Invalid STP priority. Value should be in the multiples of 4096., min = 0L) .",
						Computed:    true,
					},
				},
			},
			"tags": dsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"vpn_to_vpn_forwarding": dsschema.BoolAttribute{
				Description: "Vpn To Vpn Forwarding.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *elementDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *elementDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state elementDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_element",
		"terraform_provider_function": "Read",
		"element_id":                  state.ElementId.ValueString(),
	})

	// Prepare to run the command.
	svc := fZwFwyb.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := fZwFwyb.ReadInput{}

	input.ElementId = StringValue(state.ElementId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.ElementId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.ClusterId = types.StringPointerValue(ans.ClusterId)

	state.Description = types.StringPointerValue(ans.Description)

	state.DeviceProfileId = types.StringPointerValue(ans.DeviceProfileId)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.L3DirectPrivateWanForwarding = types.BoolPointerValue(ans.L3DirectPrivateWanForwarding)

	state.L3LanForwarding = types.BoolPointerValue(ans.L3LanForwarding)

	if ans.LedConfig == nil {
		state.LedConfig = nil
	} else {
		state.LedConfig = &elementDsModel_xtSEgxw_Config{}

		state.LedConfig.ServiceLedOn = types.BoolPointerValue(ans.LedConfig.ServiceLedOn)
	}

	state.MainPowerUsageThreshold = types.Int64PointerValue(ans.MainPowerUsageThreshold)

	state.Name = types.StringPointerValue(ans.Name)

	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)

	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)

	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)

	state.SiteId = types.StringValue(ans.SiteId)

	if ans.SpokeHaConfig == nil {
		state.SpokeHaConfig = nil
	} else {
		state.SpokeHaConfig = &elementDsModel_urOXkAM_Config{}

		state.SpokeHaConfig.ClusterId = types.StringValue(ans.SpokeHaConfig.ClusterId)

		state.SpokeHaConfig.Enable = types.BoolValue(ans.SpokeHaConfig.Enable)

		state.SpokeHaConfig.Priority = types.Int64Value(ans.SpokeHaConfig.Priority)

		state.SpokeHaConfig.SourceInterface = types.StringValue(ans.SpokeHaConfig.SourceInterface)

		if ans.SpokeHaConfig.Track == nil {
			state.SpokeHaConfig.Track = nil
		} else {
			state.SpokeHaConfig.Track = &elementDsModel_gvOEngs_Config{}

			if len(ans.SpokeHaConfig.Track.Interfaces) == 0 {
				state.SpokeHaConfig.Track.Interfaces = nil
			} else {
				state.SpokeHaConfig.Track.Interfaces = make([]elementDsModel_uvXdTvM_Config, 0, len(ans.SpokeHaConfig.Track.Interfaces))
				for _, var0 := range ans.SpokeHaConfig.Track.Interfaces {
					var1 := elementDsModel_uvXdTvM_Config{}

					var1.InterfaceId = types.StringPointerValue(var0.InterfaceId)

					var1.ReducePriority = types.Int64PointerValue(var0.ReducePriority)
					state.SpokeHaConfig.Track.Interfaces = append(state.SpokeHaConfig.Track.Interfaces, var1)
				}
			}

			if len(ans.SpokeHaConfig.Track.Waninterfaces) == 0 {
				state.SpokeHaConfig.Track.Waninterfaces = nil
			} else {
				state.SpokeHaConfig.Track.Waninterfaces = make([]elementDsModel_kBpyQPJ_Config, 0, len(ans.SpokeHaConfig.Track.Waninterfaces))
				for _, var2 := range ans.SpokeHaConfig.Track.Waninterfaces {
					var3 := elementDsModel_kBpyQPJ_Config{}

					var3.ReducePriority = types.Int64PointerValue(var2.ReducePriority)

					var3.WanInterfaceId = types.StringPointerValue(var2.WanInterfaceId)
					state.SpokeHaConfig.Track.Waninterfaces = append(state.SpokeHaConfig.Track.Waninterfaces, var3)
				}
			}
		}
	}

	if ans.SwObj == nil {
		state.SwObj = nil
	} else {
		state.SwObj = &elementDsModel_ndabCzl_Config{}

		state.SwObj.Location = types.StringPointerValue(ans.SwObj.Location)

		state.SwObj.Version = types.StringPointerValue(ans.SwObj.Version)
	}

	if ans.SwitchConfig == nil {
		state.SwitchConfig = nil
	} else {
		state.SwitchConfig = &elementDsModel_abEEBQk_Config{}

		state.SwitchConfig.DefaultVlanId = types.Int64PointerValue(ans.SwitchConfig.DefaultVlanId)

		state.SwitchConfig.MstpEnabled = types.BoolPointerValue(ans.SwitchConfig.MstpEnabled)

		state.SwitchConfig.StpAgingTimer = types.Int64PointerValue(ans.SwitchConfig.StpAgingTimer)

		state.SwitchConfig.StpForwardDelay = types.Int64PointerValue(ans.SwitchConfig.StpForwardDelay)

		state.SwitchConfig.StpHelloTime = types.Int64PointerValue(ans.SwitchConfig.StpHelloTime)

		state.SwitchConfig.StpMaxAge = types.Int64PointerValue(ans.SwitchConfig.StpMaxAge)

		state.SwitchConfig.StpMode = types.StringValue(ans.SwitchConfig.StpMode)

		state.SwitchConfig.StpPriority = types.Int64PointerValue(ans.SwitchConfig.StpPriority)
	}

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.VpnToVpnForwarding = types.BoolPointerValue(ans.VpnToVpnForwarding)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &elementResource{}
	_ resource.ResourceWithConfigure   = &elementResource{}
	_ resource.ResourceWithImportState = &elementResource{}
)

func NewElementResource() resource.Resource {
	return &elementResource{}
}

type elementResource struct {
	client *sdwan.Client
}

// elementRsModel is the model.
type elementRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ClusterId                    types.String                   `tfsdk:"cluster_id"`
	Description                  types.String                   `tfsdk:"description"`
	DeviceProfileId              types.String                   `tfsdk:"device_profile_id"`
	ElementId                    types.String                   `tfsdk:"element_id"`
	Etag                         types.Int64                    `tfsdk:"etag"`
	Id                           types.String                   `tfsdk:"id"`
	L3DirectPrivateWanForwarding types.Bool                     `tfsdk:"l3_direct_private_wan_forwarding"`
	L3LanForwarding              types.Bool                     `tfsdk:"l3_lan_forwarding"`
	LedConfig                    *elementRsModel_xtSEgxw_Config `tfsdk:"led_config"`
	MainPowerUsageThreshold      types.Int64                    `tfsdk:"main_power_usage_threshold"`
	Name                         types.String                   `tfsdk:"name"`
	NatPolicysetstackId          types.String                   `tfsdk:"nat_policysetstack_id"`
	NetworkPolicysetstackId      types.String                   `tfsdk:"network_policysetstack_id"`
	PriorityPolicysetstackId     types.String                   `tfsdk:"priority_policysetstack_id"`
	SiteId                       types.String                   `tfsdk:"site_id"`
	SpokeHaConfig                *elementRsModel_urOXkAM_Config `tfsdk:"spoke_ha_config"`
	SwObj                        *elementRsModel_ndabCzl_Config `tfsdk:"sw_obj"`
	SwitchConfig                 *elementRsModel_abEEBQk_Config `tfsdk:"switch_config"`
	Tags                         types.List                     `tfsdk:"tags"`
	VpnToVpnForwarding           types.Bool                     `tfsdk:"vpn_to_vpn_forwarding"`

	// Output.
	// omit input: cluster_id
	// omit input: description
	// omit input: device_profile_id
	// omit input: etag
	// omit input: id
	// omit input: l3_direct_private_wan_forwarding
	// omit input: l3_lan_forwarding
	// omit input: led_config
	// omit input: main_power_usage_threshold
	// omit input: name
	// omit input: nat_policysetstack_id
	// omit input: network_policysetstack_id
	// omit input: priority_policysetstack_id
	// omit input: site_id
	// omit input: spoke_ha_config
	// omit input: sw_obj
	// omit input: switch_config
	// omit input: tags
	// omit input: vpn_to_vpn_forwarding
}

type elementRsModel_xtSEgxw_Config struct {
	ServiceLedOn types.Bool `tfsdk:"service_led_on"`
}

type elementRsModel_urOXkAM_Config struct {
	ClusterId       types.String                   `tfsdk:"cluster_id"`
	Enable          types.Bool                     `tfsdk:"enable"`
	Priority        types.Int64                    `tfsdk:"priority"`
	SourceInterface types.String                   `tfsdk:"source_interface"`
	Track           *elementRsModel_gvOEngs_Config `tfsdk:"track"`
}

type elementRsModel_gvOEngs_Config struct {
	Interfaces    []elementRsModel_uvXdTvM_Config `tfsdk:"interfaces"`
	Waninterfaces []elementRsModel_kBpyQPJ_Config `tfsdk:"waninterfaces"`
}

type elementRsModel_uvXdTvM_Config struct {
	InterfaceId    types.String `tfsdk:"interface_id"`
	ReducePriority types.Int64  `tfsdk:"reduce_priority"`
}

type elementRsModel_kBpyQPJ_Config struct {
	ReducePriority types.Int64  `tfsdk:"reduce_priority"`
	WanInterfaceId types.String `tfsdk:"wan_interface_id"`
}

type elementRsModel_ndabCzl_Config struct {
	Location types.String `tfsdk:"location"`
	Version  types.String `tfsdk:"version"`
}

type elementRsModel_abEEBQk_Config struct {
	DefaultVlanId   types.Int64  `tfsdk:"default_vlan_id"`
	MstpEnabled     types.Bool   `tfsdk:"mstp_enabled"`
	StpAgingTimer   types.Int64  `tfsdk:"stp_aging_timer"`
	StpForwardDelay types.Int64  `tfsdk:"stp_forward_delay"`
	StpHelloTime    types.Int64  `tfsdk:"stp_hello_time"`
	StpMaxAge       types.Int64  `tfsdk:"stp_max_age"`
	StpMode         types.String `tfsdk:"stp_mode"`
	StpPriority     types.Int64  `tfsdk:"stp_priority"`
}

// Metadata returns the data source type name.
func (r *elementResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_element"
}

// Schema defines the schema for this data source.
func (r *elementResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"cluster_id":true, "description":true, "device_profile_id":true, "element_id":true, "etag":true, "id":true, "l3_direct_private_wan_forwarding":true, "l3_lan_forwarding":true, "led_config":true, "main_power_usage_threshold":true, "name":true, "nat_policysetstack_id":true, "network_policysetstack_id":true, "priority_policysetstack_id":true, "site_id":true, "spoke_ha_config":true, "sw_obj":true, "switch_config":true, "tags":true, "vpn_to_vpn_forwarding":true} outputs:map[string]bool{"cluster_id":true, "description":true, "device_profile_id":true, "etag":true, "id":true, "l3_direct_private_wan_forwarding":true, "l3_lan_forwarding":true, "led_config":true, "main_power_usage_threshold":true, "name":true, "nat_policysetstack_id":true, "network_policysetstack_id":true, "priority_policysetstack_id":true, "site_id":true, "spoke_ha_config":true, "sw_obj":true, "switch_config":true, "tags":true, "tfid":true, "vpn_to_vpn_forwarding":true} forceNew:map[string]bool{"element_id":true}
			"cluster_id": rsschema.StringAttribute{
				Description: "Cluster Id.",
				Optional:    true,
			},
			"description": rsschema.StringAttribute{
				Description: "Description: Size(max = 256, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Optional:    true,
			},
			"device_profile_id": rsschema.StringAttribute{
				Description: "Device Profile Id.",
				Optional:    true,
			},
			"element_id": rsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"etag": rsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Optional:    true,
				Computed:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"l3_direct_private_wan_forwarding": rsschema.BoolAttribute{
				Description: "L3 Direct Private Wan Forwarding.",
				Optional:    true,
			},
			"l3_lan_forwarding": rsschema.BoolAttribute{
				Description: "L3 Lan Forwarding.",
				Optional:    true,
			},
			"led_config": rsschema.SingleNestedAttribute{
				Description: "The LedConfig param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"service_led_on":true} outputs:map[string]bool{"service_led_on":true} forceNew:map[string]bool(nil)
					"service_led_on": rsschema.BoolAttribute{
						Description: "Service Led On.",
						Optional:    true,
					},
				},
			},
			"main_power_usage_threshold": rsschema.Int64Attribute{
				Description: "Main Power Usage Threshold: ValidateDecimal(allowZero = true, increment = 0, max = 0, error = INVALID_MAIN_POWER_USAGE_THRESHOLD: Invalid main power usage threshold. Allowed range is 50-100., min = 0) .",
				Optional:    true,
			},
			"name": rsschema.StringAttribute{
				Description: "Name: Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Optional:    true,
			},
			"nat_policysetstack_id": rsschema.StringAttribute{
				Description: "Nat Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NAT_POLICYSETSTACK_ID: Invalid nat policy set stack id.) .",
				Optional:    true,
			},
			"network_policysetstack_id": rsschema.StringAttribute{
				Description: "Network Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_NETWORK_POLICYSETSTACK_ID: Invalid network policy set stack id) .",
				Optional:    true,
			},
			"priority_policysetstack_id": rsschema.StringAttribute{
				Description: "Priority Policysetstack Id: Digits(fraction = 0, integer = 20, error = INVALID_PRIORITY_POLICYSETSTACK_ID: Invalid priority policy set stack id) .",
				Optional:    true,
			},
			"site_id": rsschema.StringAttribute{
				Description: "Site Id: Digits(fraction = 0, integer = 50, SITEID_INVALID) NotNull .",
				Required:    true,
			},
			"spoke_ha_config": rsschema.SingleNestedAttribute{
				Description: "The SpokeHaConfig param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"cluster_id":true, "enable":true, "priority":true, "source_interface":true, "track":true} outputs:map[string]bool{"cluster_id":true, "enable":true, "priority":true, "source_interface":true, "track":true} forceNew:map[string]bool(nil)
					"cluster_id": rsschema.StringAttribute{
						Description: "Cluster Id: Required(SPOKEHA_CONFIG_CLUSTER_ID_REQD) .",
						Required:    true,
					},
					"enable": rsschema.BoolAttribute{
						Description: "Enable: Required(SPOKEHA_CONFIG_ENABLE_REQD) .",
						Required:    true,
					},
					"priority": rsschema.Int64Attribute{
						Description: "Priority: Required(SPOKEHA_CONFIG_PRIORITY_REQD) Range(max = 254L, SPOKEHA_CONFIG_INVALID_PRIORITY, min = 1L) .",
						Required:    true,
					},
					"source_interface": rsschema.StringAttribute{
						Description: "Source Interface: Required(SPOKEHA_CONFIG_SOURCE_INTERFACE_ID_REQD) .",
						Required:    true,
					},
					"track": rsschema.SingleNestedAttribute{
						Description: "The Track param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"interfaces":true, "waninterfaces":true} outputs:map[string]bool{"interfaces":true, "waninterfaces":true} forceNew:map[string]bool(nil)
							"interfaces": rsschema.ListNestedAttribute{
								Description: "Interfaces: Valid .",
								Optional:    true,
								NestedObject: rsschema.NestedAttributeObject{
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"interface_id":true, "reduce_priority":true} outputs:map[string]bool{"interface_id":true, "reduce_priority":true} forceNew:map[string]bool(nil)
										"interface_id": rsschema.StringAttribute{
											Description: "Interface Id.",
											Optional:    true,
										},
										"reduce_priority": rsschema.Int64Attribute{
											Description: "Reduce Priority: Range(max = 254L, SPOKEHA_CONFIG_INVALID_REDUCE_PRIORITY, min = 1L) .",
											Optional:    true,
										},
									},
								},
							},
							"waninterfaces": rsschema.ListNestedAttribute{
								Description: "Waninterfaces: Valid .",
								Optional:    true,
								NestedObject: rsschema.NestedAttributeObject{
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"reduce_priority":true, "wan_interface_id":true} outputs:map[string]bool{"reduce_priority":true, "wan_interface_id":true} forceNew:map[string]bool(nil)
										"reduce_priority": rsschema.Int64Attribute{
											Description: "Reduce Priority: Range(max = 254L, SPOKEHA_CONFIG_INVALID_REDUCE_PRIORITY, min = 1L) .",
											Optional:    true,
										},
										"wan_interface_id": rsschema.StringAttribute{
											Description: "Wan Interface Id.",
											Optional:    true,
										},
									},
								},
							},
						},
					},
				},
			},
			"sw_obj": rsschema.SingleNestedAttribute{
				Description: "The SwObj param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"location":true, "version":true} outputs:map[string]bool{"location":true, "version":true} forceNew:map[string]bool(nil)
					"location": rsschema.StringAttribute{
						Description: "Location.",
						Optional:    true,
					},
					"version": rsschema.StringAttribute{
						Description: "Version.",
						Optional:    true,
					},
				},
			},
			"switch_config": rsschema.SingleNestedAttribute{
				Description: "The SwitchConfig param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"default_vlan_id":true, "mstp_enabled":true, "stp_aging_timer":true, "stp_forward_delay":true, "stp_hello_time":true, "stp_max_age":true, "stp_mode":true, "stp_priority":true} outputs:map[string]bool{"default_vlan_id":true, "mstp_enabled":true, "stp_aging_timer":true, "stp_forward_delay":true, "stp_hello_time":true, "stp_max_age":true, "stp_mode":true, "stp_priority":true} forceNew:map[string]bool(nil)
					"default_vlan_id": rsschema.Int64Attribute{
						Description: "Default Vlan Id: Range(max = 4000L, error = INVALID_VLAN_ID: Invalid VLAN id. VLAN id must be between 1-4000., min = 1L) .",
						Optional:    true,
					},
					"mstp_enabled": rsschema.BoolAttribute{
						Description: "Mstp Enabled.",
						Optional:    true,
					},
					"stp_aging_timer": rsschema.Int64Attribute{
						Description: "Stp Aging Timer: Range(max = 1000000L, error = INVALID_STP_AGING_TIMER: Invalid STP aging timer. Allowed range is 10-1000000., min = 10L) .",
						Optional:    true,
					},
					"stp_forward_delay": rsschema.Int64Attribute{
						Description: "Stp Forward Delay: Range(max = 30L, error = INVALID_STP_FORWARD_DELAY: Invalid STP forward delay. Allowed range is 4-30 and given value should also meet the criteria: (2 * (stp_forward_delay - 1)) >= stp_max_age., min = 4L) .",
						Optional:    true,
					},
					"stp_hello_time": rsschema.Int64Attribute{
						Description: "Stp Hello Time: Range(max = 10L, error = INVALID_STP_HELLO_TIME: Invalid STP hello time. Allowed range is 1-10., min = 1L) .",
						Optional:    true,
					},
					"stp_max_age": rsschema.Int64Attribute{
						Description: "Stp Max Age: Range(max = 40L, error = INVALID_STP_MAX_AGE: Invalid STP max age. Allowed range is 6-40., min = 6L) .",
						Optional:    true,
					},
					"stp_mode": rsschema.StringAttribute{
						Description: "Stp Mode: ValidateEnum(enumClass = classOf[STPMode], error = INVALID_STP_MODE: Invalid STP mode. Allowed values are stp, rstp or mstp., nullAllowed = false) . String must be one of these: `\"RSTP\"`.",
						Required:    true,
						Validators: []validator.String{
							stringvalidator.OneOf("RSTP"),
						},
					},
					"stp_priority": rsschema.Int64Attribute{
						Description: "Stp Priority: Range(max = 61440L, error = INVALID_STP_PRIORITY: Invalid STP priority. Value should be in the multiples of 4096., min = 0L) .",
						Optional:    true,
					},
				},
			},
			"tags": rsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"vpn_to_vpn_forwarding": rsschema.BoolAttribute{
				Description: "Vpn To Vpn Forwarding.",
				Optional:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (r *elementResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sdwan.Client)
}

// Create resource.
func (r *elementResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var state elementRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_element",
		"terraform_provider_function": "Create",
		"element_id":                  state.ElementId.ValueString(),
	})

	// Prepare to create the config.
	svc := fZwFwyb.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := fZwFwyb.ReadInput{}

	input.ElementId = StringValue(state.ElementId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.ElementId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.ClusterId = types.StringPointerValue(ans.ClusterId)

	state.Description = types.StringPointerValue(ans.Description)

	state.DeviceProfileId = types.StringPointerValue(ans.DeviceProfileId)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.L3DirectPrivateWanForwarding = types.BoolPointerValue(ans.L3DirectPrivateWanForwarding)

	state.L3LanForwarding = types.BoolPointerValue(ans.L3LanForwarding)

	if ans.LedConfig == nil {
		state.LedConfig = nil
	} else {
		state.LedConfig = &elementRsModel_xtSEgxw_Config{}

		state.LedConfig.ServiceLedOn = types.BoolPointerValue(ans.LedConfig.ServiceLedOn)
	}

	state.MainPowerUsageThreshold = types.Int64PointerValue(ans.MainPowerUsageThreshold)

	state.Name = types.StringPointerValue(ans.Name)

	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)

	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)

	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)

	state.SiteId = types.StringValue(ans.SiteId)

	if ans.SpokeHaConfig == nil {
		state.SpokeHaConfig = nil
	} else {
		state.SpokeHaConfig = &elementRsModel_urOXkAM_Config{}

		state.SpokeHaConfig.ClusterId = types.StringValue(ans.SpokeHaConfig.ClusterId)

		state.SpokeHaConfig.Enable = types.BoolValue(ans.SpokeHaConfig.Enable)

		state.SpokeHaConfig.Priority = types.Int64Value(ans.SpokeHaConfig.Priority)

		state.SpokeHaConfig.SourceInterface = types.StringValue(ans.SpokeHaConfig.SourceInterface)

		if ans.SpokeHaConfig.Track == nil {
			state.SpokeHaConfig.Track = nil
		} else {
			state.SpokeHaConfig.Track = &elementRsModel_gvOEngs_Config{}

			if len(ans.SpokeHaConfig.Track.Interfaces) == 0 {
				state.SpokeHaConfig.Track.Interfaces = nil
			} else {
				state.SpokeHaConfig.Track.Interfaces = make([]elementRsModel_uvXdTvM_Config, 0, len(ans.SpokeHaConfig.Track.Interfaces))
				for _, var0 := range ans.SpokeHaConfig.Track.Interfaces {
					var1 := elementRsModel_uvXdTvM_Config{}

					var1.InterfaceId = types.StringPointerValue(var0.InterfaceId)

					var1.ReducePriority = types.Int64PointerValue(var0.ReducePriority)
					state.SpokeHaConfig.Track.Interfaces = append(state.SpokeHaConfig.Track.Interfaces, var1)
				}
			}

			if len(ans.SpokeHaConfig.Track.Waninterfaces) == 0 {
				state.SpokeHaConfig.Track.Waninterfaces = nil
			} else {
				state.SpokeHaConfig.Track.Waninterfaces = make([]elementRsModel_kBpyQPJ_Config, 0, len(ans.SpokeHaConfig.Track.Waninterfaces))
				for _, var2 := range ans.SpokeHaConfig.Track.Waninterfaces {
					var3 := elementRsModel_kBpyQPJ_Config{}

					var3.ReducePriority = types.Int64PointerValue(var2.ReducePriority)

					var3.WanInterfaceId = types.StringPointerValue(var2.WanInterfaceId)
					state.SpokeHaConfig.Track.Waninterfaces = append(state.SpokeHaConfig.Track.Waninterfaces, var3)
				}
			}
		}
	}

	if ans.SwObj == nil {
		state.SwObj = nil
	} else {
		state.SwObj = &elementRsModel_ndabCzl_Config{}

		state.SwObj.Location = types.StringPointerValue(ans.SwObj.Location)

		state.SwObj.Version = types.StringPointerValue(ans.SwObj.Version)
	}

	if ans.SwitchConfig == nil {
		state.SwitchConfig = nil
	} else {
		state.SwitchConfig = &elementRsModel_abEEBQk_Config{}

		state.SwitchConfig.DefaultVlanId = types.Int64PointerValue(ans.SwitchConfig.DefaultVlanId)

		state.SwitchConfig.MstpEnabled = types.BoolPointerValue(ans.SwitchConfig.MstpEnabled)

		state.SwitchConfig.StpAgingTimer = types.Int64PointerValue(ans.SwitchConfig.StpAgingTimer)

		state.SwitchConfig.StpForwardDelay = types.Int64PointerValue(ans.SwitchConfig.StpForwardDelay)

		state.SwitchConfig.StpHelloTime = types.Int64PointerValue(ans.SwitchConfig.StpHelloTime)

		state.SwitchConfig.StpMaxAge = types.Int64PointerValue(ans.SwitchConfig.StpMaxAge)

		state.SwitchConfig.StpMode = types.StringValue(ans.SwitchConfig.StpMode)

		state.SwitchConfig.StpPriority = types.Int64PointerValue(ans.SwitchConfig.StpPriority)
	}

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.VpnToVpnForwarding = types.BoolPointerValue(ans.VpnToVpnForwarding)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Read performs Read for the struct.
func (r *elementResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state elementRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_element",
		"locMap":                      map[string]int{"element_id": 0, "id": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := fZwFwyb.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := fZwFwyb.ReadInput{}

	input.ElementId = tokens[0]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.ElementId = types.StringNull()
	} else {
		state.ElementId = types.StringValue(tokens[0])
	}
	state.Tfid = savestate.Tfid

	state.ClusterId = types.StringPointerValue(ans.ClusterId)

	state.Description = types.StringPointerValue(ans.Description)

	state.DeviceProfileId = types.StringPointerValue(ans.DeviceProfileId)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.L3DirectPrivateWanForwarding = types.BoolPointerValue(ans.L3DirectPrivateWanForwarding)

	state.L3LanForwarding = types.BoolPointerValue(ans.L3LanForwarding)

	if ans.LedConfig == nil {
		state.LedConfig = nil
	} else {
		state.LedConfig = &elementRsModel_xtSEgxw_Config{}

		state.LedConfig.ServiceLedOn = types.BoolPointerValue(ans.LedConfig.ServiceLedOn)
	}

	state.MainPowerUsageThreshold = types.Int64PointerValue(ans.MainPowerUsageThreshold)

	state.Name = types.StringPointerValue(ans.Name)

	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)

	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)

	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)

	state.SiteId = types.StringValue(ans.SiteId)

	if ans.SpokeHaConfig == nil {
		state.SpokeHaConfig = nil
	} else {
		state.SpokeHaConfig = &elementRsModel_urOXkAM_Config{}

		state.SpokeHaConfig.ClusterId = types.StringValue(ans.SpokeHaConfig.ClusterId)

		state.SpokeHaConfig.Enable = types.BoolValue(ans.SpokeHaConfig.Enable)

		state.SpokeHaConfig.Priority = types.Int64Value(ans.SpokeHaConfig.Priority)

		state.SpokeHaConfig.SourceInterface = types.StringValue(ans.SpokeHaConfig.SourceInterface)

		if ans.SpokeHaConfig.Track == nil {
			state.SpokeHaConfig.Track = nil
		} else {
			state.SpokeHaConfig.Track = &elementRsModel_gvOEngs_Config{}

			if len(ans.SpokeHaConfig.Track.Interfaces) == 0 {
				state.SpokeHaConfig.Track.Interfaces = nil
			} else {
				state.SpokeHaConfig.Track.Interfaces = make([]elementRsModel_uvXdTvM_Config, 0, len(ans.SpokeHaConfig.Track.Interfaces))
				for _, var0 := range ans.SpokeHaConfig.Track.Interfaces {
					var1 := elementRsModel_uvXdTvM_Config{}

					var1.InterfaceId = types.StringPointerValue(var0.InterfaceId)

					var1.ReducePriority = types.Int64PointerValue(var0.ReducePriority)
					state.SpokeHaConfig.Track.Interfaces = append(state.SpokeHaConfig.Track.Interfaces, var1)
				}
			}

			if len(ans.SpokeHaConfig.Track.Waninterfaces) == 0 {
				state.SpokeHaConfig.Track.Waninterfaces = nil
			} else {
				state.SpokeHaConfig.Track.Waninterfaces = make([]elementRsModel_kBpyQPJ_Config, 0, len(ans.SpokeHaConfig.Track.Waninterfaces))
				for _, var2 := range ans.SpokeHaConfig.Track.Waninterfaces {
					var3 := elementRsModel_kBpyQPJ_Config{}

					var3.ReducePriority = types.Int64PointerValue(var2.ReducePriority)

					var3.WanInterfaceId = types.StringPointerValue(var2.WanInterfaceId)
					state.SpokeHaConfig.Track.Waninterfaces = append(state.SpokeHaConfig.Track.Waninterfaces, var3)
				}
			}
		}
	}

	if ans.SwObj == nil {
		state.SwObj = nil
	} else {
		state.SwObj = &elementRsModel_ndabCzl_Config{}

		state.SwObj.Location = types.StringPointerValue(ans.SwObj.Location)

		state.SwObj.Version = types.StringPointerValue(ans.SwObj.Version)
	}

	if ans.SwitchConfig == nil {
		state.SwitchConfig = nil
	} else {
		state.SwitchConfig = &elementRsModel_abEEBQk_Config{}

		state.SwitchConfig.DefaultVlanId = types.Int64PointerValue(ans.SwitchConfig.DefaultVlanId)

		state.SwitchConfig.MstpEnabled = types.BoolPointerValue(ans.SwitchConfig.MstpEnabled)

		state.SwitchConfig.StpAgingTimer = types.Int64PointerValue(ans.SwitchConfig.StpAgingTimer)

		state.SwitchConfig.StpForwardDelay = types.Int64PointerValue(ans.SwitchConfig.StpForwardDelay)

		state.SwitchConfig.StpHelloTime = types.Int64PointerValue(ans.SwitchConfig.StpHelloTime)

		state.SwitchConfig.StpMaxAge = types.Int64PointerValue(ans.SwitchConfig.StpMaxAge)

		state.SwitchConfig.StpMode = types.StringValue(ans.SwitchConfig.StpMode)

		state.SwitchConfig.StpPriority = types.Int64PointerValue(ans.SwitchConfig.StpPriority)
	}

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.VpnToVpnForwarding = types.BoolPointerValue(ans.VpnToVpnForwarding)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *elementResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state elementRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_element",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := fZwFwyb.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := fZwFwyb.UpdateInput{}

	if tokens[0] != "" {
		input.ElementId = tokens[0]
	}
	input.Request = &nNBVXzb.Config{}

	input.Request.ClusterId = ValueStringPointerFromPlanOrState(plan.ClusterId, state.ClusterId)

	input.Request.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)

	input.Request.DeviceProfileId = ValueStringPointerFromPlanOrState(plan.DeviceProfileId, state.DeviceProfileId)

	input.Request.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)

	input.Request.L3DirectPrivateWanForwarding = ValueBoolPointerFromPlanOrState(plan.L3DirectPrivateWanForwarding, state.L3DirectPrivateWanForwarding)

	input.Request.L3LanForwarding = ValueBoolPointerFromPlanOrState(plan.L3LanForwarding, state.L3LanForwarding)

	if plan.LedConfig != nil {
		input.Request.LedConfig = &xtSEgxw.Config{}

		input.Request.LedConfig.ServiceLedOn = ValueBoolPointerFromPlanOrState(plan.LedConfig.ServiceLedOn, state.LedConfig.ServiceLedOn)
	}

	input.Request.MainPowerUsageThreshold = ValueInt64PointerFromPlanOrState(plan.MainPowerUsageThreshold, state.MainPowerUsageThreshold)

	input.Request.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)

	input.Request.NatPolicysetstackId = ValueStringPointerFromPlanOrState(plan.NatPolicysetstackId, state.NatPolicysetstackId)

	input.Request.NetworkPolicysetstackId = ValueStringPointerFromPlanOrState(plan.NetworkPolicysetstackId, state.NetworkPolicysetstackId)

	input.Request.PriorityPolicysetstackId = ValueStringPointerFromPlanOrState(plan.PriorityPolicysetstackId, state.PriorityPolicysetstackId)

	input.Request.SiteId = ValueStringFromPlanOrState(plan.SiteId, state.SiteId)

	if plan.SpokeHaConfig != nil {
		input.Request.SpokeHaConfig = &urOXkAM.Config{}

		input.Request.SpokeHaConfig.ClusterId = ValueStringFromPlanOrState(plan.SpokeHaConfig.ClusterId, state.SpokeHaConfig.ClusterId)

		input.Request.SpokeHaConfig.Enable = ValueBoolFromPlanOrState(plan.SpokeHaConfig.Enable, state.SpokeHaConfig.Enable)

		input.Request.SpokeHaConfig.Priority = ValueInt64FromPlanOrState(plan.SpokeHaConfig.Priority, state.SpokeHaConfig.Priority)

		input.Request.SpokeHaConfig.SourceInterface = ValueStringFromPlanOrState(plan.SpokeHaConfig.SourceInterface, state.SpokeHaConfig.SourceInterface)

		if plan.SpokeHaConfig.Track != nil {
			input.Request.SpokeHaConfig.Track = &gvOEngs.Config{}

			if len(plan.SpokeHaConfig.Track.Interfaces) != 0 || len(state.SpokeHaConfig.Track.Interfaces) != 0 {
				SpokeHaConfigTrackInterfacesToUse := plan.SpokeHaConfig.Track.Interfaces
				if len(plan.SpokeHaConfig.Track.Interfaces) == 0 {
					SpokeHaConfigTrackInterfacesToUse = state.SpokeHaConfig.Track.Interfaces
				}
				input.Request.SpokeHaConfig.Track.Interfaces = make([]uvXdTvM.Config, 0, len(SpokeHaConfigTrackInterfacesToUse))
				for _, var0 := range plan.SpokeHaConfig.Track.Interfaces {
					var var1 uvXdTvM.Config

					var1.InterfaceId = StringValueOrNil(var0.InterfaceId)

					var1.ReducePriority = Int64ValueOrNil(var0.ReducePriority)
					input.Request.SpokeHaConfig.Track.Interfaces = append(input.Request.SpokeHaConfig.Track.Interfaces, var1)
				}
			}

			if len(plan.SpokeHaConfig.Track.Waninterfaces) != 0 || len(state.SpokeHaConfig.Track.Waninterfaces) != 0 {
				SpokeHaConfigTrackWaninterfacesToUse := plan.SpokeHaConfig.Track.Waninterfaces
				if len(plan.SpokeHaConfig.Track.Waninterfaces) == 0 {
					SpokeHaConfigTrackWaninterfacesToUse = state.SpokeHaConfig.Track.Waninterfaces
				}
				input.Request.SpokeHaConfig.Track.Waninterfaces = make([]kBpyQPJ.Config, 0, len(SpokeHaConfigTrackWaninterfacesToUse))
				for _, var2 := range plan.SpokeHaConfig.Track.Waninterfaces {
					var var3 kBpyQPJ.Config

					var3.ReducePriority = Int64ValueOrNil(var2.ReducePriority)

					var3.WanInterfaceId = StringValueOrNil(var2.WanInterfaceId)
					input.Request.SpokeHaConfig.Track.Waninterfaces = append(input.Request.SpokeHaConfig.Track.Waninterfaces, var3)
				}
			}
		}
	}

	if plan.SwObj != nil {
		input.Request.SwObj = &ndabCzl.Config{}

		input.Request.SwObj.Location = ValueStringPointerFromPlanOrState(plan.SwObj.Location, state.SwObj.Location)

		input.Request.SwObj.Version = ValueStringPointerFromPlanOrState(plan.SwObj.Version, state.SwObj.Version)
	}

	if plan.SwitchConfig != nil {
		input.Request.SwitchConfig = &abEEBQk.Config{}

		input.Request.SwitchConfig.DefaultVlanId = ValueInt64PointerFromPlanOrState(plan.SwitchConfig.DefaultVlanId, state.SwitchConfig.DefaultVlanId)

		input.Request.SwitchConfig.MstpEnabled = ValueBoolPointerFromPlanOrState(plan.SwitchConfig.MstpEnabled, state.SwitchConfig.MstpEnabled)

		input.Request.SwitchConfig.StpAgingTimer = ValueInt64PointerFromPlanOrState(plan.SwitchConfig.StpAgingTimer, state.SwitchConfig.StpAgingTimer)

		input.Request.SwitchConfig.StpForwardDelay = ValueInt64PointerFromPlanOrState(plan.SwitchConfig.StpForwardDelay, state.SwitchConfig.StpForwardDelay)

		input.Request.SwitchConfig.StpHelloTime = ValueInt64PointerFromPlanOrState(plan.SwitchConfig.StpHelloTime, state.SwitchConfig.StpHelloTime)

		input.Request.SwitchConfig.StpMaxAge = ValueInt64PointerFromPlanOrState(plan.SwitchConfig.StpMaxAge, state.SwitchConfig.StpMaxAge)

		input.Request.SwitchConfig.StpMode = ValueStringFromPlanOrState(plan.SwitchConfig.StpMode, state.SwitchConfig.StpMode)

		input.Request.SwitchConfig.StpPriority = ValueInt64PointerFromPlanOrState(plan.SwitchConfig.StpPriority, state.SwitchConfig.StpPriority)
	}

	input.Request.Tags = ListStringValueOrNil(ctx, plan.Tags)

	input.Request.VpnToVpnForwarding = ValueBoolPointerFromPlanOrState(plan.VpnToVpnForwarding, state.VpnToVpnForwarding)

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.ClusterId = types.StringPointerValue(ans.ClusterId)

	state.Description = types.StringPointerValue(ans.Description)

	state.DeviceProfileId = types.StringPointerValue(ans.DeviceProfileId)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.L3DirectPrivateWanForwarding = types.BoolPointerValue(ans.L3DirectPrivateWanForwarding)

	state.L3LanForwarding = types.BoolPointerValue(ans.L3LanForwarding)

	if ans.LedConfig == nil {
		state.LedConfig = nil
	} else {
		state.LedConfig = &elementRsModel_xtSEgxw_Config{}

		state.LedConfig.ServiceLedOn = types.BoolPointerValue(ans.LedConfig.ServiceLedOn)
	}

	state.MainPowerUsageThreshold = types.Int64PointerValue(ans.MainPowerUsageThreshold)

	state.Name = types.StringPointerValue(ans.Name)

	state.NatPolicysetstackId = types.StringPointerValue(ans.NatPolicysetstackId)

	state.NetworkPolicysetstackId = types.StringPointerValue(ans.NetworkPolicysetstackId)

	state.PriorityPolicysetstackId = types.StringPointerValue(ans.PriorityPolicysetstackId)

	state.SiteId = types.StringValue(ans.SiteId)

	if ans.SpokeHaConfig == nil {
		state.SpokeHaConfig = nil
	} else {
		state.SpokeHaConfig = &elementRsModel_urOXkAM_Config{}

		state.SpokeHaConfig.ClusterId = types.StringValue(ans.SpokeHaConfig.ClusterId)

		state.SpokeHaConfig.Enable = types.BoolValue(ans.SpokeHaConfig.Enable)

		state.SpokeHaConfig.Priority = types.Int64Value(ans.SpokeHaConfig.Priority)

		state.SpokeHaConfig.SourceInterface = types.StringValue(ans.SpokeHaConfig.SourceInterface)

		if ans.SpokeHaConfig.Track == nil {
			state.SpokeHaConfig.Track = nil
		} else {
			state.SpokeHaConfig.Track = &elementRsModel_gvOEngs_Config{}

			if len(ans.SpokeHaConfig.Track.Interfaces) == 0 {
				state.SpokeHaConfig.Track.Interfaces = nil
			} else {
				state.SpokeHaConfig.Track.Interfaces = make([]elementRsModel_uvXdTvM_Config, 0, len(ans.SpokeHaConfig.Track.Interfaces))
				for _, var5 := range ans.SpokeHaConfig.Track.Interfaces {
					var6 := elementRsModel_uvXdTvM_Config{}

					var6.InterfaceId = types.StringPointerValue(var5.InterfaceId)

					var6.ReducePriority = types.Int64PointerValue(var5.ReducePriority)
					state.SpokeHaConfig.Track.Interfaces = append(state.SpokeHaConfig.Track.Interfaces, var6)
				}
			}

			if len(ans.SpokeHaConfig.Track.Waninterfaces) == 0 {
				state.SpokeHaConfig.Track.Waninterfaces = nil
			} else {
				state.SpokeHaConfig.Track.Waninterfaces = make([]elementRsModel_kBpyQPJ_Config, 0, len(ans.SpokeHaConfig.Track.Waninterfaces))
				for _, var7 := range ans.SpokeHaConfig.Track.Waninterfaces {
					var8 := elementRsModel_kBpyQPJ_Config{}

					var8.ReducePriority = types.Int64PointerValue(var7.ReducePriority)

					var8.WanInterfaceId = types.StringPointerValue(var7.WanInterfaceId)
					state.SpokeHaConfig.Track.Waninterfaces = append(state.SpokeHaConfig.Track.Waninterfaces, var8)
				}
			}
		}
	}

	if ans.SwObj == nil {
		state.SwObj = nil
	} else {
		state.SwObj = &elementRsModel_ndabCzl_Config{}

		state.SwObj.Location = types.StringPointerValue(ans.SwObj.Location)

		state.SwObj.Version = types.StringPointerValue(ans.SwObj.Version)
	}

	if ans.SwitchConfig == nil {
		state.SwitchConfig = nil
	} else {
		state.SwitchConfig = &elementRsModel_abEEBQk_Config{}

		state.SwitchConfig.DefaultVlanId = types.Int64PointerValue(ans.SwitchConfig.DefaultVlanId)

		state.SwitchConfig.MstpEnabled = types.BoolPointerValue(ans.SwitchConfig.MstpEnabled)

		state.SwitchConfig.StpAgingTimer = types.Int64PointerValue(ans.SwitchConfig.StpAgingTimer)

		state.SwitchConfig.StpForwardDelay = types.Int64PointerValue(ans.SwitchConfig.StpForwardDelay)

		state.SwitchConfig.StpHelloTime = types.Int64PointerValue(ans.SwitchConfig.StpHelloTime)

		state.SwitchConfig.StpMaxAge = types.Int64PointerValue(ans.SwitchConfig.StpMaxAge)

		state.SwitchConfig.StpMode = types.StringValue(ans.SwitchConfig.StpMode)

		state.SwitchConfig.StpPriority = types.Int64PointerValue(ans.SwitchConfig.StpPriority)
	}

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var9
	resp.Diagnostics.Append(var10.Errors()...)

	state.VpnToVpnForwarding = types.BoolPointerValue(ans.VpnToVpnForwarding)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Dummy Delete resource.
func (r *elementResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

}

func (r *elementResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
