package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=37)
// | Computed Resource Name=sites_elements_interfaces
// +-----------------------------------------------------------------
// | APNConfig HasID=false
// | CellularInterfaceConfig HasID=false
// | PortChannelConfig HasID=false
// | PassiveMode HasID=false
// | IKEV1Params HasID=false
// | IPSECAuthenticationV1 HasID=false
// | IPSECConfigV1 HasID=false
// | GREConfig HasID=false
// | PeerInfo HasID=false
// | ServiceLinkV4 HasID=false
// | VlanConfig HasID=false
// | AuthenticationInterfaceConfig HasID=false
// | Ipv6StaticV1 HasID=false
// | Route HasID=false
// | DNS HasID=false
// | Ipv6Dhcp HasID=false
// | Ipv6ConfigV1 HasID=false
// | PppoEInterfaceConfig HasID=false
// | StormControlConfig HasID=false
// | SwitchPortConfig HasID=false
// | MulticastInterfaceConfig HasID=false
// | StaticARPConfig HasID=false
// | SecondaryIPConfig HasID=false
// | IPv4Range HasID=false
// | NatPool HasID=false
// | BypassPairV2 HasID=false
// | SubInterface HasID=false
// | Ethernet HasID=true
// | EthernetPort HasID=false
// | DHCPRelayOption82 HasID=false
// | DHCPRelay HasID=false
// | Ipv4Pppoe HasID=false
// | Ipv4Dhcp HasID=false
// | Ipv4Static HasID=false
// | Ipv4Config HasID=false
// | LanNetworkVlanMapping HasID=false
// | InterfaceScreenV4N20 HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &sitesElementsInterfacesDataSource{}
	_ datasource.DataSourceWithConfigure = &sitesElementsInterfacesDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewSitesElementsInterfacesDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewSitesElementsInterfacesDataSource() datasource.DataSource {
	return &sitesElementsInterfacesDataSource{}
}

type sitesElementsInterfacesDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *sitesElementsInterfacesDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_sites_elements_interfaces"
}

// Schema defines the schema for this data source.
func (d *sitesElementsInterfacesDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=InterfaceScreenV4N20
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=admin_up, type=BOOLEAN macro=rss_schema
			"admin_up": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=admin_up, type=BOOLEAN macro=rss_schema
			// property: name=attached_lan_networks, type=ARRAY_REFERENCE macro=rss_schema
			"attached_lan_networks": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=lan_network_id, type=STRING macro=rss_schema
						"lan_network_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=lan_network_id, type=STRING macro=rss_schema
						// property: name=vlan_id, type=INTEGER macro=rss_schema
						"vlan_id": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=vlan_id, type=INTEGER macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=vlan_id, type=INTEGER macro=rss_schema
			// property: name=authentication_config, type=REFERENCE macro=rss_schema
			"authentication_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=fallback_retry_count, type=INTEGER macro=rss_schema
					"fallback_retry_count": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=fallback_retry_count, type=INTEGER macro=rss_schema
					// property: name=mode, type=STRING macro=rss_schema
					"mode": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=mode, type=STRING macro=rss_schema
					// property: name=reauthentication_timeout, type=INTEGER macro=rss_schema
					"reauthentication_timeout": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=reauthentication_timeout, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=reauthentication_timeout, type=INTEGER macro=rss_schema
			// property: name=bound_interfaces, type=ARRAY_PRIMITIVE macro=rss_schema
			"bound_interfaces": dsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=bound_interfaces, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=bypass_pair, type=REFERENCE macro=rss_schema
			"bypass_pair": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=lan, type=STRING macro=rss_schema
					"lan": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=lan, type=STRING macro=rss_schema
					// property: name=lan_state_propagation, type=BOOLEAN macro=rss_schema
					"lan_state_propagation": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=lan_state_propagation, type=BOOLEAN macro=rss_schema
					// property: name=use_relay, type=BOOLEAN macro=rss_schema
					"use_relay": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=use_relay, type=BOOLEAN macro=rss_schema
					// property: name=wan, type=STRING macro=rss_schema
					"wan": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=wan, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=wan, type=STRING macro=rss_schema
			// property: name=cellular_config, type=REFERENCE macro=rss_schema
			"cellular_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=apn_config, type=REFERENCE macro=rss_schema
					"apn_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=apn, type=STRING macro=rss_schema
							"apn": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=apn, type=STRING macro=rss_schema
							// property: name=authentication, type=STRING macro=rss_schema
							"authentication": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=authentication, type=STRING macro=rss_schema
							// property: name=clear_password, type=BOOLEAN macro=rss_schema
							"clear_password": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: true,
							},
							// key name holder for attribute: name=clear_password, type=BOOLEAN macro=rss_schema
							"clear_password_internal_key_name": dsschema.BoolAttribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// property: name=password, type=STRING macro=rss_schema
							"password": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: true,
							},
							// key name holder for attribute: name=password, type=STRING macro=rss_schema
							"password_internal_key_name": dsschema.StringAttribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// property: name=password_encrypted, type=STRING macro=rss_schema
							"password_encrypted": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: true,
							},
							// key name holder for attribute: name=password_encrypted, type=STRING macro=rss_schema
							"password_encrypted_internal_key_name": dsschema.StringAttribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// property: name=user_name, type=STRING macro=rss_schema
							"user_name": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=user_name, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=user_name, type=STRING macro=rss_schema
					// property: name=apnprofile_id, type=STRING macro=rss_schema
					"apnprofile_id": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=apnprofile_id, type=STRING macro=rss_schema
					// property: name=auto_apn, type=BOOLEAN macro=rss_schema
					"auto_apn": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=auto_apn, type=BOOLEAN macro=rss_schema
					// property: name=parent_module_id, type=STRING macro=rss_schema
					"parent_module_id": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=parent_module_id, type=STRING macro=rss_schema
					// property: name=parent_sim_slot_number, type=INTEGER macro=rss_schema
					"parent_sim_slot_number": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=parent_sim_slot_number, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=parent_sim_slot_number, type=INTEGER macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=devicemgmt_policysetstack_id, type=STRING macro=rss_schema
			"devicemgmt_policysetstack_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=devicemgmt_policysetstack_id, type=STRING macro=rss_schema
			// property: name=dhcp_relay, type=REFERENCE macro=rss_schema
			"dhcp_relay": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=enabled, type=BOOLEAN macro=rss_schema
					"enabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
					// property: name=option_82, type=REFERENCE macro=rss_schema
					"option_82": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=circuit_id, type=STRING macro=rss_schema
							"circuit_id": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=circuit_id, type=STRING macro=rss_schema
							// property: name=enabled, type=BOOLEAN macro=rss_schema
							"enabled": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
							// property: name=reforwarding_policy, type=STRING macro=rss_schema
							"reforwarding_policy": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=reforwarding_policy, type=STRING macro=rss_schema
							// property: name=remote_id, type=STRING macro=rss_schema
							"remote_id": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=remote_id, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=remote_id, type=STRING macro=rss_schema
					// property: name=server_ips, type=ARRAY_PRIMITIVE macro=rss_schema
					"server_ips": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=server_ips, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=source_interface, type=STRING macro=rss_schema
					"source_interface": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=source_interface, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=source_interface, type=STRING macro=rss_schema
			// property: name=directed_broadcast, type=BOOLEAN macro=rss_schema
			"directed_broadcast": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=directed_broadcast, type=BOOLEAN macro=rss_schema
			// property: name=ethernet_port, type=REFERENCE macro=rss_schema
			"ethernet_port": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=full_duplex, type=BOOLEAN macro=rss_schema
					"full_duplex": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=full_duplex, type=BOOLEAN macro=rss_schema
					// property: name=port_id, type=REFERENCE macro=rss_schema
					"port_id": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// generic x_parameters is added to accomodate path parameters
							"x_parameters": dsschema.MapAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								ElementType: types.StringType,
							},
							// property: name=_etag, type=INTEGER macro=rss_schema
							"x_etag": dsschema.Int64Attribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
							// property: name=_schema, type=INTEGER macro=rss_schema
							"x_schema": dsschema.Int64Attribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
							// property: name=connector, type=STRING macro=rss_schema
							"connector": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=connector, type=STRING macro=rss_schema
							// property: name=device, type=STRING macro=rss_schema
							"device": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=device, type=STRING macro=rss_schema
							// property: name=disabled, type=BOOLEAN macro=rss_schema
							"disabled": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
							// property: name=disabled_reason, type=STRING macro=rss_schema
							"disabled_reason": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
							// property: name=element_id, type=STRING macro=rss_schema
							"element_id": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=element_id, type=STRING macro=rss_schema
							// property: name=id, type=STRING macro=rss_schema
							"id": dsschema.StringAttribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=id, type=STRING macro=rss_schema
							// property: name=inactive, type=BOOLEAN macro=rss_schema
							"inactive": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
							// property: name=inactive_reason, type=STRING macro=rss_schema
							"inactive_reason": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
							// property: name=max_mtu, type=INTEGER macro=rss_schema
							"max_mtu": dsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=max_mtu, type=INTEGER macro=rss_schema
							// property: name=max_speed, type=INTEGER macro=rss_schema
							"max_speed": dsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=max_speed, type=INTEGER macro=rss_schema
							// property: name=name, type=STRING macro=rss_schema
							"name": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=name, type=STRING macro=rss_schema
							// property: name=original_mac_address, type=STRING macro=rss_schema
							"original_mac_address": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=original_mac_address, type=STRING macro=rss_schema
							// property: name=region, type=STRING macro=rss_schema
							"region": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=region, type=STRING macro=rss_schema
							// property: name=site_id, type=STRING macro=rss_schema
							"site_id": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=site_id, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=site_id, type=STRING macro=rss_schema
					// property: name=port_name, type=STRING macro=rss_schema
					"port_name": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=port_name, type=STRING macro=rss_schema
					// property: name=speed, type=INTEGER macro=rss_schema
					"speed": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=speed, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=speed, type=INTEGER macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=interface_profile_id, type=STRING macro=rss_schema
			"interface_profile_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=interface_profile_id, type=STRING macro=rss_schema
			// property: name=ipfixcollectorcontext_id, type=STRING macro=rss_schema
			"ipfixcollectorcontext_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=ipfixcollectorcontext_id, type=STRING macro=rss_schema
			// property: name=ipfixfiltercontext_id, type=STRING macro=rss_schema
			"ipfixfiltercontext_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=ipfixfiltercontext_id, type=STRING macro=rss_schema
			// property: name=ipv4_config, type=REFERENCE macro=rss_schema
			"ipv4_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=dhcp_config, type=REFERENCE macro=rss_schema
					"dhcp_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=client_id, type=STRING macro=rss_schema
							"client_id": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=client_id, type=STRING macro=rss_schema
							// property: name=hostname, type=STRING macro=rss_schema
							"hostname": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=hostname, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=hostname, type=STRING macro=rss_schema
					// property: name=dns_v4_config, type=REFERENCE macro=rss_schema
					"dns_v4_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=name_servers, type=ARRAY_PRIMITIVE macro=rss_schema
							"name_servers": dsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=name_servers, type=ARRAY_PRIMITIVE macro=rss_schema
							// property: name=search, type=ARRAY_PRIMITIVE macro=rss_schema
							"search": dsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=search, type=ARRAY_PRIMITIVE macro=rss_schema
						},
					},
					// key name holder for attribute: name=search, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=pppoe_config, type=REFERENCE macro=rss_schema
					"pppoe_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=chap_passwd, type=STRING macro=rss_schema
							"chap_passwd": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=chap_passwd, type=STRING macro=rss_schema
							// property: name=chap_user, type=STRING macro=rss_schema
							"chap_user": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=chap_user, type=STRING macro=rss_schema
							// property: name=set_route, type=BOOLEAN macro=rss_schema
							"set_route": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=set_route, type=BOOLEAN macro=rss_schema
						},
					},
					// key name holder for attribute: name=set_route, type=BOOLEAN macro=rss_schema
					// property: name=routes, type=ARRAY_REFERENCE macro=rss_schema
					"routes": dsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// property: name=destination, type=STRING macro=rss_schema
								"destination": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=destination, type=STRING macro=rss_schema
								// property: name=via, type=STRING macro=rss_schema
								"via": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=via, type=STRING macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=via, type=STRING macro=rss_schema
					// property: name=static_config, type=REFERENCE macro=rss_schema
					"static_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=address, type=STRING macro=rss_schema
							"address": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=address, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=address, type=STRING macro=rss_schema
					// property: name=type, type=STRING macro=rss_schema
					"type": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=type, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=type, type=STRING macro=rss_schema
			// property: name=ipv6_config, type=REFERENCE macro=rss_schema
			"ipv6_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=dhcp_config, type=REFERENCE macro=rss_schema
					"dhcp_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=client_id, type=STRING macro=rss_schema
							"client_id": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=client_id, type=STRING macro=rss_schema
							// property: name=hostname, type=STRING macro=rss_schema
							"hostname": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=hostname, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=hostname, type=STRING macro=rss_schema
					// property: name=dns_v6_config, type=REFERENCE macro=rss_schema
					"dns_v6_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=name_servers, type=ARRAY_PRIMITIVE macro=rss_schema
							"name_servers": dsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=name_servers, type=ARRAY_PRIMITIVE macro=rss_schema
							// property: name=search, type=ARRAY_PRIMITIVE macro=rss_schema
							"search": dsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=search, type=ARRAY_PRIMITIVE macro=rss_schema
						},
					},
					// key name holder for attribute: name=search, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=routes, type=ARRAY_REFERENCE macro=rss_schema
					"routes": dsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// property: name=destination, type=STRING macro=rss_schema
								"destination": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=destination, type=STRING macro=rss_schema
								// property: name=via, type=STRING macro=rss_schema
								"via": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=via, type=STRING macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=via, type=STRING macro=rss_schema
					// property: name=static_config, type=REFERENCE macro=rss_schema
					"static_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=address, type=STRING macro=rss_schema
							"address": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=address, type=STRING macro=rss_schema
							// property: name=enable_prefix_distribution, type=BOOLEAN macro=rss_schema
							"enable_prefix_distribution": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=enable_prefix_distribution, type=BOOLEAN macro=rss_schema
						},
					},
					// key name holder for attribute: name=enable_prefix_distribution, type=BOOLEAN macro=rss_schema
					// property: name=type, type=STRING macro=rss_schema
					"type": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=type, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=type, type=STRING macro=rss_schema
			// property: name=lldp_enabled, type=BOOLEAN macro=rss_schema
			"lldp_enabled": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=lldp_enabled, type=BOOLEAN macro=rss_schema
			// property: name=mac_address, type=STRING macro=rss_schema
			"mac_address": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=mac_address, type=STRING macro=rss_schema
			// property: name=mtu, type=INTEGER macro=rss_schema
			"mtu": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=mtu, type=INTEGER macro=rss_schema
			// property: name=multicast_config, type=REFERENCE macro=rss_schema
			"multicast_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=igmp_version, type=STRING macro=rss_schema
					"igmp_version": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=igmp_version, type=STRING macro=rss_schema
					// property: name=multicast_enabled, type=BOOLEAN macro=rss_schema
					"multicast_enabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=multicast_enabled, type=BOOLEAN macro=rss_schema
				},
			},
			// key name holder for attribute: name=multicast_enabled, type=BOOLEAN macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=nat_address, type=STRING macro=rss_schema
			"nat_address": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=nat_address, type=STRING macro=rss_schema
			// property: name=nat_address_v6, type=STRING macro=rss_schema
			"nat_address_v6": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=nat_address_v6, type=STRING macro=rss_schema
			// property: name=nat_pools, type=ARRAY_REFERENCE macro=rss_schema
			"nat_pools": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=ipv4_ranges, type=ARRAY_REFERENCE macro=rss_schema
						"ipv4_ranges": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=end, type=STRING macro=rss_schema
									"end": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=end, type=STRING macro=rss_schema
									// property: name=start, type=STRING macro=rss_schema
									"start": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=start, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=start, type=STRING macro=rss_schema
						// property: name=nat_pool_id, type=STRING macro=rss_schema
						"nat_pool_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=nat_pool_id, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=nat_pool_id, type=STRING macro=rss_schema
			// property: name=nat_port, type=INTEGER macro=rss_schema
			"nat_port": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=nat_port, type=INTEGER macro=rss_schema
			// property: name=nat_port_v6, type=INTEGER macro=rss_schema
			"nat_port_v6": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=nat_port_v6, type=INTEGER macro=rss_schema
			// property: name=nat_zone_id, type=STRING macro=rss_schema
			"nat_zone_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=nat_zone_id, type=STRING macro=rss_schema
			// property: name=network_context_id, type=STRING macro=rss_schema
			"network_context_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=network_context_id, type=STRING macro=rss_schema
			// property: name=parent, type=STRING macro=rss_schema
			"parent": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=parent, type=STRING macro=rss_schema
			// property: name=peer_bypasspair_wan_port_type, type=STRING macro=rss_schema
			"peer_bypasspair_wan_port_type": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=peer_bypasspair_wan_port_type, type=STRING macro=rss_schema
			// property: name=poe_enabled, type=BOOLEAN macro=rss_schema
			"poe_enabled": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=poe_enabled, type=BOOLEAN macro=rss_schema
			// property: name=port_channel_config, type=REFERENCE macro=rss_schema
			"port_channel_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=lacp_enabled, type=BOOLEAN macro=rss_schema
					"lacp_enabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=lacp_enabled, type=BOOLEAN macro=rss_schema
					// property: name=transmission_mode, type=STRING macro=rss_schema
					"transmission_mode": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=transmission_mode, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=transmission_mode, type=STRING macro=rss_schema
			// property: name=power_usage_threshold, type=INTEGER macro=rss_schema
			"power_usage_threshold": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=power_usage_threshold, type=INTEGER macro=rss_schema
			// property: name=pppoe_config, type=REFERENCE macro=rss_schema
			"pppoe_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=host_uniq, type=STRING macro=rss_schema
					"host_uniq": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=host_uniq, type=STRING macro=rss_schema
					// property: name=ip_address_type, type=STRING macro=rss_schema
					"ip_address_type": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=ip_address_type, type=STRING macro=rss_schema
					// property: name=password, type=STRING macro=rss_schema
					"password": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: true,
					},
					// key name holder for attribute: name=password, type=STRING macro=rss_schema
					"password_internal_key_name": dsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// property: name=reconnection_delay, type=INTEGER macro=rss_schema
					"reconnection_delay": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=reconnection_delay, type=INTEGER macro=rss_schema
					// property: name=service_name, type=STRING macro=rss_schema
					"service_name": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=service_name, type=STRING macro=rss_schema
					// property: name=username, type=STRING macro=rss_schema
					"username": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=username, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=username, type=STRING macro=rss_schema
			// property: name=scope, type=STRING macro=rss_schema
			"scope": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=scope, type=STRING macro=rss_schema
			// property: name=secondary_ip_configs, type=ARRAY_REFERENCE macro=rss_schema
			"secondary_ip_configs": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=ipv4_address, type=STRING macro=rss_schema
						"ipv4_address": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=ipv4_address, type=STRING macro=rss_schema
						// property: name=scope, type=STRING macro=rss_schema
						"scope": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=scope, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=scope, type=STRING macro=rss_schema
			// property: name=service_link_config, type=REFERENCE macro=rss_schema
			"service_link_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=gre_config, type=REFERENCE macro=rss_schema
					"gre_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=csum, type=BOOLEAN macro=rss_schema
							"csum": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=csum, type=BOOLEAN macro=rss_schema
							// property: name=keepalive_enable, type=BOOLEAN macro=rss_schema
							"keepalive_enable": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=keepalive_enable, type=BOOLEAN macro=rss_schema
							// property: name=keepalive_fail_count, type=INTEGER macro=rss_schema
							"keepalive_fail_count": dsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=keepalive_fail_count, type=INTEGER macro=rss_schema
							// property: name=keepalive_interval, type=INTEGER macro=rss_schema
							"keepalive_interval": dsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=keepalive_interval, type=INTEGER macro=rss_schema
						},
					},
					// key name holder for attribute: name=keepalive_interval, type=INTEGER macro=rss_schema
					// property: name=ipsec_config, type=REFERENCE macro=rss_schema
					"ipsec_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=authentication, type=REFERENCE macro=rss_schema
							"authentication": dsschema.SingleNestedAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
								Attributes: map[string]dsschema.Attribute{
									// property: name=certificate, type=STRING macro=rss_schema
									"certificate": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=certificate, type=STRING macro=rss_schema
									// property: name=certificate_profile_id, type=STRING macro=rss_schema
									"certificate_profile_id": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=certificate_profile_id, type=STRING macro=rss_schema
									// property: name=comment, type=STRING macro=rss_schema
									"comment": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=comment, type=STRING macro=rss_schema
									// property: name=ikev1_params, type=REFERENCE macro=rss_schema
									"ikev1_params": dsschema.SingleNestedAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
										Attributes: map[string]dsschema.Attribute{
											// property: name=xauth_id, type=STRING macro=rss_schema
											"xauth_id": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=xauth_id, type=STRING macro=rss_schema
											// property: name=xauth_secret, type=STRING macro=rss_schema
											"xauth_secret": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: true,
											},
											// key name holder for attribute: name=xauth_secret, type=STRING macro=rss_schema
											"xauth_secret_internal_key_name": dsschema.StringAttribute{
												Required:  false,
												Computed:  true,
												Optional:  true,
												Sensitive: false,
											},
											// property: name=xauth_secret_encrypted, type=STRING macro=rss_schema
											"xauth_secret_encrypted": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: true,
											},
											// key name holder for attribute: name=xauth_secret_encrypted, type=STRING macro=rss_schema
											"xauth_secret_encrypted_internal_key_name": dsschema.StringAttribute{
												Required:  false,
												Computed:  true,
												Optional:  true,
												Sensitive: false,
											},
											// property: name=xauth_secret_hash, type=STRING macro=rss_schema
											"xauth_secret_hash": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: true,
											},
											// key name holder for attribute: name=xauth_secret_hash, type=STRING macro=rss_schema
											"xauth_secret_hash_internal_key_name": dsschema.StringAttribute{
												Required:  false,
												Computed:  true,
												Optional:  true,
												Sensitive: false,
											},
											// property: name=xauth_type, type=STRING macro=rss_schema
											"xauth_type": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=xauth_type, type=STRING macro=rss_schema
										},
									},
									// key name holder for attribute: name=xauth_type, type=STRING macro=rss_schema
									// property: name=local_ca_certificate, type=STRING macro=rss_schema
									"local_ca_certificate": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=local_ca_certificate, type=STRING macro=rss_schema
									// property: name=local_id, type=STRING macro=rss_schema
									"local_id": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=local_id, type=STRING macro=rss_schema
									// property: name=local_id_custom, type=STRING macro=rss_schema
									"local_id_custom": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=local_id_custom, type=STRING macro=rss_schema
									// property: name=local_pa_certificate_id, type=STRING macro=rss_schema
									"local_pa_certificate_id": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=local_pa_certificate_id, type=STRING macro=rss_schema
									// property: name=pa_master_key_id, type=STRING macro=rss_schema
									"pa_master_key_id": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=pa_master_key_id, type=STRING macro=rss_schema
									// property: name=passphrase, type=STRING macro=rss_schema
									"passphrase": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=passphrase, type=STRING macro=rss_schema
									// property: name=passphrase_encrypted, type=STRING macro=rss_schema
									"passphrase_encrypted": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=passphrase_encrypted, type=STRING macro=rss_schema
									// property: name=peer_id_check, type=STRING macro=rss_schema
									"peer_id_check": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=peer_id_check, type=STRING macro=rss_schema
									// property: name=permit_peer_id_mismatch, type=BOOLEAN macro=rss_schema
									"permit_peer_id_mismatch": dsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=permit_peer_id_mismatch, type=BOOLEAN macro=rss_schema
									// property: name=private_key, type=STRING macro=rss_schema
									"private_key": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=private_key, type=STRING macro=rss_schema
									// property: name=private_key_encrypted, type=STRING macro=rss_schema
									"private_key_encrypted": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=private_key_encrypted, type=STRING macro=rss_schema
									// property: name=remote_ca_certificate, type=STRING macro=rss_schema
									"remote_ca_certificate": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=remote_ca_certificate, type=STRING macro=rss_schema
									// property: name=remote_id, type=STRING macro=rss_schema
									"remote_id": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=remote_id, type=STRING macro=rss_schema
									// property: name=secret, type=STRING macro=rss_schema
									"secret": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: true,
									},
									// key name holder for attribute: name=secret, type=STRING macro=rss_schema
									"secret_internal_key_name": dsschema.StringAttribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// property: name=secret_encrypted, type=STRING macro=rss_schema
									"secret_encrypted": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: true,
									},
									// key name holder for attribute: name=secret_encrypted, type=STRING macro=rss_schema
									"secret_encrypted_internal_key_name": dsschema.StringAttribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// property: name=secret_hash, type=STRING macro=rss_schema
									"secret_hash": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: true,
									},
									// key name holder for attribute: name=secret_hash, type=STRING macro=rss_schema
									"secret_hash_internal_key_name": dsschema.StringAttribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// property: name=strict_validation_peer_extended_key_use, type=BOOLEAN macro=rss_schema
									"strict_validation_peer_extended_key_use": dsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=strict_validation_peer_extended_key_use, type=BOOLEAN macro=rss_schema
									// property: name=type, type=STRING macro=rss_schema
									"type": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=type, type=STRING macro=rss_schema
								},
							},
							// key name holder for attribute: name=type, type=STRING macro=rss_schema
							// property: name=ipsec_profile_id, type=STRING macro=rss_schema
							"ipsec_profile_id": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=ipsec_profile_id, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=ipsec_profile_id, type=STRING macro=rss_schema
					// property: name=last_parent, type=STRING macro=rss_schema
					"last_parent": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=last_parent, type=STRING macro=rss_schema
					// property: name=parent, type=STRING macro=rss_schema
					"parent": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=parent, type=STRING macro=rss_schema
					// property: name=passive_mode, type=REFERENCE macro=rss_schema
					"passive_mode": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=enable, type=BOOLEAN macro=rss_schema
							"enable": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=enable, type=BOOLEAN macro=rss_schema
							// property: name=peer_ip_dynamic, type=BOOLEAN macro=rss_schema
							"peer_ip_dynamic": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=peer_ip_dynamic, type=BOOLEAN macro=rss_schema
						},
					},
					// key name holder for attribute: name=peer_ip_dynamic, type=BOOLEAN macro=rss_schema
					// property: name=peer, type=REFERENCE macro=rss_schema
					"peer": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=hostname, type=STRING macro=rss_schema
							"hostname": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=hostname, type=STRING macro=rss_schema
							// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=rss_schema
							"ip_addresses": dsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=ip_addresses, type=ARRAY_PRIMITIVE macro=rss_schema
						},
					},
					// key name holder for attribute: name=ip_addresses, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=service_endpoint_id, type=STRING macro=rss_schema
					"service_endpoint_id": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=service_endpoint_id, type=STRING macro=rss_schema
					// property: name=type, type=STRING macro=rss_schema
					"type": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=type, type=STRING macro=rss_schema
				},
			},
			// key name holder for attribute: name=type, type=STRING macro=rss_schema
			// property: name=sgi_apply_static_tag, type=BOOLEAN macro=rss_schema
			"sgi_apply_static_tag": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=sgi_apply_static_tag, type=BOOLEAN macro=rss_schema
			// property: name=site_wan_interface_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			"site_wan_interface_ids": dsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=site_wan_interface_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=static_arp_configs, type=ARRAY_REFERENCE macro=rss_schema
			"static_arp_configs": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=ipv4_address, type=STRING macro=rss_schema
						"ipv4_address": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=ipv4_address, type=STRING macro=rss_schema
						// property: name=mac_address, type=STRING macro=rss_schema
						"mac_address": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=mac_address, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=mac_address, type=STRING macro=rss_schema
			// property: name=sub_interface, type=REFERENCE macro=rss_schema
			"sub_interface": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=vlan_id, type=INTEGER macro=rss_schema
					"vlan_id": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=vlan_id, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=vlan_id, type=INTEGER macro=rss_schema
			// property: name=switch_port_config, type=REFERENCE macro=rss_schema
			"switch_port_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=access_vlan_id, type=INTEGER macro=rss_schema
					"access_vlan_id": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=access_vlan_id, type=INTEGER macro=rss_schema
					// property: name=bpdu_guard_enabled, type=BOOLEAN macro=rss_schema
					"bpdu_guard_enabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=bpdu_guard_enabled, type=BOOLEAN macro=rss_schema
					// property: name=forward_fast_enabled, type=BOOLEAN macro=rss_schema
					"forward_fast_enabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=forward_fast_enabled, type=BOOLEAN macro=rss_schema
					// property: name=native_vlan_id, type=INTEGER macro=rss_schema
					"native_vlan_id": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=native_vlan_id, type=INTEGER macro=rss_schema
					// property: name=root_guard_enabled, type=BOOLEAN macro=rss_schema
					"root_guard_enabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=root_guard_enabled, type=BOOLEAN macro=rss_schema
					// property: name=storm_control_config, type=REFERENCE macro=rss_schema
					"storm_control_config": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=broadcast_threshold, type=INTEGER macro=rss_schema
							"broadcast_threshold": dsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=broadcast_threshold, type=INTEGER macro=rss_schema
							// property: name=multicast_threshold, type=INTEGER macro=rss_schema
							"multicast_threshold": dsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=multicast_threshold, type=INTEGER macro=rss_schema
							// property: name=unicast_threshold, type=INTEGER macro=rss_schema
							"unicast_threshold": dsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=unicast_threshold, type=INTEGER macro=rss_schema
						},
					},
					// key name holder for attribute: name=unicast_threshold, type=INTEGER macro=rss_schema
					// property: name=stp_port_cost, type=INTEGER macro=rss_schema
					"stp_port_cost": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=stp_port_cost, type=INTEGER macro=rss_schema
					// property: name=stp_port_enabled, type=BOOLEAN macro=rss_schema
					"stp_port_enabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=stp_port_enabled, type=BOOLEAN macro=rss_schema
					// property: name=stp_port_priority, type=INTEGER macro=rss_schema
					"stp_port_priority": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=stp_port_priority, type=INTEGER macro=rss_schema
					// property: name=trunk_vlans, type=ARRAY_PRIMITIVE macro=rss_schema
					"trunk_vlans": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=trunk_vlans, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=vlan_mode, type=STRING macro=rss_schema
					"vlan_mode": dsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=vlan_mode, type=STRING macro=rss_schema
					// property: name=voice_vlan_id, type=INTEGER macro=rss_schema
					"voice_vlan_id": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=voice_vlan_id, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=voice_vlan_id, type=INTEGER macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=type, type=STRING macro=rss_schema
			"type": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=type, type=STRING macro=rss_schema
			// property: name=used_for, type=STRING macro=rss_schema
			"used_for": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=used_for, type=STRING macro=rss_schema
			// property: name=vlan_config, type=REFERENCE macro=rss_schema
			"vlan_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=mstp_instance, type=INTEGER macro=rss_schema
					"mstp_instance": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=mstp_instance, type=INTEGER macro=rss_schema
					// property: name=vlan_id, type=INTEGER macro=rss_schema
					"vlan_id": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=vlan_id, type=INTEGER macro=rss_schema
					// property: name=voice_enabled, type=BOOLEAN macro=rss_schema
					"voice_enabled": dsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=voice_enabled, type=BOOLEAN macro=rss_schema
				},
			},
			// key name holder for attribute: name=voice_enabled, type=BOOLEAN macro=rss_schema
			// property: name=vrf_context_id, type=STRING macro=rss_schema
			"vrf_context_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=vrf_context_id, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *sitesElementsInterfacesDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *sitesElementsInterfacesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelInterfaceScreenV4N20
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_sites_elements_interfaces",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("error in prismasdwan_sites_elements_interfaces ID format", "Expected 3 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v4.20/api/sites/{site_id}/elements/{element_id}/interfaces/{interface_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["site_id"] = &tokens[0]
	params["element_id"] = &tokens[1]
	params["interface_id"] = &tokens[2]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_sites_elements_interfaces", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.InterfaceScreenV4N20
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to InterfaceScreenV4N20", json_err.Error())
		return
	}

	// lets copy all items into state schema=InterfaceScreenV4N20
	// copy_to_state: state=state prefix=dsModel ans=ans properties=50
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=admin_up, type=BOOLEAN macro=copy_to_state
	state.AdminUp = types.BoolPointerValue(ans.AdminUp)
	// property: name=attached_lan_networks, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.AttachedLanNetworks == nil {
		state.AttachedLanNetworks = nil
	} else if len(ans.AttachedLanNetworks) == 0 {
		state.AttachedLanNetworks = []dsModelLanNetworkVlanMapping{}
	} else {
		state.AttachedLanNetworks = make([]dsModelLanNetworkVlanMapping, 0, len(ans.AttachedLanNetworks))
		for varLoopAttachedLanNetworksIndex, varLoopAttachedLanNetworks := range ans.AttachedLanNetworks {
			// add a new item
			state.AttachedLanNetworks = append(state.AttachedLanNetworks, dsModelLanNetworkVlanMapping{})
			// copy_to_state: state=state.AttachedLanNetworks[varLoopAttachedLanNetworksIndex] prefix=dsModel ans=varLoopAttachedLanNetworks properties=2
			// property: name=lan_network_id, type=STRING macro=copy_to_state
			state.AttachedLanNetworks[varLoopAttachedLanNetworksIndex].LanNetworkId = types.StringPointerValue(varLoopAttachedLanNetworks.LanNetworkId)
			// property: name=vlan_id, type=INTEGER macro=copy_to_state
			state.AttachedLanNetworks[varLoopAttachedLanNetworksIndex].VlanId = types.Int64PointerValue(varLoopAttachedLanNetworks.VlanId)
		}
	}
	// property: name=authentication_config, type=REFERENCE macro=copy_to_state
	if ans.AuthenticationConfig == nil {
		state.AuthenticationConfig = nil
	} else {
		state.AuthenticationConfig = &dsModelAuthenticationInterfaceConfig{}
		// copy_to_state: state=state.AuthenticationConfig prefix=dsModel ans=ans.AuthenticationConfig properties=3
		// property: name=fallback_retry_count, type=INTEGER macro=copy_to_state
		state.AuthenticationConfig.FallbackRetryCount = types.Int64PointerValue(ans.AuthenticationConfig.FallbackRetryCount)
		// property: name=mode, type=STRING macro=copy_to_state
		state.AuthenticationConfig.Mode = types.StringPointerValue(ans.AuthenticationConfig.Mode)
		// property: name=reauthentication_timeout, type=INTEGER macro=copy_to_state
		state.AuthenticationConfig.ReauthenticationTimeout = types.Int64PointerValue(ans.AuthenticationConfig.ReauthenticationTimeout)
	}
	// property: name=bound_interfaces, type=ARRAY_PRIMITIVE macro=copy_to_state
	varBoundInterfaces, errBoundInterfaces := types.ListValueFrom(ctx, types.StringType, ans.BoundInterfaces)
	state.BoundInterfaces = varBoundInterfaces
	resp.Diagnostics.Append(errBoundInterfaces.Errors()...)
	// property: name=bypass_pair, type=REFERENCE macro=copy_to_state
	if ans.BypassPair == nil {
		state.BypassPair = nil
	} else {
		state.BypassPair = &dsModelBypassPairV2{}
		// copy_to_state: state=state.BypassPair prefix=dsModel ans=ans.BypassPair properties=4
		// property: name=lan, type=STRING macro=copy_to_state
		state.BypassPair.Lan = types.StringPointerValue(ans.BypassPair.Lan)
		// property: name=lan_state_propagation, type=BOOLEAN macro=copy_to_state
		state.BypassPair.LanStatePropagation = types.BoolPointerValue(ans.BypassPair.LanStatePropagation)
		// property: name=use_relay, type=BOOLEAN macro=copy_to_state
		state.BypassPair.UseRelay = types.BoolPointerValue(ans.BypassPair.UseRelay)
		// property: name=wan, type=STRING macro=copy_to_state
		state.BypassPair.Wan = types.StringPointerValue(ans.BypassPair.Wan)
	}
	// property: name=cellular_config, type=REFERENCE macro=copy_to_state
	if ans.CellularConfig == nil {
		state.CellularConfig = nil
	} else {
		state.CellularConfig = &dsModelCellularInterfaceConfig{}
		// copy_to_state: state=state.CellularConfig prefix=dsModel ans=ans.CellularConfig properties=5
		// property: name=apn_config, type=REFERENCE macro=copy_to_state
		if ans.CellularConfig.ApnConfig == nil {
			state.CellularConfig.ApnConfig = nil
		} else {
			state.CellularConfig.ApnConfig = &dsModelAPNConfig{}
			// copy_to_state: state=state.CellularConfig.ApnConfig prefix=dsModel ans=ans.CellularConfig.ApnConfig properties=6
			// property: name=apn, type=STRING macro=copy_to_state
			state.CellularConfig.ApnConfig.Apn = types.StringPointerValue(ans.CellularConfig.ApnConfig.Apn)
			// property: name=authentication, type=STRING macro=copy_to_state
			state.CellularConfig.ApnConfig.Authentication = types.StringPointerValue(ans.CellularConfig.ApnConfig.Authentication)
			// property: name=clear_password, type=BOOLEAN macro=copy_to_state
			state.CellularConfig.ApnConfig.ClearPassword = types.BoolPointerValue(ans.CellularConfig.ApnConfig.ClearPassword)
			// property: name=password, type=STRING macro=copy_to_state
			state.CellularConfig.ApnConfig.Password = types.StringPointerValue(ans.CellularConfig.ApnConfig.Password)
			// property: name=password_encrypted, type=STRING macro=copy_to_state
			state.CellularConfig.ApnConfig.PasswordEncrypted = types.StringPointerValue(ans.CellularConfig.ApnConfig.PasswordEncrypted)
			// property: name=user_name, type=STRING macro=copy_to_state
			state.CellularConfig.ApnConfig.UserName = types.StringPointerValue(ans.CellularConfig.ApnConfig.UserName)
		}
		// property: name=apnprofile_id, type=STRING macro=copy_to_state
		state.CellularConfig.ApnprofileId = types.StringPointerValue(ans.CellularConfig.ApnprofileId)
		// property: name=auto_apn, type=BOOLEAN macro=copy_to_state
		state.CellularConfig.AutoApn = types.BoolPointerValue(ans.CellularConfig.AutoApn)
		// property: name=parent_module_id, type=STRING macro=copy_to_state
		state.CellularConfig.ParentModuleId = types.StringPointerValue(ans.CellularConfig.ParentModuleId)
		// property: name=parent_sim_slot_number, type=INTEGER macro=copy_to_state
		state.CellularConfig.ParentSimSlotNumber = types.Int64PointerValue(ans.CellularConfig.ParentSimSlotNumber)
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=devicemgmt_policysetstack_id, type=STRING macro=copy_to_state
	state.DevicemgmtPolicysetstackId = types.StringPointerValue(ans.DevicemgmtPolicysetstackId)
	// property: name=dhcp_relay, type=REFERENCE macro=copy_to_state
	if ans.DhcpRelay == nil {
		state.DhcpRelay = nil
	} else {
		state.DhcpRelay = &dsModelDHCPRelay{}
		// copy_to_state: state=state.DhcpRelay prefix=dsModel ans=ans.DhcpRelay properties=4
		// property: name=enabled, type=BOOLEAN macro=copy_to_state
		state.DhcpRelay.Enabled = types.BoolPointerValue(ans.DhcpRelay.Enabled)
		// property: name=option_82, type=REFERENCE macro=copy_to_state
		if ans.DhcpRelay.Option82 == nil {
			state.DhcpRelay.Option82 = nil
		} else {
			state.DhcpRelay.Option82 = &dsModelDHCPRelayOption82{}
			// copy_to_state: state=state.DhcpRelay.Option82 prefix=dsModel ans=ans.DhcpRelay.Option82 properties=4
			// property: name=circuit_id, type=STRING macro=copy_to_state
			state.DhcpRelay.Option82.CircuitId = types.StringPointerValue(ans.DhcpRelay.Option82.CircuitId)
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.DhcpRelay.Option82.Enabled = types.BoolPointerValue(ans.DhcpRelay.Option82.Enabled)
			// property: name=reforwarding_policy, type=STRING macro=copy_to_state
			state.DhcpRelay.Option82.ReforwardingPolicy = types.StringPointerValue(ans.DhcpRelay.Option82.ReforwardingPolicy)
			// property: name=remote_id, type=STRING macro=copy_to_state
			state.DhcpRelay.Option82.RemoteId = types.StringPointerValue(ans.DhcpRelay.Option82.RemoteId)
		}
		// property: name=server_ips, type=ARRAY_PRIMITIVE macro=copy_to_state
		varServerIps, errServerIps := types.ListValueFrom(ctx, types.StringType, ans.DhcpRelay.ServerIps)
		state.DhcpRelay.ServerIps = varServerIps
		resp.Diagnostics.Append(errServerIps.Errors()...)
		// property: name=source_interface, type=STRING macro=copy_to_state
		state.DhcpRelay.SourceInterface = types.StringPointerValue(ans.DhcpRelay.SourceInterface)
	}
	// property: name=directed_broadcast, type=BOOLEAN macro=copy_to_state
	state.DirectedBroadcast = types.BoolPointerValue(ans.DirectedBroadcast)
	// property: name=ethernet_port, type=REFERENCE macro=copy_to_state
	if ans.EthernetPort == nil {
		state.EthernetPort = nil
	} else {
		state.EthernetPort = &dsModelEthernetPort{}
		// copy_to_state: state=state.EthernetPort prefix=dsModel ans=ans.EthernetPort properties=4
		// property: name=full_duplex, type=BOOLEAN macro=copy_to_state
		state.EthernetPort.FullDuplex = types.BoolPointerValue(ans.EthernetPort.FullDuplex)
		// property: name=port_id, type=REFERENCE macro=copy_to_state
		if ans.EthernetPort.PortId == nil {
			state.EthernetPort.PortId = nil
		} else {
			state.EthernetPort.PortId = &dsModelEthernet{}
			// copy_to_state: state=state.EthernetPort.PortId prefix=dsModel ans=ans.EthernetPort.PortId properties=16
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.EthernetPort.PortId.Etag = types.Int64PointerValue(ans.EthernetPort.PortId.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.EthernetPort.PortId.Schema = types.Int64PointerValue(ans.EthernetPort.PortId.Schema)
			// property: name=connector, type=STRING macro=copy_to_state
			state.EthernetPort.PortId.Connector = types.StringPointerValue(ans.EthernetPort.PortId.Connector)
			// property: name=device, type=STRING macro=copy_to_state
			state.EthernetPort.PortId.Device = types.StringPointerValue(ans.EthernetPort.PortId.Device)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.EthernetPort.PortId.Disabled = types.BoolPointerValue(ans.EthernetPort.PortId.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.EthernetPort.PortId.DisabledReason = types.StringPointerValue(ans.EthernetPort.PortId.DisabledReason)
			// property: name=element_id, type=STRING macro=copy_to_state
			state.EthernetPort.PortId.ElementId = types.StringPointerValue(ans.EthernetPort.PortId.ElementId)
			// property: name=id, type=STRING macro=copy_to_state
			state.EthernetPort.PortId.Id = types.StringPointerValue(ans.EthernetPort.PortId.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.EthernetPort.PortId.Inactive = types.BoolPointerValue(ans.EthernetPort.PortId.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.EthernetPort.PortId.InactiveReason = types.StringPointerValue(ans.EthernetPort.PortId.InactiveReason)
			// property: name=max_mtu, type=INTEGER macro=copy_to_state
			state.EthernetPort.PortId.MaxMtu = types.Int64PointerValue(ans.EthernetPort.PortId.MaxMtu)
			// property: name=max_speed, type=INTEGER macro=copy_to_state
			state.EthernetPort.PortId.MaxSpeed = types.Int64PointerValue(ans.EthernetPort.PortId.MaxSpeed)
			// property: name=name, type=STRING macro=copy_to_state
			state.EthernetPort.PortId.Name = types.StringPointerValue(ans.EthernetPort.PortId.Name)
			// property: name=original_mac_address, type=STRING macro=copy_to_state
			state.EthernetPort.PortId.OriginalMacAddress = types.StringPointerValue(ans.EthernetPort.PortId.OriginalMacAddress)
			// property: name=region, type=STRING macro=copy_to_state
			state.EthernetPort.PortId.Region = types.StringPointerValue(ans.EthernetPort.PortId.Region)
			// property: name=site_id, type=STRING macro=copy_to_state
			state.EthernetPort.PortId.SiteId = types.StringPointerValue(ans.EthernetPort.PortId.SiteId)
		}
		// property: name=port_name, type=STRING macro=copy_to_state
		state.EthernetPort.PortName = types.StringPointerValue(ans.EthernetPort.PortName)
		// property: name=speed, type=INTEGER macro=copy_to_state
		state.EthernetPort.Speed = types.Int64PointerValue(ans.EthernetPort.Speed)
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=interface_profile_id, type=STRING macro=copy_to_state
	state.InterfaceProfileId = types.StringPointerValue(ans.InterfaceProfileId)
	// property: name=ipfixcollectorcontext_id, type=STRING macro=copy_to_state
	state.IpfixcollectorcontextId = types.StringPointerValue(ans.IpfixcollectorcontextId)
	// property: name=ipfixfiltercontext_id, type=STRING macro=copy_to_state
	state.IpfixfiltercontextId = types.StringPointerValue(ans.IpfixfiltercontextId)
	// property: name=ipv4_config, type=REFERENCE macro=copy_to_state
	if ans.Ipv4Config == nil {
		state.Ipv4Config = nil
	} else {
		state.Ipv4Config = &dsModelIpv4Config{}
		// copy_to_state: state=state.Ipv4Config prefix=dsModel ans=ans.Ipv4Config properties=6
		// property: name=dhcp_config, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.DhcpConfig == nil {
			state.Ipv4Config.DhcpConfig = nil
		} else {
			state.Ipv4Config.DhcpConfig = &dsModelIpv4Dhcp{}
			// copy_to_state: state=state.Ipv4Config.DhcpConfig prefix=dsModel ans=ans.Ipv4Config.DhcpConfig properties=2
			// property: name=client_id, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpConfig.ClientId = types.StringPointerValue(ans.Ipv4Config.DhcpConfig.ClientId)
			// property: name=hostname, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpConfig.Hostname = types.StringPointerValue(ans.Ipv4Config.DhcpConfig.Hostname)
		}
		// property: name=dns_v4_config, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.DnsV4Config == nil {
			state.Ipv4Config.DnsV4Config = nil
		} else {
			state.Ipv4Config.DnsV4Config = &dsModelDNS{}
			// copy_to_state: state=state.Ipv4Config.DnsV4Config prefix=dsModel ans=ans.Ipv4Config.DnsV4Config properties=2
			// property: name=name_servers, type=ARRAY_PRIMITIVE macro=copy_to_state
			varNameServers, errNameServers := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DnsV4Config.NameServers)
			state.Ipv4Config.DnsV4Config.NameServers = varNameServers
			resp.Diagnostics.Append(errNameServers.Errors()...)
			// property: name=search, type=ARRAY_PRIMITIVE macro=copy_to_state
			varSearch, errSearch := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DnsV4Config.Search)
			state.Ipv4Config.DnsV4Config.Search = varSearch
			resp.Diagnostics.Append(errSearch.Errors()...)
		}
		// property: name=pppoe_config, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.PppoeConfig == nil {
			state.Ipv4Config.PppoeConfig = nil
		} else {
			state.Ipv4Config.PppoeConfig = &dsModelIpv4Pppoe{}
			// copy_to_state: state=state.Ipv4Config.PppoeConfig prefix=dsModel ans=ans.Ipv4Config.PppoeConfig properties=3
			// property: name=chap_passwd, type=STRING macro=copy_to_state
			state.Ipv4Config.PppoeConfig.ChapPasswd = types.StringPointerValue(ans.Ipv4Config.PppoeConfig.ChapPasswd)
			// property: name=chap_user, type=STRING macro=copy_to_state
			state.Ipv4Config.PppoeConfig.ChapUser = types.StringPointerValue(ans.Ipv4Config.PppoeConfig.ChapUser)
			// property: name=set_route, type=BOOLEAN macro=copy_to_state
			state.Ipv4Config.PppoeConfig.SetRoute = types.BoolPointerValue(ans.Ipv4Config.PppoeConfig.SetRoute)
		}
		// property: name=routes, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.Ipv4Config.Routes == nil {
			state.Ipv4Config.Routes = nil
		} else if len(ans.Ipv4Config.Routes) == 0 {
			state.Ipv4Config.Routes = []dsModelRoute{}
		} else {
			state.Ipv4Config.Routes = make([]dsModelRoute, 0, len(ans.Ipv4Config.Routes))
			for varLoopRoutesIndex, varLoopRoutes := range ans.Ipv4Config.Routes {
				// add a new item
				state.Ipv4Config.Routes = append(state.Ipv4Config.Routes, dsModelRoute{})
				// copy_to_state: state=state.Ipv4Config.Routes[varLoopRoutesIndex] prefix=dsModel ans=varLoopRoutes properties=2
				// property: name=destination, type=STRING macro=copy_to_state
				state.Ipv4Config.Routes[varLoopRoutesIndex].Destination = types.StringPointerValue(varLoopRoutes.Destination)
				// property: name=via, type=STRING macro=copy_to_state
				state.Ipv4Config.Routes[varLoopRoutesIndex].Via = types.StringPointerValue(varLoopRoutes.Via)
			}
		}
		// property: name=static_config, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.StaticConfig == nil {
			state.Ipv4Config.StaticConfig = nil
		} else {
			state.Ipv4Config.StaticConfig = &dsModelIpv4Static{}
			// copy_to_state: state=state.Ipv4Config.StaticConfig prefix=dsModel ans=ans.Ipv4Config.StaticConfig properties=1
			// property: name=address, type=STRING macro=copy_to_state
			state.Ipv4Config.StaticConfig.Address = types.StringPointerValue(ans.Ipv4Config.StaticConfig.Address)
		}
		// property: name=type, type=STRING macro=copy_to_state
		state.Ipv4Config.Type = types.StringPointerValue(ans.Ipv4Config.Type)
	}
	// property: name=ipv6_config, type=REFERENCE macro=copy_to_state
	if ans.Ipv6Config == nil {
		state.Ipv6Config = nil
	} else {
		state.Ipv6Config = &dsModelIpv6ConfigV1{}
		// copy_to_state: state=state.Ipv6Config prefix=dsModel ans=ans.Ipv6Config properties=5
		// property: name=dhcp_config, type=REFERENCE macro=copy_to_state
		if ans.Ipv6Config.DhcpConfig == nil {
			state.Ipv6Config.DhcpConfig = nil
		} else {
			state.Ipv6Config.DhcpConfig = &dsModelIpv6Dhcp{}
			// copy_to_state: state=state.Ipv6Config.DhcpConfig prefix=dsModel ans=ans.Ipv6Config.DhcpConfig properties=2
			// property: name=client_id, type=STRING macro=copy_to_state
			state.Ipv6Config.DhcpConfig.ClientId = types.StringPointerValue(ans.Ipv6Config.DhcpConfig.ClientId)
			// property: name=hostname, type=STRING macro=copy_to_state
			state.Ipv6Config.DhcpConfig.Hostname = types.StringPointerValue(ans.Ipv6Config.DhcpConfig.Hostname)
		}
		// property: name=dns_v6_config, type=REFERENCE macro=copy_to_state
		if ans.Ipv6Config.DnsV6Config == nil {
			state.Ipv6Config.DnsV6Config = nil
		} else {
			state.Ipv6Config.DnsV6Config = &dsModelDNS{}
			// copy_to_state: state=state.Ipv6Config.DnsV6Config prefix=dsModel ans=ans.Ipv6Config.DnsV6Config properties=2
			// property: name=name_servers, type=ARRAY_PRIMITIVE macro=copy_to_state
			varNameServers, errNameServers := types.ListValueFrom(ctx, types.StringType, ans.Ipv6Config.DnsV6Config.NameServers)
			state.Ipv6Config.DnsV6Config.NameServers = varNameServers
			resp.Diagnostics.Append(errNameServers.Errors()...)
			// property: name=search, type=ARRAY_PRIMITIVE macro=copy_to_state
			varSearch, errSearch := types.ListValueFrom(ctx, types.StringType, ans.Ipv6Config.DnsV6Config.Search)
			state.Ipv6Config.DnsV6Config.Search = varSearch
			resp.Diagnostics.Append(errSearch.Errors()...)
		}
		// property: name=routes, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.Ipv6Config.Routes == nil {
			state.Ipv6Config.Routes = nil
		} else if len(ans.Ipv6Config.Routes) == 0 {
			state.Ipv6Config.Routes = []dsModelRoute{}
		} else {
			state.Ipv6Config.Routes = make([]dsModelRoute, 0, len(ans.Ipv6Config.Routes))
			for varLoopRoutesIndex, varLoopRoutes := range ans.Ipv6Config.Routes {
				// add a new item
				state.Ipv6Config.Routes = append(state.Ipv6Config.Routes, dsModelRoute{})
				// copy_to_state: state=state.Ipv6Config.Routes[varLoopRoutesIndex] prefix=dsModel ans=varLoopRoutes properties=2
				// property: name=destination, type=STRING macro=copy_to_state
				state.Ipv6Config.Routes[varLoopRoutesIndex].Destination = types.StringPointerValue(varLoopRoutes.Destination)
				// property: name=via, type=STRING macro=copy_to_state
				state.Ipv6Config.Routes[varLoopRoutesIndex].Via = types.StringPointerValue(varLoopRoutes.Via)
			}
		}
		// property: name=static_config, type=REFERENCE macro=copy_to_state
		if ans.Ipv6Config.StaticConfig == nil {
			state.Ipv6Config.StaticConfig = nil
		} else {
			state.Ipv6Config.StaticConfig = &dsModelIpv6StaticV1{}
			// copy_to_state: state=state.Ipv6Config.StaticConfig prefix=dsModel ans=ans.Ipv6Config.StaticConfig properties=2
			// property: name=address, type=STRING macro=copy_to_state
			state.Ipv6Config.StaticConfig.Address = types.StringPointerValue(ans.Ipv6Config.StaticConfig.Address)
			// property: name=enable_prefix_distribution, type=BOOLEAN macro=copy_to_state
			state.Ipv6Config.StaticConfig.EnablePrefixDistribution = types.BoolPointerValue(ans.Ipv6Config.StaticConfig.EnablePrefixDistribution)
		}
		// property: name=type, type=STRING macro=copy_to_state
		state.Ipv6Config.Type = types.StringPointerValue(ans.Ipv6Config.Type)
	}
	// property: name=lldp_enabled, type=BOOLEAN macro=copy_to_state
	state.LldpEnabled = types.BoolPointerValue(ans.LldpEnabled)
	// property: name=mac_address, type=STRING macro=copy_to_state
	state.MacAddress = types.StringPointerValue(ans.MacAddress)
	// property: name=mtu, type=INTEGER macro=copy_to_state
	state.Mtu = types.Int64PointerValue(ans.Mtu)
	// property: name=multicast_config, type=REFERENCE macro=copy_to_state
	if ans.MulticastConfig == nil {
		state.MulticastConfig = nil
	} else {
		state.MulticastConfig = &dsModelMulticastInterfaceConfig{}
		// copy_to_state: state=state.MulticastConfig prefix=dsModel ans=ans.MulticastConfig properties=2
		// property: name=igmp_version, type=STRING macro=copy_to_state
		state.MulticastConfig.IgmpVersion = types.StringPointerValue(ans.MulticastConfig.IgmpVersion)
		// property: name=multicast_enabled, type=BOOLEAN macro=copy_to_state
		state.MulticastConfig.MulticastEnabled = types.BoolPointerValue(ans.MulticastConfig.MulticastEnabled)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=nat_address, type=STRING macro=copy_to_state
	state.NatAddress = types.StringPointerValue(ans.NatAddress)
	// property: name=nat_address_v6, type=STRING macro=copy_to_state
	state.NatAddressV6 = types.StringPointerValue(ans.NatAddressV6)
	// property: name=nat_pools, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.NatPools == nil {
		state.NatPools = nil
	} else if len(ans.NatPools) == 0 {
		state.NatPools = []dsModelNatPool{}
	} else {
		state.NatPools = make([]dsModelNatPool, 0, len(ans.NatPools))
		for varLoopNatPoolsIndex, varLoopNatPools := range ans.NatPools {
			// add a new item
			state.NatPools = append(state.NatPools, dsModelNatPool{})
			// copy_to_state: state=state.NatPools[varLoopNatPoolsIndex] prefix=dsModel ans=varLoopNatPools properties=2
			// property: name=ipv4_ranges, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopNatPools.Ipv4Ranges == nil {
				state.NatPools[varLoopNatPoolsIndex].Ipv4Ranges = nil
			} else if len(varLoopNatPools.Ipv4Ranges) == 0 {
				state.NatPools[varLoopNatPoolsIndex].Ipv4Ranges = []dsModelIPv4Range{}
			} else {
				state.NatPools[varLoopNatPoolsIndex].Ipv4Ranges = make([]dsModelIPv4Range, 0, len(varLoopNatPools.Ipv4Ranges))
				for varLoopIpv4RangesIndex, varLoopIpv4Ranges := range varLoopNatPools.Ipv4Ranges {
					// add a new item
					state.NatPools[varLoopNatPoolsIndex].Ipv4Ranges = append(state.NatPools[varLoopNatPoolsIndex].Ipv4Ranges, dsModelIPv4Range{})
					// copy_to_state: state=state.NatPools[varLoopNatPoolsIndex].Ipv4Ranges[varLoopIpv4RangesIndex] prefix=dsModel ans=varLoopIpv4Ranges properties=2
					// property: name=end, type=STRING macro=copy_to_state
					state.NatPools[varLoopNatPoolsIndex].Ipv4Ranges[varLoopIpv4RangesIndex].End = types.StringPointerValue(varLoopIpv4Ranges.End)
					// property: name=start, type=STRING macro=copy_to_state
					state.NatPools[varLoopNatPoolsIndex].Ipv4Ranges[varLoopIpv4RangesIndex].Start = types.StringPointerValue(varLoopIpv4Ranges.Start)
				}
			}
			// property: name=nat_pool_id, type=STRING macro=copy_to_state
			state.NatPools[varLoopNatPoolsIndex].NatPoolId = types.StringPointerValue(varLoopNatPools.NatPoolId)
		}
	}
	// property: name=nat_port, type=INTEGER macro=copy_to_state
	state.NatPort = types.Int64PointerValue(ans.NatPort)
	// property: name=nat_port_v6, type=INTEGER macro=copy_to_state
	state.NatPortV6 = types.Int64PointerValue(ans.NatPortV6)
	// property: name=nat_zone_id, type=STRING macro=copy_to_state
	state.NatZoneId = types.StringPointerValue(ans.NatZoneId)
	// property: name=network_context_id, type=STRING macro=copy_to_state
	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)
	// property: name=parent, type=STRING macro=copy_to_state
	state.Parent = types.StringPointerValue(ans.Parent)
	// property: name=peer_bypasspair_wan_port_type, type=STRING macro=copy_to_state
	state.PeerBypasspairWanPortType = types.StringPointerValue(ans.PeerBypasspairWanPortType)
	// property: name=poe_enabled, type=BOOLEAN macro=copy_to_state
	state.PoeEnabled = types.BoolPointerValue(ans.PoeEnabled)
	// property: name=port_channel_config, type=REFERENCE macro=copy_to_state
	if ans.PortChannelConfig == nil {
		state.PortChannelConfig = nil
	} else {
		state.PortChannelConfig = &dsModelPortChannelConfig{}
		// copy_to_state: state=state.PortChannelConfig prefix=dsModel ans=ans.PortChannelConfig properties=2
		// property: name=lacp_enabled, type=BOOLEAN macro=copy_to_state
		state.PortChannelConfig.LacpEnabled = types.BoolPointerValue(ans.PortChannelConfig.LacpEnabled)
		// property: name=transmission_mode, type=STRING macro=copy_to_state
		state.PortChannelConfig.TransmissionMode = types.StringPointerValue(ans.PortChannelConfig.TransmissionMode)
	}
	// property: name=power_usage_threshold, type=INTEGER macro=copy_to_state
	state.PowerUsageThreshold = types.Int64PointerValue(ans.PowerUsageThreshold)
	// property: name=pppoe_config, type=REFERENCE macro=copy_to_state
	if ans.PppoeConfig == nil {
		state.PppoeConfig = nil
	} else {
		state.PppoeConfig = &dsModelPppoEInterfaceConfig{}
		// copy_to_state: state=state.PppoeConfig prefix=dsModel ans=ans.PppoeConfig properties=6
		// property: name=host_uniq, type=STRING macro=copy_to_state
		state.PppoeConfig.HostUniq = types.StringPointerValue(ans.PppoeConfig.HostUniq)
		// property: name=ip_address_type, type=STRING macro=copy_to_state
		state.PppoeConfig.IpAddressType = types.StringPointerValue(ans.PppoeConfig.IpAddressType)
		// property: name=password, type=STRING macro=copy_to_state
		state.PppoeConfig.Password = types.StringPointerValue(ans.PppoeConfig.Password)
		// property: name=reconnection_delay, type=INTEGER macro=copy_to_state
		state.PppoeConfig.ReconnectionDelay = types.Int64PointerValue(ans.PppoeConfig.ReconnectionDelay)
		// property: name=service_name, type=STRING macro=copy_to_state
		state.PppoeConfig.ServiceName = types.StringPointerValue(ans.PppoeConfig.ServiceName)
		// property: name=username, type=STRING macro=copy_to_state
		state.PppoeConfig.Username = types.StringPointerValue(ans.PppoeConfig.Username)
	}
	// property: name=scope, type=STRING macro=copy_to_state
	state.Scope = types.StringPointerValue(ans.Scope)
	// property: name=secondary_ip_configs, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.SecondaryIpConfigs == nil {
		state.SecondaryIpConfigs = nil
	} else if len(ans.SecondaryIpConfigs) == 0 {
		state.SecondaryIpConfigs = []dsModelSecondaryIPConfig{}
	} else {
		state.SecondaryIpConfigs = make([]dsModelSecondaryIPConfig, 0, len(ans.SecondaryIpConfigs))
		for varLoopSecondaryIpConfigsIndex, varLoopSecondaryIpConfigs := range ans.SecondaryIpConfigs {
			// add a new item
			state.SecondaryIpConfigs = append(state.SecondaryIpConfigs, dsModelSecondaryIPConfig{})
			// copy_to_state: state=state.SecondaryIpConfigs[varLoopSecondaryIpConfigsIndex] prefix=dsModel ans=varLoopSecondaryIpConfigs properties=2
			// property: name=ipv4_address, type=STRING macro=copy_to_state
			state.SecondaryIpConfigs[varLoopSecondaryIpConfigsIndex].Ipv4Address = types.StringPointerValue(varLoopSecondaryIpConfigs.Ipv4Address)
			// property: name=scope, type=STRING macro=copy_to_state
			state.SecondaryIpConfigs[varLoopSecondaryIpConfigsIndex].Scope = types.StringPointerValue(varLoopSecondaryIpConfigs.Scope)
		}
	}
	// property: name=service_link_config, type=REFERENCE macro=copy_to_state
	if ans.ServiceLinkConfig == nil {
		state.ServiceLinkConfig = nil
	} else {
		state.ServiceLinkConfig = &dsModelServiceLinkV4{}
		// copy_to_state: state=state.ServiceLinkConfig prefix=dsModel ans=ans.ServiceLinkConfig properties=8
		// property: name=gre_config, type=REFERENCE macro=copy_to_state
		if ans.ServiceLinkConfig.GreConfig == nil {
			state.ServiceLinkConfig.GreConfig = nil
		} else {
			state.ServiceLinkConfig.GreConfig = &dsModelGREConfig{}
			// copy_to_state: state=state.ServiceLinkConfig.GreConfig prefix=dsModel ans=ans.ServiceLinkConfig.GreConfig properties=4
			// property: name=csum, type=BOOLEAN macro=copy_to_state
			state.ServiceLinkConfig.GreConfig.Csum = types.BoolPointerValue(ans.ServiceLinkConfig.GreConfig.Csum)
			// property: name=keepalive_enable, type=BOOLEAN macro=copy_to_state
			state.ServiceLinkConfig.GreConfig.KeepaliveEnable = types.BoolPointerValue(ans.ServiceLinkConfig.GreConfig.KeepaliveEnable)
			// property: name=keepalive_fail_count, type=INTEGER macro=copy_to_state
			state.ServiceLinkConfig.GreConfig.KeepaliveFailCount = types.Int64PointerValue(ans.ServiceLinkConfig.GreConfig.KeepaliveFailCount)
			// property: name=keepalive_interval, type=INTEGER macro=copy_to_state
			state.ServiceLinkConfig.GreConfig.KeepaliveInterval = types.Int64PointerValue(ans.ServiceLinkConfig.GreConfig.KeepaliveInterval)
		}
		// property: name=ipsec_config, type=REFERENCE macro=copy_to_state
		if ans.ServiceLinkConfig.IpsecConfig == nil {
			state.ServiceLinkConfig.IpsecConfig = nil
		} else {
			state.ServiceLinkConfig.IpsecConfig = &dsModelIPSECConfigV1{}
			// copy_to_state: state=state.ServiceLinkConfig.IpsecConfig prefix=dsModel ans=ans.ServiceLinkConfig.IpsecConfig properties=2
			// property: name=authentication, type=REFERENCE macro=copy_to_state
			if ans.ServiceLinkConfig.IpsecConfig.Authentication == nil {
				state.ServiceLinkConfig.IpsecConfig.Authentication = nil
			} else {
				state.ServiceLinkConfig.IpsecConfig.Authentication = &dsModelIPSECAuthenticationV1{}
				// copy_to_state: state=state.ServiceLinkConfig.IpsecConfig.Authentication prefix=dsModel ans=ans.ServiceLinkConfig.IpsecConfig.Authentication properties=22
				// property: name=certificate, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.Certificate = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.Certificate)
				// property: name=certificate_profile_id, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.CertificateProfileId = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.CertificateProfileId)
				// property: name=comment, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.Comment = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.Comment)
				// property: name=ikev1_params, type=REFERENCE macro=copy_to_state
				if ans.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params == nil {
					state.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params = nil
				} else {
					state.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params = &dsModelIKEV1Params{}
					// copy_to_state: state=state.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params prefix=dsModel ans=ans.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params properties=5
					// property: name=xauth_id, type=STRING macro=copy_to_state
					state.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params.XauthId = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params.XauthId)
					// property: name=xauth_secret, type=STRING macro=copy_to_state
					state.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params.XauthSecret = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params.XauthSecret)
					// property: name=xauth_secret_encrypted, type=STRING macro=copy_to_state
					state.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params.XauthSecretEncrypted = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params.XauthSecretEncrypted)
					// property: name=xauth_secret_hash, type=STRING macro=copy_to_state
					state.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params.XauthSecretHash = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params.XauthSecretHash)
					// property: name=xauth_type, type=STRING macro=copy_to_state
					state.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params.XauthType = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.Ikev1Params.XauthType)
				}
				// property: name=local_ca_certificate, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.LocalCaCertificate = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.LocalCaCertificate)
				// property: name=local_id, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.LocalId = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.LocalId)
				// property: name=local_id_custom, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.LocalIdCustom = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.LocalIdCustom)
				// property: name=local_pa_certificate_id, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.LocalPaCertificateId = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.LocalPaCertificateId)
				// property: name=pa_master_key_id, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.PaMasterKeyId = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.PaMasterKeyId)
				// property: name=passphrase, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.Passphrase = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.Passphrase)
				// property: name=passphrase_encrypted, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.PassphraseEncrypted = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.PassphraseEncrypted)
				// property: name=peer_id_check, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.PeerIdCheck = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.PeerIdCheck)
				// property: name=permit_peer_id_mismatch, type=BOOLEAN macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.PermitPeerIdMismatch = types.BoolPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.PermitPeerIdMismatch)
				// property: name=private_key, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.PrivateKey = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.PrivateKey)
				// property: name=private_key_encrypted, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.PrivateKeyEncrypted = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.PrivateKeyEncrypted)
				// property: name=remote_ca_certificate, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.RemoteCaCertificate = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.RemoteCaCertificate)
				// property: name=remote_id, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.RemoteId = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.RemoteId)
				// property: name=secret, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.Secret = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.Secret)
				// property: name=secret_encrypted, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.SecretEncrypted = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.SecretEncrypted)
				// property: name=secret_hash, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.SecretHash = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.SecretHash)
				// property: name=strict_validation_peer_extended_key_use, type=BOOLEAN macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.StrictValidationPeerExtendedKeyUse = types.BoolPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.StrictValidationPeerExtendedKeyUse)
				// property: name=type, type=STRING macro=copy_to_state
				state.ServiceLinkConfig.IpsecConfig.Authentication.Type = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.Authentication.Type)
			}
			// property: name=ipsec_profile_id, type=STRING macro=copy_to_state
			state.ServiceLinkConfig.IpsecConfig.IpsecProfileId = types.StringPointerValue(ans.ServiceLinkConfig.IpsecConfig.IpsecProfileId)
		}
		// property: name=last_parent, type=STRING macro=copy_to_state
		state.ServiceLinkConfig.LastParent = types.StringPointerValue(ans.ServiceLinkConfig.LastParent)
		// property: name=parent, type=STRING macro=copy_to_state
		state.ServiceLinkConfig.Parent = types.StringPointerValue(ans.ServiceLinkConfig.Parent)
		// property: name=passive_mode, type=REFERENCE macro=copy_to_state
		if ans.ServiceLinkConfig.PassiveMode == nil {
			state.ServiceLinkConfig.PassiveMode = nil
		} else {
			state.ServiceLinkConfig.PassiveMode = &dsModelPassiveMode{}
			// copy_to_state: state=state.ServiceLinkConfig.PassiveMode prefix=dsModel ans=ans.ServiceLinkConfig.PassiveMode properties=2
			// property: name=enable, type=BOOLEAN macro=copy_to_state
			state.ServiceLinkConfig.PassiveMode.Enable = types.BoolPointerValue(ans.ServiceLinkConfig.PassiveMode.Enable)
			// property: name=peer_ip_dynamic, type=BOOLEAN macro=copy_to_state
			state.ServiceLinkConfig.PassiveMode.PeerIpDynamic = types.BoolPointerValue(ans.ServiceLinkConfig.PassiveMode.PeerIpDynamic)
		}
		// property: name=peer, type=REFERENCE macro=copy_to_state
		if ans.ServiceLinkConfig.Peer == nil {
			state.ServiceLinkConfig.Peer = nil
		} else {
			state.ServiceLinkConfig.Peer = &dsModelPeerInfo{}
			// copy_to_state: state=state.ServiceLinkConfig.Peer prefix=dsModel ans=ans.ServiceLinkConfig.Peer properties=2
			// property: name=hostname, type=STRING macro=copy_to_state
			state.ServiceLinkConfig.Peer.Hostname = types.StringPointerValue(ans.ServiceLinkConfig.Peer.Hostname)
			// property: name=ip_addresses, type=ARRAY_PRIMITIVE macro=copy_to_state
			varIpAddresses, errIpAddresses := types.ListValueFrom(ctx, types.StringType, ans.ServiceLinkConfig.Peer.IpAddresses)
			state.ServiceLinkConfig.Peer.IpAddresses = varIpAddresses
			resp.Diagnostics.Append(errIpAddresses.Errors()...)
		}
		// property: name=service_endpoint_id, type=STRING macro=copy_to_state
		state.ServiceLinkConfig.ServiceEndpointId = types.StringPointerValue(ans.ServiceLinkConfig.ServiceEndpointId)
		// property: name=type, type=STRING macro=copy_to_state
		state.ServiceLinkConfig.Type = types.StringPointerValue(ans.ServiceLinkConfig.Type)
	}
	// property: name=sgi_apply_static_tag, type=BOOLEAN macro=copy_to_state
	state.SgiApplyStaticTag = types.BoolPointerValue(ans.SgiApplyStaticTag)
	// property: name=site_wan_interface_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varSiteWanInterfaceIds, errSiteWanInterfaceIds := types.ListValueFrom(ctx, types.StringType, ans.SiteWanInterfaceIds)
	state.SiteWanInterfaceIds = varSiteWanInterfaceIds
	resp.Diagnostics.Append(errSiteWanInterfaceIds.Errors()...)
	// property: name=static_arp_configs, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.StaticArpConfigs == nil {
		state.StaticArpConfigs = nil
	} else if len(ans.StaticArpConfigs) == 0 {
		state.StaticArpConfigs = []dsModelStaticARPConfig{}
	} else {
		state.StaticArpConfigs = make([]dsModelStaticARPConfig, 0, len(ans.StaticArpConfigs))
		for varLoopStaticArpConfigsIndex, varLoopStaticArpConfigs := range ans.StaticArpConfigs {
			// add a new item
			state.StaticArpConfigs = append(state.StaticArpConfigs, dsModelStaticARPConfig{})
			// copy_to_state: state=state.StaticArpConfigs[varLoopStaticArpConfigsIndex] prefix=dsModel ans=varLoopStaticArpConfigs properties=2
			// property: name=ipv4_address, type=STRING macro=copy_to_state
			state.StaticArpConfigs[varLoopStaticArpConfigsIndex].Ipv4Address = types.StringPointerValue(varLoopStaticArpConfigs.Ipv4Address)
			// property: name=mac_address, type=STRING macro=copy_to_state
			state.StaticArpConfigs[varLoopStaticArpConfigsIndex].MacAddress = types.StringPointerValue(varLoopStaticArpConfigs.MacAddress)
		}
	}
	// property: name=sub_interface, type=REFERENCE macro=copy_to_state
	if ans.SubInterface == nil {
		state.SubInterface = nil
	} else {
		state.SubInterface = &dsModelSubInterface{}
		// copy_to_state: state=state.SubInterface prefix=dsModel ans=ans.SubInterface properties=1
		// property: name=vlan_id, type=INTEGER macro=copy_to_state
		state.SubInterface.VlanId = types.Int64PointerValue(ans.SubInterface.VlanId)
	}
	// property: name=switch_port_config, type=REFERENCE macro=copy_to_state
	if ans.SwitchPortConfig == nil {
		state.SwitchPortConfig = nil
	} else {
		state.SwitchPortConfig = &dsModelSwitchPortConfig{}
		// copy_to_state: state=state.SwitchPortConfig prefix=dsModel ans=ans.SwitchPortConfig properties=12
		// property: name=access_vlan_id, type=INTEGER macro=copy_to_state
		state.SwitchPortConfig.AccessVlanId = types.Int64PointerValue(ans.SwitchPortConfig.AccessVlanId)
		// property: name=bpdu_guard_enabled, type=BOOLEAN macro=copy_to_state
		state.SwitchPortConfig.BpduGuardEnabled = types.BoolPointerValue(ans.SwitchPortConfig.BpduGuardEnabled)
		// property: name=forward_fast_enabled, type=BOOLEAN macro=copy_to_state
		state.SwitchPortConfig.ForwardFastEnabled = types.BoolPointerValue(ans.SwitchPortConfig.ForwardFastEnabled)
		// property: name=native_vlan_id, type=INTEGER macro=copy_to_state
		state.SwitchPortConfig.NativeVlanId = types.Int64PointerValue(ans.SwitchPortConfig.NativeVlanId)
		// property: name=root_guard_enabled, type=BOOLEAN macro=copy_to_state
		state.SwitchPortConfig.RootGuardEnabled = types.BoolPointerValue(ans.SwitchPortConfig.RootGuardEnabled)
		// property: name=storm_control_config, type=REFERENCE macro=copy_to_state
		if ans.SwitchPortConfig.StormControlConfig == nil {
			state.SwitchPortConfig.StormControlConfig = nil
		} else {
			state.SwitchPortConfig.StormControlConfig = &dsModelStormControlConfig{}
			// copy_to_state: state=state.SwitchPortConfig.StormControlConfig prefix=dsModel ans=ans.SwitchPortConfig.StormControlConfig properties=3
			// property: name=broadcast_threshold, type=INTEGER macro=copy_to_state
			state.SwitchPortConfig.StormControlConfig.BroadcastThreshold = types.Int64PointerValue(ans.SwitchPortConfig.StormControlConfig.BroadcastThreshold)
			// property: name=multicast_threshold, type=INTEGER macro=copy_to_state
			state.SwitchPortConfig.StormControlConfig.MulticastThreshold = types.Int64PointerValue(ans.SwitchPortConfig.StormControlConfig.MulticastThreshold)
			// property: name=unicast_threshold, type=INTEGER macro=copy_to_state
			state.SwitchPortConfig.StormControlConfig.UnicastThreshold = types.Int64PointerValue(ans.SwitchPortConfig.StormControlConfig.UnicastThreshold)
		}
		// property: name=stp_port_cost, type=INTEGER macro=copy_to_state
		state.SwitchPortConfig.StpPortCost = types.Int64PointerValue(ans.SwitchPortConfig.StpPortCost)
		// property: name=stp_port_enabled, type=BOOLEAN macro=copy_to_state
		state.SwitchPortConfig.StpPortEnabled = types.BoolPointerValue(ans.SwitchPortConfig.StpPortEnabled)
		// property: name=stp_port_priority, type=INTEGER macro=copy_to_state
		state.SwitchPortConfig.StpPortPriority = types.Int64PointerValue(ans.SwitchPortConfig.StpPortPriority)
		// property: name=trunk_vlans, type=ARRAY_PRIMITIVE macro=copy_to_state
		varTrunkVlans, errTrunkVlans := types.ListValueFrom(ctx, types.StringType, ans.SwitchPortConfig.TrunkVlans)
		state.SwitchPortConfig.TrunkVlans = varTrunkVlans
		resp.Diagnostics.Append(errTrunkVlans.Errors()...)
		// property: name=vlan_mode, type=STRING macro=copy_to_state
		state.SwitchPortConfig.VlanMode = types.StringPointerValue(ans.SwitchPortConfig.VlanMode)
		// property: name=voice_vlan_id, type=INTEGER macro=copy_to_state
		state.SwitchPortConfig.VoiceVlanId = types.Int64PointerValue(ans.SwitchPortConfig.VoiceVlanId)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=type, type=STRING macro=copy_to_state
	state.Type = types.StringPointerValue(ans.Type)
	// property: name=used_for, type=STRING macro=copy_to_state
	state.UsedFor = types.StringPointerValue(ans.UsedFor)
	// property: name=vlan_config, type=REFERENCE macro=copy_to_state
	if ans.VlanConfig == nil {
		state.VlanConfig = nil
	} else {
		state.VlanConfig = &dsModelVlanConfig{}
		// copy_to_state: state=state.VlanConfig prefix=dsModel ans=ans.VlanConfig properties=3
		// property: name=mstp_instance, type=INTEGER macro=copy_to_state
		state.VlanConfig.MstpInstance = types.Int64PointerValue(ans.VlanConfig.MstpInstance)
		// property: name=vlan_id, type=INTEGER macro=copy_to_state
		state.VlanConfig.VlanId = types.Int64PointerValue(ans.VlanConfig.VlanId)
		// property: name=voice_enabled, type=BOOLEAN macro=copy_to_state
		state.VlanConfig.VoiceEnabled = types.BoolPointerValue(ans.VlanConfig.VoiceEnabled)
	}
	// property: name=vrf_context_id, type=STRING macro=copy_to_state
	state.VrfContextId = types.StringPointerValue(ans.VrfContextId)

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
