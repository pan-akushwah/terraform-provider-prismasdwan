package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=7)
// | Computed Resource Name=prioritypolicysets
// +-----------------------------------------------------------------
// | DefaultRuleDSCPMapping HasID=false
// | BusinessPriorityNameMapper HasID=false
// | BandwidthSplit HasID=false
// | BusinessPriorityV2 HasID=false
// | BandwidthRange HasID=false
// | BandwidthAllocationSchemeV2 HasID=false
// | PriorityPolicySet HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &qosPolicySetResource{}
	_ resource.ResourceWithConfigure   = &qosPolicySetResource{}
	_ resource.ResourceWithImportState = &qosPolicySetResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewQosPolicySetResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewQosPolicySetResource() resource.Resource {
	return &qosPolicySetResource{}
}

type qosPolicySetResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *qosPolicySetResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_qos_policy_set"
}

// Schema defines the schema for this data source.
func (r *qosPolicySetResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=PriorityPolicySet
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=bandwidth_allocation_schemes, type=ARRAY_REFERENCE macro=rss_schema
			"bandwidth_allocation_schemes": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=bandwidth_range, type=REFERENCE macro=rss_schema
						"bandwidth_range": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// property: name=high, type=NUMBER macro=rss_schema
								"high": rsschema.Float64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=high, type=NUMBER macro=rss_schema
								// property: name=low, type=NUMBER macro=rss_schema
								"low": rsschema.Float64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=low, type=NUMBER macro=rss_schema
							},
						},
						// key name holder for attribute: name=low, type=NUMBER macro=rss_schema
						// property: name=business_priorities, type=ARRAY_REFERENCE macro=rss_schema
						"business_priorities": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=bandwidth_allocation, type=NUMBER macro=rss_schema
									"bandwidth_allocation": rsschema.Float64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=bandwidth_allocation, type=NUMBER macro=rss_schema
									// property: name=bandwidth_split_per_type, type=REFERENCE macro=rss_schema
									"bandwidth_split_per_type": rsschema.SingleNestedAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
										Attributes: map[string]rsschema.Attribute{
											// property: name=bulk, type=NUMBER macro=rss_schema
											"bulk": rsschema.Float64Attribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=bulk, type=NUMBER macro=rss_schema
											// property: name=rt_audio, type=NUMBER macro=rss_schema
											"rt_audio": rsschema.Float64Attribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=rt_audio, type=NUMBER macro=rss_schema
											// property: name=rt_video, type=NUMBER macro=rss_schema
											"rt_video": rsschema.Float64Attribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=rt_video, type=NUMBER macro=rss_schema
											// property: name=transactional, type=NUMBER macro=rss_schema
											"transactional": rsschema.Float64Attribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=transactional, type=NUMBER macro=rss_schema
										},
									},
									// key name holder for attribute: name=transactional, type=NUMBER macro=rss_schema
									// property: name=priority_number, type=INTEGER macro=rss_schema
									"priority_number": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=priority_number, type=INTEGER macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=priority_number, type=INTEGER macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=priority_number, type=INTEGER macro=rss_schema
			// property: name=business_priority_names, type=ARRAY_REFERENCE macro=rss_schema
			"business_priority_names": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=priority_name, type=STRING macro=rss_schema
						"priority_name": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=priority_name, type=STRING macro=rss_schema
						// property: name=priority_number, type=INTEGER macro=rss_schema
						"priority_number": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=priority_number, type=INTEGER macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=priority_number, type=INTEGER macro=rss_schema
			// property: name=clone_from, type=STRING macro=rss_schema
			"clone_from": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=clone_from, type=STRING macro=rss_schema
			// property: name=default_rule_dscp_mappings, type=ARRAY_REFERENCE macro=rss_schema
			"default_rule_dscp_mappings": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=dscp, type=ARRAY_PRIMITIVE macro=rss_schema
						"dscp": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.Int64Type,
						},
						// key name holder for attribute: name=dscp, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=priority_number, type=INTEGER macro=rss_schema
						"priority_number": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=priority_number, type=INTEGER macro=rss_schema
						// property: name=transfer_type, type=STRING macro=rss_schema
						"transfer_type": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=transfer_type, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=transfer_type, type=STRING macro=rss_schema
			// property: name=defaultrule_policyset, type=BOOLEAN macro=rss_schema
			"defaultrule_policyset": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=defaultrule_policyset, type=BOOLEAN macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=template, type=BOOLEAN macro=rss_schema
			"template": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=template, type=BOOLEAN macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *qosPolicySetResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *qosPolicySetResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	case "POLICY_SET_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *qosPolicySetResource) doPost(ctx context.Context, plan *rsModelPriorityPolicySet, state *rsModelPriorityPolicySet, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_qos_policy_set")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_qos_policy_set",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_qos_policy_set"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.0/api/prioritypolicysets"

	// copy parameters from plan always
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.PriorityPolicySet{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=12
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=bandwidth_allocation_schemes, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.BandwidthAllocationSchemes == nil {
		body.BandwidthAllocationSchemes = nil
	} else if len(plan.BandwidthAllocationSchemes) == 0 {
		body.BandwidthAllocationSchemes = []sdwan_schema.BandwidthAllocationSchemeV2{}
	} else {
		body.BandwidthAllocationSchemes = make([]sdwan_schema.BandwidthAllocationSchemeV2, 0, len(plan.BandwidthAllocationSchemes))
		for varLoopBandwidthAllocationSchemesIndex, varLoopBandwidthAllocationSchemes := range plan.BandwidthAllocationSchemes {
			// add a new item
			body.BandwidthAllocationSchemes = append(body.BandwidthAllocationSchemes, sdwan_schema.BandwidthAllocationSchemeV2{})
			// copy_from_plan: body=body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex] prefix=rsModel plan=varLoopBandwidthAllocationSchemes properties=2
			// property: name=bandwidth_range, type=REFERENCE macro=copy_from_plan
			if varLoopBandwidthAllocationSchemes.BandwidthRange != nil {
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange = &sdwan_schema.BandwidthRange{}
				// copy_from_plan: body=body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange prefix=rsModel plan=varLoopBandwidthAllocationSchemes.BandwidthRange properties=2
				// property: name=high, type=NUMBER macro=copy_from_plan
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange.High = Float64ValueOrNil(varLoopBandwidthAllocationSchemes.BandwidthRange.High)
				// property: name=low, type=NUMBER macro=copy_from_plan
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange.Low = Float64ValueOrNil(varLoopBandwidthAllocationSchemes.BandwidthRange.Low)
			}
			// property: name=business_priorities, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopBandwidthAllocationSchemes.BusinessPriorities == nil {
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = nil
			} else if len(varLoopBandwidthAllocationSchemes.BusinessPriorities) == 0 {
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = []sdwan_schema.BusinessPriorityV2{}
			} else {
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = make([]sdwan_schema.BusinessPriorityV2, 0, len(varLoopBandwidthAllocationSchemes.BusinessPriorities))
				for varLoopBusinessPrioritiesIndex, varLoopBusinessPriorities := range varLoopBandwidthAllocationSchemes.BusinessPriorities {
					// add a new item
					body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = append(body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities, sdwan_schema.BusinessPriorityV2{})
					// copy_from_plan: body=body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex] prefix=rsModel plan=varLoopBusinessPriorities properties=3
					// property: name=bandwidth_allocation, type=NUMBER macro=copy_from_plan
					body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthAllocation = Float64ValueOrNil(varLoopBusinessPriorities.BandwidthAllocation)
					// property: name=bandwidth_split_per_type, type=REFERENCE macro=copy_from_plan
					if varLoopBusinessPriorities.BandwidthSplitPerType != nil {
						body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType = &sdwan_schema.BandwidthSplit{}
						// copy_from_plan: body=body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType prefix=rsModel plan=varLoopBusinessPriorities.BandwidthSplitPerType properties=4
						// property: name=bulk, type=NUMBER macro=copy_from_plan
						body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.Bulk = Float64ValueOrNil(varLoopBusinessPriorities.BandwidthSplitPerType.Bulk)
						// property: name=rt_audio, type=NUMBER macro=copy_from_plan
						body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.RtAudio = Float64ValueOrNil(varLoopBusinessPriorities.BandwidthSplitPerType.RtAudio)
						// property: name=rt_video, type=NUMBER macro=copy_from_plan
						body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.RtVideo = Float64ValueOrNil(varLoopBusinessPriorities.BandwidthSplitPerType.RtVideo)
						// property: name=transactional, type=NUMBER macro=copy_from_plan
						body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.Transactional = Float64ValueOrNil(varLoopBusinessPriorities.BandwidthSplitPerType.Transactional)
					}
					// property: name=priority_number, type=INTEGER macro=copy_from_plan
					body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].PriorityNumber = Int64ValueOrNil(varLoopBusinessPriorities.PriorityNumber)
				}
			}
		}
	}
	// property: name=business_priority_names, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.BusinessPriorityNames == nil {
		body.BusinessPriorityNames = nil
	} else if len(plan.BusinessPriorityNames) == 0 {
		body.BusinessPriorityNames = []sdwan_schema.BusinessPriorityNameMapper{}
	} else {
		body.BusinessPriorityNames = make([]sdwan_schema.BusinessPriorityNameMapper, 0, len(plan.BusinessPriorityNames))
		for varLoopBusinessPriorityNamesIndex, varLoopBusinessPriorityNames := range plan.BusinessPriorityNames {
			// add a new item
			body.BusinessPriorityNames = append(body.BusinessPriorityNames, sdwan_schema.BusinessPriorityNameMapper{})
			// copy_from_plan: body=body.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex] prefix=rsModel plan=varLoopBusinessPriorityNames properties=2
			// property: name=priority_name, type=STRING macro=copy_from_plan
			body.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex].PriorityName = StringValueOrNil(varLoopBusinessPriorityNames.PriorityName)
			// property: name=priority_number, type=INTEGER macro=copy_from_plan
			body.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex].PriorityNumber = Int64ValueOrNil(varLoopBusinessPriorityNames.PriorityNumber)
		}
	}
	// property: name=clone_from, type=STRING macro=copy_from_plan
	body.CloneFrom = StringValueOrNil(plan.CloneFrom)
	// property: name=default_rule_dscp_mappings, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.DefaultRuleDscpMappings == nil {
		body.DefaultRuleDscpMappings = nil
	} else if len(plan.DefaultRuleDscpMappings) == 0 {
		body.DefaultRuleDscpMappings = []sdwan_schema.DefaultRuleDSCPMapping{}
	} else {
		body.DefaultRuleDscpMappings = make([]sdwan_schema.DefaultRuleDSCPMapping, 0, len(plan.DefaultRuleDscpMappings))
		for varLoopDefaultRuleDscpMappingsIndex, varLoopDefaultRuleDscpMappings := range plan.DefaultRuleDscpMappings {
			// add a new item
			body.DefaultRuleDscpMappings = append(body.DefaultRuleDscpMappings, sdwan_schema.DefaultRuleDSCPMapping{})
			// copy_from_plan: body=body.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex] prefix=rsModel plan=varLoopDefaultRuleDscpMappings properties=3
			// property: name=dscp, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].Dscp = ListInt64ValueOrNil(ctx, varLoopDefaultRuleDscpMappings.Dscp)
			// property: name=priority_number, type=INTEGER macro=copy_from_plan
			body.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].PriorityNumber = Int64ValueOrNil(varLoopDefaultRuleDscpMappings.PriorityNumber)
			// property: name=transfer_type, type=STRING macro=copy_from_plan
			body.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].TransferType = StringValueOrNil(varLoopDefaultRuleDscpMappings.TransferType)
		}
	}
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_from_plan
	body.DefaultrulePolicyset = BoolValueOrNil(plan.DefaultrulePolicyset)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=template, type=BOOLEAN macro=copy_from_plan
	body.Template = BoolValueOrNil(plan.Template)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct PriorityPolicySet to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_qos_policy_set", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_qos_policy_set",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_qos_policy_set", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_qos_policy_set",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_qos_policy_set", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.PriorityPolicySet
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PriorityPolicySet in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_qos_policy_set with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=PriorityPolicySet
	// copy_to_state: state=state prefix=rsModel ans=ans properties=12
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=bandwidth_allocation_schemes, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.BandwidthAllocationSchemes == nil {
		state.BandwidthAllocationSchemes = nil
	} else if len(ans.BandwidthAllocationSchemes) == 0 {
		state.BandwidthAllocationSchemes = []rsModelBandwidthAllocationSchemeV2{}
	} else {
		state.BandwidthAllocationSchemes = make([]rsModelBandwidthAllocationSchemeV2, 0, len(ans.BandwidthAllocationSchemes))
		for varLoopBandwidthAllocationSchemesIndex, varLoopBandwidthAllocationSchemes := range ans.BandwidthAllocationSchemes {
			// add a new item
			state.BandwidthAllocationSchemes = append(state.BandwidthAllocationSchemes, rsModelBandwidthAllocationSchemeV2{})
			// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex] prefix=rsModel ans=varLoopBandwidthAllocationSchemes properties=2
			// property: name=bandwidth_range, type=REFERENCE macro=copy_to_state
			if varLoopBandwidthAllocationSchemes.BandwidthRange == nil {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange = nil
			} else {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange = &rsModelBandwidthRange{}
				// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange prefix=rsModel ans=varLoopBandwidthAllocationSchemes.BandwidthRange properties=2
				// property: name=high, type=NUMBER macro=copy_to_state
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange.High = types.Float64PointerValue(varLoopBandwidthAllocationSchemes.BandwidthRange.High)
				// property: name=low, type=NUMBER macro=copy_to_state
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange.Low = types.Float64PointerValue(varLoopBandwidthAllocationSchemes.BandwidthRange.Low)
			}
			// property: name=business_priorities, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopBandwidthAllocationSchemes.BusinessPriorities == nil {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = nil
			} else if len(varLoopBandwidthAllocationSchemes.BusinessPriorities) == 0 {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = []rsModelBusinessPriorityV2{}
			} else {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = make([]rsModelBusinessPriorityV2, 0, len(varLoopBandwidthAllocationSchemes.BusinessPriorities))
				for varLoopBusinessPrioritiesIndex, varLoopBusinessPriorities := range varLoopBandwidthAllocationSchemes.BusinessPriorities {
					// add a new item
					state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = append(state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities, rsModelBusinessPriorityV2{})
					// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex] prefix=rsModel ans=varLoopBusinessPriorities properties=3
					// property: name=bandwidth_allocation, type=NUMBER macro=copy_to_state
					state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthAllocation = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthAllocation)
					// property: name=bandwidth_split_per_type, type=REFERENCE macro=copy_to_state
					if varLoopBusinessPriorities.BandwidthSplitPerType == nil {
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType = nil
					} else {
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType = &rsModelBandwidthSplit{}
						// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType prefix=rsModel ans=varLoopBusinessPriorities.BandwidthSplitPerType properties=4
						// property: name=bulk, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.Bulk = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.Bulk)
						// property: name=rt_audio, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.RtAudio = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.RtAudio)
						// property: name=rt_video, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.RtVideo = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.RtVideo)
						// property: name=transactional, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.Transactional = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.Transactional)
					}
					// property: name=priority_number, type=INTEGER macro=copy_to_state
					state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].PriorityNumber = types.Int64PointerValue(varLoopBusinessPriorities.PriorityNumber)
				}
			}
		}
	}
	// property: name=business_priority_names, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.BusinessPriorityNames == nil {
		state.BusinessPriorityNames = nil
	} else if len(ans.BusinessPriorityNames) == 0 {
		state.BusinessPriorityNames = []rsModelBusinessPriorityNameMapper{}
	} else {
		state.BusinessPriorityNames = make([]rsModelBusinessPriorityNameMapper, 0, len(ans.BusinessPriorityNames))
		for varLoopBusinessPriorityNamesIndex, varLoopBusinessPriorityNames := range ans.BusinessPriorityNames {
			// add a new item
			state.BusinessPriorityNames = append(state.BusinessPriorityNames, rsModelBusinessPriorityNameMapper{})
			// copy_to_state: state=state.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex] prefix=rsModel ans=varLoopBusinessPriorityNames properties=2
			// property: name=priority_name, type=STRING macro=copy_to_state
			state.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex].PriorityName = types.StringPointerValue(varLoopBusinessPriorityNames.PriorityName)
			// property: name=priority_number, type=INTEGER macro=copy_to_state
			state.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex].PriorityNumber = types.Int64PointerValue(varLoopBusinessPriorityNames.PriorityNumber)
		}
	}
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=default_rule_dscp_mappings, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DefaultRuleDscpMappings == nil {
		state.DefaultRuleDscpMappings = nil
	} else if len(ans.DefaultRuleDscpMappings) == 0 {
		state.DefaultRuleDscpMappings = []rsModelDefaultRuleDSCPMapping{}
	} else {
		state.DefaultRuleDscpMappings = make([]rsModelDefaultRuleDSCPMapping, 0, len(ans.DefaultRuleDscpMappings))
		for varLoopDefaultRuleDscpMappingsIndex, varLoopDefaultRuleDscpMappings := range ans.DefaultRuleDscpMappings {
			// add a new item
			state.DefaultRuleDscpMappings = append(state.DefaultRuleDscpMappings, rsModelDefaultRuleDSCPMapping{})
			// copy_to_state: state=state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex] prefix=rsModel ans=varLoopDefaultRuleDscpMappings properties=3
			// property: name=dscp, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDscp, errDscp := types.ListValueFrom(ctx, types.Int64Type, varLoopDefaultRuleDscpMappings.Dscp)
			state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].Dscp = varDscp
			resp.Diagnostics.Append(errDscp.Errors()...)
			// property: name=priority_number, type=INTEGER macro=copy_to_state
			state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].PriorityNumber = types.Int64PointerValue(varLoopDefaultRuleDscpMappings.PriorityNumber)
			// property: name=transfer_type, type=STRING macro=copy_to_state
			state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].TransferType = types.StringPointerValue(varLoopDefaultRuleDscpMappings.TransferType)
		}
	}
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_to_state
	state.DefaultrulePolicyset = types.BoolPointerValue(ans.DefaultrulePolicyset)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=template, type=BOOLEAN macro=copy_to_state
	state.Template = types.BoolPointerValue(ans.Template)
	return true
}

func (r *qosPolicySetResource) doGet(ctx context.Context, state *rsModelPriorityPolicySet, savestate *rsModelPriorityPolicySet, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_qos_policy_set",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_qos_policy_set ID format", "Expected 1 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_qos_policy_set"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/prioritypolicysets/{policy_set_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["policy_set_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_qos_policy_set", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_qos_policy_set",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_qos_policy_set from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=PriorityPolicySet
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.PriorityPolicySet
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PriorityPolicySet in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=12
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=bandwidth_allocation_schemes, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.BandwidthAllocationSchemes == nil {
		state.BandwidthAllocationSchemes = nil
	} else if len(ans.BandwidthAllocationSchemes) == 0 {
		state.BandwidthAllocationSchemes = []rsModelBandwidthAllocationSchemeV2{}
	} else {
		state.BandwidthAllocationSchemes = make([]rsModelBandwidthAllocationSchemeV2, 0, len(ans.BandwidthAllocationSchemes))
		for varLoopBandwidthAllocationSchemesIndex, varLoopBandwidthAllocationSchemes := range ans.BandwidthAllocationSchemes {
			// add a new item
			state.BandwidthAllocationSchemes = append(state.BandwidthAllocationSchemes, rsModelBandwidthAllocationSchemeV2{})
			// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex] prefix=rsModel ans=varLoopBandwidthAllocationSchemes properties=2
			// property: name=bandwidth_range, type=REFERENCE macro=copy_to_state
			if varLoopBandwidthAllocationSchemes.BandwidthRange == nil {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange = nil
			} else {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange = &rsModelBandwidthRange{}
				// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange prefix=rsModel ans=varLoopBandwidthAllocationSchemes.BandwidthRange properties=2
				// property: name=high, type=NUMBER macro=copy_to_state
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange.High = types.Float64PointerValue(varLoopBandwidthAllocationSchemes.BandwidthRange.High)
				// property: name=low, type=NUMBER macro=copy_to_state
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange.Low = types.Float64PointerValue(varLoopBandwidthAllocationSchemes.BandwidthRange.Low)
			}
			// property: name=business_priorities, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopBandwidthAllocationSchemes.BusinessPriorities == nil {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = nil
			} else if len(varLoopBandwidthAllocationSchemes.BusinessPriorities) == 0 {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = []rsModelBusinessPriorityV2{}
			} else {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = make([]rsModelBusinessPriorityV2, 0, len(varLoopBandwidthAllocationSchemes.BusinessPriorities))
				for varLoopBusinessPrioritiesIndex, varLoopBusinessPriorities := range varLoopBandwidthAllocationSchemes.BusinessPriorities {
					// add a new item
					state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = append(state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities, rsModelBusinessPriorityV2{})
					// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex] prefix=rsModel ans=varLoopBusinessPriorities properties=3
					// property: name=bandwidth_allocation, type=NUMBER macro=copy_to_state
					state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthAllocation = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthAllocation)
					// property: name=bandwidth_split_per_type, type=REFERENCE macro=copy_to_state
					if varLoopBusinessPriorities.BandwidthSplitPerType == nil {
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType = nil
					} else {
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType = &rsModelBandwidthSplit{}
						// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType prefix=rsModel ans=varLoopBusinessPriorities.BandwidthSplitPerType properties=4
						// property: name=bulk, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.Bulk = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.Bulk)
						// property: name=rt_audio, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.RtAudio = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.RtAudio)
						// property: name=rt_video, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.RtVideo = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.RtVideo)
						// property: name=transactional, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.Transactional = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.Transactional)
					}
					// property: name=priority_number, type=INTEGER macro=copy_to_state
					state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].PriorityNumber = types.Int64PointerValue(varLoopBusinessPriorities.PriorityNumber)
				}
			}
		}
	}
	// property: name=business_priority_names, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.BusinessPriorityNames == nil {
		state.BusinessPriorityNames = nil
	} else if len(ans.BusinessPriorityNames) == 0 {
		state.BusinessPriorityNames = []rsModelBusinessPriorityNameMapper{}
	} else {
		state.BusinessPriorityNames = make([]rsModelBusinessPriorityNameMapper, 0, len(ans.BusinessPriorityNames))
		for varLoopBusinessPriorityNamesIndex, varLoopBusinessPriorityNames := range ans.BusinessPriorityNames {
			// add a new item
			state.BusinessPriorityNames = append(state.BusinessPriorityNames, rsModelBusinessPriorityNameMapper{})
			// copy_to_state: state=state.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex] prefix=rsModel ans=varLoopBusinessPriorityNames properties=2
			// property: name=priority_name, type=STRING macro=copy_to_state
			state.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex].PriorityName = types.StringPointerValue(varLoopBusinessPriorityNames.PriorityName)
			// property: name=priority_number, type=INTEGER macro=copy_to_state
			state.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex].PriorityNumber = types.Int64PointerValue(varLoopBusinessPriorityNames.PriorityNumber)
		}
	}
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=default_rule_dscp_mappings, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DefaultRuleDscpMappings == nil {
		state.DefaultRuleDscpMappings = nil
	} else if len(ans.DefaultRuleDscpMappings) == 0 {
		state.DefaultRuleDscpMappings = []rsModelDefaultRuleDSCPMapping{}
	} else {
		state.DefaultRuleDscpMappings = make([]rsModelDefaultRuleDSCPMapping, 0, len(ans.DefaultRuleDscpMappings))
		for varLoopDefaultRuleDscpMappingsIndex, varLoopDefaultRuleDscpMappings := range ans.DefaultRuleDscpMappings {
			// add a new item
			state.DefaultRuleDscpMappings = append(state.DefaultRuleDscpMappings, rsModelDefaultRuleDSCPMapping{})
			// copy_to_state: state=state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex] prefix=rsModel ans=varLoopDefaultRuleDscpMappings properties=3
			// property: name=dscp, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDscp, errDscp := types.ListValueFrom(ctx, types.Int64Type, varLoopDefaultRuleDscpMappings.Dscp)
			state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].Dscp = varDscp
			resp.Diagnostics.Append(errDscp.Errors()...)
			// property: name=priority_number, type=INTEGER macro=copy_to_state
			state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].PriorityNumber = types.Int64PointerValue(varLoopDefaultRuleDscpMappings.PriorityNumber)
			// property: name=transfer_type, type=STRING macro=copy_to_state
			state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].TransferType = types.StringPointerValue(varLoopDefaultRuleDscpMappings.TransferType)
		}
	}
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_to_state
	state.DefaultrulePolicyset = types.BoolPointerValue(ans.DefaultrulePolicyset)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=template, type=BOOLEAN macro=copy_to_state
	state.Template = types.BoolPointerValue(ans.Template)
	return true
}

func (r *qosPolicySetResource) doPut(ctx context.Context, plan *rsModelPriorityPolicySet, state *rsModelPriorityPolicySet, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_qos_policy_set",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_qos_policy_set", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_qos_policy_set ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_qos_policy_set"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.0/api/prioritypolicysets/{policy_set_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["policy_set_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.PriorityPolicySet{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=12
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=bandwidth_allocation_schemes, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.BandwidthAllocationSchemes == nil && (state == nil || state.BandwidthAllocationSchemes == nil) {
		body.BandwidthAllocationSchemes = nil
	} else if len(plan.BandwidthAllocationSchemes) == 0 && (state == nil || len(state.BandwidthAllocationSchemes) == 0) {
		body.BandwidthAllocationSchemes = []sdwan_schema.BandwidthAllocationSchemeV2{}
	} else if len(plan.BandwidthAllocationSchemes) != 0 || (state != nil && len(state.BandwidthAllocationSchemes) != 0) {
		BandwidthAllocationSchemesToUse := plan.BandwidthAllocationSchemes
		if len(plan.BandwidthAllocationSchemes) == 0 {
			BandwidthAllocationSchemesToUse = state.BandwidthAllocationSchemes
		}
		body.BandwidthAllocationSchemes = make([]sdwan_schema.BandwidthAllocationSchemeV2, 0, len(BandwidthAllocationSchemesToUse))
		for varLoopBandwidthAllocationSchemesIndex, varLoopBandwidthAllocationSchemes := range BandwidthAllocationSchemesToUse {
			// add a new item
			body.BandwidthAllocationSchemes = append(body.BandwidthAllocationSchemes, sdwan_schema.BandwidthAllocationSchemeV2{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex] prefix=rsModel plan=varLoopBandwidthAllocationSchemes properties=2
			// property: name=bandwidth_range, type=REFERENCE macro=copy_from_plan
			if varLoopBandwidthAllocationSchemes.BandwidthRange != nil {
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange = &sdwan_schema.BandwidthRange{}
				// copy_from_plan: body=body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange prefix=rsModel plan=varLoopBandwidthAllocationSchemes.BandwidthRange properties=2
				// property: name=high, type=NUMBER macro=copy_from_plan
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange.High = Float64ValueOrNil(varLoopBandwidthAllocationSchemes.BandwidthRange.High)
				// property: name=low, type=NUMBER macro=copy_from_plan
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange.Low = Float64ValueOrNil(varLoopBandwidthAllocationSchemes.BandwidthRange.Low)
			}
			// property: name=business_priorities, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopBandwidthAllocationSchemes.BusinessPriorities == nil {
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = nil
			} else if len(varLoopBandwidthAllocationSchemes.BusinessPriorities) == 0 {
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = []sdwan_schema.BusinessPriorityV2{}
			} else {
				body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = make([]sdwan_schema.BusinessPriorityV2, 0, len(varLoopBandwidthAllocationSchemes.BusinessPriorities))
				for varLoopBusinessPrioritiesIndex, varLoopBusinessPriorities := range varLoopBandwidthAllocationSchemes.BusinessPriorities {
					// add a new item
					body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = append(body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities, sdwan_schema.BusinessPriorityV2{})
					// copy_from_plan: body=body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex] prefix=rsModel plan=varLoopBusinessPriorities properties=3
					// property: name=bandwidth_allocation, type=NUMBER macro=copy_from_plan
					body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthAllocation = Float64ValueOrNil(varLoopBusinessPriorities.BandwidthAllocation)
					// property: name=bandwidth_split_per_type, type=REFERENCE macro=copy_from_plan
					if varLoopBusinessPriorities.BandwidthSplitPerType != nil {
						body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType = &sdwan_schema.BandwidthSplit{}
						// copy_from_plan: body=body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType prefix=rsModel plan=varLoopBusinessPriorities.BandwidthSplitPerType properties=4
						// property: name=bulk, type=NUMBER macro=copy_from_plan
						body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.Bulk = Float64ValueOrNil(varLoopBusinessPriorities.BandwidthSplitPerType.Bulk)
						// property: name=rt_audio, type=NUMBER macro=copy_from_plan
						body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.RtAudio = Float64ValueOrNil(varLoopBusinessPriorities.BandwidthSplitPerType.RtAudio)
						// property: name=rt_video, type=NUMBER macro=copy_from_plan
						body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.RtVideo = Float64ValueOrNil(varLoopBusinessPriorities.BandwidthSplitPerType.RtVideo)
						// property: name=transactional, type=NUMBER macro=copy_from_plan
						body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.Transactional = Float64ValueOrNil(varLoopBusinessPriorities.BandwidthSplitPerType.Transactional)
					}
					// property: name=priority_number, type=INTEGER macro=copy_from_plan
					body.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].PriorityNumber = Int64ValueOrNil(varLoopBusinessPriorities.PriorityNumber)
				}
			}
		}
	}
	// property: name=business_priority_names, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.BusinessPriorityNames == nil && (state == nil || state.BusinessPriorityNames == nil) {
		body.BusinessPriorityNames = nil
	} else if len(plan.BusinessPriorityNames) == 0 && (state == nil || len(state.BusinessPriorityNames) == 0) {
		body.BusinessPriorityNames = []sdwan_schema.BusinessPriorityNameMapper{}
	} else if len(plan.BusinessPriorityNames) != 0 || (state != nil && len(state.BusinessPriorityNames) != 0) {
		BusinessPriorityNamesToUse := plan.BusinessPriorityNames
		if len(plan.BusinessPriorityNames) == 0 {
			BusinessPriorityNamesToUse = state.BusinessPriorityNames
		}
		body.BusinessPriorityNames = make([]sdwan_schema.BusinessPriorityNameMapper, 0, len(BusinessPriorityNamesToUse))
		for varLoopBusinessPriorityNamesIndex, varLoopBusinessPriorityNames := range BusinessPriorityNamesToUse {
			// add a new item
			body.BusinessPriorityNames = append(body.BusinessPriorityNames, sdwan_schema.BusinessPriorityNameMapper{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex] prefix=rsModel plan=varLoopBusinessPriorityNames properties=2
			// property: name=priority_name, type=STRING macro=copy_from_plan
			body.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex].PriorityName = StringValueOrNil(varLoopBusinessPriorityNames.PriorityName)
			// property: name=priority_number, type=INTEGER macro=copy_from_plan
			body.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex].PriorityNumber = Int64ValueOrNil(varLoopBusinessPriorityNames.PriorityNumber)
		}
	}
	// property: name=clone_from, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.CloneFrom = ValueStringPointerFromPlanOrState(plan.CloneFrom, state.CloneFrom)
	} else {
		body.CloneFrom = StringValueOrNil(plan.CloneFrom)
	}
	// property: name=default_rule_dscp_mappings, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.DefaultRuleDscpMappings == nil && (state == nil || state.DefaultRuleDscpMappings == nil) {
		body.DefaultRuleDscpMappings = nil
	} else if len(plan.DefaultRuleDscpMappings) == 0 && (state == nil || len(state.DefaultRuleDscpMappings) == 0) {
		body.DefaultRuleDscpMappings = []sdwan_schema.DefaultRuleDSCPMapping{}
	} else if len(plan.DefaultRuleDscpMappings) != 0 || (state != nil && len(state.DefaultRuleDscpMappings) != 0) {
		DefaultRuleDscpMappingsToUse := plan.DefaultRuleDscpMappings
		if len(plan.DefaultRuleDscpMappings) == 0 {
			DefaultRuleDscpMappingsToUse = state.DefaultRuleDscpMappings
		}
		body.DefaultRuleDscpMappings = make([]sdwan_schema.DefaultRuleDSCPMapping, 0, len(DefaultRuleDscpMappingsToUse))
		for varLoopDefaultRuleDscpMappingsIndex, varLoopDefaultRuleDscpMappings := range DefaultRuleDscpMappingsToUse {
			// add a new item
			body.DefaultRuleDscpMappings = append(body.DefaultRuleDscpMappings, sdwan_schema.DefaultRuleDSCPMapping{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex] prefix=rsModel plan=varLoopDefaultRuleDscpMappings properties=3
			// property: name=dscp, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].Dscp = ListInt64ValueOrNil(ctx, varLoopDefaultRuleDscpMappings.Dscp)
			// property: name=priority_number, type=INTEGER macro=copy_from_plan
			body.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].PriorityNumber = Int64ValueOrNil(varLoopDefaultRuleDscpMappings.PriorityNumber)
			// property: name=transfer_type, type=STRING macro=copy_from_plan
			body.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].TransferType = StringValueOrNil(varLoopDefaultRuleDscpMappings.TransferType)
		}
	}
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.DefaultrulePolicyset = ValueBoolPointerFromPlanOrState(plan.DefaultrulePolicyset, state.DefaultrulePolicyset)
	} else {
		body.DefaultrulePolicyset = BoolValueOrNil(plan.DefaultrulePolicyset)
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=template, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Template = ValueBoolPointerFromPlanOrState(plan.Template, state.Template)
	} else {
		body.Template = BoolValueOrNil(plan.Template)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct PriorityPolicySet to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_qos_policy_set", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_qos_policy_set",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_qos_policy_set", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_qos_policy_set",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_qos_policy_set", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.PriorityPolicySet
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to PriorityPolicySet in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=PriorityPolicySet
	// copy_to_state: state=state prefix=rsModel ans=ans properties=12
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=bandwidth_allocation_schemes, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.BandwidthAllocationSchemes == nil {
		state.BandwidthAllocationSchemes = nil
	} else if len(ans.BandwidthAllocationSchemes) == 0 {
		state.BandwidthAllocationSchemes = []rsModelBandwidthAllocationSchemeV2{}
	} else {
		state.BandwidthAllocationSchemes = make([]rsModelBandwidthAllocationSchemeV2, 0, len(ans.BandwidthAllocationSchemes))
		for varLoopBandwidthAllocationSchemesIndex, varLoopBandwidthAllocationSchemes := range ans.BandwidthAllocationSchemes {
			// add a new item
			state.BandwidthAllocationSchemes = append(state.BandwidthAllocationSchemes, rsModelBandwidthAllocationSchemeV2{})
			// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex] prefix=rsModel ans=varLoopBandwidthAllocationSchemes properties=2
			// property: name=bandwidth_range, type=REFERENCE macro=copy_to_state
			if varLoopBandwidthAllocationSchemes.BandwidthRange == nil {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange = nil
			} else {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange = &rsModelBandwidthRange{}
				// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange prefix=rsModel ans=varLoopBandwidthAllocationSchemes.BandwidthRange properties=2
				// property: name=high, type=NUMBER macro=copy_to_state
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange.High = types.Float64PointerValue(varLoopBandwidthAllocationSchemes.BandwidthRange.High)
				// property: name=low, type=NUMBER macro=copy_to_state
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BandwidthRange.Low = types.Float64PointerValue(varLoopBandwidthAllocationSchemes.BandwidthRange.Low)
			}
			// property: name=business_priorities, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopBandwidthAllocationSchemes.BusinessPriorities == nil {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = nil
			} else if len(varLoopBandwidthAllocationSchemes.BusinessPriorities) == 0 {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = []rsModelBusinessPriorityV2{}
			} else {
				state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = make([]rsModelBusinessPriorityV2, 0, len(varLoopBandwidthAllocationSchemes.BusinessPriorities))
				for varLoopBusinessPrioritiesIndex, varLoopBusinessPriorities := range varLoopBandwidthAllocationSchemes.BusinessPriorities {
					// add a new item
					state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities = append(state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities, rsModelBusinessPriorityV2{})
					// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex] prefix=rsModel ans=varLoopBusinessPriorities properties=3
					// property: name=bandwidth_allocation, type=NUMBER macro=copy_to_state
					state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthAllocation = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthAllocation)
					// property: name=bandwidth_split_per_type, type=REFERENCE macro=copy_to_state
					if varLoopBusinessPriorities.BandwidthSplitPerType == nil {
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType = nil
					} else {
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType = &rsModelBandwidthSplit{}
						// copy_to_state: state=state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType prefix=rsModel ans=varLoopBusinessPriorities.BandwidthSplitPerType properties=4
						// property: name=bulk, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.Bulk = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.Bulk)
						// property: name=rt_audio, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.RtAudio = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.RtAudio)
						// property: name=rt_video, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.RtVideo = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.RtVideo)
						// property: name=transactional, type=NUMBER macro=copy_to_state
						state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].BandwidthSplitPerType.Transactional = types.Float64PointerValue(varLoopBusinessPriorities.BandwidthSplitPerType.Transactional)
					}
					// property: name=priority_number, type=INTEGER macro=copy_to_state
					state.BandwidthAllocationSchemes[varLoopBandwidthAllocationSchemesIndex].BusinessPriorities[varLoopBusinessPrioritiesIndex].PriorityNumber = types.Int64PointerValue(varLoopBusinessPriorities.PriorityNumber)
				}
			}
		}
	}
	// property: name=business_priority_names, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.BusinessPriorityNames == nil {
		state.BusinessPriorityNames = nil
	} else if len(ans.BusinessPriorityNames) == 0 {
		state.BusinessPriorityNames = []rsModelBusinessPriorityNameMapper{}
	} else {
		state.BusinessPriorityNames = make([]rsModelBusinessPriorityNameMapper, 0, len(ans.BusinessPriorityNames))
		for varLoopBusinessPriorityNamesIndex, varLoopBusinessPriorityNames := range ans.BusinessPriorityNames {
			// add a new item
			state.BusinessPriorityNames = append(state.BusinessPriorityNames, rsModelBusinessPriorityNameMapper{})
			// copy_to_state: state=state.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex] prefix=rsModel ans=varLoopBusinessPriorityNames properties=2
			// property: name=priority_name, type=STRING macro=copy_to_state
			state.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex].PriorityName = types.StringPointerValue(varLoopBusinessPriorityNames.PriorityName)
			// property: name=priority_number, type=INTEGER macro=copy_to_state
			state.BusinessPriorityNames[varLoopBusinessPriorityNamesIndex].PriorityNumber = types.Int64PointerValue(varLoopBusinessPriorityNames.PriorityNumber)
		}
	}
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=default_rule_dscp_mappings, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DefaultRuleDscpMappings == nil {
		state.DefaultRuleDscpMappings = nil
	} else if len(ans.DefaultRuleDscpMappings) == 0 {
		state.DefaultRuleDscpMappings = []rsModelDefaultRuleDSCPMapping{}
	} else {
		state.DefaultRuleDscpMappings = make([]rsModelDefaultRuleDSCPMapping, 0, len(ans.DefaultRuleDscpMappings))
		for varLoopDefaultRuleDscpMappingsIndex, varLoopDefaultRuleDscpMappings := range ans.DefaultRuleDscpMappings {
			// add a new item
			state.DefaultRuleDscpMappings = append(state.DefaultRuleDscpMappings, rsModelDefaultRuleDSCPMapping{})
			// copy_to_state: state=state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex] prefix=rsModel ans=varLoopDefaultRuleDscpMappings properties=3
			// property: name=dscp, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDscp, errDscp := types.ListValueFrom(ctx, types.Int64Type, varLoopDefaultRuleDscpMappings.Dscp)
			state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].Dscp = varDscp
			resp.Diagnostics.Append(errDscp.Errors()...)
			// property: name=priority_number, type=INTEGER macro=copy_to_state
			state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].PriorityNumber = types.Int64PointerValue(varLoopDefaultRuleDscpMappings.PriorityNumber)
			// property: name=transfer_type, type=STRING macro=copy_to_state
			state.DefaultRuleDscpMappings[varLoopDefaultRuleDscpMappingsIndex].TransferType = types.StringPointerValue(varLoopDefaultRuleDscpMappings.TransferType)
		}
	}
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_to_state
	state.DefaultrulePolicyset = types.BoolPointerValue(ans.DefaultrulePolicyset)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=template, type=BOOLEAN macro=copy_to_state
	state.Template = types.BoolPointerValue(ans.Template)
	return true
}

func (r *qosPolicySetResource) doDelete(ctx context.Context, state *rsModelPriorityPolicySet, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_qos_policy_set",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_qos_policy_set ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_qos_policy_set"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.0/api/prioritypolicysets/{policy_set_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["policy_set_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_qos_policy_set", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *qosPolicySetResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_qos_policy_set")
	var plan rsModelPriorityPolicySet
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelPriorityPolicySet
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *qosPolicySetResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_qos_policy_set")
	var savestate, state rsModelPriorityPolicySet
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *qosPolicySetResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_qos_policy_set")
	var plan, state rsModelPriorityPolicySet
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *qosPolicySetResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_qos_policy_set")
	var state rsModelPriorityPolicySet
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *qosPolicySetResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
