package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=7)
// | Computed Resource Name=sites_prismasase_connections
// +-----------------------------------------------------------------
// | RoutingConfigs HasID=false
// | Routing HasID=false
// | IPSecTunnelAuthentication HasID=false
// | IPSecTunnel HasID=false
// | RemoteNetworkGroup HasID=false
// | IPSecTunnelConfigs HasID=false
// | SaseConnectionScreenV2N1 HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &sitePrismaSaseConnectionResource{}
	_ resource.ResourceWithConfigure   = &sitePrismaSaseConnectionResource{}
	_ resource.ResourceWithImportState = &sitePrismaSaseConnectionResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewSitePrismaSaseConnectionResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewSitePrismaSaseConnectionResource() resource.Resource {
	return &sitePrismaSaseConnectionResource{}
}

type sitePrismaSaseConnectionResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *sitePrismaSaseConnectionResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_site_prisma_sase_connection"
}

// Schema defines the schema for this data source.
func (r *sitePrismaSaseConnectionResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=SaseConnectionScreenV2N1
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=enabled_wan_interface_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			"enabled_wan_interface_ids": rsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=enabled_wan_interface_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=ipsec_tunnel_configs, type=REFERENCE macro=rss_schema
			"ipsec_tunnel_configs": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=anti_replay, type=BOOLEAN macro=rss_schema
					"anti_replay": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=anti_replay, type=BOOLEAN macro=rss_schema
					// property: name=copy_tos, type=BOOLEAN macro=rss_schema
					"copy_tos": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=copy_tos, type=BOOLEAN macro=rss_schema
					// property: name=enable_gre_encapsulation, type=BOOLEAN macro=rss_schema
					"enable_gre_encapsulation": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=enable_gre_encapsulation, type=BOOLEAN macro=rss_schema
					// property: name=ike_key_exchange, type=STRING macro=rss_schema
					"ike_key_exchange": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=ike_key_exchange, type=STRING macro=rss_schema
					// property: name=prismaaccess_ike_crypto_profile_id, type=STRING macro=rss_schema
					"prismaaccess_ike_crypto_profile_id": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=prismaaccess_ike_crypto_profile_id, type=STRING macro=rss_schema
					// property: name=prismaaccess_ipsec_profile_id, type=STRING macro=rss_schema
					"prismaaccess_ipsec_profile_id": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=prismaaccess_ipsec_profile_id, type=STRING macro=rss_schema
					// property: name=tunnel_monitoring, type=BOOLEAN macro=rss_schema
					"tunnel_monitoring": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=tunnel_monitoring, type=BOOLEAN macro=rss_schema
				},
			},
			// key name holder for attribute: name=tunnel_monitoring, type=BOOLEAN macro=rss_schema
			// property: name=is_active, type=BOOLEAN macro=rss_schema
			"is_active": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_active, type=BOOLEAN macro=rss_schema
			// property: name=is_enabled, type=BOOLEAN macro=rss_schema
			"is_enabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_enabled, type=BOOLEAN macro=rss_schema
			// property: name=prismaaccess_edge_location, type=ARRAY_PRIMITIVE macro=rss_schema
			"prismaaccess_edge_location": rsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=prismaaccess_edge_location, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=prismaaccess_qos_cir_mbps, type=INTEGER macro=rss_schema
			"prismaaccess_qos_cir_mbps": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=prismaaccess_qos_cir_mbps, type=INTEGER macro=rss_schema
			// property: name=prismaaccess_qos_profile_id, type=STRING macro=rss_schema
			"prismaaccess_qos_profile_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=prismaaccess_qos_profile_id, type=STRING macro=rss_schema
			// property: name=remote_network_groups, type=ARRAY_REFERENCE macro=rss_schema
			"remote_network_groups": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=ipsec_tunnels, type=ARRAY_REFERENCE macro=rss_schema
						"ipsec_tunnels": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=authentication, type=REFERENCE macro=rss_schema
									"authentication": rsschema.SingleNestedAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
										Attributes: map[string]rsschema.Attribute{
											// property: name=branch_ike_identification, type=STRING macro=rss_schema
											"branch_ike_identification": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=branch_ike_identification, type=STRING macro=rss_schema
											// property: name=prismaaccess_ike_identification, type=STRING macro=rss_schema
											"prismaaccess_ike_identification": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=prismaaccess_ike_identification, type=STRING macro=rss_schema
											// property: name=psk, type=STRING macro=rss_schema
											"psk": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=psk, type=STRING macro=rss_schema
										},
									},
									// key name holder for attribute: name=psk, type=STRING macro=rss_schema
									// property: name=name, type=STRING macro=rss_schema
									"name": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=name, type=STRING macro=rss_schema
									// property: name=routing, type=REFERENCE macro=rss_schema
									"routing": rsschema.SingleNestedAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
										Attributes: map[string]rsschema.Attribute{
											// property: name=branch_as_number, type=STRING macro=rss_schema
											"branch_as_number": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=branch_as_number, type=STRING macro=rss_schema
											// property: name=branch_ip_address, type=STRING macro=rss_schema
											"branch_ip_address": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=branch_ip_address, type=STRING macro=rss_schema
											// property: name=prismaaccess_ip_address, type=STRING macro=rss_schema
											"prismaaccess_ip_address": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=prismaaccess_ip_address, type=STRING macro=rss_schema
										},
									},
									// key name holder for attribute: name=prismaaccess_ip_address, type=STRING macro=rss_schema
									// property: name=routing_configs, type=REFERENCE macro=rss_schema
									"routing_configs": rsschema.SingleNestedAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
										Attributes: map[string]rsschema.Attribute{
											// property: name=advertise_default_route, type=BOOLEAN macro=rss_schema
											"advertise_default_route": rsschema.BoolAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=advertise_default_route, type=BOOLEAN macro=rss_schema
											// property: name=bgp_secret, type=STRING macro=rss_schema
											"bgp_secret": rsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: true,
											},
											// key name holder for attribute: name=bgp_secret, type=STRING macro=rss_schema
											"bgp_secret_internal_key_name": rsschema.StringAttribute{
												Required:  false,
												Computed:  true,
												Optional:  true,
												Sensitive: false,
											},
											// property: name=export_routes, type=BOOLEAN macro=rss_schema
											"export_routes": rsschema.BoolAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=export_routes, type=BOOLEAN macro=rss_schema
											// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=rss_schema
											"summarize_mobile_routes_before_advertise": rsschema.BoolAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=rss_schema
										},
									},
									// key name holder for attribute: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=rss_schema
									// property: name=wan_interface_id, type=STRING macro=rss_schema
									"wan_interface_id": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=wan_interface_id, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=wan_interface_id, type=STRING macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=spn_name, type=ARRAY_PRIMITIVE macro=rss_schema
						"spn_name": rsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=spn_name, type=ARRAY_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=spn_name, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=routing_configs, type=REFERENCE macro=rss_schema
			"routing_configs": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=advertise_default_route, type=BOOLEAN macro=rss_schema
					"advertise_default_route": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=advertise_default_route, type=BOOLEAN macro=rss_schema
					// property: name=bgp_secret, type=STRING macro=rss_schema
					"bgp_secret": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: true,
					},
					// key name holder for attribute: name=bgp_secret, type=STRING macro=rss_schema
					"bgp_secret_internal_key_name": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// property: name=export_routes, type=BOOLEAN macro=rss_schema
					"export_routes": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=export_routes, type=BOOLEAN macro=rss_schema
					// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=rss_schema
					"summarize_mobile_routes_before_advertise": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=rss_schema
				},
			},
			// key name holder for attribute: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=rss_schema
			// property: name=site_id, type=STRING macro=rss_schema
			"site_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=site_id, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *sitePrismaSaseConnectionResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *sitePrismaSaseConnectionResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *sitePrismaSaseConnectionResource) doPost(ctx context.Context, plan *rsModelSaseConnectionScreenV2N1, state *rsModelSaseConnectionScreenV2N1, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_site_prisma_sase_connection")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_site_prisma_sase_connection",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_site_prisma_sase_connection"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.1/api/sites/{site_id}/prismasase_connections"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, plan.TfParameters)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.SaseConnectionScreenV2N1{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=13
	tflog.Debug(ctx, "copy_from_plan body=body prefix=rsModel plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=enabled_wan_interface_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.EnabledWanInterfaceIds = ListStringValueOrNil(ctx, plan.EnabledWanInterfaceIds)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=ipsec_tunnel_configs, type=REFERENCE macro=copy_from_plan
	if plan.IpsecTunnelConfigs != nil {
		body.IpsecTunnelConfigs = &sdwan_schema.IPSecTunnelConfigs{}
		// copy_from_plan: body=body.IpsecTunnelConfigs prefix=rsModel plan=plan.IpsecTunnelConfigs properties=7
		tflog.Debug(ctx, "copy_from_plan body=body.IpsecTunnelConfigs prefix=rsModel plan=plan.IpsecTunnelConfigs")
		// property: name=anti_replay, type=BOOLEAN macro=copy_from_plan
		body.IpsecTunnelConfigs.AntiReplay = BoolValueOrNil(plan.IpsecTunnelConfigs.AntiReplay)
		// property: name=copy_tos, type=BOOLEAN macro=copy_from_plan
		body.IpsecTunnelConfigs.CopyTos = BoolValueOrNil(plan.IpsecTunnelConfigs.CopyTos)
		// property: name=enable_gre_encapsulation, type=BOOLEAN macro=copy_from_plan
		body.IpsecTunnelConfigs.EnableGreEncapsulation = BoolValueOrNil(plan.IpsecTunnelConfigs.EnableGreEncapsulation)
		// property: name=ike_key_exchange, type=STRING macro=copy_from_plan
		body.IpsecTunnelConfigs.IkeKeyExchange = StringValueOrNil(plan.IpsecTunnelConfigs.IkeKeyExchange)
		// property: name=prismaaccess_ike_crypto_profile_id, type=STRING macro=copy_from_plan
		body.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId = StringValueOrNil(plan.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId)
		// property: name=prismaaccess_ipsec_profile_id, type=STRING macro=copy_from_plan
		body.IpsecTunnelConfigs.PrismaaccessIpsecProfileId = StringValueOrNil(plan.IpsecTunnelConfigs.PrismaaccessIpsecProfileId)
		// property: name=tunnel_monitoring, type=BOOLEAN macro=copy_from_plan
		body.IpsecTunnelConfigs.TunnelMonitoring = BoolValueOrNil(plan.IpsecTunnelConfigs.TunnelMonitoring)
	}
	// property: name=is_active, type=BOOLEAN macro=copy_from_plan
	body.IsActive = BoolValueOrNil(plan.IsActive)
	// property: name=is_enabled, type=BOOLEAN macro=copy_from_plan
	body.IsEnabled = BoolValueOrNil(plan.IsEnabled)
	// property: name=prismaaccess_edge_location, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.PrismaaccessEdgeLocation = ListStringValueOrNil(ctx, plan.PrismaaccessEdgeLocation)
	// property: name=prismaaccess_qos_cir_mbps, type=INTEGER macro=copy_from_plan
	body.PrismaaccessQosCirMbps = Int64ValueOrNil(plan.PrismaaccessQosCirMbps)
	// property: name=prismaaccess_qos_profile_id, type=STRING macro=copy_from_plan
	body.PrismaaccessQosProfileId = StringValueOrNil(plan.PrismaaccessQosProfileId)
	// property: name=remote_network_groups, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.RemoteNetworkGroups == nil {
		body.RemoteNetworkGroups = nil
	} else if len(plan.RemoteNetworkGroups) == 0 {
		body.RemoteNetworkGroups = []sdwan_schema.RemoteNetworkGroup{}
	} else {
		body.RemoteNetworkGroups = make([]sdwan_schema.RemoteNetworkGroup, 0, len(plan.RemoteNetworkGroups))
		for varLoopRemoteNetworkGroupsIndex, varLoopRemoteNetworkGroups := range plan.RemoteNetworkGroups {
			// add a new item
			body.RemoteNetworkGroups = append(body.RemoteNetworkGroups, sdwan_schema.RemoteNetworkGroup{})
			// copy_from_plan: body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex] prefix=rsModel plan=varLoopRemoteNetworkGroups properties=3
			tflog.Debug(ctx, "copy_from_plan body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex] prefix=rsModel plan=varLoopRemoteNetworkGroups")
			// property: name=ipsec_tunnels, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopRemoteNetworkGroups.IpsecTunnels == nil {
				body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = nil
			} else if len(varLoopRemoteNetworkGroups.IpsecTunnels) == 0 {
				body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = []sdwan_schema.IPSecTunnel{}
			} else {
				body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = make([]sdwan_schema.IPSecTunnel, 0, len(varLoopRemoteNetworkGroups.IpsecTunnels))
				for varLoopIpsecTunnelsIndex, varLoopIpsecTunnels := range varLoopRemoteNetworkGroups.IpsecTunnels {
					// add a new item
					body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = append(body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels, sdwan_schema.IPSecTunnel{})
					// copy_from_plan: body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex] prefix=rsModel plan=varLoopIpsecTunnels properties=5
					tflog.Debug(ctx, "copy_from_plan body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex] prefix=rsModel plan=varLoopIpsecTunnels")
					// property: name=authentication, type=REFERENCE macro=copy_from_plan
					if varLoopIpsecTunnels.Authentication != nil {
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication = &sdwan_schema.IPSecTunnelAuthentication{}
						// copy_from_plan: body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication prefix=rsModel plan=varLoopIpsecTunnels.Authentication properties=3
						tflog.Debug(ctx, "copy_from_plan body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication prefix=rsModel plan=varLoopIpsecTunnels.Authentication")
						// property: name=branch_ike_identification, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.BranchIkeIdentification = StringValueOrNil(varLoopIpsecTunnels.Authentication.BranchIkeIdentification)
						// property: name=prismaaccess_ike_identification, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.PrismaaccessIkeIdentification = StringValueOrNil(varLoopIpsecTunnels.Authentication.PrismaaccessIkeIdentification)
						// property: name=psk, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.Psk = StringValueOrNil(varLoopIpsecTunnels.Authentication.Psk)
					}
					// property: name=name, type=STRING macro=copy_from_plan
					body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Name = StringValueOrNil(varLoopIpsecTunnels.Name)
					// property: name=routing, type=REFERENCE macro=copy_from_plan
					if varLoopIpsecTunnels.Routing != nil {
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing = &sdwan_schema.Routing{}
						// copy_from_plan: body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing prefix=rsModel plan=varLoopIpsecTunnels.Routing properties=3
						tflog.Debug(ctx, "copy_from_plan body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing prefix=rsModel plan=varLoopIpsecTunnels.Routing")
						// property: name=branch_as_number, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.BranchAsNumber = StringValueOrNil(varLoopIpsecTunnels.Routing.BranchAsNumber)
						// property: name=branch_ip_address, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.BranchIpAddress = StringValueOrNil(varLoopIpsecTunnels.Routing.BranchIpAddress)
						// property: name=prismaaccess_ip_address, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.PrismaaccessIpAddress = StringValueOrNil(varLoopIpsecTunnels.Routing.PrismaaccessIpAddress)
					}
					// property: name=routing_configs, type=REFERENCE macro=copy_from_plan
					if varLoopIpsecTunnels.RoutingConfigs != nil {
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs = &sdwan_schema.RoutingConfigs{}
						// copy_from_plan: body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs prefix=rsModel plan=varLoopIpsecTunnels.RoutingConfigs properties=4
						tflog.Debug(ctx, "copy_from_plan body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs prefix=rsModel plan=varLoopIpsecTunnels.RoutingConfigs")
						// property: name=advertise_default_route, type=BOOLEAN macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.AdvertiseDefaultRoute = BoolValueOrNil(varLoopIpsecTunnels.RoutingConfigs.AdvertiseDefaultRoute)
						// property: name=bgp_secret, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret = StringValueOrNil(varLoopIpsecTunnels.RoutingConfigs.BgpSecret)
						// property: name=export_routes, type=BOOLEAN macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.ExportRoutes = BoolValueOrNil(varLoopIpsecTunnels.RoutingConfigs.ExportRoutes)
						// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = BoolValueOrNil(varLoopIpsecTunnels.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
					}
					// property: name=wan_interface_id, type=STRING macro=copy_from_plan
					body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].WanInterfaceId = StringValueOrNil(varLoopIpsecTunnels.WanInterfaceId)
				}
			}
			// property: name=name, type=STRING macro=copy_from_plan
			body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].Name = StringValueOrNil(varLoopRemoteNetworkGroups.Name)
			// property: name=spn_name, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].SpnName = ListStringValueOrNil(ctx, varLoopRemoteNetworkGroups.SpnName)
		}
	}
	// property: name=routing_configs, type=REFERENCE macro=copy_from_plan
	if plan.RoutingConfigs != nil {
		body.RoutingConfigs = &sdwan_schema.RoutingConfigs{}
		// copy_from_plan: body=body.RoutingConfigs prefix=rsModel plan=plan.RoutingConfigs properties=4
		tflog.Debug(ctx, "copy_from_plan body=body.RoutingConfigs prefix=rsModel plan=plan.RoutingConfigs")
		// property: name=advertise_default_route, type=BOOLEAN macro=copy_from_plan
		body.RoutingConfigs.AdvertiseDefaultRoute = BoolValueOrNil(plan.RoutingConfigs.AdvertiseDefaultRoute)
		// property: name=bgp_secret, type=STRING macro=copy_from_plan
		body.RoutingConfigs.BgpSecret = StringValueOrNil(plan.RoutingConfigs.BgpSecret)
		// property: name=export_routes, type=BOOLEAN macro=copy_from_plan
		body.RoutingConfigs.ExportRoutes = BoolValueOrNil(plan.RoutingConfigs.ExportRoutes)
		// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=copy_from_plan
		body.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = BoolValueOrNil(plan.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
	}
	// property: name=site_id, type=STRING macro=copy_from_plan
	body.SiteId = StringValueOrNil(plan.SiteId)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct SaseConnectionScreenV2N1 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete request_body_string::id")
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	tflog.Debug(ctx, "http json override: delete request_body_string::_etag")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	tflog.Debug(ctx, "http json override: set request_body_string::_schema")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_site_prisma_sase_connection", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_site_prisma_sase_connection",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_site_prisma_sase_connection", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_site_prisma_sase_connection",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_site_prisma_sase_connection", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.SaseConnectionScreenV2N1
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to SaseConnectionScreenV2N1 in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_site_prisma_sase_connection with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=SaseConnectionScreenV2N1
	// copy_to_state: state=state prefix=rsModel ans=ans properties=13
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=enabled_wan_interface_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varEnabledWanInterfaceIds, errEnabledWanInterfaceIds := types.ListValueFrom(ctx, types.StringType, ans.EnabledWanInterfaceIds)
	state.EnabledWanInterfaceIds = varEnabledWanInterfaceIds
	resp.Diagnostics.Append(errEnabledWanInterfaceIds.Errors()...)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipsec_tunnel_configs, type=REFERENCE macro=copy_to_state
	if ans.IpsecTunnelConfigs == nil {
		state.IpsecTunnelConfigs = nil
	} else {
		state.IpsecTunnelConfigs = &rsModelIPSecTunnelConfigs{}
		// copy_to_state: state=state.IpsecTunnelConfigs prefix=rsModel ans=ans.IpsecTunnelConfigs properties=7
		tflog.Debug(ctx, "copy_to_state state=state.IpsecTunnelConfigs prefix=rsModel ans=ans.IpsecTunnelConfigs")
		// property: name=anti_replay, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.AntiReplay = types.BoolPointerValue(ans.IpsecTunnelConfigs.AntiReplay)
		// property: name=copy_tos, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.CopyTos = types.BoolPointerValue(ans.IpsecTunnelConfigs.CopyTos)
		// property: name=enable_gre_encapsulation, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.EnableGreEncapsulation = types.BoolPointerValue(ans.IpsecTunnelConfigs.EnableGreEncapsulation)
		// property: name=ike_key_exchange, type=STRING macro=copy_to_state
		state.IpsecTunnelConfigs.IkeKeyExchange = types.StringPointerValue(ans.IpsecTunnelConfigs.IkeKeyExchange)
		// property: name=prismaaccess_ike_crypto_profile_id, type=STRING macro=copy_to_state
		state.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId = types.StringPointerValue(ans.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId)
		// property: name=prismaaccess_ipsec_profile_id, type=STRING macro=copy_to_state
		state.IpsecTunnelConfigs.PrismaaccessIpsecProfileId = types.StringPointerValue(ans.IpsecTunnelConfigs.PrismaaccessIpsecProfileId)
		// property: name=tunnel_monitoring, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.TunnelMonitoring = types.BoolPointerValue(ans.IpsecTunnelConfigs.TunnelMonitoring)
	}
	// property: name=is_active, type=BOOLEAN macro=copy_to_state
	state.IsActive = types.BoolPointerValue(ans.IsActive)
	// property: name=is_enabled, type=BOOLEAN macro=copy_to_state
	state.IsEnabled = types.BoolPointerValue(ans.IsEnabled)
	// property: name=prismaaccess_edge_location, type=ARRAY_PRIMITIVE macro=copy_to_state
	varPrismaaccessEdgeLocation, errPrismaaccessEdgeLocation := types.ListValueFrom(ctx, types.StringType, ans.PrismaaccessEdgeLocation)
	state.PrismaaccessEdgeLocation = varPrismaaccessEdgeLocation
	resp.Diagnostics.Append(errPrismaaccessEdgeLocation.Errors()...)
	// property: name=prismaaccess_qos_cir_mbps, type=INTEGER macro=copy_to_state
	state.PrismaaccessQosCirMbps = types.Int64PointerValue(ans.PrismaaccessQosCirMbps)
	// property: name=prismaaccess_qos_profile_id, type=STRING macro=copy_to_state
	state.PrismaaccessQosProfileId = types.StringPointerValue(ans.PrismaaccessQosProfileId)
	// property: name=remote_network_groups, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.RemoteNetworkGroups == nil {
		state.RemoteNetworkGroups = nil
	} else if len(ans.RemoteNetworkGroups) == 0 {
		state.RemoteNetworkGroups = []rsModelRemoteNetworkGroup{}
	} else {
		state.RemoteNetworkGroups = make([]rsModelRemoteNetworkGroup, 0, len(ans.RemoteNetworkGroups))
		for varLoopRemoteNetworkGroupsIndex, varLoopRemoteNetworkGroups := range ans.RemoteNetworkGroups {
			// add a new item
			state.RemoteNetworkGroups = append(state.RemoteNetworkGroups, rsModelRemoteNetworkGroup{})
			// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex] prefix=rsModel ans=varLoopRemoteNetworkGroups properties=3
			tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex] prefix=rsModel ans=varLoopRemoteNetworkGroups")
			// property: name=ipsec_tunnels, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopRemoteNetworkGroups.IpsecTunnels == nil {
				state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = nil
			} else if len(varLoopRemoteNetworkGroups.IpsecTunnels) == 0 {
				state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = []rsModelIPSecTunnel{}
			} else {
				state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = make([]rsModelIPSecTunnel, 0, len(varLoopRemoteNetworkGroups.IpsecTunnels))
				for varLoopIpsecTunnelsIndex, varLoopIpsecTunnels := range varLoopRemoteNetworkGroups.IpsecTunnels {
					// add a new item
					state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = append(state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels, rsModelIPSecTunnel{})
					// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex] prefix=rsModel ans=varLoopIpsecTunnels properties=5
					tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex] prefix=rsModel ans=varLoopIpsecTunnels")
					// property: name=authentication, type=REFERENCE macro=copy_to_state
					if varLoopIpsecTunnels.Authentication == nil {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication = nil
					} else {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication = &rsModelIPSecTunnelAuthentication{}
						// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication prefix=rsModel ans=varLoopIpsecTunnels.Authentication properties=3
						tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication prefix=rsModel ans=varLoopIpsecTunnels.Authentication")
						// property: name=branch_ike_identification, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.BranchIkeIdentification = types.StringPointerValue(varLoopIpsecTunnels.Authentication.BranchIkeIdentification)
						// property: name=prismaaccess_ike_identification, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.PrismaaccessIkeIdentification = types.StringPointerValue(varLoopIpsecTunnels.Authentication.PrismaaccessIkeIdentification)
						// property: name=psk, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.Psk = types.StringPointerValue(varLoopIpsecTunnels.Authentication.Psk)
					}
					// property: name=name, type=STRING macro=copy_to_state
					state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Name = types.StringPointerValue(varLoopIpsecTunnels.Name)
					// property: name=routing, type=REFERENCE macro=copy_to_state
					if varLoopIpsecTunnels.Routing == nil {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing = nil
					} else {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing = &rsModelRouting{}
						// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing prefix=rsModel ans=varLoopIpsecTunnels.Routing properties=3
						tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing prefix=rsModel ans=varLoopIpsecTunnels.Routing")
						// property: name=branch_as_number, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.BranchAsNumber = types.StringPointerValue(varLoopIpsecTunnels.Routing.BranchAsNumber)
						// property: name=branch_ip_address, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.BranchIpAddress = types.StringPointerValue(varLoopIpsecTunnels.Routing.BranchIpAddress)
						// property: name=prismaaccess_ip_address, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.PrismaaccessIpAddress = types.StringPointerValue(varLoopIpsecTunnels.Routing.PrismaaccessIpAddress)
					}
					// property: name=routing_configs, type=REFERENCE macro=copy_to_state
					if varLoopIpsecTunnels.RoutingConfigs == nil {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs = nil
					} else {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs = &rsModelRoutingConfigs{}
						// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs prefix=rsModel ans=varLoopIpsecTunnels.RoutingConfigs properties=4
						tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs prefix=rsModel ans=varLoopIpsecTunnels.RoutingConfigs")
						// property: name=advertise_default_route, type=BOOLEAN macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.AdvertiseDefaultRoute = types.BoolPointerValue(varLoopIpsecTunnels.RoutingConfigs.AdvertiseDefaultRoute)
						// property: name=bgp_secret, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret = types.StringPointerValue(plan.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret.ValueStringPointer())
						// this property is sensitive and will be stored in the state's internal key name
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecretInternalKeyName = types.StringValue(GenerateRandomString(16))
						// store value if needed
						if !state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret.IsNull() {
							encryptedBgpSecret, _ := Encrypt([]byte(state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret.String()))
							resp.Private.SetKey(ctx, state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecretInternalKeyName.String(), []byte(encryptedBgpSecret))
						}
						// property: name=export_routes, type=BOOLEAN macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.ExportRoutes = types.BoolPointerValue(varLoopIpsecTunnels.RoutingConfigs.ExportRoutes)
						// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = types.BoolPointerValue(varLoopIpsecTunnels.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
					}
					// property: name=wan_interface_id, type=STRING macro=copy_to_state
					state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].WanInterfaceId = types.StringPointerValue(varLoopIpsecTunnels.WanInterfaceId)
				}
			}
			// property: name=name, type=STRING macro=copy_to_state
			state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].Name = types.StringPointerValue(varLoopRemoteNetworkGroups.Name)
			// property: name=spn_name, type=ARRAY_PRIMITIVE macro=copy_to_state
			varSpnName, errSpnName := types.ListValueFrom(ctx, types.StringType, varLoopRemoteNetworkGroups.SpnName)
			state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].SpnName = varSpnName
			resp.Diagnostics.Append(errSpnName.Errors()...)
		}
	}
	// property: name=routing_configs, type=REFERENCE macro=copy_to_state
	if ans.RoutingConfigs == nil {
		state.RoutingConfigs = nil
	} else {
		state.RoutingConfigs = &rsModelRoutingConfigs{}
		// copy_to_state: state=state.RoutingConfigs prefix=rsModel ans=ans.RoutingConfigs properties=4
		tflog.Debug(ctx, "copy_to_state state=state.RoutingConfigs prefix=rsModel ans=ans.RoutingConfigs")
		// property: name=advertise_default_route, type=BOOLEAN macro=copy_to_state
		state.RoutingConfigs.AdvertiseDefaultRoute = types.BoolPointerValue(ans.RoutingConfigs.AdvertiseDefaultRoute)
		// property: name=bgp_secret, type=STRING macro=copy_to_state
		state.RoutingConfigs.BgpSecret = types.StringPointerValue(plan.RoutingConfigs.BgpSecret.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.RoutingConfigs.BgpSecretInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.RoutingConfigs.BgpSecret.IsNull() {
			encryptedBgpSecret, _ := Encrypt([]byte(state.RoutingConfigs.BgpSecret.String()))
			resp.Private.SetKey(ctx, state.RoutingConfigs.BgpSecretInternalKeyName.String(), []byte(encryptedBgpSecret))
		}
		// property: name=export_routes, type=BOOLEAN macro=copy_to_state
		state.RoutingConfigs.ExportRoutes = types.BoolPointerValue(ans.RoutingConfigs.ExportRoutes)
		// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=copy_to_state
		state.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = types.BoolPointerValue(ans.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
	}
	// property: name=site_id, type=STRING macro=copy_to_state
	state.SiteId = types.StringPointerValue(ans.SiteId)
	return true
}

func (r *sitePrismaSaseConnectionResource) doGet(ctx context.Context, state *rsModelSaseConnectionScreenV2N1, savestate *rsModelSaseConnectionScreenV2N1, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_site_prisma_sase_connection",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_site_prisma_sase_connection ID format", "Expected 2 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_site_prisma_sase_connection"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.1/api/sites/{site_id}/prismasase_connections/{prismasase_connection_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["prismasase_connection_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_site_prisma_sase_connection", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_site_prisma_sase_connection",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_site_prisma_sase_connection from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=SaseConnectionScreenV2N1
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.SaseConnectionScreenV2N1
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to SaseConnectionScreenV2N1 in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=13
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=enabled_wan_interface_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varEnabledWanInterfaceIds, errEnabledWanInterfaceIds := types.ListValueFrom(ctx, types.StringType, ans.EnabledWanInterfaceIds)
	state.EnabledWanInterfaceIds = varEnabledWanInterfaceIds
	resp.Diagnostics.Append(errEnabledWanInterfaceIds.Errors()...)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipsec_tunnel_configs, type=REFERENCE macro=copy_to_state
	if ans.IpsecTunnelConfigs == nil {
		state.IpsecTunnelConfigs = nil
	} else {
		state.IpsecTunnelConfigs = &rsModelIPSecTunnelConfigs{}
		// copy_to_state: state=state.IpsecTunnelConfigs prefix=rsModel ans=ans.IpsecTunnelConfigs properties=7
		tflog.Debug(ctx, "copy_to_state state=state.IpsecTunnelConfigs prefix=rsModel ans=ans.IpsecTunnelConfigs")
		// property: name=anti_replay, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.AntiReplay = types.BoolPointerValue(ans.IpsecTunnelConfigs.AntiReplay)
		// property: name=copy_tos, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.CopyTos = types.BoolPointerValue(ans.IpsecTunnelConfigs.CopyTos)
		// property: name=enable_gre_encapsulation, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.EnableGreEncapsulation = types.BoolPointerValue(ans.IpsecTunnelConfigs.EnableGreEncapsulation)
		// property: name=ike_key_exchange, type=STRING macro=copy_to_state
		state.IpsecTunnelConfigs.IkeKeyExchange = types.StringPointerValue(ans.IpsecTunnelConfigs.IkeKeyExchange)
		// property: name=prismaaccess_ike_crypto_profile_id, type=STRING macro=copy_to_state
		state.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId = types.StringPointerValue(ans.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId)
		// property: name=prismaaccess_ipsec_profile_id, type=STRING macro=copy_to_state
		state.IpsecTunnelConfigs.PrismaaccessIpsecProfileId = types.StringPointerValue(ans.IpsecTunnelConfigs.PrismaaccessIpsecProfileId)
		// property: name=tunnel_monitoring, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.TunnelMonitoring = types.BoolPointerValue(ans.IpsecTunnelConfigs.TunnelMonitoring)
	}
	// property: name=is_active, type=BOOLEAN macro=copy_to_state
	state.IsActive = types.BoolPointerValue(ans.IsActive)
	// property: name=is_enabled, type=BOOLEAN macro=copy_to_state
	state.IsEnabled = types.BoolPointerValue(ans.IsEnabled)
	// property: name=prismaaccess_edge_location, type=ARRAY_PRIMITIVE macro=copy_to_state
	varPrismaaccessEdgeLocation, errPrismaaccessEdgeLocation := types.ListValueFrom(ctx, types.StringType, ans.PrismaaccessEdgeLocation)
	state.PrismaaccessEdgeLocation = varPrismaaccessEdgeLocation
	resp.Diagnostics.Append(errPrismaaccessEdgeLocation.Errors()...)
	// property: name=prismaaccess_qos_cir_mbps, type=INTEGER macro=copy_to_state
	state.PrismaaccessQosCirMbps = types.Int64PointerValue(ans.PrismaaccessQosCirMbps)
	// property: name=prismaaccess_qos_profile_id, type=STRING macro=copy_to_state
	state.PrismaaccessQosProfileId = types.StringPointerValue(ans.PrismaaccessQosProfileId)
	// property: name=remote_network_groups, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.RemoteNetworkGroups == nil {
		state.RemoteNetworkGroups = nil
	} else if len(ans.RemoteNetworkGroups) == 0 {
		state.RemoteNetworkGroups = []rsModelRemoteNetworkGroup{}
	} else {
		state.RemoteNetworkGroups = make([]rsModelRemoteNetworkGroup, 0, len(ans.RemoteNetworkGroups))
		for varLoopRemoteNetworkGroupsIndex, varLoopRemoteNetworkGroups := range ans.RemoteNetworkGroups {
			// add a new item
			state.RemoteNetworkGroups = append(state.RemoteNetworkGroups, rsModelRemoteNetworkGroup{})
			// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex] prefix=rsModel ans=varLoopRemoteNetworkGroups properties=3
			tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex] prefix=rsModel ans=varLoopRemoteNetworkGroups")
			// property: name=ipsec_tunnels, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopRemoteNetworkGroups.IpsecTunnels == nil {
				state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = nil
			} else if len(varLoopRemoteNetworkGroups.IpsecTunnels) == 0 {
				state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = []rsModelIPSecTunnel{}
			} else {
				state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = make([]rsModelIPSecTunnel, 0, len(varLoopRemoteNetworkGroups.IpsecTunnels))
				for varLoopIpsecTunnelsIndex, varLoopIpsecTunnels := range varLoopRemoteNetworkGroups.IpsecTunnels {
					// add a new item
					state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = append(state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels, rsModelIPSecTunnel{})
					// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex] prefix=rsModel ans=varLoopIpsecTunnels properties=5
					tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex] prefix=rsModel ans=varLoopIpsecTunnels")
					// property: name=authentication, type=REFERENCE macro=copy_to_state
					if varLoopIpsecTunnels.Authentication == nil {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication = nil
					} else {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication = &rsModelIPSecTunnelAuthentication{}
						// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication prefix=rsModel ans=varLoopIpsecTunnels.Authentication properties=3
						tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication prefix=rsModel ans=varLoopIpsecTunnels.Authentication")
						// property: name=branch_ike_identification, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.BranchIkeIdentification = types.StringPointerValue(varLoopIpsecTunnels.Authentication.BranchIkeIdentification)
						// property: name=prismaaccess_ike_identification, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.PrismaaccessIkeIdentification = types.StringPointerValue(varLoopIpsecTunnels.Authentication.PrismaaccessIkeIdentification)
						// property: name=psk, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.Psk = types.StringPointerValue(varLoopIpsecTunnels.Authentication.Psk)
					}
					// property: name=name, type=STRING macro=copy_to_state
					state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Name = types.StringPointerValue(varLoopIpsecTunnels.Name)
					// property: name=routing, type=REFERENCE macro=copy_to_state
					if varLoopIpsecTunnels.Routing == nil {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing = nil
					} else {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing = &rsModelRouting{}
						// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing prefix=rsModel ans=varLoopIpsecTunnels.Routing properties=3
						tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing prefix=rsModel ans=varLoopIpsecTunnels.Routing")
						// property: name=branch_as_number, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.BranchAsNumber = types.StringPointerValue(varLoopIpsecTunnels.Routing.BranchAsNumber)
						// property: name=branch_ip_address, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.BranchIpAddress = types.StringPointerValue(varLoopIpsecTunnels.Routing.BranchIpAddress)
						// property: name=prismaaccess_ip_address, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.PrismaaccessIpAddress = types.StringPointerValue(varLoopIpsecTunnels.Routing.PrismaaccessIpAddress)
					}
					// property: name=routing_configs, type=REFERENCE macro=copy_to_state
					if varLoopIpsecTunnels.RoutingConfigs == nil {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs = nil
					} else {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs = &rsModelRoutingConfigs{}
						// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs prefix=rsModel ans=varLoopIpsecTunnels.RoutingConfigs properties=4
						tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs prefix=rsModel ans=varLoopIpsecTunnels.RoutingConfigs")
						// property: name=advertise_default_route, type=BOOLEAN macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.AdvertiseDefaultRoute = types.BoolPointerValue(varLoopIpsecTunnels.RoutingConfigs.AdvertiseDefaultRoute)
						// property: name=bgp_secret, type=STRING macro=copy_to_state
						encryptedBgpSecretKeyName := state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecretInternalKeyName.String()
						encryptedBgpSecretValueBytes, _ := resp.Private.GetKey(ctx, encryptedBgpSecretKeyName)
						if encryptedBgpSecretValueBytes != nil {
							decryptedBgpSecret, _ := Decrypt(string(encryptedBgpSecretValueBytes))
							state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret = types.StringValue(decryptedBgpSecret)
						}
						// property: name=export_routes, type=BOOLEAN macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.ExportRoutes = types.BoolPointerValue(varLoopIpsecTunnels.RoutingConfigs.ExportRoutes)
						// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = types.BoolPointerValue(varLoopIpsecTunnels.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
					}
					// property: name=wan_interface_id, type=STRING macro=copy_to_state
					state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].WanInterfaceId = types.StringPointerValue(varLoopIpsecTunnels.WanInterfaceId)
				}
			}
			// property: name=name, type=STRING macro=copy_to_state
			state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].Name = types.StringPointerValue(varLoopRemoteNetworkGroups.Name)
			// property: name=spn_name, type=ARRAY_PRIMITIVE macro=copy_to_state
			varSpnName, errSpnName := types.ListValueFrom(ctx, types.StringType, varLoopRemoteNetworkGroups.SpnName)
			state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].SpnName = varSpnName
			resp.Diagnostics.Append(errSpnName.Errors()...)
		}
	}
	// property: name=routing_configs, type=REFERENCE macro=copy_to_state
	if ans.RoutingConfigs == nil {
		state.RoutingConfigs = nil
	} else {
		state.RoutingConfigs = &rsModelRoutingConfigs{}
		// copy_to_state: state=state.RoutingConfigs prefix=rsModel ans=ans.RoutingConfigs properties=4
		tflog.Debug(ctx, "copy_to_state state=state.RoutingConfigs prefix=rsModel ans=ans.RoutingConfigs")
		// property: name=advertise_default_route, type=BOOLEAN macro=copy_to_state
		state.RoutingConfigs.AdvertiseDefaultRoute = types.BoolPointerValue(ans.RoutingConfigs.AdvertiseDefaultRoute)
		// property: name=bgp_secret, type=STRING macro=copy_to_state
		encryptedBgpSecretKeyName := state.RoutingConfigs.BgpSecretInternalKeyName.String()
		encryptedBgpSecretValueBytes, _ := resp.Private.GetKey(ctx, encryptedBgpSecretKeyName)
		if encryptedBgpSecretValueBytes != nil {
			decryptedBgpSecret, _ := Decrypt(string(encryptedBgpSecretValueBytes))
			state.RoutingConfigs.BgpSecret = types.StringValue(decryptedBgpSecret)
		}
		// property: name=export_routes, type=BOOLEAN macro=copy_to_state
		state.RoutingConfigs.ExportRoutes = types.BoolPointerValue(ans.RoutingConfigs.ExportRoutes)
		// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=copy_to_state
		state.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = types.BoolPointerValue(ans.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
	}
	// property: name=site_id, type=STRING macro=copy_to_state
	state.SiteId = types.StringPointerValue(ans.SiteId)
	return true
}

func (r *sitePrismaSaseConnectionResource) doPut(ctx context.Context, plan *rsModelSaseConnectionScreenV2N1, state *rsModelSaseConnectionScreenV2N1, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_site_prisma_sase_connection",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_site_prisma_sase_connection", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_site_prisma_sase_connection ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_site_prisma_sase_connection"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.1/api/sites/{site_id}/prismasase_connections/{prismasase_connection_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["prismasase_connection_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.SaseConnectionScreenV2N1{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=13
	tflog.Debug(ctx, "copy_from_plan_or_state body=body prefix=rsModel state=state plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=enabled_wan_interface_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.EnabledWanInterfaceIds = ListStringValueOrNil(ctx, plan.EnabledWanInterfaceIds)
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=ipsec_tunnel_configs, type=REFERENCE macro=copy_from_plan_or_state
	if plan.IpsecTunnelConfigs == nil {
		body.IpsecTunnelConfigs = nil
	} else {
		body.IpsecTunnelConfigs = &sdwan_schema.IPSecTunnelConfigs{}
		// copy_from_plan_or_state: body=body.IpsecTunnelConfigs prefix=rsModel state=state.IpsecTunnelConfigs plan=plan.IpsecTunnelConfigs properties=7
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.IpsecTunnelConfigs prefix=rsModel state=state.IpsecTunnelConfigs plan=plan.IpsecTunnelConfigs")
		// property: name=anti_replay, type=BOOLEAN macro=copy_from_plan_or_state
		if state.IpsecTunnelConfigs != nil {
			body.IpsecTunnelConfigs.AntiReplay = ValueBoolPointerFromPlanOrState(plan.IpsecTunnelConfigs.AntiReplay, state.IpsecTunnelConfigs.AntiReplay)
		} else {
			body.IpsecTunnelConfigs.AntiReplay = BoolValueOrNil(plan.IpsecTunnelConfigs.AntiReplay)
		}
		// property: name=copy_tos, type=BOOLEAN macro=copy_from_plan_or_state
		if state.IpsecTunnelConfigs != nil {
			body.IpsecTunnelConfigs.CopyTos = ValueBoolPointerFromPlanOrState(plan.IpsecTunnelConfigs.CopyTos, state.IpsecTunnelConfigs.CopyTos)
		} else {
			body.IpsecTunnelConfigs.CopyTos = BoolValueOrNil(plan.IpsecTunnelConfigs.CopyTos)
		}
		// property: name=enable_gre_encapsulation, type=BOOLEAN macro=copy_from_plan_or_state
		if state.IpsecTunnelConfigs != nil {
			body.IpsecTunnelConfigs.EnableGreEncapsulation = ValueBoolPointerFromPlanOrState(plan.IpsecTunnelConfigs.EnableGreEncapsulation, state.IpsecTunnelConfigs.EnableGreEncapsulation)
		} else {
			body.IpsecTunnelConfigs.EnableGreEncapsulation = BoolValueOrNil(plan.IpsecTunnelConfigs.EnableGreEncapsulation)
		}
		// property: name=ike_key_exchange, type=STRING macro=copy_from_plan_or_state
		if state.IpsecTunnelConfigs != nil {
			body.IpsecTunnelConfigs.IkeKeyExchange = ValueStringPointerFromPlanOrState(plan.IpsecTunnelConfigs.IkeKeyExchange, state.IpsecTunnelConfigs.IkeKeyExchange)
		} else {
			body.IpsecTunnelConfigs.IkeKeyExchange = StringValueOrNil(plan.IpsecTunnelConfigs.IkeKeyExchange)
		}
		// property: name=prismaaccess_ike_crypto_profile_id, type=STRING macro=copy_from_plan_or_state
		if state.IpsecTunnelConfigs != nil {
			body.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId = ValueStringPointerFromPlanOrState(plan.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId, state.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId)
		} else {
			body.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId = StringValueOrNil(plan.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId)
		}
		// property: name=prismaaccess_ipsec_profile_id, type=STRING macro=copy_from_plan_or_state
		if state.IpsecTunnelConfigs != nil {
			body.IpsecTunnelConfigs.PrismaaccessIpsecProfileId = ValueStringPointerFromPlanOrState(plan.IpsecTunnelConfigs.PrismaaccessIpsecProfileId, state.IpsecTunnelConfigs.PrismaaccessIpsecProfileId)
		} else {
			body.IpsecTunnelConfigs.PrismaaccessIpsecProfileId = StringValueOrNil(plan.IpsecTunnelConfigs.PrismaaccessIpsecProfileId)
		}
		// property: name=tunnel_monitoring, type=BOOLEAN macro=copy_from_plan_or_state
		if state.IpsecTunnelConfigs != nil {
			body.IpsecTunnelConfigs.TunnelMonitoring = ValueBoolPointerFromPlanOrState(plan.IpsecTunnelConfigs.TunnelMonitoring, state.IpsecTunnelConfigs.TunnelMonitoring)
		} else {
			body.IpsecTunnelConfigs.TunnelMonitoring = BoolValueOrNil(plan.IpsecTunnelConfigs.TunnelMonitoring)
		}
	}
	// property: name=is_active, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.IsActive = ValueBoolPointerFromPlanOrState(plan.IsActive, state.IsActive)
	} else {
		body.IsActive = BoolValueOrNil(plan.IsActive)
	}
	// property: name=is_enabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.IsEnabled = ValueBoolPointerFromPlanOrState(plan.IsEnabled, state.IsEnabled)
	} else {
		body.IsEnabled = BoolValueOrNil(plan.IsEnabled)
	}
	// property: name=prismaaccess_edge_location, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.PrismaaccessEdgeLocation = ListStringValueOrNil(ctx, plan.PrismaaccessEdgeLocation)
	// property: name=prismaaccess_qos_cir_mbps, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.PrismaaccessQosCirMbps = ValueInt64PointerFromPlanOrState(plan.PrismaaccessQosCirMbps, state.PrismaaccessQosCirMbps)
	} else {
		body.PrismaaccessQosCirMbps = Int64ValueOrNil(plan.PrismaaccessQosCirMbps)
	}
	// property: name=prismaaccess_qos_profile_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.PrismaaccessQosProfileId = ValueStringPointerFromPlanOrState(plan.PrismaaccessQosProfileId, state.PrismaaccessQosProfileId)
	} else {
		body.PrismaaccessQosProfileId = StringValueOrNil(plan.PrismaaccessQosProfileId)
	}
	// property: name=remote_network_groups, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.RemoteNetworkGroups == nil && (state == nil || state.RemoteNetworkGroups == nil) {
		body.RemoteNetworkGroups = nil
	} else if len(plan.RemoteNetworkGroups) == 0 && (state == nil || len(state.RemoteNetworkGroups) == 0) {
		body.RemoteNetworkGroups = []sdwan_schema.RemoteNetworkGroup{}
	} else if len(plan.RemoteNetworkGroups) != 0 || (state != nil && len(state.RemoteNetworkGroups) != 0) {
		RemoteNetworkGroupsToUse := plan.RemoteNetworkGroups
		if len(plan.RemoteNetworkGroups) == 0 {
			RemoteNetworkGroupsToUse = state.RemoteNetworkGroups
		}
		body.RemoteNetworkGroups = make([]sdwan_schema.RemoteNetworkGroup, 0, len(RemoteNetworkGroupsToUse))
		for varLoopRemoteNetworkGroupsIndex, varLoopRemoteNetworkGroups := range RemoteNetworkGroupsToUse {
			// add a new item
			body.RemoteNetworkGroups = append(body.RemoteNetworkGroups, sdwan_schema.RemoteNetworkGroup{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex] prefix=rsModel plan=varLoopRemoteNetworkGroups properties=3
			tflog.Debug(ctx, "copy_from_plan body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex] prefix=rsModel plan=varLoopRemoteNetworkGroups")
			// property: name=ipsec_tunnels, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopRemoteNetworkGroups.IpsecTunnels == nil {
				body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = nil
			} else if len(varLoopRemoteNetworkGroups.IpsecTunnels) == 0 {
				body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = []sdwan_schema.IPSecTunnel{}
			} else {
				body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = make([]sdwan_schema.IPSecTunnel, 0, len(varLoopRemoteNetworkGroups.IpsecTunnels))
				for varLoopIpsecTunnelsIndex, varLoopIpsecTunnels := range varLoopRemoteNetworkGroups.IpsecTunnels {
					// add a new item
					body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = append(body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels, sdwan_schema.IPSecTunnel{})
					// copy_from_plan: body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex] prefix=rsModel plan=varLoopIpsecTunnels properties=5
					tflog.Debug(ctx, "copy_from_plan body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex] prefix=rsModel plan=varLoopIpsecTunnels")
					// property: name=authentication, type=REFERENCE macro=copy_from_plan
					if varLoopIpsecTunnels.Authentication != nil {
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication = &sdwan_schema.IPSecTunnelAuthentication{}
						// copy_from_plan: body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication prefix=rsModel plan=varLoopIpsecTunnels.Authentication properties=3
						tflog.Debug(ctx, "copy_from_plan body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication prefix=rsModel plan=varLoopIpsecTunnels.Authentication")
						// property: name=branch_ike_identification, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.BranchIkeIdentification = StringValueOrNil(varLoopIpsecTunnels.Authentication.BranchIkeIdentification)
						// property: name=prismaaccess_ike_identification, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.PrismaaccessIkeIdentification = StringValueOrNil(varLoopIpsecTunnels.Authentication.PrismaaccessIkeIdentification)
						// property: name=psk, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.Psk = StringValueOrNil(varLoopIpsecTunnels.Authentication.Psk)
					}
					// property: name=name, type=STRING macro=copy_from_plan
					body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Name = StringValueOrNil(varLoopIpsecTunnels.Name)
					// property: name=routing, type=REFERENCE macro=copy_from_plan
					if varLoopIpsecTunnels.Routing != nil {
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing = &sdwan_schema.Routing{}
						// copy_from_plan: body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing prefix=rsModel plan=varLoopIpsecTunnels.Routing properties=3
						tflog.Debug(ctx, "copy_from_plan body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing prefix=rsModel plan=varLoopIpsecTunnels.Routing")
						// property: name=branch_as_number, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.BranchAsNumber = StringValueOrNil(varLoopIpsecTunnels.Routing.BranchAsNumber)
						// property: name=branch_ip_address, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.BranchIpAddress = StringValueOrNil(varLoopIpsecTunnels.Routing.BranchIpAddress)
						// property: name=prismaaccess_ip_address, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.PrismaaccessIpAddress = StringValueOrNil(varLoopIpsecTunnels.Routing.PrismaaccessIpAddress)
					}
					// property: name=routing_configs, type=REFERENCE macro=copy_from_plan
					if varLoopIpsecTunnels.RoutingConfigs != nil {
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs = &sdwan_schema.RoutingConfigs{}
						// copy_from_plan: body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs prefix=rsModel plan=varLoopIpsecTunnels.RoutingConfigs properties=4
						tflog.Debug(ctx, "copy_from_plan body=body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs prefix=rsModel plan=varLoopIpsecTunnels.RoutingConfigs")
						// property: name=advertise_default_route, type=BOOLEAN macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.AdvertiseDefaultRoute = BoolValueOrNil(varLoopIpsecTunnels.RoutingConfigs.AdvertiseDefaultRoute)
						// property: name=bgp_secret, type=STRING macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret = StringValueOrNil(varLoopIpsecTunnels.RoutingConfigs.BgpSecret)
						// property: name=export_routes, type=BOOLEAN macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.ExportRoutes = BoolValueOrNil(varLoopIpsecTunnels.RoutingConfigs.ExportRoutes)
						// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=copy_from_plan
						body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = BoolValueOrNil(varLoopIpsecTunnels.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
					}
					// property: name=wan_interface_id, type=STRING macro=copy_from_plan
					body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].WanInterfaceId = StringValueOrNil(varLoopIpsecTunnels.WanInterfaceId)
				}
			}
			// property: name=name, type=STRING macro=copy_from_plan
			body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].Name = StringValueOrNil(varLoopRemoteNetworkGroups.Name)
			// property: name=spn_name, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].SpnName = ListStringValueOrNil(ctx, varLoopRemoteNetworkGroups.SpnName)
		}
	}
	// property: name=routing_configs, type=REFERENCE macro=copy_from_plan_or_state
	if plan.RoutingConfigs == nil {
		body.RoutingConfigs = nil
	} else {
		body.RoutingConfigs = &sdwan_schema.RoutingConfigs{}
		// copy_from_plan_or_state: body=body.RoutingConfigs prefix=rsModel state=state.RoutingConfigs plan=plan.RoutingConfigs properties=4
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.RoutingConfigs prefix=rsModel state=state.RoutingConfigs plan=plan.RoutingConfigs")
		// property: name=advertise_default_route, type=BOOLEAN macro=copy_from_plan_or_state
		if state.RoutingConfigs != nil {
			body.RoutingConfigs.AdvertiseDefaultRoute = ValueBoolPointerFromPlanOrState(plan.RoutingConfigs.AdvertiseDefaultRoute, state.RoutingConfigs.AdvertiseDefaultRoute)
		} else {
			body.RoutingConfigs.AdvertiseDefaultRoute = BoolValueOrNil(plan.RoutingConfigs.AdvertiseDefaultRoute)
		}
		// property: name=bgp_secret, type=STRING macro=copy_from_plan_or_state
		if state.RoutingConfigs != nil {
			body.RoutingConfigs.BgpSecret = ValueStringPointerFromPlanOrState(plan.RoutingConfigs.BgpSecret, state.RoutingConfigs.BgpSecret)
		} else {
			body.RoutingConfigs.BgpSecret = StringValueOrNil(plan.RoutingConfigs.BgpSecret)
		}
		// property: name=export_routes, type=BOOLEAN macro=copy_from_plan_or_state
		if state.RoutingConfigs != nil {
			body.RoutingConfigs.ExportRoutes = ValueBoolPointerFromPlanOrState(plan.RoutingConfigs.ExportRoutes, state.RoutingConfigs.ExportRoutes)
		} else {
			body.RoutingConfigs.ExportRoutes = BoolValueOrNil(plan.RoutingConfigs.ExportRoutes)
		}
		// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=copy_from_plan_or_state
		if state.RoutingConfigs != nil {
			body.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = ValueBoolPointerFromPlanOrState(plan.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise, state.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
		} else {
			body.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = BoolValueOrNil(plan.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
		}
	}
	// property: name=site_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.SiteId = ValueStringPointerFromPlanOrState(plan.SiteId, state.SiteId)
	} else {
		body.SiteId = StringValueOrNil(plan.SiteId)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct SaseConnectionScreenV2N1 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_site_prisma_sase_connection", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_site_prisma_sase_connection",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_site_prisma_sase_connection", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_site_prisma_sase_connection",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_site_prisma_sase_connection", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.SaseConnectionScreenV2N1
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to SaseConnectionScreenV2N1 in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=SaseConnectionScreenV2N1
	// copy_to_state: state=state prefix=rsModel ans=ans properties=13
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=enabled_wan_interface_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varEnabledWanInterfaceIds, errEnabledWanInterfaceIds := types.ListValueFrom(ctx, types.StringType, ans.EnabledWanInterfaceIds)
	state.EnabledWanInterfaceIds = varEnabledWanInterfaceIds
	resp.Diagnostics.Append(errEnabledWanInterfaceIds.Errors()...)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipsec_tunnel_configs, type=REFERENCE macro=copy_to_state
	if ans.IpsecTunnelConfigs == nil {
		state.IpsecTunnelConfigs = nil
	} else {
		state.IpsecTunnelConfigs = &rsModelIPSecTunnelConfigs{}
		// copy_to_state: state=state.IpsecTunnelConfigs prefix=rsModel ans=ans.IpsecTunnelConfigs properties=7
		tflog.Debug(ctx, "copy_to_state state=state.IpsecTunnelConfigs prefix=rsModel ans=ans.IpsecTunnelConfigs")
		// property: name=anti_replay, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.AntiReplay = types.BoolPointerValue(ans.IpsecTunnelConfigs.AntiReplay)
		// property: name=copy_tos, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.CopyTos = types.BoolPointerValue(ans.IpsecTunnelConfigs.CopyTos)
		// property: name=enable_gre_encapsulation, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.EnableGreEncapsulation = types.BoolPointerValue(ans.IpsecTunnelConfigs.EnableGreEncapsulation)
		// property: name=ike_key_exchange, type=STRING macro=copy_to_state
		state.IpsecTunnelConfigs.IkeKeyExchange = types.StringPointerValue(ans.IpsecTunnelConfigs.IkeKeyExchange)
		// property: name=prismaaccess_ike_crypto_profile_id, type=STRING macro=copy_to_state
		state.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId = types.StringPointerValue(ans.IpsecTunnelConfigs.PrismaaccessIkeCryptoProfileId)
		// property: name=prismaaccess_ipsec_profile_id, type=STRING macro=copy_to_state
		state.IpsecTunnelConfigs.PrismaaccessIpsecProfileId = types.StringPointerValue(ans.IpsecTunnelConfigs.PrismaaccessIpsecProfileId)
		// property: name=tunnel_monitoring, type=BOOLEAN macro=copy_to_state
		state.IpsecTunnelConfigs.TunnelMonitoring = types.BoolPointerValue(ans.IpsecTunnelConfigs.TunnelMonitoring)
	}
	// property: name=is_active, type=BOOLEAN macro=copy_to_state
	state.IsActive = types.BoolPointerValue(ans.IsActive)
	// property: name=is_enabled, type=BOOLEAN macro=copy_to_state
	state.IsEnabled = types.BoolPointerValue(ans.IsEnabled)
	// property: name=prismaaccess_edge_location, type=ARRAY_PRIMITIVE macro=copy_to_state
	varPrismaaccessEdgeLocation, errPrismaaccessEdgeLocation := types.ListValueFrom(ctx, types.StringType, ans.PrismaaccessEdgeLocation)
	state.PrismaaccessEdgeLocation = varPrismaaccessEdgeLocation
	resp.Diagnostics.Append(errPrismaaccessEdgeLocation.Errors()...)
	// property: name=prismaaccess_qos_cir_mbps, type=INTEGER macro=copy_to_state
	state.PrismaaccessQosCirMbps = types.Int64PointerValue(ans.PrismaaccessQosCirMbps)
	// property: name=prismaaccess_qos_profile_id, type=STRING macro=copy_to_state
	state.PrismaaccessQosProfileId = types.StringPointerValue(ans.PrismaaccessQosProfileId)
	// property: name=remote_network_groups, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.RemoteNetworkGroups == nil {
		state.RemoteNetworkGroups = nil
	} else if len(ans.RemoteNetworkGroups) == 0 {
		state.RemoteNetworkGroups = []rsModelRemoteNetworkGroup{}
	} else {
		state.RemoteNetworkGroups = make([]rsModelRemoteNetworkGroup, 0, len(ans.RemoteNetworkGroups))
		for varLoopRemoteNetworkGroupsIndex, varLoopRemoteNetworkGroups := range ans.RemoteNetworkGroups {
			// add a new item
			state.RemoteNetworkGroups = append(state.RemoteNetworkGroups, rsModelRemoteNetworkGroup{})
			// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex] prefix=rsModel ans=varLoopRemoteNetworkGroups properties=3
			tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex] prefix=rsModel ans=varLoopRemoteNetworkGroups")
			// property: name=ipsec_tunnels, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopRemoteNetworkGroups.IpsecTunnels == nil {
				state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = nil
			} else if len(varLoopRemoteNetworkGroups.IpsecTunnels) == 0 {
				state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = []rsModelIPSecTunnel{}
			} else {
				state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = make([]rsModelIPSecTunnel, 0, len(varLoopRemoteNetworkGroups.IpsecTunnels))
				for varLoopIpsecTunnelsIndex, varLoopIpsecTunnels := range varLoopRemoteNetworkGroups.IpsecTunnels {
					// add a new item
					state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels = append(state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels, rsModelIPSecTunnel{})
					// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex] prefix=rsModel ans=varLoopIpsecTunnels properties=5
					tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex] prefix=rsModel ans=varLoopIpsecTunnels")
					// property: name=authentication, type=REFERENCE macro=copy_to_state
					if varLoopIpsecTunnels.Authentication == nil {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication = nil
					} else {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication = &rsModelIPSecTunnelAuthentication{}
						// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication prefix=rsModel ans=varLoopIpsecTunnels.Authentication properties=3
						tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication prefix=rsModel ans=varLoopIpsecTunnels.Authentication")
						// property: name=branch_ike_identification, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.BranchIkeIdentification = types.StringPointerValue(varLoopIpsecTunnels.Authentication.BranchIkeIdentification)
						// property: name=prismaaccess_ike_identification, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.PrismaaccessIkeIdentification = types.StringPointerValue(varLoopIpsecTunnels.Authentication.PrismaaccessIkeIdentification)
						// property: name=psk, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Authentication.Psk = types.StringPointerValue(varLoopIpsecTunnels.Authentication.Psk)
					}
					// property: name=name, type=STRING macro=copy_to_state
					state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Name = types.StringPointerValue(varLoopIpsecTunnels.Name)
					// property: name=routing, type=REFERENCE macro=copy_to_state
					if varLoopIpsecTunnels.Routing == nil {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing = nil
					} else {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing = &rsModelRouting{}
						// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing prefix=rsModel ans=varLoopIpsecTunnels.Routing properties=3
						tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing prefix=rsModel ans=varLoopIpsecTunnels.Routing")
						// property: name=branch_as_number, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.BranchAsNumber = types.StringPointerValue(varLoopIpsecTunnels.Routing.BranchAsNumber)
						// property: name=branch_ip_address, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.BranchIpAddress = types.StringPointerValue(varLoopIpsecTunnels.Routing.BranchIpAddress)
						// property: name=prismaaccess_ip_address, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].Routing.PrismaaccessIpAddress = types.StringPointerValue(varLoopIpsecTunnels.Routing.PrismaaccessIpAddress)
					}
					// property: name=routing_configs, type=REFERENCE macro=copy_to_state
					if varLoopIpsecTunnels.RoutingConfigs == nil {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs = nil
					} else {
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs = &rsModelRoutingConfigs{}
						// copy_to_state: state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs prefix=rsModel ans=varLoopIpsecTunnels.RoutingConfigs properties=4
						tflog.Debug(ctx, "copy_to_state state=state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs prefix=rsModel ans=varLoopIpsecTunnels.RoutingConfigs")
						// property: name=advertise_default_route, type=BOOLEAN macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.AdvertiseDefaultRoute = types.BoolPointerValue(varLoopIpsecTunnels.RoutingConfigs.AdvertiseDefaultRoute)
						// property: name=bgp_secret, type=STRING macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret = types.StringPointerValue(plan.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret.ValueStringPointer())
						// this property is sensitive and will be stored in the state's internal key name
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecretInternalKeyName = types.StringValue(GenerateRandomString(16))
						// store value if needed
						if !state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret.IsNull() {
							encryptedBgpSecret, _ := Encrypt([]byte(state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecret.String()))
							resp.Private.SetKey(ctx, state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.BgpSecretInternalKeyName.String(), []byte(encryptedBgpSecret))
						}
						// property: name=export_routes, type=BOOLEAN macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.ExportRoutes = types.BoolPointerValue(varLoopIpsecTunnels.RoutingConfigs.ExportRoutes)
						// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=copy_to_state
						state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = types.BoolPointerValue(varLoopIpsecTunnels.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
					}
					// property: name=wan_interface_id, type=STRING macro=copy_to_state
					state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].IpsecTunnels[varLoopIpsecTunnelsIndex].WanInterfaceId = types.StringPointerValue(varLoopIpsecTunnels.WanInterfaceId)
				}
			}
			// property: name=name, type=STRING macro=copy_to_state
			state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].Name = types.StringPointerValue(varLoopRemoteNetworkGroups.Name)
			// property: name=spn_name, type=ARRAY_PRIMITIVE macro=copy_to_state
			varSpnName, errSpnName := types.ListValueFrom(ctx, types.StringType, varLoopRemoteNetworkGroups.SpnName)
			state.RemoteNetworkGroups[varLoopRemoteNetworkGroupsIndex].SpnName = varSpnName
			resp.Diagnostics.Append(errSpnName.Errors()...)
		}
	}
	// property: name=routing_configs, type=REFERENCE macro=copy_to_state
	if ans.RoutingConfigs == nil {
		state.RoutingConfigs = nil
	} else {
		state.RoutingConfigs = &rsModelRoutingConfigs{}
		// copy_to_state: state=state.RoutingConfigs prefix=rsModel ans=ans.RoutingConfigs properties=4
		tflog.Debug(ctx, "copy_to_state state=state.RoutingConfigs prefix=rsModel ans=ans.RoutingConfigs")
		// property: name=advertise_default_route, type=BOOLEAN macro=copy_to_state
		state.RoutingConfigs.AdvertiseDefaultRoute = types.BoolPointerValue(ans.RoutingConfigs.AdvertiseDefaultRoute)
		// property: name=bgp_secret, type=STRING macro=copy_to_state
		state.RoutingConfigs.BgpSecret = types.StringPointerValue(plan.RoutingConfigs.BgpSecret.ValueStringPointer())
		// this property is sensitive and will be stored in the state's internal key name
		state.RoutingConfigs.BgpSecretInternalKeyName = types.StringValue(GenerateRandomString(16))
		// store value if needed
		if !state.RoutingConfigs.BgpSecret.IsNull() {
			encryptedBgpSecret, _ := Encrypt([]byte(state.RoutingConfigs.BgpSecret.String()))
			resp.Private.SetKey(ctx, state.RoutingConfigs.BgpSecretInternalKeyName.String(), []byte(encryptedBgpSecret))
		}
		// property: name=export_routes, type=BOOLEAN macro=copy_to_state
		state.RoutingConfigs.ExportRoutes = types.BoolPointerValue(ans.RoutingConfigs.ExportRoutes)
		// property: name=summarize_mobile_routes_before_advertise, type=BOOLEAN macro=copy_to_state
		state.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise = types.BoolPointerValue(ans.RoutingConfigs.SummarizeMobileRoutesBeforeAdvertise)
	}
	// property: name=site_id, type=STRING macro=copy_to_state
	state.SiteId = types.StringPointerValue(ans.SiteId)
	return true
}

func (r *sitePrismaSaseConnectionResource) doDelete(ctx context.Context, state *rsModelSaseConnectionScreenV2N1, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_site_prisma_sase_connection",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_site_prisma_sase_connection ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_site_prisma_sase_connection"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.0/api/sites/{site_id}/prismasase_connections/{prismasase_connection_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["prismasase_connection_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_site_prisma_sase_connection", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *sitePrismaSaseConnectionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_site_prisma_sase_connection")
	var plan rsModelSaseConnectionScreenV2N1
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelSaseConnectionScreenV2N1
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *sitePrismaSaseConnectionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_site_prisma_sase_connection")
	var savestate, state rsModelSaseConnectionScreenV2N1
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *sitePrismaSaseConnectionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_site_prisma_sase_connection")
	var plan, state rsModelSaseConnectionScreenV2N1
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *sitePrismaSaseConnectionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_site_prisma_sase_connection")
	var state rsModelSaseConnectionScreenV2N1
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *sitePrismaSaseConnectionResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
