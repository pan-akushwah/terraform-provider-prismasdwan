package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=6)
// | Computed Resource Name=appdefs_overrides
// +-----------------------------------------------------------------
// | DSCP HasID=false
// | IPRuleV2 HasID=false
// | Port HasID=false
// | UdpRuleV2 HasID=false
// | TcpRuleV2 HasID=false
// | AppdefOverrideScreenV2N3 HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &appDefOverrideDataSource{}
	_ datasource.DataSourceWithConfigure = &appDefOverrideDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewAppDefOverrideDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewAppDefOverrideDataSource() datasource.DataSource {
	return &appDefOverrideDataSource{}
}

type appDefOverrideDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *appDefOverrideDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_app_def_override"
}

// Schema defines the schema for this data source.
func (d *appDefOverrideDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=AppdefOverrideScreenV2N3
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=aggregate_flows, type=BOOLEAN macro=rss_schema
			"aggregate_flows": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=aggregate_flows, type=BOOLEAN macro=rss_schema
			// property: name=app_unreachability_detection, type=BOOLEAN macro=rss_schema
			"app_unreachability_detection": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=app_unreachability_detection, type=BOOLEAN macro=rss_schema
			// property: name=category, type=STRING macro=rss_schema
			"category": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=category, type=STRING macro=rss_schema
			// property: name=conn_idle_timeout, type=INTEGER macro=rss_schema
			"conn_idle_timeout": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=conn_idle_timeout, type=INTEGER macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=domains, type=ARRAY_PRIMITIVE macro=rss_schema
			"domains": dsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=domains, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=ingress_traffic_pct, type=INTEGER macro=rss_schema
			"ingress_traffic_pct": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=ingress_traffic_pct, type=INTEGER macro=rss_schema
			// property: name=ip_rules, type=ARRAY_REFERENCE macro=rss_schema
			"ip_rules": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=dest_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						"dest_filters": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=dest_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
						"dest_prefixes": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=dscp, type=REFERENCE macro=rss_schema
						"dscp": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// property: name=value, type=INTEGER macro=rss_schema
								"value": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						// property: name=protocol, type=STRING macro=rss_schema
						"protocol": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=protocol, type=STRING macro=rss_schema
						// property: name=src_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						"src_filters": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=src_filters, type=ARRAY_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=src_filters, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=override_default_ip_rules, type=BOOLEAN macro=rss_schema
			"override_default_ip_rules": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=override_default_ip_rules, type=BOOLEAN macro=rss_schema
			// property: name=override_default_tcp_rules, type=BOOLEAN macro=rss_schema
			"override_default_tcp_rules": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=override_default_tcp_rules, type=BOOLEAN macro=rss_schema
			// property: name=override_default_udp_rules, type=BOOLEAN macro=rss_schema
			"override_default_udp_rules": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=override_default_udp_rules, type=BOOLEAN macro=rss_schema
			// property: name=override_domains, type=BOOLEAN macro=rss_schema
			"override_domains": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=override_domains, type=BOOLEAN macro=rss_schema
			// property: name=overrides_disable, type=BOOLEAN macro=rss_schema
			"overrides_disable": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=overrides_disable, type=BOOLEAN macro=rss_schema
			// property: name=p_category, type=STRING macro=rss_schema
			"p_category": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=p_category, type=STRING macro=rss_schema
			// property: name=path_affinity, type=STRING macro=rss_schema
			"path_affinity": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=path_affinity, type=STRING macro=rss_schema
			// property: name=session_timeout, type=INTEGER macro=rss_schema
			"session_timeout": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=session_timeout, type=INTEGER macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=tcp_rules, type=ARRAY_REFERENCE macro=rss_schema
			"tcp_rules": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=client_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						"client_filters": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=client_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=client_port, type=REFERENCE macro=rss_schema
						"client_port": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// property: name=end, type=INTEGER macro=rss_schema
								"end": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=end, type=INTEGER macro=rss_schema
								// property: name=start, type=INTEGER macro=rss_schema
								"start": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
						// property: name=dscp, type=REFERENCE macro=rss_schema
						"dscp": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// property: name=value, type=INTEGER macro=rss_schema
								"value": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						// property: name=server_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						"server_filters": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=server_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=server_port, type=REFERENCE macro=rss_schema
						"server_port": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// property: name=end, type=INTEGER macro=rss_schema
								"end": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=end, type=INTEGER macro=rss_schema
								// property: name=start, type=INTEGER macro=rss_schema
								"start": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
						// property: name=server_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
						"server_prefixes": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=server_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=server_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=transfer_type, type=STRING macro=rss_schema
			"transfer_type": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=transfer_type, type=STRING macro=rss_schema
			// property: name=udp_rules, type=ARRAY_REFERENCE macro=rss_schema
			"udp_rules": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
						"dest_prefixes": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=dscp, type=REFERENCE macro=rss_schema
						"dscp": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// property: name=value, type=INTEGER macro=rss_schema
								"value": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=value, type=INTEGER macro=rss_schema
						// property: name=udp_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						"udp_filters": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=udp_filters, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=udp_port, type=REFERENCE macro=rss_schema
						"udp_port": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// property: name=end, type=INTEGER macro=rss_schema
								"end": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=end, type=INTEGER macro=rss_schema
								// property: name=start, type=INTEGER macro=rss_schema
								"start": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
							},
						},
						// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=start, type=INTEGER macro=rss_schema
			// property: name=use_parentapp_network_policy, type=BOOLEAN macro=rss_schema
			"use_parentapp_network_policy": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=use_parentapp_network_policy, type=BOOLEAN macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *appDefOverrideDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *appDefOverrideDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelAppdefOverrideScreenV2N3
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_app_def_override",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 2 {
		resp.Diagnostics.AddError("error in prismasdwan_app_def_override ID format", "Expected 2 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.3/api/appdefs/{appdef_id}/overrides/{override_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["appdef_id"] = &tokens[0]
	params["override_id"] = &tokens[1]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_app_def_override", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.AppdefOverrideScreenV2N3
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to AppdefOverrideScreenV2N3", json_err.Error())
		return
	}

	// lets copy all items into state schema=AppdefOverrideScreenV2N3
	// copy_to_state: state=state prefix=dsModel ans=ans properties=24
	tflog.Debug(ctx, "copy_to_state state=state prefix=dsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=aggregate_flows, type=BOOLEAN macro=copy_to_state
	state.AggregateFlows = types.BoolPointerValue(ans.AggregateFlows)
	// property: name=app_unreachability_detection, type=BOOLEAN macro=copy_to_state
	state.AppUnreachabilityDetection = types.BoolPointerValue(ans.AppUnreachabilityDetection)
	// property: name=category, type=STRING macro=copy_to_state
	state.Category = types.StringPointerValue(ans.Category)
	// property: name=conn_idle_timeout, type=INTEGER macro=copy_to_state
	state.ConnIdleTimeout = types.Int64PointerValue(ans.ConnIdleTimeout)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=domains, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDomains, errDomains := types.ListValueFrom(ctx, types.StringType, ans.Domains)
	state.Domains = varDomains
	resp.Diagnostics.Append(errDomains.Errors()...)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ingress_traffic_pct, type=INTEGER macro=copy_to_state
	state.IngressTrafficPct = types.Int64PointerValue(ans.IngressTrafficPct)
	// property: name=ip_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.IpRules == nil {
		state.IpRules = nil
	} else if len(ans.IpRules) == 0 {
		state.IpRules = []dsModelIPRuleV2{}
	} else {
		state.IpRules = make([]dsModelIPRuleV2, 0, len(ans.IpRules))
		for varLoopIpRulesIndex, varLoopIpRules := range ans.IpRules {
			// add a new item
			state.IpRules = append(state.IpRules, dsModelIPRuleV2{})
			// copy_to_state: state=state.IpRules[varLoopIpRulesIndex] prefix=dsModel ans=varLoopIpRules properties=5
			tflog.Debug(ctx, "copy_to_state state=state.IpRules[varLoopIpRulesIndex] prefix=dsModel ans=varLoopIpRules")
			// property: name=dest_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestFilters, errDestFilters := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.DestFilters)
			state.IpRules[varLoopIpRulesIndex].DestFilters = varDestFilters
			resp.Diagnostics.Append(errDestFilters.Errors()...)
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestPrefixes, errDestPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.DestPrefixes)
			state.IpRules[varLoopIpRulesIndex].DestPrefixes = varDestPrefixes
			resp.Diagnostics.Append(errDestPrefixes.Errors()...)
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopIpRules.Dscp == nil {
				state.IpRules[varLoopIpRulesIndex].Dscp = nil
			} else {
				state.IpRules[varLoopIpRulesIndex].Dscp = &dsModelDSCP{}
				// copy_to_state: state=state.IpRules[varLoopIpRulesIndex].Dscp prefix=dsModel ans=varLoopIpRules.Dscp properties=1
				tflog.Debug(ctx, "copy_to_state state=state.IpRules[varLoopIpRulesIndex].Dscp prefix=dsModel ans=varLoopIpRules.Dscp")
				// property: name=value, type=INTEGER macro=copy_to_state
				state.IpRules[varLoopIpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopIpRules.Dscp.Value)
			}
			// property: name=protocol, type=STRING macro=copy_to_state
			state.IpRules[varLoopIpRulesIndex].Protocol = types.StringPointerValue(varLoopIpRules.Protocol)
			// property: name=src_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varSrcFilters, errSrcFilters := types.ListValueFrom(ctx, types.StringType, varLoopIpRules.SrcFilters)
			state.IpRules[varLoopIpRulesIndex].SrcFilters = varSrcFilters
			resp.Diagnostics.Append(errSrcFilters.Errors()...)
		}
	}
	// property: name=override_default_ip_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultIpRules = types.BoolPointerValue(ans.OverrideDefaultIpRules)
	// property: name=override_default_tcp_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultTcpRules = types.BoolPointerValue(ans.OverrideDefaultTcpRules)
	// property: name=override_default_udp_rules, type=BOOLEAN macro=copy_to_state
	state.OverrideDefaultUdpRules = types.BoolPointerValue(ans.OverrideDefaultUdpRules)
	// property: name=override_domains, type=BOOLEAN macro=copy_to_state
	state.OverrideDomains = types.BoolPointerValue(ans.OverrideDomains)
	// property: name=overrides_disable, type=BOOLEAN macro=copy_to_state
	state.OverridesDisable = types.BoolPointerValue(ans.OverridesDisable)
	// property: name=p_category, type=STRING macro=copy_to_state
	state.PCategory = types.StringPointerValue(ans.PCategory)
	// property: name=path_affinity, type=STRING macro=copy_to_state
	state.PathAffinity = types.StringPointerValue(ans.PathAffinity)
	// property: name=session_timeout, type=INTEGER macro=copy_to_state
	state.SessionTimeout = types.Int64PointerValue(ans.SessionTimeout)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=tcp_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.TcpRules == nil {
		state.TcpRules = nil
	} else if len(ans.TcpRules) == 0 {
		state.TcpRules = []dsModelTcpRuleV2{}
	} else {
		state.TcpRules = make([]dsModelTcpRuleV2, 0, len(ans.TcpRules))
		for varLoopTcpRulesIndex, varLoopTcpRules := range ans.TcpRules {
			// add a new item
			state.TcpRules = append(state.TcpRules, dsModelTcpRuleV2{})
			// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex] prefix=dsModel ans=varLoopTcpRules properties=6
			tflog.Debug(ctx, "copy_to_state state=state.TcpRules[varLoopTcpRulesIndex] prefix=dsModel ans=varLoopTcpRules")
			// property: name=client_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varClientFilters, errClientFilters := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ClientFilters)
			state.TcpRules[varLoopTcpRulesIndex].ClientFilters = varClientFilters
			resp.Diagnostics.Append(errClientFilters.Errors()...)
			// property: name=client_port, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.ClientPort == nil {
				state.TcpRules[varLoopTcpRulesIndex].ClientPort = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].ClientPort = &dsModelPort{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].ClientPort prefix=dsModel ans=varLoopTcpRules.ClientPort properties=2
				tflog.Debug(ctx, "copy_to_state state=state.TcpRules[varLoopTcpRulesIndex].ClientPort prefix=dsModel ans=varLoopTcpRules.ClientPort")
				// property: name=end, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ClientPort.End = types.Int64PointerValue(varLoopTcpRules.ClientPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ClientPort.Start = types.Int64PointerValue(varLoopTcpRules.ClientPort.Start)
			}
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.Dscp == nil {
				state.TcpRules[varLoopTcpRulesIndex].Dscp = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].Dscp = &dsModelDSCP{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].Dscp prefix=dsModel ans=varLoopTcpRules.Dscp properties=1
				tflog.Debug(ctx, "copy_to_state state=state.TcpRules[varLoopTcpRulesIndex].Dscp prefix=dsModel ans=varLoopTcpRules.Dscp")
				// property: name=value, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopTcpRules.Dscp.Value)
			}
			// property: name=server_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerFilters, errServerFilters := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ServerFilters)
			state.TcpRules[varLoopTcpRulesIndex].ServerFilters = varServerFilters
			resp.Diagnostics.Append(errServerFilters.Errors()...)
			// property: name=server_port, type=REFERENCE macro=copy_to_state
			if varLoopTcpRules.ServerPort == nil {
				state.TcpRules[varLoopTcpRulesIndex].ServerPort = nil
			} else {
				state.TcpRules[varLoopTcpRulesIndex].ServerPort = &dsModelPort{}
				// copy_to_state: state=state.TcpRules[varLoopTcpRulesIndex].ServerPort prefix=dsModel ans=varLoopTcpRules.ServerPort properties=2
				tflog.Debug(ctx, "copy_to_state state=state.TcpRules[varLoopTcpRulesIndex].ServerPort prefix=dsModel ans=varLoopTcpRules.ServerPort")
				// property: name=end, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ServerPort.End = types.Int64PointerValue(varLoopTcpRules.ServerPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.TcpRules[varLoopTcpRulesIndex].ServerPort.Start = types.Int64PointerValue(varLoopTcpRules.ServerPort.Start)
			}
			// property: name=server_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerPrefixes, errServerPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopTcpRules.ServerPrefixes)
			state.TcpRules[varLoopTcpRulesIndex].ServerPrefixes = varServerPrefixes
			resp.Diagnostics.Append(errServerPrefixes.Errors()...)
		}
	}
	// property: name=transfer_type, type=STRING macro=copy_to_state
	state.TransferType = types.StringPointerValue(ans.TransferType)
	// property: name=udp_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.UdpRules == nil {
		state.UdpRules = nil
	} else if len(ans.UdpRules) == 0 {
		state.UdpRules = []dsModelUdpRuleV2{}
	} else {
		state.UdpRules = make([]dsModelUdpRuleV2, 0, len(ans.UdpRules))
		for varLoopUdpRulesIndex, varLoopUdpRules := range ans.UdpRules {
			// add a new item
			state.UdpRules = append(state.UdpRules, dsModelUdpRuleV2{})
			// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex] prefix=dsModel ans=varLoopUdpRules properties=4
			tflog.Debug(ctx, "copy_to_state state=state.UdpRules[varLoopUdpRulesIndex] prefix=dsModel ans=varLoopUdpRules")
			// property: name=dest_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDestPrefixes, errDestPrefixes := types.ListValueFrom(ctx, types.StringType, varLoopUdpRules.DestPrefixes)
			state.UdpRules[varLoopUdpRulesIndex].DestPrefixes = varDestPrefixes
			resp.Diagnostics.Append(errDestPrefixes.Errors()...)
			// property: name=dscp, type=REFERENCE macro=copy_to_state
			if varLoopUdpRules.Dscp == nil {
				state.UdpRules[varLoopUdpRulesIndex].Dscp = nil
			} else {
				state.UdpRules[varLoopUdpRulesIndex].Dscp = &dsModelDSCP{}
				// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex].Dscp prefix=dsModel ans=varLoopUdpRules.Dscp properties=1
				tflog.Debug(ctx, "copy_to_state state=state.UdpRules[varLoopUdpRulesIndex].Dscp prefix=dsModel ans=varLoopUdpRules.Dscp")
				// property: name=value, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].Dscp.Value = types.Int64PointerValue(varLoopUdpRules.Dscp.Value)
			}
			// property: name=udp_filters, type=ARRAY_PRIMITIVE macro=copy_to_state
			varUdpFilters, errUdpFilters := types.ListValueFrom(ctx, types.StringType, varLoopUdpRules.UdpFilters)
			state.UdpRules[varLoopUdpRulesIndex].UdpFilters = varUdpFilters
			resp.Diagnostics.Append(errUdpFilters.Errors()...)
			// property: name=udp_port, type=REFERENCE macro=copy_to_state
			if varLoopUdpRules.UdpPort == nil {
				state.UdpRules[varLoopUdpRulesIndex].UdpPort = nil
			} else {
				state.UdpRules[varLoopUdpRulesIndex].UdpPort = &dsModelPort{}
				// copy_to_state: state=state.UdpRules[varLoopUdpRulesIndex].UdpPort prefix=dsModel ans=varLoopUdpRules.UdpPort properties=2
				tflog.Debug(ctx, "copy_to_state state=state.UdpRules[varLoopUdpRulesIndex].UdpPort prefix=dsModel ans=varLoopUdpRules.UdpPort")
				// property: name=end, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].UdpPort.End = types.Int64PointerValue(varLoopUdpRules.UdpPort.End)
				// property: name=start, type=INTEGER macro=copy_to_state
				state.UdpRules[varLoopUdpRulesIndex].UdpPort.Start = types.Int64PointerValue(varLoopUdpRules.UdpPort.Start)
			}
		}
	}
	// property: name=use_parentapp_network_policy, type=BOOLEAN macro=copy_to_state
	state.UseParentappNetworkPolicy = types.BoolPointerValue(ans.UseParentappNetworkPolicy)

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
