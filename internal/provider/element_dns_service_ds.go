package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=9)
// | Computed Resource Name=sites_elements_dnsservices
// +-----------------------------------------------------------------
// | DomainsToAddress HasID=false
// | DomainsToInterface HasID=false
// | Subnet HasID=false
// | ElemCustomerPremisesEquipment HasID=false
// | ElemDnsQueriesMetadata HasID=false
// | ElemCacheConfig HasID=false
// | Interface HasID=false
// | DnsServiceroleBindings HasID=false
// | DnsService HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &elementDnsServiceDataSource{}
	_ datasource.DataSourceWithConfigure = &elementDnsServiceDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewElementDnsServiceDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewElementDnsServiceDataSource() datasource.DataSource {
	return &elementDnsServiceDataSource{}
}

type elementDnsServiceDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *elementDnsServiceDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_element_dns_service"
}

// Schema defines the schema for this data source.
func (d *elementDnsServiceDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=DnsService
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=cache_config, type=REFERENCE macro=rss_schema
			"cache_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=cache_size, type=INTEGER macro=rss_schema
					"cache_size": dsschema.Int64Attribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=cache_size, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=cache_size, type=INTEGER macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=dns_queries_metadata, type=REFERENCE macro=rss_schema
			"dns_queries_metadata": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=add_customer_premises_equipment, type=REFERENCE macro=rss_schema
					"add_customer_premises_equipment": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=identifier_text, type=STRING macro=rss_schema
							"identifier_text": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=identifier_text, type=STRING macro=rss_schema
							// property: name=type, type=STRING macro=rss_schema
							"type": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=type, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=type, type=STRING macro=rss_schema
					// property: name=add_subnets, type=ARRAY_REFERENCE macro=rss_schema
					"add_subnets": dsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// property: name=ipv4_address, type=STRING macro=rss_schema
								"ipv4_address": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=ipv4_address, type=STRING macro=rss_schema
								// property: name=ipv4_prefix_length, type=INTEGER macro=rss_schema
								"ipv4_prefix_length": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=ipv4_prefix_length, type=INTEGER macro=rss_schema
								// property: name=ipv6_address, type=STRING macro=rss_schema
								"ipv6_address": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=ipv6_address, type=STRING macro=rss_schema
								// property: name=ipv6_prefix_length, type=INTEGER macro=rss_schema
								"ipv6_prefix_length": dsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=ipv6_prefix_length, type=INTEGER macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=ipv6_prefix_length, type=INTEGER macro=rss_schema
				},
			},
			// key name holder for attribute: name=ipv6_prefix_length, type=INTEGER macro=rss_schema
			// property: name=dnsservice_profile_id, type=STRING macro=rss_schema
			"dnsservice_profile_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=dnsservice_profile_id, type=STRING macro=rss_schema
			// property: name=dnsservicerole_bindings, type=ARRAY_REFERENCE macro=rss_schema
			"dnsservicerole_bindings": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=dnsservicerole_id, type=STRING macro=rss_schema
						"dnsservicerole_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=dnsservicerole_id, type=STRING macro=rss_schema
						// property: name=interfaces, type=ARRAY_REFERENCE macro=rss_schema
						"interfaces": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=interface_id, type=STRING macro=rss_schema
									"interface_id": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=interface_id, type=STRING macro=rss_schema
									// property: name=interface_ip, type=STRING macro=rss_schema
									"interface_ip": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=interface_ip, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=interface_ip, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=interface_ip, type=STRING macro=rss_schema
			// property: name=domains_to_addresses, type=ARRAY_REFERENCE macro=rss_schema
			"domains_to_addresses": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=domain_names, type=ARRAY_PRIMITIVE macro=rss_schema
						"domain_names": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=domain_names, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=ipv4_address, type=STRING macro=rss_schema
						"ipv4_address": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=ipv4_address, type=STRING macro=rss_schema
						// property: name=ipv6_address, type=STRING macro=rss_schema
						"ipv6_address": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=ipv6_address, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=ipv6_address, type=STRING macro=rss_schema
			// property: name=domains_to_interfaces, type=ARRAY_REFERENCE macro=rss_schema
			"domains_to_interfaces": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=domain_names, type=ARRAY_PRIMITIVE macro=rss_schema
						"domain_names": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=domain_names, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=interface_id, type=STRING macro=rss_schema
						"interface_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=interface_id, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=interface_id, type=STRING macro=rss_schema
			// property: name=element_id, type=STRING macro=rss_schema
			"element_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=element_id, type=STRING macro=rss_schema
			// property: name=enabled, type=BOOLEAN macro=rss_schema
			"enabled": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=max_concurrent_dns_queries, type=INTEGER macro=rss_schema
			"max_concurrent_dns_queries": dsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=max_concurrent_dns_queries, type=INTEGER macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *elementDnsServiceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *elementDnsServiceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelDnsService
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_element_dns_service",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 3 {
		resp.Diagnostics.AddError("error in prismasdwan_element_dns_service ID format", "Expected 3 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/dnsservices/{dnsservice_role_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["site_id"] = &tokens[0]
	params["element_id"] = &tokens[1]
	params["dnsservice_role_id"] = &tokens[2]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_element_dns_service", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.DnsService
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to DnsService", json_err.Error())
		return
	}

	// lets copy all items into state schema=DnsService
	// copy_to_state: state=state prefix=dsModel ans=ans properties=15
	tflog.Debug(ctx, "copy_to_state state=state prefix=dsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=cache_config, type=REFERENCE macro=copy_to_state
	if ans.CacheConfig == nil {
		state.CacheConfig = nil
	} else {
		state.CacheConfig = &dsModelElemCacheConfig{}
		// copy_to_state: state=state.CacheConfig prefix=dsModel ans=ans.CacheConfig properties=1
		tflog.Debug(ctx, "copy_to_state state=state.CacheConfig prefix=dsModel ans=ans.CacheConfig")
		// property: name=cache_size, type=INTEGER macro=copy_to_state
		state.CacheConfig.CacheSize = types.Int64PointerValue(ans.CacheConfig.CacheSize)
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=dns_queries_metadata, type=REFERENCE macro=copy_to_state
	if ans.DnsQueriesMetadata == nil {
		state.DnsQueriesMetadata = nil
	} else {
		state.DnsQueriesMetadata = &dsModelElemDnsQueriesMetadata{}
		// copy_to_state: state=state.DnsQueriesMetadata prefix=dsModel ans=ans.DnsQueriesMetadata properties=2
		tflog.Debug(ctx, "copy_to_state state=state.DnsQueriesMetadata prefix=dsModel ans=ans.DnsQueriesMetadata")
		// property: name=add_customer_premises_equipment, type=REFERENCE macro=copy_to_state
		if ans.DnsQueriesMetadata.AddCustomerPremisesEquipment == nil {
			state.DnsQueriesMetadata.AddCustomerPremisesEquipment = nil
		} else {
			state.DnsQueriesMetadata.AddCustomerPremisesEquipment = &dsModelElemCustomerPremisesEquipment{}
			// copy_to_state: state=state.DnsQueriesMetadata.AddCustomerPremisesEquipment prefix=dsModel ans=ans.DnsQueriesMetadata.AddCustomerPremisesEquipment properties=2
			tflog.Debug(ctx, "copy_to_state state=state.DnsQueriesMetadata.AddCustomerPremisesEquipment prefix=dsModel ans=ans.DnsQueriesMetadata.AddCustomerPremisesEquipment")
			// property: name=identifier_text, type=STRING macro=copy_to_state
			state.DnsQueriesMetadata.AddCustomerPremisesEquipment.IdentifierText = types.StringPointerValue(ans.DnsQueriesMetadata.AddCustomerPremisesEquipment.IdentifierText)
			// property: name=type, type=STRING macro=copy_to_state
			state.DnsQueriesMetadata.AddCustomerPremisesEquipment.Type = types.StringPointerValue(ans.DnsQueriesMetadata.AddCustomerPremisesEquipment.Type)
		}
		// property: name=add_subnets, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.DnsQueriesMetadata.AddSubnets == nil {
			state.DnsQueriesMetadata.AddSubnets = nil
		} else if len(ans.DnsQueriesMetadata.AddSubnets) == 0 {
			state.DnsQueriesMetadata.AddSubnets = []dsModelSubnet{}
		} else {
			state.DnsQueriesMetadata.AddSubnets = make([]dsModelSubnet, 0, len(ans.DnsQueriesMetadata.AddSubnets))
			for varLoopAddSubnetsIndex, varLoopAddSubnets := range ans.DnsQueriesMetadata.AddSubnets {
				// add a new item
				state.DnsQueriesMetadata.AddSubnets = append(state.DnsQueriesMetadata.AddSubnets, dsModelSubnet{})
				// copy_to_state: state=state.DnsQueriesMetadata.AddSubnets[varLoopAddSubnetsIndex] prefix=dsModel ans=varLoopAddSubnets properties=4
				tflog.Debug(ctx, "copy_to_state state=state.DnsQueriesMetadata.AddSubnets[varLoopAddSubnetsIndex] prefix=dsModel ans=varLoopAddSubnets")
				// property: name=ipv4_address, type=STRING macro=copy_to_state
				state.DnsQueriesMetadata.AddSubnets[varLoopAddSubnetsIndex].Ipv4Address = types.StringPointerValue(varLoopAddSubnets.Ipv4Address)
				// property: name=ipv4_prefix_length, type=INTEGER macro=copy_to_state
				state.DnsQueriesMetadata.AddSubnets[varLoopAddSubnetsIndex].Ipv4PrefixLength = types.Int64PointerValue(varLoopAddSubnets.Ipv4PrefixLength)
				// property: name=ipv6_address, type=STRING macro=copy_to_state
				state.DnsQueriesMetadata.AddSubnets[varLoopAddSubnetsIndex].Ipv6Address = types.StringPointerValue(varLoopAddSubnets.Ipv6Address)
				// property: name=ipv6_prefix_length, type=INTEGER macro=copy_to_state
				state.DnsQueriesMetadata.AddSubnets[varLoopAddSubnetsIndex].Ipv6PrefixLength = types.Int64PointerValue(varLoopAddSubnets.Ipv6PrefixLength)
			}
		}
	}
	// property: name=dnsservice_profile_id, type=STRING macro=copy_to_state
	state.DnsserviceProfileId = types.StringPointerValue(ans.DnsserviceProfileId)
	// property: name=dnsservicerole_bindings, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DnsserviceroleBindings == nil {
		state.DnsserviceroleBindings = nil
	} else if len(ans.DnsserviceroleBindings) == 0 {
		state.DnsserviceroleBindings = []dsModelDnsServiceroleBindings{}
	} else {
		state.DnsserviceroleBindings = make([]dsModelDnsServiceroleBindings, 0, len(ans.DnsserviceroleBindings))
		for varLoopDnsserviceroleBindingsIndex, varLoopDnsserviceroleBindings := range ans.DnsserviceroleBindings {
			// add a new item
			state.DnsserviceroleBindings = append(state.DnsserviceroleBindings, dsModelDnsServiceroleBindings{})
			// copy_to_state: state=state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex] prefix=dsModel ans=varLoopDnsserviceroleBindings properties=2
			tflog.Debug(ctx, "copy_to_state state=state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex] prefix=dsModel ans=varLoopDnsserviceroleBindings")
			// property: name=dnsservicerole_id, type=STRING macro=copy_to_state
			state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex].DnsserviceroleId = types.StringPointerValue(varLoopDnsserviceroleBindings.DnsserviceroleId)
			// property: name=interfaces, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopDnsserviceroleBindings.Interfaces == nil {
				state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex].Interfaces = nil
			} else if len(varLoopDnsserviceroleBindings.Interfaces) == 0 {
				state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex].Interfaces = []dsModelInterface{}
			} else {
				state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex].Interfaces = make([]dsModelInterface, 0, len(varLoopDnsserviceroleBindings.Interfaces))
				for varLoopInterfacesIndex, varLoopInterfaces := range varLoopDnsserviceroleBindings.Interfaces {
					// add a new item
					state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex].Interfaces = append(state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex].Interfaces, dsModelInterface{})
					// copy_to_state: state=state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex].Interfaces[varLoopInterfacesIndex] prefix=dsModel ans=varLoopInterfaces properties=2
					tflog.Debug(ctx, "copy_to_state state=state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex].Interfaces[varLoopInterfacesIndex] prefix=dsModel ans=varLoopInterfaces")
					// property: name=interface_id, type=STRING macro=copy_to_state
					state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex].Interfaces[varLoopInterfacesIndex].InterfaceId = types.StringPointerValue(varLoopInterfaces.InterfaceId)
					// property: name=interface_ip, type=STRING macro=copy_to_state
					state.DnsserviceroleBindings[varLoopDnsserviceroleBindingsIndex].Interfaces[varLoopInterfacesIndex].InterfaceIp = types.StringPointerValue(varLoopInterfaces.InterfaceIp)
				}
			}
		}
	}
	// property: name=domains_to_addresses, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DomainsToAddresses == nil {
		state.DomainsToAddresses = nil
	} else if len(ans.DomainsToAddresses) == 0 {
		state.DomainsToAddresses = []dsModelDomainsToAddress{}
	} else {
		state.DomainsToAddresses = make([]dsModelDomainsToAddress, 0, len(ans.DomainsToAddresses))
		for varLoopDomainsToAddressesIndex, varLoopDomainsToAddresses := range ans.DomainsToAddresses {
			// add a new item
			state.DomainsToAddresses = append(state.DomainsToAddresses, dsModelDomainsToAddress{})
			// copy_to_state: state=state.DomainsToAddresses[varLoopDomainsToAddressesIndex] prefix=dsModel ans=varLoopDomainsToAddresses properties=3
			tflog.Debug(ctx, "copy_to_state state=state.DomainsToAddresses[varLoopDomainsToAddressesIndex] prefix=dsModel ans=varLoopDomainsToAddresses")
			// property: name=domain_names, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDomainNames, errDomainNames := types.ListValueFrom(ctx, types.StringType, varLoopDomainsToAddresses.DomainNames)
			state.DomainsToAddresses[varLoopDomainsToAddressesIndex].DomainNames = varDomainNames
			resp.Diagnostics.Append(errDomainNames.Errors()...)
			// property: name=ipv4_address, type=STRING macro=copy_to_state
			state.DomainsToAddresses[varLoopDomainsToAddressesIndex].Ipv4Address = types.StringPointerValue(varLoopDomainsToAddresses.Ipv4Address)
			// property: name=ipv6_address, type=STRING macro=copy_to_state
			state.DomainsToAddresses[varLoopDomainsToAddressesIndex].Ipv6Address = types.StringPointerValue(varLoopDomainsToAddresses.Ipv6Address)
		}
	}
	// property: name=domains_to_interfaces, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DomainsToInterfaces == nil {
		state.DomainsToInterfaces = nil
	} else if len(ans.DomainsToInterfaces) == 0 {
		state.DomainsToInterfaces = []dsModelDomainsToInterface{}
	} else {
		state.DomainsToInterfaces = make([]dsModelDomainsToInterface, 0, len(ans.DomainsToInterfaces))
		for varLoopDomainsToInterfacesIndex, varLoopDomainsToInterfaces := range ans.DomainsToInterfaces {
			// add a new item
			state.DomainsToInterfaces = append(state.DomainsToInterfaces, dsModelDomainsToInterface{})
			// copy_to_state: state=state.DomainsToInterfaces[varLoopDomainsToInterfacesIndex] prefix=dsModel ans=varLoopDomainsToInterfaces properties=2
			tflog.Debug(ctx, "copy_to_state state=state.DomainsToInterfaces[varLoopDomainsToInterfacesIndex] prefix=dsModel ans=varLoopDomainsToInterfaces")
			// property: name=domain_names, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDomainNames, errDomainNames := types.ListValueFrom(ctx, types.StringType, varLoopDomainsToInterfaces.DomainNames)
			state.DomainsToInterfaces[varLoopDomainsToInterfacesIndex].DomainNames = varDomainNames
			resp.Diagnostics.Append(errDomainNames.Errors()...)
			// property: name=interface_id, type=STRING macro=copy_to_state
			state.DomainsToInterfaces[varLoopDomainsToInterfacesIndex].InterfaceId = types.StringPointerValue(varLoopDomainsToInterfaces.InterfaceId)
		}
	}
	// property: name=element_id, type=STRING macro=copy_to_state
	state.ElementId = types.StringPointerValue(ans.ElementId)
	// property: name=enabled, type=BOOLEAN macro=copy_to_state
	state.Enabled = types.BoolPointerValue(ans.Enabled)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=max_concurrent_dns_queries, type=INTEGER macro=copy_to_state
	state.MaxConcurrentDnsQueries = types.Int64PointerValue(ans.MaxConcurrentDnsQueries)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
