package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=7)
// | Computed Resource Name=natpolicysets
// +-----------------------------------------------------------------
// | NATPolicyZone HasID=true
// | NATPolicyPool HasID=true
// | BasePolicyPrefixS HasID=true
// | NATAction HasID=false
// | PortRange HasID=false
// | NATPolicyRule HasID=true
// | NATPolicySet HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &natPolicySetResource{}
	_ resource.ResourceWithConfigure   = &natPolicySetResource{}
	_ resource.ResourceWithImportState = &natPolicySetResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewNatPolicySetResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewNatPolicySetResource() resource.Resource {
	return &natPolicySetResource{}
}

type natPolicySetResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *natPolicySetResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_nat_policy_set"
}

// Schema defines the schema for this data source.
func (r *natPolicySetResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=NATPolicySet
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=clone_from, type=STRING macro=rss_schema
			"clone_from": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=clone_from, type=STRING macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=destination_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=rss_schema
			"destination_zone_policyrule_order": rsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=destination_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=policy_req_version, type=STRING macro=rss_schema
			"policy_req_version": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=policy_req_version, type=STRING macro=rss_schema
			// property: name=policy_rules, type=ARRAY_REFERENCE macro=rss_schema
			"policy_rules": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": rsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=actions, type=ARRAY_REFERENCE macro=rss_schema
						"actions": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=nat_pool_id, type=STRING macro=rss_schema
									"nat_pool_id": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=nat_pool_id, type=STRING macro=rss_schema
									// property: name=port, type=INTEGER macro=rss_schema
									"port": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=port, type=INTEGER macro=rss_schema
									// property: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
									"protocols": rsschema.ListAttribute{
										Required:    false,
										Computed:    false,
										Optional:    true,
										Sensitive:   false,
										ElementType: types.StringType,
									},
									// key name holder for attribute: name=protocols, type=ARRAY_PRIMITIVE macro=rss_schema
									// property: name=type, type=STRING macro=rss_schema
									"type": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=type, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=type, type=STRING macro=rss_schema
						// property: name=description, type=STRING macro=rss_schema
						"description": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=description, type=STRING macro=rss_schema
						// property: name=destination_ports, type=ARRAY_REFERENCE macro=rss_schema
						"destination_ports": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=from, type=INTEGER macro=rss_schema
									"from": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=from, type=INTEGER macro=rss_schema
									// property: name=to, type=INTEGER macro=rss_schema
									"to": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
						// property: name=destination_prefixes, type=REFERENCE macro=rss_schema
						"destination_prefixes": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// generic x_parameters is added to accomodate path parameters
								"x_parameters": rsschema.MapAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									ElementType: types.StringType,
								},
								// property: name=_etag, type=INTEGER macro=rss_schema
								"x_etag": rsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
								// property: name=_schema, type=INTEGER macro=rss_schema
								"x_schema": rsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
								// property: name=description, type=STRING macro=rss_schema
								"description": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=description, type=STRING macro=rss_schema
								// property: name=id, type=STRING macro=rss_schema
								"id": rsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=id, type=STRING macro=rss_schema
								// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								"ipv4_prefixes": rsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								"ipv6_prefixes": rsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=name, type=STRING macro=rss_schema
								"name": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=name, type=STRING macro=rss_schema
								// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
								"tags": rsschema.SetAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=destination_prefixes_id, type=STRING macro=rss_schema
						"destination_prefixes_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=destination_prefixes_id, type=STRING macro=rss_schema
						// property: name=destination_zone, type=REFERENCE macro=rss_schema
						"destination_zone": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// generic x_parameters is added to accomodate path parameters
								"x_parameters": rsschema.MapAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									ElementType: types.StringType,
								},
								// property: name=_etag, type=INTEGER macro=rss_schema
								"x_etag": rsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
								// property: name=_schema, type=INTEGER macro=rss_schema
								"x_schema": rsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
								// property: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
								"default_for_public_interfaces": rsschema.BoolAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
								// property: name=description, type=STRING macro=rss_schema
								"description": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=description, type=STRING macro=rss_schema
								// property: name=disabled, type=BOOLEAN macro=rss_schema
								"disabled": rsschema.BoolAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
								// property: name=disabled_reason, type=STRING macro=rss_schema
								"disabled_reason": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
								// property: name=id, type=STRING macro=rss_schema
								"id": rsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=id, type=STRING macro=rss_schema
								// property: name=inactive, type=BOOLEAN macro=rss_schema
								"inactive": rsschema.BoolAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
								// property: name=inactive_reason, type=STRING macro=rss_schema
								"inactive_reason": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
								// property: name=name, type=STRING macro=rss_schema
								"name": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=name, type=STRING macro=rss_schema
								// property: name=region, type=STRING macro=rss_schema
								"region": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=region, type=STRING macro=rss_schema
								// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
								"tags": rsschema.SetAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=destination_zone_id, type=STRING macro=rss_schema
						"destination_zone_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=destination_zone_id, type=STRING macro=rss_schema
						// property: name=disabled, type=BOOLEAN macro=rss_schema
						"disabled": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
						// property: name=disabled_reason, type=STRING macro=rss_schema
						"disabled_reason": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
						// property: name=enabled, type=BOOLEAN macro=rss_schema
						"enabled": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": rsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=inactive, type=BOOLEAN macro=rss_schema
						"inactive": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
						// property: name=inactive_reason, type=STRING macro=rss_schema
						"inactive_reason": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=natpolicypools, type=ARRAY_REFERENCE macro=rss_schema
						"natpolicypools": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// generic x_parameters is added to accomodate path parameters
									"x_parameters": rsschema.MapAttribute{
										Required:    false,
										Computed:    false,
										Optional:    true,
										ElementType: types.StringType,
									},
									// property: name=_etag, type=INTEGER macro=rss_schema
									"x_etag": rsschema.Int64Attribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
									// property: name=_schema, type=INTEGER macro=rss_schema
									"x_schema": rsschema.Int64Attribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
									// property: name=description, type=STRING macro=rss_schema
									"description": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=description, type=STRING macro=rss_schema
									// property: name=id, type=STRING macro=rss_schema
									"id": rsschema.StringAttribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=id, type=STRING macro=rss_schema
									// property: name=name, type=STRING macro=rss_schema
									"name": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=name, type=STRING macro=rss_schema
									// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
									"tags": rsschema.SetAttribute{
										Required:    false,
										Computed:    false,
										Optional:    true,
										Sensitive:   false,
										ElementType: types.StringType,
									},
									// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=policyset_id, type=STRING macro=rss_schema
						"policyset_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=policyset_id, type=STRING macro=rss_schema
						// property: name=protocol, type=INTEGER macro=rss_schema
						"protocol": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=protocol, type=INTEGER macro=rss_schema
						// property: name=region, type=STRING macro=rss_schema
						"region": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=region, type=STRING macro=rss_schema
						// property: name=source_ports, type=ARRAY_REFERENCE macro=rss_schema
						"source_ports": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=from, type=INTEGER macro=rss_schema
									"from": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=from, type=INTEGER macro=rss_schema
									// property: name=to, type=INTEGER macro=rss_schema
									"to": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=to, type=INTEGER macro=rss_schema
						// property: name=source_prefixes, type=REFERENCE macro=rss_schema
						"source_prefixes": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// generic x_parameters is added to accomodate path parameters
								"x_parameters": rsschema.MapAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									ElementType: types.StringType,
								},
								// property: name=_etag, type=INTEGER macro=rss_schema
								"x_etag": rsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
								// property: name=_schema, type=INTEGER macro=rss_schema
								"x_schema": rsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
								// property: name=description, type=STRING macro=rss_schema
								"description": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=description, type=STRING macro=rss_schema
								// property: name=id, type=STRING macro=rss_schema
								"id": rsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=id, type=STRING macro=rss_schema
								// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								"ipv4_prefixes": rsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								"ipv6_prefixes": rsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=name, type=STRING macro=rss_schema
								"name": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=name, type=STRING macro=rss_schema
								// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
								"tags": rsschema.SetAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=source_prefixes_id, type=STRING macro=rss_schema
						"source_prefixes_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=source_prefixes_id, type=STRING macro=rss_schema
						// property: name=source_zone, type=REFERENCE macro=rss_schema
						"source_zone": rsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]rsschema.Attribute{
								// generic x_parameters is added to accomodate path parameters
								"x_parameters": rsschema.MapAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									ElementType: types.StringType,
								},
								// property: name=_etag, type=INTEGER macro=rss_schema
								"x_etag": rsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
								// property: name=_schema, type=INTEGER macro=rss_schema
								"x_schema": rsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
								// property: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
								"default_for_public_interfaces": rsschema.BoolAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=default_for_public_interfaces, type=BOOLEAN macro=rss_schema
								// property: name=description, type=STRING macro=rss_schema
								"description": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=description, type=STRING macro=rss_schema
								// property: name=disabled, type=BOOLEAN macro=rss_schema
								"disabled": rsschema.BoolAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
								// property: name=disabled_reason, type=STRING macro=rss_schema
								"disabled_reason": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
								// property: name=id, type=STRING macro=rss_schema
								"id": rsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=id, type=STRING macro=rss_schema
								// property: name=inactive, type=BOOLEAN macro=rss_schema
								"inactive": rsschema.BoolAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
								// property: name=inactive_reason, type=STRING macro=rss_schema
								"inactive_reason": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
								// property: name=name, type=STRING macro=rss_schema
								"name": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=name, type=STRING macro=rss_schema
								// property: name=region, type=STRING macro=rss_schema
								"region": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=region, type=STRING macro=rss_schema
								// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
								"tags": rsschema.SetAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=source_zone_id, type=STRING macro=rss_schema
						"source_zone_id": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=source_zone_id, type=STRING macro=rss_schema
						// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
						"tags": rsschema.SetAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=send_to_element, type=BOOLEAN macro=rss_schema
			"send_to_element": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=send_to_element, type=BOOLEAN macro=rss_schema
			// property: name=source_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=rss_schema
			"source_zone_policyrule_order": rsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=source_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=update_order, type=BOOLEAN macro=rss_schema
			"update_order": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=update_order, type=BOOLEAN macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *natPolicySetResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *natPolicySetResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	case "POLICY_SET_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *natPolicySetResource) doPost(ctx context.Context, plan *rsModelNATPolicySet, state *rsModelNATPolicySet, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_nat_policy_set")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_nat_policy_set",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.0/api/natpolicysets"

	// copy parameters from plan always
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.NATPolicySet{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=18
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=clone_from, type=STRING macro=copy_from_plan
	body.CloneFrom = StringValueOrNil(plan.CloneFrom)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=destination_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.DestinationZonePolicyruleOrder = ListStringValueOrNil(ctx, plan.DestinationZonePolicyruleOrder)
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan
	body.Disabled = BoolValueOrNil(plan.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_from_plan
	body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan
	body.Inactive = BoolValueOrNil(plan.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_from_plan
	body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=policy_req_version, type=STRING macro=copy_from_plan
	body.PolicyReqVersion = StringValueOrNil(plan.PolicyReqVersion)
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.PolicyRules == nil {
		body.PolicyRules = nil
	} else if len(plan.PolicyRules) == 0 {
		body.PolicyRules = []sdwan_schema.NATPolicyRule{}
	} else {
		body.PolicyRules = make([]sdwan_schema.NATPolicyRule, 0, len(plan.PolicyRules))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range plan.PolicyRules {
			// add a new item
			body.PolicyRules = append(body.PolicyRules, sdwan_schema.NATPolicyRule{})
			// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel plan=varLoopPolicyRules properties=26
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Etag = Int64ValueOrNil(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Schema = Int64ValueOrNil(varLoopPolicyRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.Actions == nil {
				body.PolicyRules[varLoopPolicyRulesIndex].Actions = nil
			} else if len(varLoopPolicyRules.Actions) == 0 {
				body.PolicyRules[varLoopPolicyRulesIndex].Actions = []sdwan_schema.NATAction{}
			} else {
				body.PolicyRules[varLoopPolicyRulesIndex].Actions = make([]sdwan_schema.NATAction, 0, len(varLoopPolicyRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopPolicyRules.Actions {
					// add a new item
					body.PolicyRules[varLoopPolicyRulesIndex].Actions = append(body.PolicyRules[varLoopPolicyRulesIndex].Actions, sdwan_schema.NATAction{})
					// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel plan=varLoopActions properties=4
					// property: name=nat_pool_id, type=STRING macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].NatPoolId = StringValueOrNil(varLoopActions.NatPoolId)
					// property: name=port, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Port = Int64ValueOrNil(varLoopActions.Port)
					// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Protocols = ListStringValueOrNil(ctx, varLoopActions.Protocols)
					// property: name=type, type=STRING macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Type = StringValueOrNil(varLoopActions.Type)
				}
			}
			// property: name=description, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Description = StringValueOrNil(varLoopPolicyRules.Description)
			// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.DestinationPorts == nil {
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = nil
			} else if len(varLoopPolicyRules.DestinationPorts) == 0 {
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = []sdwan_schema.PortRange{}
			} else {
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = make([]sdwan_schema.PortRange, 0, len(varLoopPolicyRules.DestinationPorts))
				for varLoopDestinationPortsIndex, varLoopDestinationPorts := range varLoopPolicyRules.DestinationPorts {
					// add a new item
					body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = append(body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts, sdwan_schema.PortRange{})
					// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex] prefix=rsModel plan=varLoopDestinationPorts properties=2
					// property: name=from, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].From = Int64ValueOrNil(varLoopDestinationPorts.From)
					// property: name=to, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].To = Int64ValueOrNil(varLoopDestinationPorts.To)
				}
			}
			// property: name=destination_prefixes, type=REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.DestinationPrefixes != nil {
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes = &sdwan_schema.BasePolicyPrefixS{}
				// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes prefix=rsModel plan=varLoopPolicyRules.DestinationPrefixes properties=8
				// property: name=_etag, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Etag = Int64ValueOrNil(varLoopPolicyRules.DestinationPrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Schema = Int64ValueOrNil(varLoopPolicyRules.DestinationPrefixes.Schema)
				// property: name=description, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Description = StringValueOrNil(varLoopPolicyRules.DestinationPrefixes.Description)
				// property: name=id, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Id = StringValueOrNil(varLoopPolicyRules.DestinationPrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv4Prefixes = ListStringValueOrNil(ctx, varLoopPolicyRules.DestinationPrefixes.Ipv4Prefixes)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv6Prefixes = ListStringValueOrNil(ctx, varLoopPolicyRules.DestinationPrefixes.Ipv6Prefixes)
				// property: name=name, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Name = StringValueOrNil(varLoopPolicyRules.DestinationPrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.DestinationPrefixes.Tags)
			}
			// property: name=destination_prefixes_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = StringValueOrNil(varLoopPolicyRules.DestinationPrefixesId)
			// property: name=destination_zone, type=REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.DestinationZone != nil {
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone = &sdwan_schema.NATPolicyZone{}
				// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone prefix=rsModel plan=varLoopPolicyRules.DestinationZone properties=12
				// property: name=_etag, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Etag = Int64ValueOrNil(varLoopPolicyRules.DestinationZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Schema = Int64ValueOrNil(varLoopPolicyRules.DestinationZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DefaultForPublicInterfaces = BoolValueOrNil(varLoopPolicyRules.DestinationZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Description = StringValueOrNil(varLoopPolicyRules.DestinationZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Disabled = BoolValueOrNil(varLoopPolicyRules.DestinationZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DisabledReason = StringValueOrNil(varLoopPolicyRules.DestinationZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Id = StringValueOrNil(varLoopPolicyRules.DestinationZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Inactive = BoolValueOrNil(varLoopPolicyRules.DestinationZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.InactiveReason = StringValueOrNil(varLoopPolicyRules.DestinationZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Name = StringValueOrNil(varLoopPolicyRules.DestinationZone.Name)
				// property: name=region, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Region = StringValueOrNil(varLoopPolicyRules.DestinationZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.DestinationZone.Tags)
			}
			// property: name=destination_zone_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].DestinationZoneId = StringValueOrNil(varLoopPolicyRules.DestinationZoneId)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Disabled = BoolValueOrNil(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = StringValueOrNil(varLoopPolicyRules.DisabledReason)
			// property: name=enabled, type=BOOLEAN macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Enabled = BoolValueOrNil(varLoopPolicyRules.Enabled)
			// property: name=id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Id = StringValueOrNil(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Inactive = BoolValueOrNil(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = StringValueOrNil(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Name = StringValueOrNil(varLoopPolicyRules.Name)
			// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.Natpolicypools == nil {
				body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = nil
			} else if len(varLoopPolicyRules.Natpolicypools) == 0 {
				body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = []sdwan_schema.NATPolicyPool{}
			} else {
				body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = make([]sdwan_schema.NATPolicyPool, 0, len(varLoopPolicyRules.Natpolicypools))
				for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range varLoopPolicyRules.Natpolicypools {
					// add a new item
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = append(body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools, sdwan_schema.NATPolicyPool{})
					// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex] prefix=rsModel plan=varLoopNatpolicypools properties=6
					// property: name=_etag, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Etag = Int64ValueOrNil(varLoopNatpolicypools.Etag)
					// property: name=_schema, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Schema = Int64ValueOrNil(varLoopNatpolicypools.Schema)
					// property: name=description, type=STRING macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Description = StringValueOrNil(varLoopNatpolicypools.Description)
					// property: name=id, type=STRING macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Id = StringValueOrNil(varLoopNatpolicypools.Id)
					// property: name=name, type=STRING macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Name = StringValueOrNil(varLoopNatpolicypools.Name)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Tags = SetStringValueOrNil(ctx, varLoopNatpolicypools.Tags)
				}
			}
			// property: name=policyset_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = StringValueOrNil(varLoopPolicyRules.PolicysetId)
			// property: name=protocol, type=INTEGER macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Protocol = Int64ValueOrNil(varLoopPolicyRules.Protocol)
			// property: name=region, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Region = StringValueOrNil(varLoopPolicyRules.Region)
			// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.SourcePorts == nil {
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = nil
			} else if len(varLoopPolicyRules.SourcePorts) == 0 {
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = []sdwan_schema.PortRange{}
			} else {
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = make([]sdwan_schema.PortRange, 0, len(varLoopPolicyRules.SourcePorts))
				for varLoopSourcePortsIndex, varLoopSourcePorts := range varLoopPolicyRules.SourcePorts {
					// add a new item
					body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = append(body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts, sdwan_schema.PortRange{})
					// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex] prefix=rsModel plan=varLoopSourcePorts properties=2
					// property: name=from, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].From = Int64ValueOrNil(varLoopSourcePorts.From)
					// property: name=to, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].To = Int64ValueOrNil(varLoopSourcePorts.To)
				}
			}
			// property: name=source_prefixes, type=REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.SourcePrefixes != nil {
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes = &sdwan_schema.BasePolicyPrefixS{}
				// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes prefix=rsModel plan=varLoopPolicyRules.SourcePrefixes properties=8
				// property: name=_etag, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Etag = Int64ValueOrNil(varLoopPolicyRules.SourcePrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Schema = Int64ValueOrNil(varLoopPolicyRules.SourcePrefixes.Schema)
				// property: name=description, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Description = StringValueOrNil(varLoopPolicyRules.SourcePrefixes.Description)
				// property: name=id, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Id = StringValueOrNil(varLoopPolicyRules.SourcePrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv4Prefixes = ListStringValueOrNil(ctx, varLoopPolicyRules.SourcePrefixes.Ipv4Prefixes)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv6Prefixes = ListStringValueOrNil(ctx, varLoopPolicyRules.SourcePrefixes.Ipv6Prefixes)
				// property: name=name, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Name = StringValueOrNil(varLoopPolicyRules.SourcePrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.SourcePrefixes.Tags)
			}
			// property: name=source_prefixes_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = StringValueOrNil(varLoopPolicyRules.SourcePrefixesId)
			// property: name=source_zone, type=REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.SourceZone != nil {
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone = &sdwan_schema.NATPolicyZone{}
				// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].SourceZone prefix=rsModel plan=varLoopPolicyRules.SourceZone properties=12
				// property: name=_etag, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Etag = Int64ValueOrNil(varLoopPolicyRules.SourceZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Schema = Int64ValueOrNil(varLoopPolicyRules.SourceZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DefaultForPublicInterfaces = BoolValueOrNil(varLoopPolicyRules.SourceZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Description = StringValueOrNil(varLoopPolicyRules.SourceZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Disabled = BoolValueOrNil(varLoopPolicyRules.SourceZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DisabledReason = StringValueOrNil(varLoopPolicyRules.SourceZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Id = StringValueOrNil(varLoopPolicyRules.SourceZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Inactive = BoolValueOrNil(varLoopPolicyRules.SourceZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.InactiveReason = StringValueOrNil(varLoopPolicyRules.SourceZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Name = StringValueOrNil(varLoopPolicyRules.SourceZone.Name)
				// property: name=region, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Region = StringValueOrNil(varLoopPolicyRules.SourceZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.SourceZone.Tags)
			}
			// property: name=source_zone_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].SourceZoneId = StringValueOrNil(varLoopPolicyRules.SourceZoneId)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.Tags)
		}
	}
	// property: name=region, type=STRING macro=copy_from_plan
	body.Region = StringValueOrNil(plan.Region)
	// property: name=send_to_element, type=BOOLEAN macro=copy_from_plan
	body.SendToElement = BoolValueOrNil(plan.SendToElement)
	// property: name=source_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.SourceZonePolicyruleOrder = ListStringValueOrNil(ctx, plan.SourceZonePolicyruleOrder)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=update_order, type=BOOLEAN macro=copy_from_plan
	body.UpdateOrder = BoolValueOrNil(plan.UpdateOrder)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct NATPolicySet to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_req_version")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "send_to_element")
	request_body_string, _ = sjson.Delete(request_body_string, "update_order")
	request_body_string, _ = sjson.Delete(request_body_string, "link_health_rules")
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_nat_policy_set", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_nat_policy_set",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_nat_policy_set", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_nat_policy_set",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_nat_policy_set", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.NATPolicySet
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATPolicySet in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_nat_policy_set with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=NATPolicySet
	// copy_to_state: state=state prefix=rsModel ans=ans properties=18
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=destination_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDestinationZonePolicyruleOrder, errDestinationZonePolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.DestinationZonePolicyruleOrder)
	state.DestinationZonePolicyruleOrder = varDestinationZonePolicyruleOrder
	resp.Diagnostics.Append(errDestinationZonePolicyruleOrder.Errors()...)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policy_req_version, type=STRING macro=copy_to_state
	state.PolicyReqVersion = types.StringPointerValue(ans.PolicyReqVersion)
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PolicyRules == nil {
		state.PolicyRules = nil
	} else if len(ans.PolicyRules) == 0 {
		state.PolicyRules = []rsModelNATPolicyRule{}
	} else {
		state.PolicyRules = make([]rsModelNATPolicyRule, 0, len(ans.PolicyRules))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.PolicyRules {
			// add a new item
			state.PolicyRules = append(state.PolicyRules, rsModelNATPolicyRule{})
			// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=26
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.Actions == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = nil
			} else if len(varLoopPolicyRules.Actions) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = []rsModelNATAction{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = make([]rsModelNATAction, 0, len(varLoopPolicyRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopPolicyRules.Actions {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].Actions = append(state.PolicyRules[varLoopPolicyRulesIndex].Actions, rsModelNATAction{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions properties=4
					// property: name=nat_pool_id, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].NatPoolId = types.StringPointerValue(varLoopActions.NatPoolId)
					// property: name=port, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Port = types.Int64PointerValue(varLoopActions.Port)
					// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
					varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopActions.Protocols)
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Protocols = varProtocols
					resp.Diagnostics.Append(errProtocols.Errors()...)
					// property: name=type, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Type = types.StringPointerValue(varLoopActions.Type)
				}
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
			// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationPorts == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = nil
			} else if len(varLoopPolicyRules.DestinationPorts) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = []rsModelPortRange{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = make([]rsModelPortRange, 0, len(varLoopPolicyRules.DestinationPorts))
				for varLoopDestinationPortsIndex, varLoopDestinationPorts := range varLoopPolicyRules.DestinationPorts {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = append(state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts, rsModelPortRange{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex] prefix=rsModel ans=varLoopDestinationPorts properties=2
					// property: name=from, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].From = types.Int64PointerValue(varLoopDestinationPorts.From)
					// property: name=to, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].To = types.Int64PointerValue(varLoopDestinationPorts.To)
				}
			}
			// property: name=destination_prefixes, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationPrefixes == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes = &rsModelBasePolicyPrefixS{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes prefix=rsModel ans=varLoopPolicyRules.DestinationPrefixes properties=8
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Etag = types.Int64PointerValue(varLoopPolicyRules.DestinationPrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Schema = types.Int64PointerValue(varLoopPolicyRules.DestinationPrefixes.Schema)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Description = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Description)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Id = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Ipv4Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv4Prefixes = varIpv4Prefixes
				resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Ipv6Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv6Prefixes = varIpv6Prefixes
				resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Name = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixesId)
			// property: name=destination_zone, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationZone == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone = &rsModelNATPolicyZone{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone prefix=rsModel ans=varLoopPolicyRules.DestinationZone properties=12
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Etag = types.Int64PointerValue(varLoopPolicyRules.DestinationZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Schema = types.Int64PointerValue(varLoopPolicyRules.DestinationZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DefaultForPublicInterfaces = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Description = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Disabled = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DisabledReason = types.StringPointerValue(varLoopPolicyRules.DestinationZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Id = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Inactive = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.InactiveReason = types.StringPointerValue(varLoopPolicyRules.DestinationZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Name = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Name)
				// property: name=region, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Region = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationZone.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=destination_zone_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DestinationZoneId = types.StringPointerValue(varLoopPolicyRules.DestinationZoneId)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Disabled = types.BoolPointerValue(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = types.StringPointerValue(varLoopPolicyRules.DisabledReason)
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Enabled = types.BoolPointerValue(varLoopPolicyRules.Enabled)
			// property: name=id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Inactive = types.BoolPointerValue(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = types.StringPointerValue(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
			// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.Natpolicypools == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = nil
			} else if len(varLoopPolicyRules.Natpolicypools) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = []rsModelNATPolicyPool{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = make([]rsModelNATPolicyPool, 0, len(varLoopPolicyRules.Natpolicypools))
				for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range varLoopPolicyRules.Natpolicypools {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = append(state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools, rsModelNATPolicyPool{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex] prefix=rsModel ans=varLoopNatpolicypools properties=6
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Etag = types.Int64PointerValue(varLoopNatpolicypools.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Schema = types.Int64PointerValue(varLoopNatpolicypools.Schema)
					// property: name=description, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Description = types.StringPointerValue(varLoopNatpolicypools.Description)
					// property: name=id, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Id = types.StringPointerValue(varLoopNatpolicypools.Id)
					// property: name=name, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Name = types.StringPointerValue(varLoopNatpolicypools.Name)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
					varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopNatpolicypools.Tags)
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Tags = varTags
					resp.Diagnostics.Append(errTags.Errors()...)
				}
			}
			// property: name=policyset_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = types.StringPointerValue(varLoopPolicyRules.PolicysetId)
			// property: name=protocol, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Protocol = types.Int64PointerValue(varLoopPolicyRules.Protocol)
			// property: name=region, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Region = types.StringPointerValue(varLoopPolicyRules.Region)
			// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourcePorts == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = nil
			} else if len(varLoopPolicyRules.SourcePorts) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = []rsModelPortRange{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = make([]rsModelPortRange, 0, len(varLoopPolicyRules.SourcePorts))
				for varLoopSourcePortsIndex, varLoopSourcePorts := range varLoopPolicyRules.SourcePorts {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = append(state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts, rsModelPortRange{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex] prefix=rsModel ans=varLoopSourcePorts properties=2
					// property: name=from, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].From = types.Int64PointerValue(varLoopSourcePorts.From)
					// property: name=to, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].To = types.Int64PointerValue(varLoopSourcePorts.To)
				}
			}
			// property: name=source_prefixes, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourcePrefixes == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes = &rsModelBasePolicyPrefixS{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes prefix=rsModel ans=varLoopPolicyRules.SourcePrefixes properties=8
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Etag = types.Int64PointerValue(varLoopPolicyRules.SourcePrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Schema = types.Int64PointerValue(varLoopPolicyRules.SourcePrefixes.Schema)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Description = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Description)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Id = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Ipv4Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv4Prefixes = varIpv4Prefixes
				resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Ipv6Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv6Prefixes = varIpv6Prefixes
				resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Name = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=source_prefixes_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = types.StringPointerValue(varLoopPolicyRules.SourcePrefixesId)
			// property: name=source_zone, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourceZone == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone = &rsModelNATPolicyZone{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourceZone prefix=rsModel ans=varLoopPolicyRules.SourceZone properties=12
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Etag = types.Int64PointerValue(varLoopPolicyRules.SourceZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Schema = types.Int64PointerValue(varLoopPolicyRules.SourceZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DefaultForPublicInterfaces = types.BoolPointerValue(varLoopPolicyRules.SourceZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Description = types.StringPointerValue(varLoopPolicyRules.SourceZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Disabled = types.BoolPointerValue(varLoopPolicyRules.SourceZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DisabledReason = types.StringPointerValue(varLoopPolicyRules.SourceZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Id = types.StringPointerValue(varLoopPolicyRules.SourceZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Inactive = types.BoolPointerValue(varLoopPolicyRules.SourceZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.InactiveReason = types.StringPointerValue(varLoopPolicyRules.SourceZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Name = types.StringPointerValue(varLoopPolicyRules.SourceZone.Name)
				// property: name=region, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Region = types.StringPointerValue(varLoopPolicyRules.SourceZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.SourceZone.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=source_zone_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].SourceZoneId = types.StringPointerValue(varLoopPolicyRules.SourceZoneId)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
			state.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
	state.SendToElement = types.BoolPointerValue(ans.SendToElement)
	// property: name=source_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varSourceZonePolicyruleOrder, errSourceZonePolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.SourceZonePolicyruleOrder)
	state.SourceZonePolicyruleOrder = varSourceZonePolicyruleOrder
	resp.Diagnostics.Append(errSourceZonePolicyruleOrder.Errors()...)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=update_order, type=BOOLEAN macro=copy_to_state
	state.UpdateOrder = types.BoolPointerValue(ans.UpdateOrder)
	return true
}

func (r *natPolicySetResource) doGet(ctx context.Context, state *rsModelNATPolicySet, savestate *rsModelNATPolicySet, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_nat_policy_set",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_policy_set ID format", "Expected 1 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/natpolicysets/{nat_policy_set_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["nat_policy_set_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_nat_policy_set", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_nat_policy_set",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_nat_policy_set from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=NATPolicySet
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.NATPolicySet
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATPolicySet in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=18
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=destination_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDestinationZonePolicyruleOrder, errDestinationZonePolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.DestinationZonePolicyruleOrder)
	state.DestinationZonePolicyruleOrder = varDestinationZonePolicyruleOrder
	resp.Diagnostics.Append(errDestinationZonePolicyruleOrder.Errors()...)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policy_req_version, type=STRING macro=copy_to_state
	state.PolicyReqVersion = types.StringPointerValue(ans.PolicyReqVersion)
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PolicyRules == nil {
		state.PolicyRules = nil
	} else if len(ans.PolicyRules) == 0 {
		state.PolicyRules = []rsModelNATPolicyRule{}
	} else {
		state.PolicyRules = make([]rsModelNATPolicyRule, 0, len(ans.PolicyRules))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.PolicyRules {
			// add a new item
			state.PolicyRules = append(state.PolicyRules, rsModelNATPolicyRule{})
			// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=26
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.Actions == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = nil
			} else if len(varLoopPolicyRules.Actions) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = []rsModelNATAction{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = make([]rsModelNATAction, 0, len(varLoopPolicyRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopPolicyRules.Actions {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].Actions = append(state.PolicyRules[varLoopPolicyRulesIndex].Actions, rsModelNATAction{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions properties=4
					// property: name=nat_pool_id, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].NatPoolId = types.StringPointerValue(varLoopActions.NatPoolId)
					// property: name=port, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Port = types.Int64PointerValue(varLoopActions.Port)
					// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
					varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopActions.Protocols)
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Protocols = varProtocols
					resp.Diagnostics.Append(errProtocols.Errors()...)
					// property: name=type, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Type = types.StringPointerValue(varLoopActions.Type)
				}
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
			// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationPorts == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = nil
			} else if len(varLoopPolicyRules.DestinationPorts) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = []rsModelPortRange{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = make([]rsModelPortRange, 0, len(varLoopPolicyRules.DestinationPorts))
				for varLoopDestinationPortsIndex, varLoopDestinationPorts := range varLoopPolicyRules.DestinationPorts {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = append(state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts, rsModelPortRange{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex] prefix=rsModel ans=varLoopDestinationPorts properties=2
					// property: name=from, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].From = types.Int64PointerValue(varLoopDestinationPorts.From)
					// property: name=to, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].To = types.Int64PointerValue(varLoopDestinationPorts.To)
				}
			}
			// property: name=destination_prefixes, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationPrefixes == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes = &rsModelBasePolicyPrefixS{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes prefix=rsModel ans=varLoopPolicyRules.DestinationPrefixes properties=8
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Etag = types.Int64PointerValue(varLoopPolicyRules.DestinationPrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Schema = types.Int64PointerValue(varLoopPolicyRules.DestinationPrefixes.Schema)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Description = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Description)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Id = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Ipv4Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv4Prefixes = varIpv4Prefixes
				resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Ipv6Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv6Prefixes = varIpv6Prefixes
				resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Name = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixesId)
			// property: name=destination_zone, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationZone == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone = &rsModelNATPolicyZone{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone prefix=rsModel ans=varLoopPolicyRules.DestinationZone properties=12
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Etag = types.Int64PointerValue(varLoopPolicyRules.DestinationZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Schema = types.Int64PointerValue(varLoopPolicyRules.DestinationZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DefaultForPublicInterfaces = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Description = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Disabled = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DisabledReason = types.StringPointerValue(varLoopPolicyRules.DestinationZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Id = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Inactive = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.InactiveReason = types.StringPointerValue(varLoopPolicyRules.DestinationZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Name = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Name)
				// property: name=region, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Region = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationZone.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=destination_zone_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DestinationZoneId = types.StringPointerValue(varLoopPolicyRules.DestinationZoneId)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Disabled = types.BoolPointerValue(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = types.StringPointerValue(varLoopPolicyRules.DisabledReason)
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Enabled = types.BoolPointerValue(varLoopPolicyRules.Enabled)
			// property: name=id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Inactive = types.BoolPointerValue(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = types.StringPointerValue(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
			// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.Natpolicypools == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = nil
			} else if len(varLoopPolicyRules.Natpolicypools) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = []rsModelNATPolicyPool{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = make([]rsModelNATPolicyPool, 0, len(varLoopPolicyRules.Natpolicypools))
				for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range varLoopPolicyRules.Natpolicypools {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = append(state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools, rsModelNATPolicyPool{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex] prefix=rsModel ans=varLoopNatpolicypools properties=6
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Etag = types.Int64PointerValue(varLoopNatpolicypools.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Schema = types.Int64PointerValue(varLoopNatpolicypools.Schema)
					// property: name=description, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Description = types.StringPointerValue(varLoopNatpolicypools.Description)
					// property: name=id, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Id = types.StringPointerValue(varLoopNatpolicypools.Id)
					// property: name=name, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Name = types.StringPointerValue(varLoopNatpolicypools.Name)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
					varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopNatpolicypools.Tags)
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Tags = varTags
					resp.Diagnostics.Append(errTags.Errors()...)
				}
			}
			// property: name=policyset_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = types.StringPointerValue(varLoopPolicyRules.PolicysetId)
			// property: name=protocol, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Protocol = types.Int64PointerValue(varLoopPolicyRules.Protocol)
			// property: name=region, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Region = types.StringPointerValue(varLoopPolicyRules.Region)
			// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourcePorts == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = nil
			} else if len(varLoopPolicyRules.SourcePorts) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = []rsModelPortRange{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = make([]rsModelPortRange, 0, len(varLoopPolicyRules.SourcePorts))
				for varLoopSourcePortsIndex, varLoopSourcePorts := range varLoopPolicyRules.SourcePorts {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = append(state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts, rsModelPortRange{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex] prefix=rsModel ans=varLoopSourcePorts properties=2
					// property: name=from, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].From = types.Int64PointerValue(varLoopSourcePorts.From)
					// property: name=to, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].To = types.Int64PointerValue(varLoopSourcePorts.To)
				}
			}
			// property: name=source_prefixes, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourcePrefixes == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes = &rsModelBasePolicyPrefixS{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes prefix=rsModel ans=varLoopPolicyRules.SourcePrefixes properties=8
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Etag = types.Int64PointerValue(varLoopPolicyRules.SourcePrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Schema = types.Int64PointerValue(varLoopPolicyRules.SourcePrefixes.Schema)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Description = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Description)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Id = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Ipv4Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv4Prefixes = varIpv4Prefixes
				resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Ipv6Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv6Prefixes = varIpv6Prefixes
				resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Name = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=source_prefixes_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = types.StringPointerValue(varLoopPolicyRules.SourcePrefixesId)
			// property: name=source_zone, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourceZone == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone = &rsModelNATPolicyZone{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourceZone prefix=rsModel ans=varLoopPolicyRules.SourceZone properties=12
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Etag = types.Int64PointerValue(varLoopPolicyRules.SourceZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Schema = types.Int64PointerValue(varLoopPolicyRules.SourceZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DefaultForPublicInterfaces = types.BoolPointerValue(varLoopPolicyRules.SourceZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Description = types.StringPointerValue(varLoopPolicyRules.SourceZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Disabled = types.BoolPointerValue(varLoopPolicyRules.SourceZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DisabledReason = types.StringPointerValue(varLoopPolicyRules.SourceZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Id = types.StringPointerValue(varLoopPolicyRules.SourceZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Inactive = types.BoolPointerValue(varLoopPolicyRules.SourceZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.InactiveReason = types.StringPointerValue(varLoopPolicyRules.SourceZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Name = types.StringPointerValue(varLoopPolicyRules.SourceZone.Name)
				// property: name=region, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Region = types.StringPointerValue(varLoopPolicyRules.SourceZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.SourceZone.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=source_zone_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].SourceZoneId = types.StringPointerValue(varLoopPolicyRules.SourceZoneId)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
			state.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
	state.SendToElement = types.BoolPointerValue(ans.SendToElement)
	// property: name=source_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varSourceZonePolicyruleOrder, errSourceZonePolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.SourceZonePolicyruleOrder)
	state.SourceZonePolicyruleOrder = varSourceZonePolicyruleOrder
	resp.Diagnostics.Append(errSourceZonePolicyruleOrder.Errors()...)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=update_order, type=BOOLEAN macro=copy_to_state
	state.UpdateOrder = types.BoolPointerValue(ans.UpdateOrder)
	return true
}

func (r *natPolicySetResource) doPut(ctx context.Context, plan *rsModelNATPolicySet, state *rsModelNATPolicySet, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_nat_policy_set",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_nat_policy_set", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_policy_set ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.0/api/natpolicysets/{nat_policy_set_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["nat_policy_set_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.NATPolicySet{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=18
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=clone_from, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.CloneFrom = ValueStringPointerFromPlanOrState(plan.CloneFrom, state.CloneFrom)
	} else {
		body.CloneFrom = StringValueOrNil(plan.CloneFrom)
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=destination_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.DestinationZonePolicyruleOrder = ListStringValueOrNil(ctx, plan.DestinationZonePolicyruleOrder)
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Disabled = ValueBoolPointerFromPlanOrState(plan.Disabled, state.Disabled)
	} else {
		body.Disabled = BoolValueOrNil(plan.Disabled)
	}
	// property: name=disabled_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.DisabledReason = ValueStringPointerFromPlanOrState(plan.DisabledReason, state.DisabledReason)
	} else {
		body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Inactive = ValueBoolPointerFromPlanOrState(plan.Inactive, state.Inactive)
	} else {
		body.Inactive = BoolValueOrNil(plan.Inactive)
	}
	// property: name=inactive_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.InactiveReason = ValueStringPointerFromPlanOrState(plan.InactiveReason, state.InactiveReason)
	} else {
		body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=policy_req_version, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.PolicyReqVersion = ValueStringPointerFromPlanOrState(plan.PolicyReqVersion, state.PolicyReqVersion)
	} else {
		body.PolicyReqVersion = StringValueOrNil(plan.PolicyReqVersion)
	}
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.PolicyRules == nil && (state == nil || state.PolicyRules == nil) {
		body.PolicyRules = nil
	} else if len(plan.PolicyRules) == 0 && (state == nil || len(state.PolicyRules) == 0) {
		body.PolicyRules = []sdwan_schema.NATPolicyRule{}
	} else if len(plan.PolicyRules) != 0 || (state != nil && len(state.PolicyRules) != 0) {
		PolicyRulesToUse := plan.PolicyRules
		if len(plan.PolicyRules) == 0 {
			PolicyRulesToUse = state.PolicyRules
		}
		body.PolicyRules = make([]sdwan_schema.NATPolicyRule, 0, len(PolicyRulesToUse))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range PolicyRulesToUse {
			// add a new item
			body.PolicyRules = append(body.PolicyRules, sdwan_schema.NATPolicyRule{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel plan=varLoopPolicyRules properties=26
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Etag = Int64ValueOrNil(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Schema = Int64ValueOrNil(varLoopPolicyRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.Actions == nil {
				body.PolicyRules[varLoopPolicyRulesIndex].Actions = nil
			} else if len(varLoopPolicyRules.Actions) == 0 {
				body.PolicyRules[varLoopPolicyRulesIndex].Actions = []sdwan_schema.NATAction{}
			} else {
				body.PolicyRules[varLoopPolicyRulesIndex].Actions = make([]sdwan_schema.NATAction, 0, len(varLoopPolicyRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopPolicyRules.Actions {
					// add a new item
					body.PolicyRules[varLoopPolicyRulesIndex].Actions = append(body.PolicyRules[varLoopPolicyRulesIndex].Actions, sdwan_schema.NATAction{})
					// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel plan=varLoopActions properties=4
					// property: name=nat_pool_id, type=STRING macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].NatPoolId = StringValueOrNil(varLoopActions.NatPoolId)
					// property: name=port, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Port = Int64ValueOrNil(varLoopActions.Port)
					// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Protocols = ListStringValueOrNil(ctx, varLoopActions.Protocols)
					// property: name=type, type=STRING macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Type = StringValueOrNil(varLoopActions.Type)
				}
			}
			// property: name=description, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Description = StringValueOrNil(varLoopPolicyRules.Description)
			// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.DestinationPorts == nil {
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = nil
			} else if len(varLoopPolicyRules.DestinationPorts) == 0 {
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = []sdwan_schema.PortRange{}
			} else {
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = make([]sdwan_schema.PortRange, 0, len(varLoopPolicyRules.DestinationPorts))
				for varLoopDestinationPortsIndex, varLoopDestinationPorts := range varLoopPolicyRules.DestinationPorts {
					// add a new item
					body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = append(body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts, sdwan_schema.PortRange{})
					// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex] prefix=rsModel plan=varLoopDestinationPorts properties=2
					// property: name=from, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].From = Int64ValueOrNil(varLoopDestinationPorts.From)
					// property: name=to, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].To = Int64ValueOrNil(varLoopDestinationPorts.To)
				}
			}
			// property: name=destination_prefixes, type=REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.DestinationPrefixes != nil {
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes = &sdwan_schema.BasePolicyPrefixS{}
				// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes prefix=rsModel plan=varLoopPolicyRules.DestinationPrefixes properties=8
				// property: name=_etag, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Etag = Int64ValueOrNil(varLoopPolicyRules.DestinationPrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Schema = Int64ValueOrNil(varLoopPolicyRules.DestinationPrefixes.Schema)
				// property: name=description, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Description = StringValueOrNil(varLoopPolicyRules.DestinationPrefixes.Description)
				// property: name=id, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Id = StringValueOrNil(varLoopPolicyRules.DestinationPrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv4Prefixes = ListStringValueOrNil(ctx, varLoopPolicyRules.DestinationPrefixes.Ipv4Prefixes)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv6Prefixes = ListStringValueOrNil(ctx, varLoopPolicyRules.DestinationPrefixes.Ipv6Prefixes)
				// property: name=name, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Name = StringValueOrNil(varLoopPolicyRules.DestinationPrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.DestinationPrefixes.Tags)
			}
			// property: name=destination_prefixes_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = StringValueOrNil(varLoopPolicyRules.DestinationPrefixesId)
			// property: name=destination_zone, type=REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.DestinationZone != nil {
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone = &sdwan_schema.NATPolicyZone{}
				// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone prefix=rsModel plan=varLoopPolicyRules.DestinationZone properties=12
				// property: name=_etag, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Etag = Int64ValueOrNil(varLoopPolicyRules.DestinationZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Schema = Int64ValueOrNil(varLoopPolicyRules.DestinationZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DefaultForPublicInterfaces = BoolValueOrNil(varLoopPolicyRules.DestinationZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Description = StringValueOrNil(varLoopPolicyRules.DestinationZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Disabled = BoolValueOrNil(varLoopPolicyRules.DestinationZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DisabledReason = StringValueOrNil(varLoopPolicyRules.DestinationZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Id = StringValueOrNil(varLoopPolicyRules.DestinationZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Inactive = BoolValueOrNil(varLoopPolicyRules.DestinationZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.InactiveReason = StringValueOrNil(varLoopPolicyRules.DestinationZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Name = StringValueOrNil(varLoopPolicyRules.DestinationZone.Name)
				// property: name=region, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Region = StringValueOrNil(varLoopPolicyRules.DestinationZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.DestinationZone.Tags)
			}
			// property: name=destination_zone_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].DestinationZoneId = StringValueOrNil(varLoopPolicyRules.DestinationZoneId)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Disabled = BoolValueOrNil(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = StringValueOrNil(varLoopPolicyRules.DisabledReason)
			// property: name=enabled, type=BOOLEAN macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Enabled = BoolValueOrNil(varLoopPolicyRules.Enabled)
			// property: name=id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Id = StringValueOrNil(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Inactive = BoolValueOrNil(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = StringValueOrNil(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Name = StringValueOrNil(varLoopPolicyRules.Name)
			// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.Natpolicypools == nil {
				body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = nil
			} else if len(varLoopPolicyRules.Natpolicypools) == 0 {
				body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = []sdwan_schema.NATPolicyPool{}
			} else {
				body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = make([]sdwan_schema.NATPolicyPool, 0, len(varLoopPolicyRules.Natpolicypools))
				for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range varLoopPolicyRules.Natpolicypools {
					// add a new item
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = append(body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools, sdwan_schema.NATPolicyPool{})
					// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex] prefix=rsModel plan=varLoopNatpolicypools properties=6
					// property: name=_etag, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Etag = Int64ValueOrNil(varLoopNatpolicypools.Etag)
					// property: name=_schema, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Schema = Int64ValueOrNil(varLoopNatpolicypools.Schema)
					// property: name=description, type=STRING macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Description = StringValueOrNil(varLoopNatpolicypools.Description)
					// property: name=id, type=STRING macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Id = StringValueOrNil(varLoopNatpolicypools.Id)
					// property: name=name, type=STRING macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Name = StringValueOrNil(varLoopNatpolicypools.Name)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Tags = SetStringValueOrNil(ctx, varLoopNatpolicypools.Tags)
				}
			}
			// property: name=policyset_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = StringValueOrNil(varLoopPolicyRules.PolicysetId)
			// property: name=protocol, type=INTEGER macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Protocol = Int64ValueOrNil(varLoopPolicyRules.Protocol)
			// property: name=region, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Region = StringValueOrNil(varLoopPolicyRules.Region)
			// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.SourcePorts == nil {
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = nil
			} else if len(varLoopPolicyRules.SourcePorts) == 0 {
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = []sdwan_schema.PortRange{}
			} else {
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = make([]sdwan_schema.PortRange, 0, len(varLoopPolicyRules.SourcePorts))
				for varLoopSourcePortsIndex, varLoopSourcePorts := range varLoopPolicyRules.SourcePorts {
					// add a new item
					body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = append(body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts, sdwan_schema.PortRange{})
					// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex] prefix=rsModel plan=varLoopSourcePorts properties=2
					// property: name=from, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].From = Int64ValueOrNil(varLoopSourcePorts.From)
					// property: name=to, type=INTEGER macro=copy_from_plan
					body.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].To = Int64ValueOrNil(varLoopSourcePorts.To)
				}
			}
			// property: name=source_prefixes, type=REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.SourcePrefixes != nil {
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes = &sdwan_schema.BasePolicyPrefixS{}
				// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes prefix=rsModel plan=varLoopPolicyRules.SourcePrefixes properties=8
				// property: name=_etag, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Etag = Int64ValueOrNil(varLoopPolicyRules.SourcePrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Schema = Int64ValueOrNil(varLoopPolicyRules.SourcePrefixes.Schema)
				// property: name=description, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Description = StringValueOrNil(varLoopPolicyRules.SourcePrefixes.Description)
				// property: name=id, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Id = StringValueOrNil(varLoopPolicyRules.SourcePrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv4Prefixes = ListStringValueOrNil(ctx, varLoopPolicyRules.SourcePrefixes.Ipv4Prefixes)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv6Prefixes = ListStringValueOrNil(ctx, varLoopPolicyRules.SourcePrefixes.Ipv6Prefixes)
				// property: name=name, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Name = StringValueOrNil(varLoopPolicyRules.SourcePrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.SourcePrefixes.Tags)
			}
			// property: name=source_prefixes_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = StringValueOrNil(varLoopPolicyRules.SourcePrefixesId)
			// property: name=source_zone, type=REFERENCE macro=copy_from_plan
			if varLoopPolicyRules.SourceZone != nil {
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone = &sdwan_schema.NATPolicyZone{}
				// copy_from_plan: body=body.PolicyRules[varLoopPolicyRulesIndex].SourceZone prefix=rsModel plan=varLoopPolicyRules.SourceZone properties=12
				// property: name=_etag, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Etag = Int64ValueOrNil(varLoopPolicyRules.SourceZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Schema = Int64ValueOrNil(varLoopPolicyRules.SourceZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DefaultForPublicInterfaces = BoolValueOrNil(varLoopPolicyRules.SourceZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Description = StringValueOrNil(varLoopPolicyRules.SourceZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Disabled = BoolValueOrNil(varLoopPolicyRules.SourceZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DisabledReason = StringValueOrNil(varLoopPolicyRules.SourceZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Id = StringValueOrNil(varLoopPolicyRules.SourceZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Inactive = BoolValueOrNil(varLoopPolicyRules.SourceZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.InactiveReason = StringValueOrNil(varLoopPolicyRules.SourceZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Name = StringValueOrNil(varLoopPolicyRules.SourceZone.Name)
				// property: name=region, type=STRING macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Region = StringValueOrNil(varLoopPolicyRules.SourceZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
				body.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.SourceZone.Tags)
			}
			// property: name=source_zone_id, type=STRING macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].SourceZoneId = StringValueOrNil(varLoopPolicyRules.SourceZoneId)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.PolicyRules[varLoopPolicyRulesIndex].Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.Tags)
		}
	}
	// property: name=region, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Region = ValueStringPointerFromPlanOrState(plan.Region, state.Region)
	} else {
		body.Region = StringValueOrNil(plan.Region)
	}
	// property: name=send_to_element, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.SendToElement = ValueBoolPointerFromPlanOrState(plan.SendToElement, state.SendToElement)
	} else {
		body.SendToElement = BoolValueOrNil(plan.SendToElement)
	}
	// property: name=source_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.SourceZonePolicyruleOrder = ListStringValueOrNil(ctx, plan.SourceZonePolicyruleOrder)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=update_order, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.UpdateOrder = ValueBoolPointerFromPlanOrState(plan.UpdateOrder, state.UpdateOrder)
	} else {
		body.UpdateOrder = BoolValueOrNil(plan.UpdateOrder)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct NATPolicySet to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_req_version")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "send_to_element")
	request_body_string, _ = sjson.Delete(request_body_string, "update_order")
	request_body_string, _ = sjson.Delete(request_body_string, "link_health_rules")
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_nat_policy_set", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_nat_policy_set",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_nat_policy_set", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_nat_policy_set",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_nat_policy_set", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.NATPolicySet
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NATPolicySet in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=NATPolicySet
	// copy_to_state: state=state prefix=rsModel ans=ans properties=18
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=destination_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varDestinationZonePolicyruleOrder, errDestinationZonePolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.DestinationZonePolicyruleOrder)
	state.DestinationZonePolicyruleOrder = varDestinationZonePolicyruleOrder
	resp.Diagnostics.Append(errDestinationZonePolicyruleOrder.Errors()...)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policy_req_version, type=STRING macro=copy_to_state
	state.PolicyReqVersion = types.StringPointerValue(ans.PolicyReqVersion)
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PolicyRules == nil {
		state.PolicyRules = nil
	} else if len(ans.PolicyRules) == 0 {
		state.PolicyRules = []rsModelNATPolicyRule{}
	} else {
		state.PolicyRules = make([]rsModelNATPolicyRule, 0, len(ans.PolicyRules))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.PolicyRules {
			// add a new item
			state.PolicyRules = append(state.PolicyRules, rsModelNATPolicyRule{})
			// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=26
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
			// property: name=actions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.Actions == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = nil
			} else if len(varLoopPolicyRules.Actions) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = []rsModelNATAction{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].Actions = make([]rsModelNATAction, 0, len(varLoopPolicyRules.Actions))
				for varLoopActionsIndex, varLoopActions := range varLoopPolicyRules.Actions {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].Actions = append(state.PolicyRules[varLoopPolicyRulesIndex].Actions, rsModelNATAction{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex] prefix=rsModel ans=varLoopActions properties=4
					// property: name=nat_pool_id, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].NatPoolId = types.StringPointerValue(varLoopActions.NatPoolId)
					// property: name=port, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Port = types.Int64PointerValue(varLoopActions.Port)
					// property: name=protocols, type=ARRAY_PRIMITIVE macro=copy_to_state
					varProtocols, errProtocols := types.ListValueFrom(ctx, types.StringType, varLoopActions.Protocols)
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Protocols = varProtocols
					resp.Diagnostics.Append(errProtocols.Errors()...)
					// property: name=type, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Actions[varLoopActionsIndex].Type = types.StringPointerValue(varLoopActions.Type)
				}
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
			// property: name=destination_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationPorts == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = nil
			} else if len(varLoopPolicyRules.DestinationPorts) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = []rsModelPortRange{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = make([]rsModelPortRange, 0, len(varLoopPolicyRules.DestinationPorts))
				for varLoopDestinationPortsIndex, varLoopDestinationPorts := range varLoopPolicyRules.DestinationPorts {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts = append(state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts, rsModelPortRange{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex] prefix=rsModel ans=varLoopDestinationPorts properties=2
					// property: name=from, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].From = types.Int64PointerValue(varLoopDestinationPorts.From)
					// property: name=to, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].DestinationPorts[varLoopDestinationPortsIndex].To = types.Int64PointerValue(varLoopDestinationPorts.To)
				}
			}
			// property: name=destination_prefixes, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationPrefixes == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes = &rsModelBasePolicyPrefixS{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes prefix=rsModel ans=varLoopPolicyRules.DestinationPrefixes properties=8
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Etag = types.Int64PointerValue(varLoopPolicyRules.DestinationPrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Schema = types.Int64PointerValue(varLoopPolicyRules.DestinationPrefixes.Schema)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Description = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Description)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Id = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Ipv4Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv4Prefixes = varIpv4Prefixes
				resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Ipv6Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Ipv6Prefixes = varIpv6Prefixes
				resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Name = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationPrefixes.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixes.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixesId)
			// property: name=destination_zone, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.DestinationZone == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone = &rsModelNATPolicyZone{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone prefix=rsModel ans=varLoopPolicyRules.DestinationZone properties=12
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Etag = types.Int64PointerValue(varLoopPolicyRules.DestinationZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Schema = types.Int64PointerValue(varLoopPolicyRules.DestinationZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DefaultForPublicInterfaces = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Description = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Disabled = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.DisabledReason = types.StringPointerValue(varLoopPolicyRules.DestinationZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Id = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Inactive = types.BoolPointerValue(varLoopPolicyRules.DestinationZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.InactiveReason = types.StringPointerValue(varLoopPolicyRules.DestinationZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Name = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Name)
				// property: name=region, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Region = types.StringPointerValue(varLoopPolicyRules.DestinationZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.DestinationZone.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].DestinationZone.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=destination_zone_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DestinationZoneId = types.StringPointerValue(varLoopPolicyRules.DestinationZoneId)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Disabled = types.BoolPointerValue(varLoopPolicyRules.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DisabledReason = types.StringPointerValue(varLoopPolicyRules.DisabledReason)
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Enabled = types.BoolPointerValue(varLoopPolicyRules.Enabled)
			// property: name=id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Inactive = types.BoolPointerValue(varLoopPolicyRules.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].InactiveReason = types.StringPointerValue(varLoopPolicyRules.InactiveReason)
			// property: name=name, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
			// property: name=natpolicypools, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.Natpolicypools == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = nil
			} else if len(varLoopPolicyRules.Natpolicypools) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = []rsModelNATPolicyPool{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = make([]rsModelNATPolicyPool, 0, len(varLoopPolicyRules.Natpolicypools))
				for varLoopNatpolicypoolsIndex, varLoopNatpolicypools := range varLoopPolicyRules.Natpolicypools {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools = append(state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools, rsModelNATPolicyPool{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex] prefix=rsModel ans=varLoopNatpolicypools properties=6
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Etag = types.Int64PointerValue(varLoopNatpolicypools.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Schema = types.Int64PointerValue(varLoopNatpolicypools.Schema)
					// property: name=description, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Description = types.StringPointerValue(varLoopNatpolicypools.Description)
					// property: name=id, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Id = types.StringPointerValue(varLoopNatpolicypools.Id)
					// property: name=name, type=STRING macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Name = types.StringPointerValue(varLoopNatpolicypools.Name)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
					varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopNatpolicypools.Tags)
					state.PolicyRules[varLoopPolicyRulesIndex].Natpolicypools[varLoopNatpolicypoolsIndex].Tags = varTags
					resp.Diagnostics.Append(errTags.Errors()...)
				}
			}
			// property: name=policyset_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].PolicysetId = types.StringPointerValue(varLoopPolicyRules.PolicysetId)
			// property: name=protocol, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Protocol = types.Int64PointerValue(varLoopPolicyRules.Protocol)
			// property: name=region, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Region = types.StringPointerValue(varLoopPolicyRules.Region)
			// property: name=source_ports, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourcePorts == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = nil
			} else if len(varLoopPolicyRules.SourcePorts) == 0 {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = []rsModelPortRange{}
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = make([]rsModelPortRange, 0, len(varLoopPolicyRules.SourcePorts))
				for varLoopSourcePortsIndex, varLoopSourcePorts := range varLoopPolicyRules.SourcePorts {
					// add a new item
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts = append(state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts, rsModelPortRange{})
					// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex] prefix=rsModel ans=varLoopSourcePorts properties=2
					// property: name=from, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].From = types.Int64PointerValue(varLoopSourcePorts.From)
					// property: name=to, type=INTEGER macro=copy_to_state
					state.PolicyRules[varLoopPolicyRulesIndex].SourcePorts[varLoopSourcePortsIndex].To = types.Int64PointerValue(varLoopSourcePorts.To)
				}
			}
			// property: name=source_prefixes, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourcePrefixes == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes = &rsModelBasePolicyPrefixS{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes prefix=rsModel ans=varLoopPolicyRules.SourcePrefixes properties=8
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Etag = types.Int64PointerValue(varLoopPolicyRules.SourcePrefixes.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Schema = types.Int64PointerValue(varLoopPolicyRules.SourcePrefixes.Schema)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Description = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Description)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Id = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Id)
				// property: name=ipv4_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv4Prefixes, errIpv4Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Ipv4Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv4Prefixes = varIpv4Prefixes
				resp.Diagnostics.Append(errIpv4Prefixes.Errors()...)
				// property: name=ipv6_prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
				varIpv6Prefixes, errIpv6Prefixes := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Ipv6Prefixes)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Ipv6Prefixes = varIpv6Prefixes
				resp.Diagnostics.Append(errIpv6Prefixes.Errors()...)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Name = types.StringPointerValue(varLoopPolicyRules.SourcePrefixes.Name)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.SourcePrefixes.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixes.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=source_prefixes_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = types.StringPointerValue(varLoopPolicyRules.SourcePrefixesId)
			// property: name=source_zone, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.SourceZone == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone = &rsModelNATPolicyZone{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].SourceZone prefix=rsModel ans=varLoopPolicyRules.SourceZone properties=12
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Etag = types.Int64PointerValue(varLoopPolicyRules.SourceZone.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Schema = types.Int64PointerValue(varLoopPolicyRules.SourceZone.Schema)
				// property: name=default_for_public_interfaces, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DefaultForPublicInterfaces = types.BoolPointerValue(varLoopPolicyRules.SourceZone.DefaultForPublicInterfaces)
				// property: name=description, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Description = types.StringPointerValue(varLoopPolicyRules.SourceZone.Description)
				// property: name=disabled, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Disabled = types.BoolPointerValue(varLoopPolicyRules.SourceZone.Disabled)
				// property: name=disabled_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.DisabledReason = types.StringPointerValue(varLoopPolicyRules.SourceZone.DisabledReason)
				// property: name=id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Id = types.StringPointerValue(varLoopPolicyRules.SourceZone.Id)
				// property: name=inactive, type=BOOLEAN macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Inactive = types.BoolPointerValue(varLoopPolicyRules.SourceZone.Inactive)
				// property: name=inactive_reason, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.InactiveReason = types.StringPointerValue(varLoopPolicyRules.SourceZone.InactiveReason)
				// property: name=name, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Name = types.StringPointerValue(varLoopPolicyRules.SourceZone.Name)
				// property: name=region, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Region = types.StringPointerValue(varLoopPolicyRules.SourceZone.Region)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.SourceZone.Tags)
				state.PolicyRules[varLoopPolicyRulesIndex].SourceZone.Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
			// property: name=source_zone_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].SourceZoneId = types.StringPointerValue(varLoopPolicyRules.SourceZoneId)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
			state.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
	state.SendToElement = types.BoolPointerValue(ans.SendToElement)
	// property: name=source_zone_policyrule_order, type=ARRAY_PRIMITIVE macro=copy_to_state
	varSourceZonePolicyruleOrder, errSourceZonePolicyruleOrder := types.ListValueFrom(ctx, types.StringType, ans.SourceZonePolicyruleOrder)
	state.SourceZonePolicyruleOrder = varSourceZonePolicyruleOrder
	resp.Diagnostics.Append(errSourceZonePolicyruleOrder.Errors()...)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=update_order, type=BOOLEAN macro=copy_to_state
	state.UpdateOrder = types.BoolPointerValue(ans.UpdateOrder)
	return true
}

func (r *natPolicySetResource) doDelete(ctx context.Context, state *rsModelNATPolicySet, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_nat_policy_set",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_nat_policy_set ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.0/api/natpolicysets/{nat_policy_set_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["nat_policy_set_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_nat_policy_set", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *natPolicySetResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_nat_policy_set")
	var plan rsModelNATPolicySet
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelNATPolicySet
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *natPolicySetResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_nat_policy_set")
	var savestate, state rsModelNATPolicySet
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *natPolicySetResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_nat_policy_set")
	var plan, state rsModelNATPolicySet
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *natPolicySetResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_nat_policy_set")
	var state rsModelNATPolicySet
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *natPolicySetResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
