package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=9)
// | Computed Resource Name=sites_lannetworks
// +-----------------------------------------------------------------
// | LanNetworkIPv6Config HasID=false
// | BaseCustomDHCPOptions HasID=false
// | StaticMapping HasID=false
// | IPRange HasID=false
// | DHCPServer HasID=true
// | DHCPRelayOption82 HasID=false
// | DHCPRelay HasID=false
// | LanNetworkIPv4Config HasID=false
// | LANNetworkScreenV3N3 HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &siteLanNetworkResource{}
	_ resource.ResourceWithConfigure   = &siteLanNetworkResource{}
	_ resource.ResourceWithImportState = &siteLanNetworkResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewSiteLanNetworkResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewSiteLanNetworkResource() resource.Resource {
	return &siteLanNetworkResource{}
}

type siteLanNetworkResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *siteLanNetworkResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_site_lan_network"
}

// Schema defines the schema for this data source.
func (r *siteLanNetworkResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=LANNetworkScreenV3N3
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=ipv4_config, type=REFERENCE macro=rss_schema
			"ipv4_config": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=default_routers, type=ARRAY_PRIMITIVE macro=rss_schema
					"default_routers": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=default_routers, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=dhcp_relay, type=REFERENCE macro=rss_schema
					"dhcp_relay": rsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]rsschema.Attribute{
							// property: name=enabled, type=BOOLEAN macro=rss_schema
							"enabled": rsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
							// property: name=option_82, type=REFERENCE macro=rss_schema
							"option_82": rsschema.SingleNestedAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
								Attributes: map[string]rsschema.Attribute{
									// property: name=circuit_id, type=STRING macro=rss_schema
									"circuit_id": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=circuit_id, type=STRING macro=rss_schema
									// property: name=enabled, type=BOOLEAN macro=rss_schema
									"enabled": rsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
									// property: name=reforwarding_policy, type=STRING macro=rss_schema
									"reforwarding_policy": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=reforwarding_policy, type=STRING macro=rss_schema
									// property: name=remote_id, type=STRING macro=rss_schema
									"remote_id": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=remote_id, type=STRING macro=rss_schema
								},
							},
							// key name holder for attribute: name=remote_id, type=STRING macro=rss_schema
							// property: name=server_ips, type=ARRAY_PRIMITIVE macro=rss_schema
							"server_ips": rsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=server_ips, type=ARRAY_PRIMITIVE macro=rss_schema
							// property: name=source_interface, type=STRING macro=rss_schema
							"source_interface": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=source_interface, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=source_interface, type=STRING macro=rss_schema
					// property: name=dhcp_server, type=REFERENCE macro=rss_schema
					"dhcp_server": rsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]rsschema.Attribute{
							// generic x_parameters is added to accomodate path parameters
							"x_parameters": rsschema.MapAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								ElementType: types.StringType,
							},
							// property: name=_etag, type=INTEGER macro=rss_schema
							"x_etag": rsschema.Int64Attribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
							// property: name=_schema, type=INTEGER macro=rss_schema
							"x_schema": rsschema.Int64Attribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
							// property: name=broadcast_address, type=STRING macro=rss_schema
							"broadcast_address": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=broadcast_address, type=STRING macro=rss_schema
							// property: name=custom_options, type=ARRAY_REFERENCE macro=rss_schema
							"custom_options": rsschema.ListNestedAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
								NestedObject: rsschema.NestedAttributeObject{
									Attributes: map[string]rsschema.Attribute{
										// property: name=option_definition, type=STRING macro=rss_schema
										"option_definition": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=option_definition, type=STRING macro=rss_schema
										// property: name=option_value, type=STRING macro=rss_schema
										"option_value": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=option_value, type=STRING macro=rss_schema
									},
								},
							},
							// key name holder for attribute: name=option_value, type=STRING macro=rss_schema
							// property: name=default_lease_time, type=INTEGER macro=rss_schema
							"default_lease_time": rsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=default_lease_time, type=INTEGER macro=rss_schema
							// property: name=description, type=STRING macro=rss_schema
							"description": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=description, type=STRING macro=rss_schema
							// property: name=disabled, type=BOOLEAN macro=rss_schema
							"disabled": rsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
							// property: name=dns_servers, type=ARRAY_PRIMITIVE macro=rss_schema
							"dns_servers": rsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=dns_servers, type=ARRAY_PRIMITIVE macro=rss_schema
							// property: name=domain_name, type=STRING macro=rss_schema
							"domain_name": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=domain_name, type=STRING macro=rss_schema
							// property: name=gateway, type=STRING macro=rss_schema
							"gateway": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=gateway, type=STRING macro=rss_schema
							// property: name=id, type=STRING macro=rss_schema
							"id": rsschema.StringAttribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=id, type=STRING macro=rss_schema
							// property: name=ip_ranges, type=ARRAY_REFERENCE macro=rss_schema
							"ip_ranges": rsschema.ListNestedAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
								NestedObject: rsschema.NestedAttributeObject{
									Attributes: map[string]rsschema.Attribute{
										// property: name=end_ip, type=STRING macro=rss_schema
										"end_ip": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=end_ip, type=STRING macro=rss_schema
										// property: name=start_ip, type=STRING macro=rss_schema
										"start_ip": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=start_ip, type=STRING macro=rss_schema
									},
								},
							},
							// key name holder for attribute: name=start_ip, type=STRING macro=rss_schema
							// property: name=max_lease_time, type=INTEGER macro=rss_schema
							"max_lease_time": rsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=max_lease_time, type=INTEGER macro=rss_schema
							// property: name=network_context_id, type=STRING macro=rss_schema
							"network_context_id": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=network_context_id, type=STRING macro=rss_schema
							// property: name=static_mappings, type=ARRAY_REFERENCE macro=rss_schema
							"static_mappings": rsschema.ListNestedAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
								NestedObject: rsschema.NestedAttributeObject{
									Attributes: map[string]rsschema.Attribute{
										// property: name=ip_address, type=STRING macro=rss_schema
										"ip_address": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=ip_address, type=STRING macro=rss_schema
										// property: name=mac, type=STRING macro=rss_schema
										"mac": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=mac, type=STRING macro=rss_schema
										// property: name=name, type=STRING macro=rss_schema
										"name": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=name, type=STRING macro=rss_schema
									},
								},
							},
							// key name holder for attribute: name=name, type=STRING macro=rss_schema
							// property: name=subnet, type=STRING macro=rss_schema
							"subnet": rsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=subnet, type=STRING macro=rss_schema
							// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
							"tags": rsschema.SetAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						},
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
					// property: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"prefixes": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=ipv6_config, type=REFERENCE macro=rss_schema
			"ipv6_config": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// property: name=default_routers, type=ARRAY_PRIMITIVE macro=rss_schema
					"default_routers": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=default_routers, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"prefixes": rsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=network_context_id, type=STRING macro=rss_schema
			"network_context_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=network_context_id, type=STRING macro=rss_schema
			// property: name=scope, type=STRING macro=rss_schema
			"scope": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=scope, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=vrf_context_id, type=STRING macro=rss_schema
			"vrf_context_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=vrf_context_id, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *siteLanNetworkResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *siteLanNetworkResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *siteLanNetworkResource) doPost(ctx context.Context, plan *rsModelLANNetworkScreenV3N3, state *rsModelLANNetworkScreenV3N3, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_site_lan_network")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_site_lan_network",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_site_lan_network"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v3.3/api/sites/{site_id}/lannetworks"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, plan.TfParameters)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.LANNetworkScreenV3N3{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=11
	tflog.Debug(ctx, "copy_from_plan body=body prefix=rsModel plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=ipv4_config, type=REFERENCE macro=copy_from_plan
	if plan.Ipv4Config != nil {
		body.Ipv4Config = &sdwan_schema.LanNetworkIPv4Config{}
		// copy_from_plan: body=body.Ipv4Config prefix=rsModel plan=plan.Ipv4Config properties=4
		tflog.Debug(ctx, "copy_from_plan body=body.Ipv4Config prefix=rsModel plan=plan.Ipv4Config")
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.Ipv4Config.DefaultRouters = ListStringValueOrNil(ctx, plan.Ipv4Config.DefaultRouters)
		// property: name=dhcp_relay, type=REFERENCE macro=copy_from_plan
		if plan.Ipv4Config.DhcpRelay != nil {
			body.Ipv4Config.DhcpRelay = &sdwan_schema.DHCPRelay{}
			// copy_from_plan: body=body.Ipv4Config.DhcpRelay prefix=rsModel plan=plan.Ipv4Config.DhcpRelay properties=4
			tflog.Debug(ctx, "copy_from_plan body=body.Ipv4Config.DhcpRelay prefix=rsModel plan=plan.Ipv4Config.DhcpRelay")
			// property: name=enabled, type=BOOLEAN macro=copy_from_plan
			body.Ipv4Config.DhcpRelay.Enabled = BoolValueOrNil(plan.Ipv4Config.DhcpRelay.Enabled)
			// property: name=option_82, type=REFERENCE macro=copy_from_plan
			if plan.Ipv4Config.DhcpRelay.Option82 != nil {
				body.Ipv4Config.DhcpRelay.Option82 = &sdwan_schema.DHCPRelayOption82{}
				// copy_from_plan: body=body.Ipv4Config.DhcpRelay.Option82 prefix=rsModel plan=plan.Ipv4Config.DhcpRelay.Option82 properties=4
				tflog.Debug(ctx, "copy_from_plan body=body.Ipv4Config.DhcpRelay.Option82 prefix=rsModel plan=plan.Ipv4Config.DhcpRelay.Option82")
				// property: name=circuit_id, type=STRING macro=copy_from_plan
				body.Ipv4Config.DhcpRelay.Option82.CircuitId = StringValueOrNil(plan.Ipv4Config.DhcpRelay.Option82.CircuitId)
				// property: name=enabled, type=BOOLEAN macro=copy_from_plan
				body.Ipv4Config.DhcpRelay.Option82.Enabled = BoolValueOrNil(plan.Ipv4Config.DhcpRelay.Option82.Enabled)
				// property: name=reforwarding_policy, type=STRING macro=copy_from_plan
				body.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy = StringValueOrNil(plan.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy)
				// property: name=remote_id, type=STRING macro=copy_from_plan
				body.Ipv4Config.DhcpRelay.Option82.RemoteId = StringValueOrNil(plan.Ipv4Config.DhcpRelay.Option82.RemoteId)
			}
			// property: name=server_ips, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Ipv4Config.DhcpRelay.ServerIps = ListStringValueOrNil(ctx, plan.Ipv4Config.DhcpRelay.ServerIps)
			// property: name=source_interface, type=STRING macro=copy_from_plan
			body.Ipv4Config.DhcpRelay.SourceInterface = StringValueOrNil(plan.Ipv4Config.DhcpRelay.SourceInterface)
		}
		// property: name=dhcp_server, type=REFERENCE macro=copy_from_plan
		if plan.Ipv4Config.DhcpServer != nil {
			body.Ipv4Config.DhcpServer = &sdwan_schema.DHCPServer{}
			// copy_from_plan: body=body.Ipv4Config.DhcpServer prefix=rsModel plan=plan.Ipv4Config.DhcpServer properties=17
			tflog.Debug(ctx, "copy_from_plan body=body.Ipv4Config.DhcpServer prefix=rsModel plan=plan.Ipv4Config.DhcpServer")
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.Ipv4Config.DhcpServer.Etag = Int64ValueOrNil(plan.Ipv4Config.DhcpServer.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.Ipv4Config.DhcpServer.Schema = Int64ValueOrNil(plan.Ipv4Config.DhcpServer.Schema)
			// property: name=broadcast_address, type=STRING macro=copy_from_plan
			body.Ipv4Config.DhcpServer.BroadcastAddress = StringValueOrNil(plan.Ipv4Config.DhcpServer.BroadcastAddress)
			// property: name=custom_options, type=ARRAY_REFERENCE macro=copy_from_plan
			if plan.Ipv4Config.DhcpServer.CustomOptions == nil {
				body.Ipv4Config.DhcpServer.CustomOptions = nil
			} else if len(plan.Ipv4Config.DhcpServer.CustomOptions) == 0 {
				body.Ipv4Config.DhcpServer.CustomOptions = []sdwan_schema.BaseCustomDHCPOptions{}
			} else {
				body.Ipv4Config.DhcpServer.CustomOptions = make([]sdwan_schema.BaseCustomDHCPOptions, 0, len(plan.Ipv4Config.DhcpServer.CustomOptions))
				for varLoopCustomOptionsIndex, varLoopCustomOptions := range plan.Ipv4Config.DhcpServer.CustomOptions {
					// add a new item
					body.Ipv4Config.DhcpServer.CustomOptions = append(body.Ipv4Config.DhcpServer.CustomOptions, sdwan_schema.BaseCustomDHCPOptions{})
					// copy_from_plan: body=body.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=rsModel plan=varLoopCustomOptions properties=2
					tflog.Debug(ctx, "copy_from_plan body=body.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=rsModel plan=varLoopCustomOptions")
					// property: name=option_definition, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionDefinition = StringValueOrNil(varLoopCustomOptions.OptionDefinition)
					// property: name=option_value, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionValue = StringValueOrNil(varLoopCustomOptions.OptionValue)
				}
			}
			// property: name=default_lease_time, type=INTEGER macro=copy_from_plan
			body.Ipv4Config.DhcpServer.DefaultLeaseTime = Int64ValueOrNil(plan.Ipv4Config.DhcpServer.DefaultLeaseTime)
			// property: name=description, type=STRING macro=copy_from_plan
			body.Ipv4Config.DhcpServer.Description = StringValueOrNil(plan.Ipv4Config.DhcpServer.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.Ipv4Config.DhcpServer.Disabled = BoolValueOrNil(plan.Ipv4Config.DhcpServer.Disabled)
			// property: name=dns_servers, type=ARRAY_PRIMITIVE macro=copy_from_plan
			body.Ipv4Config.DhcpServer.DnsServers = ListStringValueOrNil(ctx, plan.Ipv4Config.DhcpServer.DnsServers)
			// property: name=domain_name, type=STRING macro=copy_from_plan
			body.Ipv4Config.DhcpServer.DomainName = StringValueOrNil(plan.Ipv4Config.DhcpServer.DomainName)
			// property: name=gateway, type=STRING macro=copy_from_plan
			body.Ipv4Config.DhcpServer.Gateway = StringValueOrNil(plan.Ipv4Config.DhcpServer.Gateway)
			// property: name=id, type=STRING macro=copy_from_plan
			body.Ipv4Config.DhcpServer.Id = StringValueOrNil(plan.Ipv4Config.DhcpServer.Id)
			// property: name=ip_ranges, type=ARRAY_REFERENCE macro=copy_from_plan
			if plan.Ipv4Config.DhcpServer.IpRanges == nil {
				body.Ipv4Config.DhcpServer.IpRanges = nil
			} else if len(plan.Ipv4Config.DhcpServer.IpRanges) == 0 {
				body.Ipv4Config.DhcpServer.IpRanges = []sdwan_schema.IPRange{}
			} else {
				body.Ipv4Config.DhcpServer.IpRanges = make([]sdwan_schema.IPRange, 0, len(plan.Ipv4Config.DhcpServer.IpRanges))
				for varLoopIpRangesIndex, varLoopIpRanges := range plan.Ipv4Config.DhcpServer.IpRanges {
					// add a new item
					body.Ipv4Config.DhcpServer.IpRanges = append(body.Ipv4Config.DhcpServer.IpRanges, sdwan_schema.IPRange{})
					// copy_from_plan: body=body.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=rsModel plan=varLoopIpRanges properties=2
					tflog.Debug(ctx, "copy_from_plan body=body.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=rsModel plan=varLoopIpRanges")
					// property: name=end_ip, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].EndIp = StringValueOrNil(varLoopIpRanges.EndIp)
					// property: name=start_ip, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].StartIp = StringValueOrNil(varLoopIpRanges.StartIp)
				}
			}
			// property: name=max_lease_time, type=INTEGER macro=copy_from_plan
			body.Ipv4Config.DhcpServer.MaxLeaseTime = Int64ValueOrNil(plan.Ipv4Config.DhcpServer.MaxLeaseTime)
			// property: name=network_context_id, type=STRING macro=copy_from_plan
			body.Ipv4Config.DhcpServer.NetworkContextId = StringValueOrNil(plan.Ipv4Config.DhcpServer.NetworkContextId)
			// property: name=static_mappings, type=ARRAY_REFERENCE macro=copy_from_plan
			if plan.Ipv4Config.DhcpServer.StaticMappings == nil {
				body.Ipv4Config.DhcpServer.StaticMappings = nil
			} else if len(plan.Ipv4Config.DhcpServer.StaticMappings) == 0 {
				body.Ipv4Config.DhcpServer.StaticMappings = []sdwan_schema.StaticMapping{}
			} else {
				body.Ipv4Config.DhcpServer.StaticMappings = make([]sdwan_schema.StaticMapping, 0, len(plan.Ipv4Config.DhcpServer.StaticMappings))
				for varLoopStaticMappingsIndex, varLoopStaticMappings := range plan.Ipv4Config.DhcpServer.StaticMappings {
					// add a new item
					body.Ipv4Config.DhcpServer.StaticMappings = append(body.Ipv4Config.DhcpServer.StaticMappings, sdwan_schema.StaticMapping{})
					// copy_from_plan: body=body.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=rsModel plan=varLoopStaticMappings properties=3
					tflog.Debug(ctx, "copy_from_plan body=body.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=rsModel plan=varLoopStaticMappings")
					// property: name=ip_address, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].IpAddress = StringValueOrNil(varLoopStaticMappings.IpAddress)
					// property: name=mac, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Mac = StringValueOrNil(varLoopStaticMappings.Mac)
					// property: name=name, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Name = StringValueOrNil(varLoopStaticMappings.Name)
				}
			}
			// property: name=subnet, type=STRING macro=copy_from_plan
			body.Ipv4Config.DhcpServer.Subnet = StringValueOrNil(plan.Ipv4Config.DhcpServer.Subnet)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.Ipv4Config.DhcpServer.Tags = SetStringValueOrNil(ctx, plan.Ipv4Config.DhcpServer.Tags)
		}
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.Ipv4Config.Prefixes = ListStringValueOrNil(ctx, plan.Ipv4Config.Prefixes)
	}
	// property: name=ipv6_config, type=REFERENCE macro=copy_from_plan
	if plan.Ipv6Config != nil {
		body.Ipv6Config = &sdwan_schema.LanNetworkIPv6Config{}
		// copy_from_plan: body=body.Ipv6Config prefix=rsModel plan=plan.Ipv6Config properties=2
		tflog.Debug(ctx, "copy_from_plan body=body.Ipv6Config prefix=rsModel plan=plan.Ipv6Config")
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.Ipv6Config.DefaultRouters = ListStringValueOrNil(ctx, plan.Ipv6Config.DefaultRouters)
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan
		body.Ipv6Config.Prefixes = ListStringValueOrNil(ctx, plan.Ipv6Config.Prefixes)
	}
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=network_context_id, type=STRING macro=copy_from_plan
	body.NetworkContextId = StringValueOrNil(plan.NetworkContextId)
	// property: name=scope, type=STRING macro=copy_from_plan
	body.Scope = StringValueOrNil(plan.Scope)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=vrf_context_id, type=STRING macro=copy_from_plan
	body.VrfContextId = StringValueOrNil(plan.VrfContextId)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct LANNetworkScreenV3N3 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete request_body_string::id")
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	tflog.Debug(ctx, "http json override: delete request_body_string::_etag")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	tflog.Debug(ctx, "http json override: set request_body_string::_schema")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_site_lan_network", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_site_lan_network",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_site_lan_network", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_site_lan_network",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_site_lan_network", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.LANNetworkScreenV3N3
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to LANNetworkScreenV3N3 in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_site_lan_network with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=LANNetworkScreenV3N3
	// copy_to_state: state=state prefix=rsModel ans=ans properties=11
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipv4_config, type=REFERENCE macro=copy_to_state
	if ans.Ipv4Config == nil {
		state.Ipv4Config = nil
	} else {
		state.Ipv4Config = &rsModelLanNetworkIPv4Config{}
		// copy_to_state: state=state.Ipv4Config prefix=rsModel ans=ans.Ipv4Config properties=4
		tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config prefix=rsModel ans=ans.Ipv4Config")
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_to_state
		varDefaultRouters, errDefaultRouters := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DefaultRouters)
		state.Ipv4Config.DefaultRouters = varDefaultRouters
		resp.Diagnostics.Append(errDefaultRouters.Errors()...)
		// property: name=dhcp_relay, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.DhcpRelay == nil {
			state.Ipv4Config.DhcpRelay = nil
		} else {
			state.Ipv4Config.DhcpRelay = &rsModelDHCPRelay{}
			// copy_to_state: state=state.Ipv4Config.DhcpRelay prefix=rsModel ans=ans.Ipv4Config.DhcpRelay properties=4
			tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpRelay prefix=rsModel ans=ans.Ipv4Config.DhcpRelay")
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.Ipv4Config.DhcpRelay.Enabled = types.BoolPointerValue(ans.Ipv4Config.DhcpRelay.Enabled)
			// property: name=option_82, type=REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpRelay.Option82 == nil {
				state.Ipv4Config.DhcpRelay.Option82 = nil
			} else {
				state.Ipv4Config.DhcpRelay.Option82 = &rsModelDHCPRelayOption82{}
				// copy_to_state: state=state.Ipv4Config.DhcpRelay.Option82 prefix=rsModel ans=ans.Ipv4Config.DhcpRelay.Option82 properties=4
				tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpRelay.Option82 prefix=rsModel ans=ans.Ipv4Config.DhcpRelay.Option82")
				// property: name=circuit_id, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.CircuitId = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.CircuitId)
				// property: name=enabled, type=BOOLEAN macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.Enabled = types.BoolPointerValue(ans.Ipv4Config.DhcpRelay.Option82.Enabled)
				// property: name=reforwarding_policy, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy)
				// property: name=remote_id, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.RemoteId = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.RemoteId)
			}
			// property: name=server_ips, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerIps, errServerIps := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpRelay.ServerIps)
			state.Ipv4Config.DhcpRelay.ServerIps = varServerIps
			resp.Diagnostics.Append(errServerIps.Errors()...)
			// property: name=source_interface, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpRelay.SourceInterface = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.SourceInterface)
		}
		// property: name=dhcp_server, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.DhcpServer == nil {
			state.Ipv4Config.DhcpServer = nil
		} else {
			state.Ipv4Config.DhcpServer = &rsModelDHCPServer{}
			// copy_to_state: state=state.Ipv4Config.DhcpServer prefix=rsModel ans=ans.Ipv4Config.DhcpServer properties=17
			tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer prefix=rsModel ans=ans.Ipv4Config.DhcpServer")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.Etag = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.Schema = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.Schema)
			// property: name=broadcast_address, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.BroadcastAddress = types.StringPointerValue(ans.Ipv4Config.DhcpServer.BroadcastAddress)
			// property: name=custom_options, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.CustomOptions == nil {
				state.Ipv4Config.DhcpServer.CustomOptions = nil
			} else if len(ans.Ipv4Config.DhcpServer.CustomOptions) == 0 {
				state.Ipv4Config.DhcpServer.CustomOptions = []rsModelBaseCustomDHCPOptions{}
			} else {
				state.Ipv4Config.DhcpServer.CustomOptions = make([]rsModelBaseCustomDHCPOptions, 0, len(ans.Ipv4Config.DhcpServer.CustomOptions))
				for varLoopCustomOptionsIndex, varLoopCustomOptions := range ans.Ipv4Config.DhcpServer.CustomOptions {
					// add a new item
					state.Ipv4Config.DhcpServer.CustomOptions = append(state.Ipv4Config.DhcpServer.CustomOptions, rsModelBaseCustomDHCPOptions{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=rsModel ans=varLoopCustomOptions properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=rsModel ans=varLoopCustomOptions")
					// property: name=option_definition, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionDefinition = types.StringPointerValue(varLoopCustomOptions.OptionDefinition)
					// property: name=option_value, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionValue = types.StringPointerValue(varLoopCustomOptions.OptionValue)
				}
			}
			// property: name=default_lease_time, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.DefaultLeaseTime = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.DefaultLeaseTime)
			// property: name=description, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Description = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.Ipv4Config.DhcpServer.Disabled = types.BoolPointerValue(ans.Ipv4Config.DhcpServer.Disabled)
			// property: name=dns_servers, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDnsServers, errDnsServers := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpServer.DnsServers)
			state.Ipv4Config.DhcpServer.DnsServers = varDnsServers
			resp.Diagnostics.Append(errDnsServers.Errors()...)
			// property: name=domain_name, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.DomainName = types.StringPointerValue(ans.Ipv4Config.DhcpServer.DomainName)
			// property: name=gateway, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Gateway = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Gateway)
			// property: name=id, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Id = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Id)
			// property: name=ip_ranges, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.IpRanges == nil {
				state.Ipv4Config.DhcpServer.IpRanges = nil
			} else if len(ans.Ipv4Config.DhcpServer.IpRanges) == 0 {
				state.Ipv4Config.DhcpServer.IpRanges = []rsModelIPRange{}
			} else {
				state.Ipv4Config.DhcpServer.IpRanges = make([]rsModelIPRange, 0, len(ans.Ipv4Config.DhcpServer.IpRanges))
				for varLoopIpRangesIndex, varLoopIpRanges := range ans.Ipv4Config.DhcpServer.IpRanges {
					// add a new item
					state.Ipv4Config.DhcpServer.IpRanges = append(state.Ipv4Config.DhcpServer.IpRanges, rsModelIPRange{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=rsModel ans=varLoopIpRanges properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=rsModel ans=varLoopIpRanges")
					// property: name=end_ip, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].EndIp = types.StringPointerValue(varLoopIpRanges.EndIp)
					// property: name=start_ip, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].StartIp = types.StringPointerValue(varLoopIpRanges.StartIp)
				}
			}
			// property: name=max_lease_time, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.MaxLeaseTime = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.MaxLeaseTime)
			// property: name=network_context_id, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.NetworkContextId = types.StringPointerValue(ans.Ipv4Config.DhcpServer.NetworkContextId)
			// property: name=static_mappings, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.StaticMappings == nil {
				state.Ipv4Config.DhcpServer.StaticMappings = nil
			} else if len(ans.Ipv4Config.DhcpServer.StaticMappings) == 0 {
				state.Ipv4Config.DhcpServer.StaticMappings = []rsModelStaticMapping{}
			} else {
				state.Ipv4Config.DhcpServer.StaticMappings = make([]rsModelStaticMapping, 0, len(ans.Ipv4Config.DhcpServer.StaticMappings))
				for varLoopStaticMappingsIndex, varLoopStaticMappings := range ans.Ipv4Config.DhcpServer.StaticMappings {
					// add a new item
					state.Ipv4Config.DhcpServer.StaticMappings = append(state.Ipv4Config.DhcpServer.StaticMappings, rsModelStaticMapping{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=rsModel ans=varLoopStaticMappings properties=3
					tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=rsModel ans=varLoopStaticMappings")
					// property: name=ip_address, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].IpAddress = types.StringPointerValue(varLoopStaticMappings.IpAddress)
					// property: name=mac, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Mac = types.StringPointerValue(varLoopStaticMappings.Mac)
					// property: name=name, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Name = types.StringPointerValue(varLoopStaticMappings.Name)
				}
			}
			// property: name=subnet, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Subnet = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Subnet)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpServer.Tags)
			state.Ipv4Config.DhcpServer.Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varPrefixes, errPrefixes := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.Prefixes)
		state.Ipv4Config.Prefixes = varPrefixes
		resp.Diagnostics.Append(errPrefixes.Errors()...)
	}
	// property: name=ipv6_config, type=REFERENCE macro=copy_to_state
	if ans.Ipv6Config == nil {
		state.Ipv6Config = nil
	} else {
		state.Ipv6Config = &rsModelLanNetworkIPv6Config{}
		// copy_to_state: state=state.Ipv6Config prefix=rsModel ans=ans.Ipv6Config properties=2
		tflog.Debug(ctx, "copy_to_state state=state.Ipv6Config prefix=rsModel ans=ans.Ipv6Config")
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_to_state
		varDefaultRouters, errDefaultRouters := types.ListValueFrom(ctx, types.StringType, ans.Ipv6Config.DefaultRouters)
		state.Ipv6Config.DefaultRouters = varDefaultRouters
		resp.Diagnostics.Append(errDefaultRouters.Errors()...)
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varPrefixes, errPrefixes := types.ListValueFrom(ctx, types.StringType, ans.Ipv6Config.Prefixes)
		state.Ipv6Config.Prefixes = varPrefixes
		resp.Diagnostics.Append(errPrefixes.Errors()...)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=network_context_id, type=STRING macro=copy_to_state
	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)
	// property: name=scope, type=STRING macro=copy_to_state
	state.Scope = types.StringPointerValue(ans.Scope)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=vrf_context_id, type=STRING macro=copy_to_state
	state.VrfContextId = types.StringPointerValue(ans.VrfContextId)
	return true
}

func (r *siteLanNetworkResource) doGet(ctx context.Context, state *rsModelLANNetworkScreenV3N3, savestate *rsModelLANNetworkScreenV3N3, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_site_lan_network",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_site_lan_network ID format", "Expected 2 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_site_lan_network"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v3.3/api/sites/{site_id}/lannetworks/{lannetwork_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["lannetwork_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_site_lan_network", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_site_lan_network",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_site_lan_network from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=LANNetworkScreenV3N3
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.LANNetworkScreenV3N3
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to LANNetworkScreenV3N3 in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=11
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipv4_config, type=REFERENCE macro=copy_to_state
	if ans.Ipv4Config == nil {
		state.Ipv4Config = nil
	} else {
		state.Ipv4Config = &rsModelLanNetworkIPv4Config{}
		// copy_to_state: state=state.Ipv4Config prefix=rsModel ans=ans.Ipv4Config properties=4
		tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config prefix=rsModel ans=ans.Ipv4Config")
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_to_state
		varDefaultRouters, errDefaultRouters := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DefaultRouters)
		state.Ipv4Config.DefaultRouters = varDefaultRouters
		resp.Diagnostics.Append(errDefaultRouters.Errors()...)
		// property: name=dhcp_relay, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.DhcpRelay == nil {
			state.Ipv4Config.DhcpRelay = nil
		} else {
			state.Ipv4Config.DhcpRelay = &rsModelDHCPRelay{}
			// copy_to_state: state=state.Ipv4Config.DhcpRelay prefix=rsModel ans=ans.Ipv4Config.DhcpRelay properties=4
			tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpRelay prefix=rsModel ans=ans.Ipv4Config.DhcpRelay")
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.Ipv4Config.DhcpRelay.Enabled = types.BoolPointerValue(ans.Ipv4Config.DhcpRelay.Enabled)
			// property: name=option_82, type=REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpRelay.Option82 == nil {
				state.Ipv4Config.DhcpRelay.Option82 = nil
			} else {
				state.Ipv4Config.DhcpRelay.Option82 = &rsModelDHCPRelayOption82{}
				// copy_to_state: state=state.Ipv4Config.DhcpRelay.Option82 prefix=rsModel ans=ans.Ipv4Config.DhcpRelay.Option82 properties=4
				tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpRelay.Option82 prefix=rsModel ans=ans.Ipv4Config.DhcpRelay.Option82")
				// property: name=circuit_id, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.CircuitId = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.CircuitId)
				// property: name=enabled, type=BOOLEAN macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.Enabled = types.BoolPointerValue(ans.Ipv4Config.DhcpRelay.Option82.Enabled)
				// property: name=reforwarding_policy, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy)
				// property: name=remote_id, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.RemoteId = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.RemoteId)
			}
			// property: name=server_ips, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerIps, errServerIps := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpRelay.ServerIps)
			state.Ipv4Config.DhcpRelay.ServerIps = varServerIps
			resp.Diagnostics.Append(errServerIps.Errors()...)
			// property: name=source_interface, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpRelay.SourceInterface = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.SourceInterface)
		}
		// property: name=dhcp_server, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.DhcpServer == nil {
			state.Ipv4Config.DhcpServer = nil
		} else {
			state.Ipv4Config.DhcpServer = &rsModelDHCPServer{}
			// copy_to_state: state=state.Ipv4Config.DhcpServer prefix=rsModel ans=ans.Ipv4Config.DhcpServer properties=17
			tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer prefix=rsModel ans=ans.Ipv4Config.DhcpServer")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.Etag = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.Schema = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.Schema)
			// property: name=broadcast_address, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.BroadcastAddress = types.StringPointerValue(ans.Ipv4Config.DhcpServer.BroadcastAddress)
			// property: name=custom_options, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.CustomOptions == nil {
				state.Ipv4Config.DhcpServer.CustomOptions = nil
			} else if len(ans.Ipv4Config.DhcpServer.CustomOptions) == 0 {
				state.Ipv4Config.DhcpServer.CustomOptions = []rsModelBaseCustomDHCPOptions{}
			} else {
				state.Ipv4Config.DhcpServer.CustomOptions = make([]rsModelBaseCustomDHCPOptions, 0, len(ans.Ipv4Config.DhcpServer.CustomOptions))
				for varLoopCustomOptionsIndex, varLoopCustomOptions := range ans.Ipv4Config.DhcpServer.CustomOptions {
					// add a new item
					state.Ipv4Config.DhcpServer.CustomOptions = append(state.Ipv4Config.DhcpServer.CustomOptions, rsModelBaseCustomDHCPOptions{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=rsModel ans=varLoopCustomOptions properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=rsModel ans=varLoopCustomOptions")
					// property: name=option_definition, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionDefinition = types.StringPointerValue(varLoopCustomOptions.OptionDefinition)
					// property: name=option_value, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionValue = types.StringPointerValue(varLoopCustomOptions.OptionValue)
				}
			}
			// property: name=default_lease_time, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.DefaultLeaseTime = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.DefaultLeaseTime)
			// property: name=description, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Description = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.Ipv4Config.DhcpServer.Disabled = types.BoolPointerValue(ans.Ipv4Config.DhcpServer.Disabled)
			// property: name=dns_servers, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDnsServers, errDnsServers := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpServer.DnsServers)
			state.Ipv4Config.DhcpServer.DnsServers = varDnsServers
			resp.Diagnostics.Append(errDnsServers.Errors()...)
			// property: name=domain_name, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.DomainName = types.StringPointerValue(ans.Ipv4Config.DhcpServer.DomainName)
			// property: name=gateway, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Gateway = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Gateway)
			// property: name=id, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Id = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Id)
			// property: name=ip_ranges, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.IpRanges == nil {
				state.Ipv4Config.DhcpServer.IpRanges = nil
			} else if len(ans.Ipv4Config.DhcpServer.IpRanges) == 0 {
				state.Ipv4Config.DhcpServer.IpRanges = []rsModelIPRange{}
			} else {
				state.Ipv4Config.DhcpServer.IpRanges = make([]rsModelIPRange, 0, len(ans.Ipv4Config.DhcpServer.IpRanges))
				for varLoopIpRangesIndex, varLoopIpRanges := range ans.Ipv4Config.DhcpServer.IpRanges {
					// add a new item
					state.Ipv4Config.DhcpServer.IpRanges = append(state.Ipv4Config.DhcpServer.IpRanges, rsModelIPRange{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=rsModel ans=varLoopIpRanges properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=rsModel ans=varLoopIpRanges")
					// property: name=end_ip, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].EndIp = types.StringPointerValue(varLoopIpRanges.EndIp)
					// property: name=start_ip, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].StartIp = types.StringPointerValue(varLoopIpRanges.StartIp)
				}
			}
			// property: name=max_lease_time, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.MaxLeaseTime = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.MaxLeaseTime)
			// property: name=network_context_id, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.NetworkContextId = types.StringPointerValue(ans.Ipv4Config.DhcpServer.NetworkContextId)
			// property: name=static_mappings, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.StaticMappings == nil {
				state.Ipv4Config.DhcpServer.StaticMappings = nil
			} else if len(ans.Ipv4Config.DhcpServer.StaticMappings) == 0 {
				state.Ipv4Config.DhcpServer.StaticMappings = []rsModelStaticMapping{}
			} else {
				state.Ipv4Config.DhcpServer.StaticMappings = make([]rsModelStaticMapping, 0, len(ans.Ipv4Config.DhcpServer.StaticMappings))
				for varLoopStaticMappingsIndex, varLoopStaticMappings := range ans.Ipv4Config.DhcpServer.StaticMappings {
					// add a new item
					state.Ipv4Config.DhcpServer.StaticMappings = append(state.Ipv4Config.DhcpServer.StaticMappings, rsModelStaticMapping{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=rsModel ans=varLoopStaticMappings properties=3
					tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=rsModel ans=varLoopStaticMappings")
					// property: name=ip_address, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].IpAddress = types.StringPointerValue(varLoopStaticMappings.IpAddress)
					// property: name=mac, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Mac = types.StringPointerValue(varLoopStaticMappings.Mac)
					// property: name=name, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Name = types.StringPointerValue(varLoopStaticMappings.Name)
				}
			}
			// property: name=subnet, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Subnet = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Subnet)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpServer.Tags)
			state.Ipv4Config.DhcpServer.Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varPrefixes, errPrefixes := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.Prefixes)
		state.Ipv4Config.Prefixes = varPrefixes
		resp.Diagnostics.Append(errPrefixes.Errors()...)
	}
	// property: name=ipv6_config, type=REFERENCE macro=copy_to_state
	if ans.Ipv6Config == nil {
		state.Ipv6Config = nil
	} else {
		state.Ipv6Config = &rsModelLanNetworkIPv6Config{}
		// copy_to_state: state=state.Ipv6Config prefix=rsModel ans=ans.Ipv6Config properties=2
		tflog.Debug(ctx, "copy_to_state state=state.Ipv6Config prefix=rsModel ans=ans.Ipv6Config")
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_to_state
		varDefaultRouters, errDefaultRouters := types.ListValueFrom(ctx, types.StringType, ans.Ipv6Config.DefaultRouters)
		state.Ipv6Config.DefaultRouters = varDefaultRouters
		resp.Diagnostics.Append(errDefaultRouters.Errors()...)
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varPrefixes, errPrefixes := types.ListValueFrom(ctx, types.StringType, ans.Ipv6Config.Prefixes)
		state.Ipv6Config.Prefixes = varPrefixes
		resp.Diagnostics.Append(errPrefixes.Errors()...)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=network_context_id, type=STRING macro=copy_to_state
	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)
	// property: name=scope, type=STRING macro=copy_to_state
	state.Scope = types.StringPointerValue(ans.Scope)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=vrf_context_id, type=STRING macro=copy_to_state
	state.VrfContextId = types.StringPointerValue(ans.VrfContextId)
	return true
}

func (r *siteLanNetworkResource) doPut(ctx context.Context, plan *rsModelLANNetworkScreenV3N3, state *rsModelLANNetworkScreenV3N3, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_site_lan_network",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_site_lan_network", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_site_lan_network ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_site_lan_network"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v3.3/api/sites/{site_id}/lannetworks/{lannetwork_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["lannetwork_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.LANNetworkScreenV3N3{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=11
	tflog.Debug(ctx, "copy_from_plan_or_state body=body prefix=rsModel state=state plan=plan")
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=ipv4_config, type=REFERENCE macro=copy_from_plan_or_state
	if plan.Ipv4Config == nil {
		body.Ipv4Config = nil
	} else {
		body.Ipv4Config = &sdwan_schema.LanNetworkIPv4Config{}
		// copy_from_plan_or_state: body=body.Ipv4Config prefix=rsModel state=state.Ipv4Config plan=plan.Ipv4Config properties=4
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.Ipv4Config prefix=rsModel state=state.Ipv4Config plan=plan.Ipv4Config")
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.Ipv4Config.DefaultRouters = ListStringValueOrNil(ctx, plan.Ipv4Config.DefaultRouters)
		// property: name=dhcp_relay, type=REFERENCE macro=copy_from_plan_or_state
		if plan.Ipv4Config.DhcpRelay == nil {
			body.Ipv4Config.DhcpRelay = nil
		} else {
			body.Ipv4Config.DhcpRelay = &sdwan_schema.DHCPRelay{}
			// copy_from_plan_or_state: body=body.Ipv4Config.DhcpRelay prefix=rsModel state=state.Ipv4Config.DhcpRelay plan=plan.Ipv4Config.DhcpRelay properties=4
			tflog.Debug(ctx, "copy_from_plan_or_state body=body.Ipv4Config.DhcpRelay prefix=rsModel state=state.Ipv4Config.DhcpRelay plan=plan.Ipv4Config.DhcpRelay")
			// property: name=enabled, type=BOOLEAN macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpRelay != nil {
				body.Ipv4Config.DhcpRelay.Enabled = ValueBoolPointerFromPlanOrState(plan.Ipv4Config.DhcpRelay.Enabled, state.Ipv4Config.DhcpRelay.Enabled)
			} else {
				body.Ipv4Config.DhcpRelay.Enabled = BoolValueOrNil(plan.Ipv4Config.DhcpRelay.Enabled)
			}
			// property: name=option_82, type=REFERENCE macro=copy_from_plan_or_state
			if plan.Ipv4Config.DhcpRelay.Option82 == nil {
				body.Ipv4Config.DhcpRelay.Option82 = nil
			} else {
				body.Ipv4Config.DhcpRelay.Option82 = &sdwan_schema.DHCPRelayOption82{}
				// copy_from_plan_or_state: body=body.Ipv4Config.DhcpRelay.Option82 prefix=rsModel state=state.Ipv4Config.DhcpRelay.Option82 plan=plan.Ipv4Config.DhcpRelay.Option82 properties=4
				tflog.Debug(ctx, "copy_from_plan_or_state body=body.Ipv4Config.DhcpRelay.Option82 prefix=rsModel state=state.Ipv4Config.DhcpRelay.Option82 plan=plan.Ipv4Config.DhcpRelay.Option82")
				// property: name=circuit_id, type=STRING macro=copy_from_plan_or_state
				if state.Ipv4Config.DhcpRelay.Option82 != nil {
					body.Ipv4Config.DhcpRelay.Option82.CircuitId = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpRelay.Option82.CircuitId, state.Ipv4Config.DhcpRelay.Option82.CircuitId)
				} else {
					body.Ipv4Config.DhcpRelay.Option82.CircuitId = StringValueOrNil(plan.Ipv4Config.DhcpRelay.Option82.CircuitId)
				}
				// property: name=enabled, type=BOOLEAN macro=copy_from_plan_or_state
				if state.Ipv4Config.DhcpRelay.Option82 != nil {
					body.Ipv4Config.DhcpRelay.Option82.Enabled = ValueBoolPointerFromPlanOrState(plan.Ipv4Config.DhcpRelay.Option82.Enabled, state.Ipv4Config.DhcpRelay.Option82.Enabled)
				} else {
					body.Ipv4Config.DhcpRelay.Option82.Enabled = BoolValueOrNil(plan.Ipv4Config.DhcpRelay.Option82.Enabled)
				}
				// property: name=reforwarding_policy, type=STRING macro=copy_from_plan_or_state
				if state.Ipv4Config.DhcpRelay.Option82 != nil {
					body.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy, state.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy)
				} else {
					body.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy = StringValueOrNil(plan.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy)
				}
				// property: name=remote_id, type=STRING macro=copy_from_plan_or_state
				if state.Ipv4Config.DhcpRelay.Option82 != nil {
					body.Ipv4Config.DhcpRelay.Option82.RemoteId = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpRelay.Option82.RemoteId, state.Ipv4Config.DhcpRelay.Option82.RemoteId)
				} else {
					body.Ipv4Config.DhcpRelay.Option82.RemoteId = StringValueOrNil(plan.Ipv4Config.DhcpRelay.Option82.RemoteId)
				}
			}
			// property: name=server_ips, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
			body.Ipv4Config.DhcpRelay.ServerIps = ListStringValueOrNil(ctx, plan.Ipv4Config.DhcpRelay.ServerIps)
			// property: name=source_interface, type=STRING macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpRelay != nil {
				body.Ipv4Config.DhcpRelay.SourceInterface = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpRelay.SourceInterface, state.Ipv4Config.DhcpRelay.SourceInterface)
			} else {
				body.Ipv4Config.DhcpRelay.SourceInterface = StringValueOrNil(plan.Ipv4Config.DhcpRelay.SourceInterface)
			}
		}
		// property: name=dhcp_server, type=REFERENCE macro=copy_from_plan_or_state
		if plan.Ipv4Config.DhcpServer == nil {
			body.Ipv4Config.DhcpServer = nil
		} else {
			body.Ipv4Config.DhcpServer = &sdwan_schema.DHCPServer{}
			// copy_from_plan_or_state: body=body.Ipv4Config.DhcpServer prefix=rsModel state=state.Ipv4Config.DhcpServer plan=plan.Ipv4Config.DhcpServer properties=17
			tflog.Debug(ctx, "copy_from_plan_or_state body=body.Ipv4Config.DhcpServer prefix=rsModel state=state.Ipv4Config.DhcpServer plan=plan.Ipv4Config.DhcpServer")
			// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.Etag = ValueInt64PointerFromPlanOrState(plan.Ipv4Config.DhcpServer.Etag, state.Ipv4Config.DhcpServer.Etag)
			} else {
				body.Ipv4Config.DhcpServer.Etag = Int64ValueOrNil(plan.Ipv4Config.DhcpServer.Etag)
			}
			// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.Schema = ValueInt64PointerFromPlanOrState(plan.Ipv4Config.DhcpServer.Schema, state.Ipv4Config.DhcpServer.Schema)
			} else {
				body.Ipv4Config.DhcpServer.Schema = Int64ValueOrNil(plan.Ipv4Config.DhcpServer.Schema)
			}
			// property: name=broadcast_address, type=STRING macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.BroadcastAddress = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpServer.BroadcastAddress, state.Ipv4Config.DhcpServer.BroadcastAddress)
			} else {
				body.Ipv4Config.DhcpServer.BroadcastAddress = StringValueOrNil(plan.Ipv4Config.DhcpServer.BroadcastAddress)
			}
			// property: name=custom_options, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
			if plan.Ipv4Config.DhcpServer.CustomOptions == nil && (state.Ipv4Config.DhcpServer == nil || state.Ipv4Config.DhcpServer.CustomOptions == nil) {
				body.Ipv4Config.DhcpServer.CustomOptions = nil
			} else if len(plan.Ipv4Config.DhcpServer.CustomOptions) == 0 && (state.Ipv4Config.DhcpServer == nil || len(state.Ipv4Config.DhcpServer.CustomOptions) == 0) {
				body.Ipv4Config.DhcpServer.CustomOptions = []sdwan_schema.BaseCustomDHCPOptions{}
			} else if len(plan.Ipv4Config.DhcpServer.CustomOptions) != 0 || (state.Ipv4Config.DhcpServer != nil && len(state.Ipv4Config.DhcpServer.CustomOptions) != 0) {
				CustomOptionsToUse := plan.Ipv4Config.DhcpServer.CustomOptions
				if len(plan.Ipv4Config.DhcpServer.CustomOptions) == 0 {
					CustomOptionsToUse = state.Ipv4Config.DhcpServer.CustomOptions
				}
				body.Ipv4Config.DhcpServer.CustomOptions = make([]sdwan_schema.BaseCustomDHCPOptions, 0, len(CustomOptionsToUse))
				for varLoopCustomOptionsIndex, varLoopCustomOptions := range CustomOptionsToUse {
					// add a new item
					body.Ipv4Config.DhcpServer.CustomOptions = append(body.Ipv4Config.DhcpServer.CustomOptions, sdwan_schema.BaseCustomDHCPOptions{})
					// since we have chosen to stick with either the plan or state, we need to simply copy child properties
					// copy_from_plan: body=body.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=rsModel plan=varLoopCustomOptions properties=2
					tflog.Debug(ctx, "copy_from_plan body=body.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=rsModel plan=varLoopCustomOptions")
					// property: name=option_definition, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionDefinition = StringValueOrNil(varLoopCustomOptions.OptionDefinition)
					// property: name=option_value, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionValue = StringValueOrNil(varLoopCustomOptions.OptionValue)
				}
			}
			// property: name=default_lease_time, type=INTEGER macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.DefaultLeaseTime = ValueInt64PointerFromPlanOrState(plan.Ipv4Config.DhcpServer.DefaultLeaseTime, state.Ipv4Config.DhcpServer.DefaultLeaseTime)
			} else {
				body.Ipv4Config.DhcpServer.DefaultLeaseTime = Int64ValueOrNil(plan.Ipv4Config.DhcpServer.DefaultLeaseTime)
			}
			// property: name=description, type=STRING macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.Description = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpServer.Description, state.Ipv4Config.DhcpServer.Description)
			} else {
				body.Ipv4Config.DhcpServer.Description = StringValueOrNil(plan.Ipv4Config.DhcpServer.Description)
			}
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.Disabled = ValueBoolPointerFromPlanOrState(plan.Ipv4Config.DhcpServer.Disabled, state.Ipv4Config.DhcpServer.Disabled)
			} else {
				body.Ipv4Config.DhcpServer.Disabled = BoolValueOrNil(plan.Ipv4Config.DhcpServer.Disabled)
			}
			// property: name=dns_servers, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
			body.Ipv4Config.DhcpServer.DnsServers = ListStringValueOrNil(ctx, plan.Ipv4Config.DhcpServer.DnsServers)
			// property: name=domain_name, type=STRING macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.DomainName = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpServer.DomainName, state.Ipv4Config.DhcpServer.DomainName)
			} else {
				body.Ipv4Config.DhcpServer.DomainName = StringValueOrNil(plan.Ipv4Config.DhcpServer.DomainName)
			}
			// property: name=gateway, type=STRING macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.Gateway = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpServer.Gateway, state.Ipv4Config.DhcpServer.Gateway)
			} else {
				body.Ipv4Config.DhcpServer.Gateway = StringValueOrNil(plan.Ipv4Config.DhcpServer.Gateway)
			}
			// property: name=id, type=STRING macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.Id = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpServer.Id, state.Ipv4Config.DhcpServer.Id)
			} else {
				body.Ipv4Config.DhcpServer.Id = StringValueOrNil(plan.Ipv4Config.DhcpServer.Id)
			}
			// property: name=ip_ranges, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
			if plan.Ipv4Config.DhcpServer.IpRanges == nil && (state.Ipv4Config.DhcpServer == nil || state.Ipv4Config.DhcpServer.IpRanges == nil) {
				body.Ipv4Config.DhcpServer.IpRanges = nil
			} else if len(plan.Ipv4Config.DhcpServer.IpRanges) == 0 && (state.Ipv4Config.DhcpServer == nil || len(state.Ipv4Config.DhcpServer.IpRanges) == 0) {
				body.Ipv4Config.DhcpServer.IpRanges = []sdwan_schema.IPRange{}
			} else if len(plan.Ipv4Config.DhcpServer.IpRanges) != 0 || (state.Ipv4Config.DhcpServer != nil && len(state.Ipv4Config.DhcpServer.IpRanges) != 0) {
				IpRangesToUse := plan.Ipv4Config.DhcpServer.IpRanges
				if len(plan.Ipv4Config.DhcpServer.IpRanges) == 0 {
					IpRangesToUse = state.Ipv4Config.DhcpServer.IpRanges
				}
				body.Ipv4Config.DhcpServer.IpRanges = make([]sdwan_schema.IPRange, 0, len(IpRangesToUse))
				for varLoopIpRangesIndex, varLoopIpRanges := range IpRangesToUse {
					// add a new item
					body.Ipv4Config.DhcpServer.IpRanges = append(body.Ipv4Config.DhcpServer.IpRanges, sdwan_schema.IPRange{})
					// since we have chosen to stick with either the plan or state, we need to simply copy child properties
					// copy_from_plan: body=body.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=rsModel plan=varLoopIpRanges properties=2
					tflog.Debug(ctx, "copy_from_plan body=body.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=rsModel plan=varLoopIpRanges")
					// property: name=end_ip, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].EndIp = StringValueOrNil(varLoopIpRanges.EndIp)
					// property: name=start_ip, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].StartIp = StringValueOrNil(varLoopIpRanges.StartIp)
				}
			}
			// property: name=max_lease_time, type=INTEGER macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.MaxLeaseTime = ValueInt64PointerFromPlanOrState(plan.Ipv4Config.DhcpServer.MaxLeaseTime, state.Ipv4Config.DhcpServer.MaxLeaseTime)
			} else {
				body.Ipv4Config.DhcpServer.MaxLeaseTime = Int64ValueOrNil(plan.Ipv4Config.DhcpServer.MaxLeaseTime)
			}
			// property: name=network_context_id, type=STRING macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.NetworkContextId = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpServer.NetworkContextId, state.Ipv4Config.DhcpServer.NetworkContextId)
			} else {
				body.Ipv4Config.DhcpServer.NetworkContextId = StringValueOrNil(plan.Ipv4Config.DhcpServer.NetworkContextId)
			}
			// property: name=static_mappings, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
			if plan.Ipv4Config.DhcpServer.StaticMappings == nil && (state.Ipv4Config.DhcpServer == nil || state.Ipv4Config.DhcpServer.StaticMappings == nil) {
				body.Ipv4Config.DhcpServer.StaticMappings = nil
			} else if len(plan.Ipv4Config.DhcpServer.StaticMappings) == 0 && (state.Ipv4Config.DhcpServer == nil || len(state.Ipv4Config.DhcpServer.StaticMappings) == 0) {
				body.Ipv4Config.DhcpServer.StaticMappings = []sdwan_schema.StaticMapping{}
			} else if len(plan.Ipv4Config.DhcpServer.StaticMappings) != 0 || (state.Ipv4Config.DhcpServer != nil && len(state.Ipv4Config.DhcpServer.StaticMappings) != 0) {
				StaticMappingsToUse := plan.Ipv4Config.DhcpServer.StaticMappings
				if len(plan.Ipv4Config.DhcpServer.StaticMappings) == 0 {
					StaticMappingsToUse = state.Ipv4Config.DhcpServer.StaticMappings
				}
				body.Ipv4Config.DhcpServer.StaticMappings = make([]sdwan_schema.StaticMapping, 0, len(StaticMappingsToUse))
				for varLoopStaticMappingsIndex, varLoopStaticMappings := range StaticMappingsToUse {
					// add a new item
					body.Ipv4Config.DhcpServer.StaticMappings = append(body.Ipv4Config.DhcpServer.StaticMappings, sdwan_schema.StaticMapping{})
					// since we have chosen to stick with either the plan or state, we need to simply copy child properties
					// copy_from_plan: body=body.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=rsModel plan=varLoopStaticMappings properties=3
					tflog.Debug(ctx, "copy_from_plan body=body.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=rsModel plan=varLoopStaticMappings")
					// property: name=ip_address, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].IpAddress = StringValueOrNil(varLoopStaticMappings.IpAddress)
					// property: name=mac, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Mac = StringValueOrNil(varLoopStaticMappings.Mac)
					// property: name=name, type=STRING macro=copy_from_plan
					body.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Name = StringValueOrNil(varLoopStaticMappings.Name)
				}
			}
			// property: name=subnet, type=STRING macro=copy_from_plan_or_state
			if state.Ipv4Config.DhcpServer != nil {
				body.Ipv4Config.DhcpServer.Subnet = ValueStringPointerFromPlanOrState(plan.Ipv4Config.DhcpServer.Subnet, state.Ipv4Config.DhcpServer.Subnet)
			} else {
				body.Ipv4Config.DhcpServer.Subnet = StringValueOrNil(plan.Ipv4Config.DhcpServer.Subnet)
			}
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
			body.Ipv4Config.DhcpServer.Tags = SetStringValueOrNil(ctx, plan.Ipv4Config.DhcpServer.Tags)
		}
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.Ipv4Config.Prefixes = ListStringValueOrNil(ctx, plan.Ipv4Config.Prefixes)
	}
	// property: name=ipv6_config, type=REFERENCE macro=copy_from_plan_or_state
	if plan.Ipv6Config == nil {
		body.Ipv6Config = nil
	} else {
		body.Ipv6Config = &sdwan_schema.LanNetworkIPv6Config{}
		// copy_from_plan_or_state: body=body.Ipv6Config prefix=rsModel state=state.Ipv6Config plan=plan.Ipv6Config properties=2
		tflog.Debug(ctx, "copy_from_plan_or_state body=body.Ipv6Config prefix=rsModel state=state.Ipv6Config plan=plan.Ipv6Config")
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.Ipv6Config.DefaultRouters = ListStringValueOrNil(ctx, plan.Ipv6Config.DefaultRouters)
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
		body.Ipv6Config.Prefixes = ListStringValueOrNil(ctx, plan.Ipv6Config.Prefixes)
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=network_context_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.NetworkContextId = ValueStringPointerFromPlanOrState(plan.NetworkContextId, state.NetworkContextId)
	} else {
		body.NetworkContextId = StringValueOrNil(plan.NetworkContextId)
	}
	// property: name=scope, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Scope = ValueStringPointerFromPlanOrState(plan.Scope, state.Scope)
	} else {
		body.Scope = StringValueOrNil(plan.Scope)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)
	// property: name=vrf_context_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.VrfContextId = ValueStringPointerFromPlanOrState(plan.VrfContextId, state.VrfContextId)
	} else {
		body.VrfContextId = StringValueOrNil(plan.VrfContextId)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct LANNetworkScreenV3N3 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_site_lan_network", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_site_lan_network",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_site_lan_network", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_site_lan_network",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_site_lan_network", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	tflog.Debug(ctx, "http json override: delete response_body_string::_created_on_utc")
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	tflog.Debug(ctx, "http json override: set response_body_string::_schema")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.LANNetworkScreenV3N3
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to LANNetworkScreenV3N3 in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=LANNetworkScreenV3N3
	// copy_to_state: state=state prefix=rsModel ans=ans properties=11
	tflog.Debug(ctx, "copy_to_state state=state prefix=rsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipv4_config, type=REFERENCE macro=copy_to_state
	if ans.Ipv4Config == nil {
		state.Ipv4Config = nil
	} else {
		state.Ipv4Config = &rsModelLanNetworkIPv4Config{}
		// copy_to_state: state=state.Ipv4Config prefix=rsModel ans=ans.Ipv4Config properties=4
		tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config prefix=rsModel ans=ans.Ipv4Config")
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_to_state
		varDefaultRouters, errDefaultRouters := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DefaultRouters)
		state.Ipv4Config.DefaultRouters = varDefaultRouters
		resp.Diagnostics.Append(errDefaultRouters.Errors()...)
		// property: name=dhcp_relay, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.DhcpRelay == nil {
			state.Ipv4Config.DhcpRelay = nil
		} else {
			state.Ipv4Config.DhcpRelay = &rsModelDHCPRelay{}
			// copy_to_state: state=state.Ipv4Config.DhcpRelay prefix=rsModel ans=ans.Ipv4Config.DhcpRelay properties=4
			tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpRelay prefix=rsModel ans=ans.Ipv4Config.DhcpRelay")
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.Ipv4Config.DhcpRelay.Enabled = types.BoolPointerValue(ans.Ipv4Config.DhcpRelay.Enabled)
			// property: name=option_82, type=REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpRelay.Option82 == nil {
				state.Ipv4Config.DhcpRelay.Option82 = nil
			} else {
				state.Ipv4Config.DhcpRelay.Option82 = &rsModelDHCPRelayOption82{}
				// copy_to_state: state=state.Ipv4Config.DhcpRelay.Option82 prefix=rsModel ans=ans.Ipv4Config.DhcpRelay.Option82 properties=4
				tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpRelay.Option82 prefix=rsModel ans=ans.Ipv4Config.DhcpRelay.Option82")
				// property: name=circuit_id, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.CircuitId = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.CircuitId)
				// property: name=enabled, type=BOOLEAN macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.Enabled = types.BoolPointerValue(ans.Ipv4Config.DhcpRelay.Option82.Enabled)
				// property: name=reforwarding_policy, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy)
				// property: name=remote_id, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.RemoteId = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.RemoteId)
			}
			// property: name=server_ips, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerIps, errServerIps := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpRelay.ServerIps)
			state.Ipv4Config.DhcpRelay.ServerIps = varServerIps
			resp.Diagnostics.Append(errServerIps.Errors()...)
			// property: name=source_interface, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpRelay.SourceInterface = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.SourceInterface)
		}
		// property: name=dhcp_server, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.DhcpServer == nil {
			state.Ipv4Config.DhcpServer = nil
		} else {
			state.Ipv4Config.DhcpServer = &rsModelDHCPServer{}
			// copy_to_state: state=state.Ipv4Config.DhcpServer prefix=rsModel ans=ans.Ipv4Config.DhcpServer properties=17
			tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer prefix=rsModel ans=ans.Ipv4Config.DhcpServer")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.Etag = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.Schema = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.Schema)
			// property: name=broadcast_address, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.BroadcastAddress = types.StringPointerValue(ans.Ipv4Config.DhcpServer.BroadcastAddress)
			// property: name=custom_options, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.CustomOptions == nil {
				state.Ipv4Config.DhcpServer.CustomOptions = nil
			} else if len(ans.Ipv4Config.DhcpServer.CustomOptions) == 0 {
				state.Ipv4Config.DhcpServer.CustomOptions = []rsModelBaseCustomDHCPOptions{}
			} else {
				state.Ipv4Config.DhcpServer.CustomOptions = make([]rsModelBaseCustomDHCPOptions, 0, len(ans.Ipv4Config.DhcpServer.CustomOptions))
				for varLoopCustomOptionsIndex, varLoopCustomOptions := range ans.Ipv4Config.DhcpServer.CustomOptions {
					// add a new item
					state.Ipv4Config.DhcpServer.CustomOptions = append(state.Ipv4Config.DhcpServer.CustomOptions, rsModelBaseCustomDHCPOptions{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=rsModel ans=varLoopCustomOptions properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=rsModel ans=varLoopCustomOptions")
					// property: name=option_definition, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionDefinition = types.StringPointerValue(varLoopCustomOptions.OptionDefinition)
					// property: name=option_value, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionValue = types.StringPointerValue(varLoopCustomOptions.OptionValue)
				}
			}
			// property: name=default_lease_time, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.DefaultLeaseTime = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.DefaultLeaseTime)
			// property: name=description, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Description = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.Ipv4Config.DhcpServer.Disabled = types.BoolPointerValue(ans.Ipv4Config.DhcpServer.Disabled)
			// property: name=dns_servers, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDnsServers, errDnsServers := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpServer.DnsServers)
			state.Ipv4Config.DhcpServer.DnsServers = varDnsServers
			resp.Diagnostics.Append(errDnsServers.Errors()...)
			// property: name=domain_name, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.DomainName = types.StringPointerValue(ans.Ipv4Config.DhcpServer.DomainName)
			// property: name=gateway, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Gateway = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Gateway)
			// property: name=id, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Id = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Id)
			// property: name=ip_ranges, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.IpRanges == nil {
				state.Ipv4Config.DhcpServer.IpRanges = nil
			} else if len(ans.Ipv4Config.DhcpServer.IpRanges) == 0 {
				state.Ipv4Config.DhcpServer.IpRanges = []rsModelIPRange{}
			} else {
				state.Ipv4Config.DhcpServer.IpRanges = make([]rsModelIPRange, 0, len(ans.Ipv4Config.DhcpServer.IpRanges))
				for varLoopIpRangesIndex, varLoopIpRanges := range ans.Ipv4Config.DhcpServer.IpRanges {
					// add a new item
					state.Ipv4Config.DhcpServer.IpRanges = append(state.Ipv4Config.DhcpServer.IpRanges, rsModelIPRange{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=rsModel ans=varLoopIpRanges properties=2
					tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=rsModel ans=varLoopIpRanges")
					// property: name=end_ip, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].EndIp = types.StringPointerValue(varLoopIpRanges.EndIp)
					// property: name=start_ip, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].StartIp = types.StringPointerValue(varLoopIpRanges.StartIp)
				}
			}
			// property: name=max_lease_time, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.MaxLeaseTime = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.MaxLeaseTime)
			// property: name=network_context_id, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.NetworkContextId = types.StringPointerValue(ans.Ipv4Config.DhcpServer.NetworkContextId)
			// property: name=static_mappings, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.StaticMappings == nil {
				state.Ipv4Config.DhcpServer.StaticMappings = nil
			} else if len(ans.Ipv4Config.DhcpServer.StaticMappings) == 0 {
				state.Ipv4Config.DhcpServer.StaticMappings = []rsModelStaticMapping{}
			} else {
				state.Ipv4Config.DhcpServer.StaticMappings = make([]rsModelStaticMapping, 0, len(ans.Ipv4Config.DhcpServer.StaticMappings))
				for varLoopStaticMappingsIndex, varLoopStaticMappings := range ans.Ipv4Config.DhcpServer.StaticMappings {
					// add a new item
					state.Ipv4Config.DhcpServer.StaticMappings = append(state.Ipv4Config.DhcpServer.StaticMappings, rsModelStaticMapping{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=rsModel ans=varLoopStaticMappings properties=3
					tflog.Debug(ctx, "copy_to_state state=state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=rsModel ans=varLoopStaticMappings")
					// property: name=ip_address, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].IpAddress = types.StringPointerValue(varLoopStaticMappings.IpAddress)
					// property: name=mac, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Mac = types.StringPointerValue(varLoopStaticMappings.Mac)
					// property: name=name, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Name = types.StringPointerValue(varLoopStaticMappings.Name)
				}
			}
			// property: name=subnet, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Subnet = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Subnet)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpServer.Tags)
			state.Ipv4Config.DhcpServer.Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varPrefixes, errPrefixes := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.Prefixes)
		state.Ipv4Config.Prefixes = varPrefixes
		resp.Diagnostics.Append(errPrefixes.Errors()...)
	}
	// property: name=ipv6_config, type=REFERENCE macro=copy_to_state
	if ans.Ipv6Config == nil {
		state.Ipv6Config = nil
	} else {
		state.Ipv6Config = &rsModelLanNetworkIPv6Config{}
		// copy_to_state: state=state.Ipv6Config prefix=rsModel ans=ans.Ipv6Config properties=2
		tflog.Debug(ctx, "copy_to_state state=state.Ipv6Config prefix=rsModel ans=ans.Ipv6Config")
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_to_state
		varDefaultRouters, errDefaultRouters := types.ListValueFrom(ctx, types.StringType, ans.Ipv6Config.DefaultRouters)
		state.Ipv6Config.DefaultRouters = varDefaultRouters
		resp.Diagnostics.Append(errDefaultRouters.Errors()...)
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varPrefixes, errPrefixes := types.ListValueFrom(ctx, types.StringType, ans.Ipv6Config.Prefixes)
		state.Ipv6Config.Prefixes = varPrefixes
		resp.Diagnostics.Append(errPrefixes.Errors()...)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=network_context_id, type=STRING macro=copy_to_state
	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)
	// property: name=scope, type=STRING macro=copy_to_state
	state.Scope = types.StringPointerValue(ans.Scope)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=vrf_context_id, type=STRING macro=copy_to_state
	state.VrfContextId = types.StringPointerValue(ans.VrfContextId)
	return true
}

func (r *siteLanNetworkResource) doDelete(ctx context.Context, state *rsModelLANNetworkScreenV3N3, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_site_lan_network",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_site_lan_network ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_site_lan_network"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v3.3/api/sites/{site_id}/lannetworks/{lannetwork_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["lannetwork_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_site_lan_network", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *siteLanNetworkResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_site_lan_network")
	var plan rsModelLANNetworkScreenV3N3
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelLANNetworkScreenV3N3
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *siteLanNetworkResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_site_lan_network")
	var savestate, state rsModelLANNetworkScreenV3N3
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *siteLanNetworkResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_site_lan_network")
	var plan, state rsModelLANNetworkScreenV3N3
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *siteLanNetworkResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_site_lan_network")
	var state rsModelLANNetworkScreenV3N3
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *siteLanNetworkResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
