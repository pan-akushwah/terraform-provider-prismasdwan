package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=8)
// | Computed Resource Name=networkpolicysetstacks
// +-----------------------------------------------------------------
// | WANPath HasID=false
// | PathsAllowed HasID=false
// | ServiceContext HasID=false
// | NetworkPolicyRule HasID=true
// | NetworkPolicySet HasID=true
// | BasePolicyRule HasID=true
// | BasePolicySet HasID=true
// | NetworkPolicySetStack HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &pathPolicyStackResource{}
	_ resource.ResourceWithConfigure   = &pathPolicyStackResource{}
	_ resource.ResourceWithImportState = &pathPolicyStackResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewPathPolicyStackResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewPathPolicyStackResource() resource.Resource {
	return &pathPolicyStackResource{}
}

type pathPolicyStackResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *pathPolicyStackResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_path_policy_stack"
}

// Schema defines the schema for this data source.
func (r *pathPolicyStackResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=NetworkPolicySetStack
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=default_policysetstack, type=BOOLEAN macro=rss_schema
			"default_policysetstack": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=default_policysetstack, type=BOOLEAN macro=rss_schema
			// property: name=defaultrule_policyset, type=REFERENCE macro=rss_schema
			"defaultrule_policyset": rsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]rsschema.Attribute{
					// generic x_parameters is added to accomodate path parameters
					"x_parameters": rsschema.MapAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						ElementType: types.StringType,
					},
					// property: name=_etag, type=INTEGER macro=rss_schema
					"x_etag": rsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
					// property: name=_schema, type=INTEGER macro=rss_schema
					"x_schema": rsschema.Int64Attribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
					// property: name=clone_from, type=STRING macro=rss_schema
					"clone_from": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=clone_from, type=STRING macro=rss_schema
					// property: name=defaultrule_policyset, type=BOOLEAN macro=rss_schema
					"defaultrule_policyset": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=defaultrule_policyset, type=BOOLEAN macro=rss_schema
					// property: name=description, type=STRING macro=rss_schema
					"description": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=description, type=STRING macro=rss_schema
					// property: name=disabled, type=BOOLEAN macro=rss_schema
					"disabled": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
					// property: name=disabled_reason, type=STRING macro=rss_schema
					"disabled_reason": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
					// property: name=id, type=STRING macro=rss_schema
					"id": rsschema.StringAttribute{
						Required:  false,
						Computed:  true,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=id, type=STRING macro=rss_schema
					// property: name=inactive, type=BOOLEAN macro=rss_schema
					"inactive": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
					// property: name=inactive_reason, type=STRING macro=rss_schema
					"inactive_reason": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
					// property: name=name, type=STRING macro=rss_schema
					"name": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=name, type=STRING macro=rss_schema
					// property: name=policy_req_version, type=STRING macro=rss_schema
					"policy_req_version": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=policy_req_version, type=STRING macro=rss_schema
					// property: name=policy_rules, type=ARRAY_REFERENCE macro=rss_schema
					"policy_rules": rsschema.ListNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// generic x_parameters is added to accomodate path parameters
								"x_parameters": rsschema.MapAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									ElementType: types.StringType,
								},
								// property: name=_etag, type=INTEGER macro=rss_schema
								"x_etag": rsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
								// property: name=_schema, type=INTEGER macro=rss_schema
								"x_schema": rsschema.Int64Attribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
								// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
								"app_def_ids": rsschema.ListAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
								// property: name=description, type=STRING macro=rss_schema
								"description": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=description, type=STRING macro=rss_schema
								// property: name=destination_prefixes_id, type=STRING macro=rss_schema
								"destination_prefixes_id": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=destination_prefixes_id, type=STRING macro=rss_schema
								// property: name=enabled, type=BOOLEAN macro=rss_schema
								"enabled": rsschema.BoolAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
								// property: name=id, type=STRING macro=rss_schema
								"id": rsschema.StringAttribute{
									Required:  false,
									Computed:  true,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=id, type=STRING macro=rss_schema
								// property: name=name, type=STRING macro=rss_schema
								"name": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=name, type=STRING macro=rss_schema
								// property: name=network_context_id, type=STRING macro=rss_schema
								"network_context_id": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=network_context_id, type=STRING macro=rss_schema
								// property: name=order_number, type=INTEGER macro=rss_schema
								"order_number": rsschema.Int64Attribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=order_number, type=INTEGER macro=rss_schema
								// property: name=paths_allowed, type=REFERENCE macro=rss_schema
								"paths_allowed": rsschema.SingleNestedAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
									Attributes: map[string]rsschema.Attribute{
										// property: name=active_paths, type=ARRAY_REFERENCE macro=rss_schema
										"active_paths": rsschema.ListNestedAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
											NestedObject: rsschema.NestedAttributeObject{
												Attributes: map[string]rsschema.Attribute{
													// property: name=label, type=STRING macro=rss_schema
													"label": rsschema.StringAttribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=label, type=STRING macro=rss_schema
													// property: name=path_type, type=STRING macro=rss_schema
													"path_type": rsschema.StringAttribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
												},
											},
										},
										// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
										// property: name=backup_paths, type=ARRAY_REFERENCE macro=rss_schema
										"backup_paths": rsschema.ListNestedAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
											NestedObject: rsschema.NestedAttributeObject{
												Attributes: map[string]rsschema.Attribute{
													// property: name=label, type=STRING macro=rss_schema
													"label": rsschema.StringAttribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=label, type=STRING macro=rss_schema
													// property: name=path_type, type=STRING macro=rss_schema
													"path_type": rsschema.StringAttribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
												},
											},
										},
										// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
										// property: name=l3_failure_paths, type=ARRAY_REFERENCE macro=rss_schema
										"l3_failure_paths": rsschema.ListNestedAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
											NestedObject: rsschema.NestedAttributeObject{
												Attributes: map[string]rsschema.Attribute{
													// property: name=label, type=STRING macro=rss_schema
													"label": rsschema.StringAttribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=label, type=STRING macro=rss_schema
													// property: name=path_type, type=STRING macro=rss_schema
													"path_type": rsschema.StringAttribute{
														Required:  false,
														Computed:  false,
														Optional:  true,
														Sensitive: false,
													},
													// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
												},
											},
										},
										// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
									},
								},
								// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
								// property: name=service_context, type=REFERENCE macro=rss_schema
								"service_context": rsschema.SingleNestedAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
									Attributes: map[string]rsschema.Attribute{
										// property: name=active_service_label_id, type=STRING macro=rss_schema
										"active_service_label_id": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=active_service_label_id, type=STRING macro=rss_schema
										// property: name=active_service_label_type, type=STRING macro=rss_schema
										"active_service_label_type": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=active_service_label_type, type=STRING macro=rss_schema
										// property: name=backup_service_label_id, type=STRING macro=rss_schema
										"backup_service_label_id": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=backup_service_label_id, type=STRING macro=rss_schema
										// property: name=backup_service_label_type, type=STRING macro=rss_schema
										"backup_service_label_type": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=backup_service_label_type, type=STRING macro=rss_schema
										// property: name=type, type=STRING macro=rss_schema
										"type": rsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=type, type=STRING macro=rss_schema
									},
								},
								// key name holder for attribute: name=type, type=STRING macro=rss_schema
								// property: name=source_prefixes_id, type=STRING macro=rss_schema
								"source_prefixes_id": rsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=source_prefixes_id, type=STRING macro=rss_schema
								// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
								"tags": rsschema.SetAttribute{
									Required:    false,
									Computed:    false,
									Optional:    true,
									Sensitive:   false,
									ElementType: types.StringType,
								},
								// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
							},
						},
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
					// property: name=region, type=STRING macro=rss_schema
					"region": rsschema.StringAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=region, type=STRING macro=rss_schema
					// property: name=send_to_element, type=BOOLEAN macro=rss_schema
					"send_to_element": rsschema.BoolAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
					},
					// key name holder for attribute: name=send_to_element, type=BOOLEAN macro=rss_schema
					// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
					"tags": rsschema.SetAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=defaultrule_policyset_id, type=STRING macro=rss_schema
			"defaultrule_policyset_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=defaultrule_policyset_id, type=STRING macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=legacy_policystack, type=BOOLEAN macro=rss_schema
			"legacy_policystack": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=legacy_policystack, type=BOOLEAN macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=policyset_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			"policyset_ids": rsschema.ListAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=policyset_ids, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=policyset_ids_update, type=BOOLEAN macro=rss_schema
			"policyset_ids_update": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=policyset_ids_update, type=BOOLEAN macro=rss_schema
			// property: name=policysets, type=ARRAY_REFERENCE macro=rss_schema
			"policysets": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": rsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=clone_from, type=STRING macro=rss_schema
						"clone_from": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=clone_from, type=STRING macro=rss_schema
						// property: name=description, type=STRING macro=rss_schema
						"description": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=description, type=STRING macro=rss_schema
						// property: name=disabled, type=BOOLEAN macro=rss_schema
						"disabled": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
						// property: name=disabled_reason, type=STRING macro=rss_schema
						"disabled_reason": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": rsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=inactive, type=BOOLEAN macro=rss_schema
						"inactive": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
						// property: name=inactive_reason, type=STRING macro=rss_schema
						"inactive_reason": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=policy_rules, type=ARRAY_REFERENCE macro=rss_schema
						"policy_rules": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// generic x_parameters is added to accomodate path parameters
									"x_parameters": rsschema.MapAttribute{
										Required:    false,
										Computed:    false,
										Optional:    true,
										ElementType: types.StringType,
									},
									// property: name=_etag, type=INTEGER macro=rss_schema
									"x_etag": rsschema.Int64Attribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
									// property: name=_schema, type=INTEGER macro=rss_schema
									"x_schema": rsschema.Int64Attribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
									// property: name=description, type=STRING macro=rss_schema
									"description": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=description, type=STRING macro=rss_schema
									// property: name=disabled, type=BOOLEAN macro=rss_schema
									"disabled": rsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
									// property: name=disabled_reason, type=STRING macro=rss_schema
									"disabled_reason": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
									// property: name=id, type=STRING macro=rss_schema
									"id": rsschema.StringAttribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=id, type=STRING macro=rss_schema
									// property: name=inactive, type=BOOLEAN macro=rss_schema
									"inactive": rsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
									// property: name=inactive_reason, type=STRING macro=rss_schema
									"inactive_reason": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
									// property: name=name, type=STRING macro=rss_schema
									"name": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=name, type=STRING macro=rss_schema
									// property: name=policyset_id, type=STRING macro=rss_schema
									"policyset_id": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=policyset_id, type=STRING macro=rss_schema
									// property: name=region, type=STRING macro=rss_schema
									"region": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=region, type=STRING macro=rss_schema
									// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
									"tags": rsschema.SetAttribute{
										Required:    false,
										Computed:    false,
										Optional:    true,
										Sensitive:   false,
										ElementType: types.StringType,
									},
									// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						// property: name=region, type=STRING macro=rss_schema
						"region": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=region, type=STRING macro=rss_schema
						// property: name=send_to_element, type=BOOLEAN macro=rss_schema
						"send_to_element": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=send_to_element, type=BOOLEAN macro=rss_schema
						// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
						"tags": rsschema.SetAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": rsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *pathPolicyStackResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *pathPolicyStackResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *pathPolicyStackResource) doPost(ctx context.Context, plan *rsModelNetworkPolicySetStack, state *rsModelNetworkPolicySetStack, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_path_policy_stack")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_path_policy_stack",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.ResourceType = "prismasdwan_path_policy_stack"
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.0/api/networkpolicysetstacks"

	// copy parameters from plan always
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.NetworkPolicySetStack{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=18
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=default_policysetstack, type=BOOLEAN macro=copy_from_plan
	body.DefaultPolicysetstack = BoolValueOrNil(plan.DefaultPolicysetstack)
	// property: name=defaultrule_policyset, type=REFERENCE macro=copy_from_plan
	if plan.DefaultrulePolicyset != nil {
		body.DefaultrulePolicyset = &sdwan_schema.NetworkPolicySet{}
		// copy_from_plan: body=body.DefaultrulePolicyset prefix=rsModel plan=plan.DefaultrulePolicyset properties=16
		// property: name=_etag, type=INTEGER macro=copy_from_plan
		body.DefaultrulePolicyset.Etag = Int64ValueOrNil(plan.DefaultrulePolicyset.Etag)
		// property: name=_schema, type=INTEGER macro=copy_from_plan
		body.DefaultrulePolicyset.Schema = Int64ValueOrNil(plan.DefaultrulePolicyset.Schema)
		// property: name=clone_from, type=STRING macro=copy_from_plan
		body.DefaultrulePolicyset.CloneFrom = StringValueOrNil(plan.DefaultrulePolicyset.CloneFrom)
		// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_from_plan
		body.DefaultrulePolicyset.DefaultrulePolicyset = BoolValueOrNil(plan.DefaultrulePolicyset.DefaultrulePolicyset)
		// property: name=description, type=STRING macro=copy_from_plan
		body.DefaultrulePolicyset.Description = StringValueOrNil(plan.DefaultrulePolicyset.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_from_plan
		body.DefaultrulePolicyset.Disabled = BoolValueOrNil(plan.DefaultrulePolicyset.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_from_plan
		body.DefaultrulePolicyset.DisabledReason = StringValueOrNil(plan.DefaultrulePolicyset.DisabledReason)
		// property: name=id, type=STRING macro=copy_from_plan
		body.DefaultrulePolicyset.Id = StringValueOrNil(plan.DefaultrulePolicyset.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_from_plan
		body.DefaultrulePolicyset.Inactive = BoolValueOrNil(plan.DefaultrulePolicyset.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_from_plan
		body.DefaultrulePolicyset.InactiveReason = StringValueOrNil(plan.DefaultrulePolicyset.InactiveReason)
		// property: name=name, type=STRING macro=copy_from_plan
		body.DefaultrulePolicyset.Name = StringValueOrNil(plan.DefaultrulePolicyset.Name)
		// property: name=policy_req_version, type=STRING macro=copy_from_plan
		body.DefaultrulePolicyset.PolicyReqVersion = StringValueOrNil(plan.DefaultrulePolicyset.PolicyReqVersion)
		// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_from_plan
		if plan.DefaultrulePolicyset.PolicyRules == nil {
			body.DefaultrulePolicyset.PolicyRules = nil
		} else if len(plan.DefaultrulePolicyset.PolicyRules) == 0 {
			body.DefaultrulePolicyset.PolicyRules = []sdwan_schema.NetworkPolicyRule{}
		} else {
			body.DefaultrulePolicyset.PolicyRules = make([]sdwan_schema.NetworkPolicyRule, 0, len(plan.DefaultrulePolicyset.PolicyRules))
			for varLoopPolicyRulesIndex, varLoopPolicyRules := range plan.DefaultrulePolicyset.PolicyRules {
				// add a new item
				body.DefaultrulePolicyset.PolicyRules = append(body.DefaultrulePolicyset.PolicyRules, sdwan_schema.NetworkPolicyRule{})
				// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel plan=varLoopPolicyRules properties=14
				// property: name=_etag, type=INTEGER macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Etag = Int64ValueOrNil(varLoopPolicyRules.Etag)
				// property: name=_schema, type=INTEGER macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Schema = Int64ValueOrNil(varLoopPolicyRules.Schema)
				// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].AppDefIds = ListStringValueOrNil(ctx, varLoopPolicyRules.AppDefIds)
				// property: name=description, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Description = StringValueOrNil(varLoopPolicyRules.Description)
				// property: name=destination_prefixes_id, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = StringValueOrNil(varLoopPolicyRules.DestinationPrefixesId)
				// property: name=enabled, type=BOOLEAN macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Enabled = BoolValueOrNil(varLoopPolicyRules.Enabled)
				// property: name=id, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Id = StringValueOrNil(varLoopPolicyRules.Id)
				// property: name=name, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Name = StringValueOrNil(varLoopPolicyRules.Name)
				// property: name=network_context_id, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].NetworkContextId = StringValueOrNil(varLoopPolicyRules.NetworkContextId)
				// property: name=order_number, type=INTEGER macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].OrderNumber = Int64ValueOrNil(varLoopPolicyRules.OrderNumber)
				// property: name=paths_allowed, type=REFERENCE macro=copy_from_plan
				if varLoopPolicyRules.PathsAllowed != nil {
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed = &sdwan_schema.PathsAllowed{}
					// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed prefix=rsModel plan=varLoopPolicyRules.PathsAllowed properties=3
					// property: name=active_paths, type=ARRAY_REFERENCE macro=copy_from_plan
					if varLoopPolicyRules.PathsAllowed.ActivePaths == nil {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.ActivePaths) == 0 {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = []sdwan_schema.WANPath{}
					} else {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = make([]sdwan_schema.WANPath, 0, len(varLoopPolicyRules.PathsAllowed.ActivePaths))
						for varLoopActivePathsIndex, varLoopActivePaths := range varLoopPolicyRules.PathsAllowed.ActivePaths {
							// add a new item
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = append(body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths, sdwan_schema.WANPath{})
							// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex] prefix=rsModel plan=varLoopActivePaths properties=2
							// property: name=label, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].Label = StringValueOrNil(varLoopActivePaths.Label)
							// property: name=path_type, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].PathType = StringValueOrNil(varLoopActivePaths.PathType)
						}
					}
					// property: name=backup_paths, type=ARRAY_REFERENCE macro=copy_from_plan
					if varLoopPolicyRules.PathsAllowed.BackupPaths == nil {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.BackupPaths) == 0 {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = []sdwan_schema.WANPath{}
					} else {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = make([]sdwan_schema.WANPath, 0, len(varLoopPolicyRules.PathsAllowed.BackupPaths))
						for varLoopBackupPathsIndex, varLoopBackupPaths := range varLoopPolicyRules.PathsAllowed.BackupPaths {
							// add a new item
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = append(body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths, sdwan_schema.WANPath{})
							// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex] prefix=rsModel plan=varLoopBackupPaths properties=2
							// property: name=label, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].Label = StringValueOrNil(varLoopBackupPaths.Label)
							// property: name=path_type, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].PathType = StringValueOrNil(varLoopBackupPaths.PathType)
						}
					}
					// property: name=l3_failure_paths, type=ARRAY_REFERENCE macro=copy_from_plan
					if varLoopPolicyRules.PathsAllowed.L3FailurePaths == nil {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.L3FailurePaths) == 0 {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = []sdwan_schema.WANPath{}
					} else {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = make([]sdwan_schema.WANPath, 0, len(varLoopPolicyRules.PathsAllowed.L3FailurePaths))
						for varLoopL3FailurePathsIndex, varLoopL3FailurePaths := range varLoopPolicyRules.PathsAllowed.L3FailurePaths {
							// add a new item
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = append(body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths, sdwan_schema.WANPath{})
							// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex] prefix=rsModel plan=varLoopL3FailurePaths properties=2
							// property: name=label, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].Label = StringValueOrNil(varLoopL3FailurePaths.Label)
							// property: name=path_type, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].PathType = StringValueOrNil(varLoopL3FailurePaths.PathType)
						}
					}
				}
				// property: name=service_context, type=REFERENCE macro=copy_from_plan
				if varLoopPolicyRules.ServiceContext != nil {
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext = &sdwan_schema.ServiceContext{}
					// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext prefix=rsModel plan=varLoopPolicyRules.ServiceContext properties=5
					// property: name=active_service_label_id, type=STRING macro=copy_from_plan
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelId = StringValueOrNil(varLoopPolicyRules.ServiceContext.ActiveServiceLabelId)
					// property: name=active_service_label_type, type=STRING macro=copy_from_plan
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelType = StringValueOrNil(varLoopPolicyRules.ServiceContext.ActiveServiceLabelType)
					// property: name=backup_service_label_id, type=STRING macro=copy_from_plan
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelId = StringValueOrNil(varLoopPolicyRules.ServiceContext.BackupServiceLabelId)
					// property: name=backup_service_label_type, type=STRING macro=copy_from_plan
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelType = StringValueOrNil(varLoopPolicyRules.ServiceContext.BackupServiceLabelType)
					// property: name=type, type=STRING macro=copy_from_plan
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.Type = StringValueOrNil(varLoopPolicyRules.ServiceContext.Type)
				}
				// property: name=source_prefixes_id, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = StringValueOrNil(varLoopPolicyRules.SourcePrefixesId)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.Tags)
			}
		}
		// property: name=region, type=STRING macro=copy_from_plan
		body.DefaultrulePolicyset.Region = StringValueOrNil(plan.DefaultrulePolicyset.Region)
		// property: name=send_to_element, type=BOOLEAN macro=copy_from_plan
		body.DefaultrulePolicyset.SendToElement = BoolValueOrNil(plan.DefaultrulePolicyset.SendToElement)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
		body.DefaultrulePolicyset.Tags = SetStringValueOrNil(ctx, plan.DefaultrulePolicyset.Tags)
	}
	// property: name=defaultrule_policyset_id, type=STRING macro=copy_from_plan
	body.DefaultrulePolicysetId = StringValueOrNil(plan.DefaultrulePolicysetId)
	// property: name=description, type=STRING macro=copy_from_plan
	body.Description = StringValueOrNil(plan.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan
	body.Disabled = BoolValueOrNil(plan.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_from_plan
	body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan
	body.Inactive = BoolValueOrNil(plan.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_from_plan
	body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	// property: name=legacy_policystack, type=BOOLEAN macro=copy_from_plan
	body.LegacyPolicystack = BoolValueOrNil(plan.LegacyPolicystack)
	// property: name=name, type=STRING macro=copy_from_plan
	body.Name = StringValueOrNil(plan.Name)
	// property: name=policyset_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
	body.PolicysetIds = ListStringValueOrNil(ctx, plan.PolicysetIds)
	// property: name=policyset_ids_update, type=BOOLEAN macro=copy_from_plan
	body.PolicysetIdsUpdate = BoolValueOrNil(plan.PolicysetIdsUpdate)
	// property: name=policysets, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.Policysets == nil {
		body.Policysets = nil
	} else if len(plan.Policysets) == 0 {
		body.Policysets = []sdwan_schema.BasePolicySet{}
	} else {
		body.Policysets = make([]sdwan_schema.BasePolicySet, 0, len(plan.Policysets))
		for varLoopPolicysetsIndex, varLoopPolicysets := range plan.Policysets {
			// add a new item
			body.Policysets = append(body.Policysets, sdwan_schema.BasePolicySet{})
			// copy_from_plan: body=body.Policysets[varLoopPolicysetsIndex] prefix=rsModel plan=varLoopPolicysets properties=14
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Etag = Int64ValueOrNil(varLoopPolicysets.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Schema = Int64ValueOrNil(varLoopPolicysets.Schema)
			// property: name=clone_from, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].CloneFrom = StringValueOrNil(varLoopPolicysets.CloneFrom)
			// property: name=description, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Description = StringValueOrNil(varLoopPolicysets.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Disabled = BoolValueOrNil(varLoopPolicysets.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].DisabledReason = StringValueOrNil(varLoopPolicysets.DisabledReason)
			// property: name=id, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Id = StringValueOrNil(varLoopPolicysets.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Inactive = BoolValueOrNil(varLoopPolicysets.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].InactiveReason = StringValueOrNil(varLoopPolicysets.InactiveReason)
			// property: name=name, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Name = StringValueOrNil(varLoopPolicysets.Name)
			// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPolicysets.PolicyRules == nil {
				body.Policysets[varLoopPolicysetsIndex].PolicyRules = nil
			} else if len(varLoopPolicysets.PolicyRules) == 0 {
				body.Policysets[varLoopPolicysetsIndex].PolicyRules = []sdwan_schema.BasePolicyRule{}
			} else {
				body.Policysets[varLoopPolicysetsIndex].PolicyRules = make([]sdwan_schema.BasePolicyRule, 0, len(varLoopPolicysets.PolicyRules))
				for varLoopPolicyRulesIndex, varLoopPolicyRules := range varLoopPolicysets.PolicyRules {
					// add a new item
					body.Policysets[varLoopPolicysetsIndex].PolicyRules = append(body.Policysets[varLoopPolicysetsIndex].PolicyRules, sdwan_schema.BasePolicyRule{})
					// copy_from_plan: body=body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel plan=varLoopPolicyRules properties=12
					// property: name=_etag, type=INTEGER macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Etag = Int64ValueOrNil(varLoopPolicyRules.Etag)
					// property: name=_schema, type=INTEGER macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Schema = Int64ValueOrNil(varLoopPolicyRules.Schema)
					// property: name=description, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Description = StringValueOrNil(varLoopPolicyRules.Description)
					// property: name=disabled, type=BOOLEAN macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Disabled = BoolValueOrNil(varLoopPolicyRules.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].DisabledReason = StringValueOrNil(varLoopPolicyRules.DisabledReason)
					// property: name=id, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Id = StringValueOrNil(varLoopPolicyRules.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Inactive = BoolValueOrNil(varLoopPolicyRules.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].InactiveReason = StringValueOrNil(varLoopPolicyRules.InactiveReason)
					// property: name=name, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Name = StringValueOrNil(varLoopPolicyRules.Name)
					// property: name=policyset_id, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].PolicysetId = StringValueOrNil(varLoopPolicyRules.PolicysetId)
					// property: name=region, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Region = StringValueOrNil(varLoopPolicyRules.Region)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.Tags)
				}
			}
			// property: name=region, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Region = StringValueOrNil(varLoopPolicysets.Region)
			// property: name=send_to_element, type=BOOLEAN macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].SendToElement = BoolValueOrNil(varLoopPolicysets.SendToElement)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Tags = SetStringValueOrNil(ctx, varLoopPolicysets.Tags)
		}
	}
	// property: name=region, type=STRING macro=copy_from_plan
	body.Region = StringValueOrNil(plan.Region)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct NetworkPolicySetStack to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_req_version")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "send_to_element")
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_req_version")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "send_to_element")
	request_body_string, _ = sjson.Delete(request_body_string, "defaultrule_policyset")
	request_body_string, _ = sjson.Delete(request_body_string, "legacy_policystack")
	request_body_string, _ = sjson.Delete(request_body_string, "policyset_ids_update")
	request_body_string, _ = sjson.Delete(request_body_string, "policysets")
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_path_policy_stack", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_path_policy_stack",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_path_policy_stack", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_path_policy_stack",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_path_policy_stack", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.NetworkPolicySetStack
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NetworkPolicySetStack in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_path_policy_stack with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=NetworkPolicySetStack
	// copy_to_state: state=state prefix=rsModel ans=ans properties=18
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=default_policysetstack, type=BOOLEAN macro=copy_to_state
	state.DefaultPolicysetstack = types.BoolPointerValue(ans.DefaultPolicysetstack)
	// property: name=defaultrule_policyset, type=REFERENCE macro=copy_to_state
	if ans.DefaultrulePolicyset == nil {
		state.DefaultrulePolicyset = nil
	} else {
		state.DefaultrulePolicyset = &rsModelNetworkPolicySet{}
		// copy_to_state: state=state.DefaultrulePolicyset prefix=rsModel ans=ans.DefaultrulePolicyset properties=16
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DefaultrulePolicyset.Etag = types.Int64PointerValue(ans.DefaultrulePolicyset.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DefaultrulePolicyset.Schema = types.Int64PointerValue(ans.DefaultrulePolicyset.Schema)
		// property: name=clone_from, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.CloneFrom = types.StringPointerValue(ans.DefaultrulePolicyset.CloneFrom)
		// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.DefaultrulePolicyset = types.BoolPointerValue(ans.DefaultrulePolicyset.DefaultrulePolicyset)
		// property: name=description, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Description = types.StringPointerValue(ans.DefaultrulePolicyset.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.Disabled = types.BoolPointerValue(ans.DefaultrulePolicyset.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.DisabledReason = types.StringPointerValue(ans.DefaultrulePolicyset.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Id = types.StringPointerValue(ans.DefaultrulePolicyset.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.Inactive = types.BoolPointerValue(ans.DefaultrulePolicyset.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.InactiveReason = types.StringPointerValue(ans.DefaultrulePolicyset.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Name = types.StringPointerValue(ans.DefaultrulePolicyset.Name)
		// property: name=policy_req_version, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.PolicyReqVersion = types.StringPointerValue(ans.DefaultrulePolicyset.PolicyReqVersion)
		// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.DefaultrulePolicyset.PolicyRules == nil {
			state.DefaultrulePolicyset.PolicyRules = nil
		} else if len(ans.DefaultrulePolicyset.PolicyRules) == 0 {
			state.DefaultrulePolicyset.PolicyRules = []rsModelNetworkPolicyRule{}
		} else {
			state.DefaultrulePolicyset.PolicyRules = make([]rsModelNetworkPolicyRule, 0, len(ans.DefaultrulePolicyset.PolicyRules))
			for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.DefaultrulePolicyset.PolicyRules {
				// add a new item
				state.DefaultrulePolicyset.PolicyRules = append(state.DefaultrulePolicyset.PolicyRules, rsModelNetworkPolicyRule{})
				// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=14
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
				// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
				varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.AppDefIds)
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].AppDefIds = varAppDefIds
				resp.Diagnostics.Append(errAppDefIds.Errors()...)
				// property: name=description, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
				// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixesId)
				// property: name=enabled, type=BOOLEAN macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Enabled = types.BoolPointerValue(varLoopPolicyRules.Enabled)
				// property: name=id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
				// property: name=name, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
				// property: name=network_context_id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].NetworkContextId = types.StringPointerValue(varLoopPolicyRules.NetworkContextId)
				// property: name=order_number, type=INTEGER macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].OrderNumber = types.Int64PointerValue(varLoopPolicyRules.OrderNumber)
				// property: name=paths_allowed, type=REFERENCE macro=copy_to_state
				if varLoopPolicyRules.PathsAllowed == nil {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed = nil
				} else {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed = &rsModelPathsAllowed{}
					// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed prefix=rsModel ans=varLoopPolicyRules.PathsAllowed properties=3
					// property: name=active_paths, type=ARRAY_REFERENCE macro=copy_to_state
					if varLoopPolicyRules.PathsAllowed.ActivePaths == nil {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.ActivePaths) == 0 {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = []rsModelWANPath{}
					} else {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = make([]rsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.ActivePaths))
						for varLoopActivePathsIndex, varLoopActivePaths := range varLoopPolicyRules.PathsAllowed.ActivePaths {
							// add a new item
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = append(state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths, rsModelWANPath{})
							// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex] prefix=rsModel ans=varLoopActivePaths properties=2
							// property: name=label, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].Label = types.StringPointerValue(varLoopActivePaths.Label)
							// property: name=path_type, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].PathType = types.StringPointerValue(varLoopActivePaths.PathType)
						}
					}
					// property: name=backup_paths, type=ARRAY_REFERENCE macro=copy_to_state
					if varLoopPolicyRules.PathsAllowed.BackupPaths == nil {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.BackupPaths) == 0 {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = []rsModelWANPath{}
					} else {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = make([]rsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.BackupPaths))
						for varLoopBackupPathsIndex, varLoopBackupPaths := range varLoopPolicyRules.PathsAllowed.BackupPaths {
							// add a new item
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = append(state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths, rsModelWANPath{})
							// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex] prefix=rsModel ans=varLoopBackupPaths properties=2
							// property: name=label, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].Label = types.StringPointerValue(varLoopBackupPaths.Label)
							// property: name=path_type, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].PathType = types.StringPointerValue(varLoopBackupPaths.PathType)
						}
					}
					// property: name=l3_failure_paths, type=ARRAY_REFERENCE macro=copy_to_state
					if varLoopPolicyRules.PathsAllowed.L3FailurePaths == nil {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.L3FailurePaths) == 0 {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = []rsModelWANPath{}
					} else {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = make([]rsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.L3FailurePaths))
						for varLoopL3FailurePathsIndex, varLoopL3FailurePaths := range varLoopPolicyRules.PathsAllowed.L3FailurePaths {
							// add a new item
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = append(state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths, rsModelWANPath{})
							// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex] prefix=rsModel ans=varLoopL3FailurePaths properties=2
							// property: name=label, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].Label = types.StringPointerValue(varLoopL3FailurePaths.Label)
							// property: name=path_type, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].PathType = types.StringPointerValue(varLoopL3FailurePaths.PathType)
						}
					}
				}
				// property: name=service_context, type=REFERENCE macro=copy_to_state
				if varLoopPolicyRules.ServiceContext == nil {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext = nil
				} else {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext = &rsModelServiceContext{}
					// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext prefix=rsModel ans=varLoopPolicyRules.ServiceContext properties=5
					// property: name=active_service_label_id, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelId = types.StringPointerValue(varLoopPolicyRules.ServiceContext.ActiveServiceLabelId)
					// property: name=active_service_label_type, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelType = types.StringPointerValue(varLoopPolicyRules.ServiceContext.ActiveServiceLabelType)
					// property: name=backup_service_label_id, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelId = types.StringPointerValue(varLoopPolicyRules.ServiceContext.BackupServiceLabelId)
					// property: name=backup_service_label_type, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelType = types.StringPointerValue(varLoopPolicyRules.ServiceContext.BackupServiceLabelType)
					// property: name=type, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.Type = types.StringPointerValue(varLoopPolicyRules.ServiceContext.Type)
				}
				// property: name=source_prefixes_id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = types.StringPointerValue(varLoopPolicyRules.SourcePrefixesId)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
		}
		// property: name=region, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Region = types.StringPointerValue(ans.DefaultrulePolicyset.Region)
		// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.SendToElement = types.BoolPointerValue(ans.DefaultrulePolicyset.SendToElement)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DefaultrulePolicyset.Tags)
		state.DefaultrulePolicyset.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=defaultrule_policyset_id, type=STRING macro=copy_to_state
	state.DefaultrulePolicysetId = types.StringPointerValue(ans.DefaultrulePolicysetId)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=legacy_policystack, type=BOOLEAN macro=copy_to_state
	state.LegacyPolicystack = types.BoolPointerValue(ans.LegacyPolicystack)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policyset_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varPolicysetIds, errPolicysetIds := types.ListValueFrom(ctx, types.StringType, ans.PolicysetIds)
	state.PolicysetIds = varPolicysetIds
	resp.Diagnostics.Append(errPolicysetIds.Errors()...)
	// property: name=policyset_ids_update, type=BOOLEAN macro=copy_to_state
	state.PolicysetIdsUpdate = types.BoolPointerValue(ans.PolicysetIdsUpdate)
	// property: name=policysets, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Policysets == nil {
		state.Policysets = nil
	} else if len(ans.Policysets) == 0 {
		state.Policysets = []rsModelBasePolicySet{}
	} else {
		state.Policysets = make([]rsModelBasePolicySet, 0, len(ans.Policysets))
		for varLoopPolicysetsIndex, varLoopPolicysets := range ans.Policysets {
			// add a new item
			state.Policysets = append(state.Policysets, rsModelBasePolicySet{})
			// copy_to_state: state=state.Policysets[varLoopPolicysetsIndex] prefix=rsModel ans=varLoopPolicysets properties=14
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Etag = types.Int64PointerValue(varLoopPolicysets.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Schema = types.Int64PointerValue(varLoopPolicysets.Schema)
			// property: name=clone_from, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].CloneFrom = types.StringPointerValue(varLoopPolicysets.CloneFrom)
			// property: name=description, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Description = types.StringPointerValue(varLoopPolicysets.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Disabled = types.BoolPointerValue(varLoopPolicysets.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].DisabledReason = types.StringPointerValue(varLoopPolicysets.DisabledReason)
			// property: name=id, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Id = types.StringPointerValue(varLoopPolicysets.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Inactive = types.BoolPointerValue(varLoopPolicysets.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].InactiveReason = types.StringPointerValue(varLoopPolicysets.InactiveReason)
			// property: name=name, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Name = types.StringPointerValue(varLoopPolicysets.Name)
			// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicysets.PolicyRules == nil {
				state.Policysets[varLoopPolicysetsIndex].PolicyRules = nil
			} else if len(varLoopPolicysets.PolicyRules) == 0 {
				state.Policysets[varLoopPolicysetsIndex].PolicyRules = []rsModelBasePolicyRule{}
			} else {
				state.Policysets[varLoopPolicysetsIndex].PolicyRules = make([]rsModelBasePolicyRule, 0, len(varLoopPolicysets.PolicyRules))
				for varLoopPolicyRulesIndex, varLoopPolicyRules := range varLoopPolicysets.PolicyRules {
					// add a new item
					state.Policysets[varLoopPolicysetsIndex].PolicyRules = append(state.Policysets[varLoopPolicysetsIndex].PolicyRules, rsModelBasePolicyRule{})
					// copy_to_state: state=state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=12
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
					// property: name=description, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
					// property: name=disabled, type=BOOLEAN macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Disabled = types.BoolPointerValue(varLoopPolicyRules.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].DisabledReason = types.StringPointerValue(varLoopPolicyRules.DisabledReason)
					// property: name=id, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Inactive = types.BoolPointerValue(varLoopPolicyRules.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].InactiveReason = types.StringPointerValue(varLoopPolicyRules.InactiveReason)
					// property: name=name, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
					// property: name=policyset_id, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].PolicysetId = types.StringPointerValue(varLoopPolicyRules.PolicysetId)
					// property: name=region, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Region = types.StringPointerValue(varLoopPolicyRules.Region)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
					varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
					resp.Diagnostics.Append(errTags.Errors()...)
				}
			}
			// property: name=region, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Region = types.StringPointerValue(varLoopPolicysets.Region)
			// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].SendToElement = types.BoolPointerValue(varLoopPolicysets.SendToElement)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicysets.Tags)
			state.Policysets[varLoopPolicysetsIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *pathPolicyStackResource) doGet(ctx context.Context, state *rsModelNetworkPolicySetStack, savestate *rsModelNetworkPolicySetStack, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_path_policy_stack",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_path_policy_stack ID format", "Expected 1 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.ResourceType = "prismasdwan_path_policy_stack"
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/networkpolicysetstacks/{policy_set_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["policy_set_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_path_policy_stack", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_path_policy_stack",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_path_policy_stack from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=NetworkPolicySetStack
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.NetworkPolicySetStack
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NetworkPolicySetStack in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=18
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=default_policysetstack, type=BOOLEAN macro=copy_to_state
	state.DefaultPolicysetstack = types.BoolPointerValue(ans.DefaultPolicysetstack)
	// property: name=defaultrule_policyset, type=REFERENCE macro=copy_to_state
	if ans.DefaultrulePolicyset == nil {
		state.DefaultrulePolicyset = nil
	} else {
		state.DefaultrulePolicyset = &rsModelNetworkPolicySet{}
		// copy_to_state: state=state.DefaultrulePolicyset prefix=rsModel ans=ans.DefaultrulePolicyset properties=16
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DefaultrulePolicyset.Etag = types.Int64PointerValue(ans.DefaultrulePolicyset.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DefaultrulePolicyset.Schema = types.Int64PointerValue(ans.DefaultrulePolicyset.Schema)
		// property: name=clone_from, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.CloneFrom = types.StringPointerValue(ans.DefaultrulePolicyset.CloneFrom)
		// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.DefaultrulePolicyset = types.BoolPointerValue(ans.DefaultrulePolicyset.DefaultrulePolicyset)
		// property: name=description, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Description = types.StringPointerValue(ans.DefaultrulePolicyset.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.Disabled = types.BoolPointerValue(ans.DefaultrulePolicyset.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.DisabledReason = types.StringPointerValue(ans.DefaultrulePolicyset.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Id = types.StringPointerValue(ans.DefaultrulePolicyset.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.Inactive = types.BoolPointerValue(ans.DefaultrulePolicyset.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.InactiveReason = types.StringPointerValue(ans.DefaultrulePolicyset.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Name = types.StringPointerValue(ans.DefaultrulePolicyset.Name)
		// property: name=policy_req_version, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.PolicyReqVersion = types.StringPointerValue(ans.DefaultrulePolicyset.PolicyReqVersion)
		// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.DefaultrulePolicyset.PolicyRules == nil {
			state.DefaultrulePolicyset.PolicyRules = nil
		} else if len(ans.DefaultrulePolicyset.PolicyRules) == 0 {
			state.DefaultrulePolicyset.PolicyRules = []rsModelNetworkPolicyRule{}
		} else {
			state.DefaultrulePolicyset.PolicyRules = make([]rsModelNetworkPolicyRule, 0, len(ans.DefaultrulePolicyset.PolicyRules))
			for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.DefaultrulePolicyset.PolicyRules {
				// add a new item
				state.DefaultrulePolicyset.PolicyRules = append(state.DefaultrulePolicyset.PolicyRules, rsModelNetworkPolicyRule{})
				// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=14
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
				// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
				varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.AppDefIds)
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].AppDefIds = varAppDefIds
				resp.Diagnostics.Append(errAppDefIds.Errors()...)
				// property: name=description, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
				// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixesId)
				// property: name=enabled, type=BOOLEAN macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Enabled = types.BoolPointerValue(varLoopPolicyRules.Enabled)
				// property: name=id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
				// property: name=name, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
				// property: name=network_context_id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].NetworkContextId = types.StringPointerValue(varLoopPolicyRules.NetworkContextId)
				// property: name=order_number, type=INTEGER macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].OrderNumber = types.Int64PointerValue(varLoopPolicyRules.OrderNumber)
				// property: name=paths_allowed, type=REFERENCE macro=copy_to_state
				if varLoopPolicyRules.PathsAllowed == nil {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed = nil
				} else {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed = &rsModelPathsAllowed{}
					// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed prefix=rsModel ans=varLoopPolicyRules.PathsAllowed properties=3
					// property: name=active_paths, type=ARRAY_REFERENCE macro=copy_to_state
					if varLoopPolicyRules.PathsAllowed.ActivePaths == nil {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.ActivePaths) == 0 {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = []rsModelWANPath{}
					} else {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = make([]rsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.ActivePaths))
						for varLoopActivePathsIndex, varLoopActivePaths := range varLoopPolicyRules.PathsAllowed.ActivePaths {
							// add a new item
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = append(state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths, rsModelWANPath{})
							// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex] prefix=rsModel ans=varLoopActivePaths properties=2
							// property: name=label, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].Label = types.StringPointerValue(varLoopActivePaths.Label)
							// property: name=path_type, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].PathType = types.StringPointerValue(varLoopActivePaths.PathType)
						}
					}
					// property: name=backup_paths, type=ARRAY_REFERENCE macro=copy_to_state
					if varLoopPolicyRules.PathsAllowed.BackupPaths == nil {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.BackupPaths) == 0 {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = []rsModelWANPath{}
					} else {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = make([]rsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.BackupPaths))
						for varLoopBackupPathsIndex, varLoopBackupPaths := range varLoopPolicyRules.PathsAllowed.BackupPaths {
							// add a new item
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = append(state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths, rsModelWANPath{})
							// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex] prefix=rsModel ans=varLoopBackupPaths properties=2
							// property: name=label, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].Label = types.StringPointerValue(varLoopBackupPaths.Label)
							// property: name=path_type, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].PathType = types.StringPointerValue(varLoopBackupPaths.PathType)
						}
					}
					// property: name=l3_failure_paths, type=ARRAY_REFERENCE macro=copy_to_state
					if varLoopPolicyRules.PathsAllowed.L3FailurePaths == nil {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.L3FailurePaths) == 0 {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = []rsModelWANPath{}
					} else {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = make([]rsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.L3FailurePaths))
						for varLoopL3FailurePathsIndex, varLoopL3FailurePaths := range varLoopPolicyRules.PathsAllowed.L3FailurePaths {
							// add a new item
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = append(state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths, rsModelWANPath{})
							// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex] prefix=rsModel ans=varLoopL3FailurePaths properties=2
							// property: name=label, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].Label = types.StringPointerValue(varLoopL3FailurePaths.Label)
							// property: name=path_type, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].PathType = types.StringPointerValue(varLoopL3FailurePaths.PathType)
						}
					}
				}
				// property: name=service_context, type=REFERENCE macro=copy_to_state
				if varLoopPolicyRules.ServiceContext == nil {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext = nil
				} else {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext = &rsModelServiceContext{}
					// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext prefix=rsModel ans=varLoopPolicyRules.ServiceContext properties=5
					// property: name=active_service_label_id, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelId = types.StringPointerValue(varLoopPolicyRules.ServiceContext.ActiveServiceLabelId)
					// property: name=active_service_label_type, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelType = types.StringPointerValue(varLoopPolicyRules.ServiceContext.ActiveServiceLabelType)
					// property: name=backup_service_label_id, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelId = types.StringPointerValue(varLoopPolicyRules.ServiceContext.BackupServiceLabelId)
					// property: name=backup_service_label_type, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelType = types.StringPointerValue(varLoopPolicyRules.ServiceContext.BackupServiceLabelType)
					// property: name=type, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.Type = types.StringPointerValue(varLoopPolicyRules.ServiceContext.Type)
				}
				// property: name=source_prefixes_id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = types.StringPointerValue(varLoopPolicyRules.SourcePrefixesId)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
		}
		// property: name=region, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Region = types.StringPointerValue(ans.DefaultrulePolicyset.Region)
		// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.SendToElement = types.BoolPointerValue(ans.DefaultrulePolicyset.SendToElement)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DefaultrulePolicyset.Tags)
		state.DefaultrulePolicyset.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=defaultrule_policyset_id, type=STRING macro=copy_to_state
	state.DefaultrulePolicysetId = types.StringPointerValue(ans.DefaultrulePolicysetId)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=legacy_policystack, type=BOOLEAN macro=copy_to_state
	state.LegacyPolicystack = types.BoolPointerValue(ans.LegacyPolicystack)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policyset_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varPolicysetIds, errPolicysetIds := types.ListValueFrom(ctx, types.StringType, ans.PolicysetIds)
	state.PolicysetIds = varPolicysetIds
	resp.Diagnostics.Append(errPolicysetIds.Errors()...)
	// property: name=policyset_ids_update, type=BOOLEAN macro=copy_to_state
	state.PolicysetIdsUpdate = types.BoolPointerValue(ans.PolicysetIdsUpdate)
	// property: name=policysets, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Policysets == nil {
		state.Policysets = nil
	} else if len(ans.Policysets) == 0 {
		state.Policysets = []rsModelBasePolicySet{}
	} else {
		state.Policysets = make([]rsModelBasePolicySet, 0, len(ans.Policysets))
		for varLoopPolicysetsIndex, varLoopPolicysets := range ans.Policysets {
			// add a new item
			state.Policysets = append(state.Policysets, rsModelBasePolicySet{})
			// copy_to_state: state=state.Policysets[varLoopPolicysetsIndex] prefix=rsModel ans=varLoopPolicysets properties=14
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Etag = types.Int64PointerValue(varLoopPolicysets.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Schema = types.Int64PointerValue(varLoopPolicysets.Schema)
			// property: name=clone_from, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].CloneFrom = types.StringPointerValue(varLoopPolicysets.CloneFrom)
			// property: name=description, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Description = types.StringPointerValue(varLoopPolicysets.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Disabled = types.BoolPointerValue(varLoopPolicysets.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].DisabledReason = types.StringPointerValue(varLoopPolicysets.DisabledReason)
			// property: name=id, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Id = types.StringPointerValue(varLoopPolicysets.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Inactive = types.BoolPointerValue(varLoopPolicysets.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].InactiveReason = types.StringPointerValue(varLoopPolicysets.InactiveReason)
			// property: name=name, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Name = types.StringPointerValue(varLoopPolicysets.Name)
			// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicysets.PolicyRules == nil {
				state.Policysets[varLoopPolicysetsIndex].PolicyRules = nil
			} else if len(varLoopPolicysets.PolicyRules) == 0 {
				state.Policysets[varLoopPolicysetsIndex].PolicyRules = []rsModelBasePolicyRule{}
			} else {
				state.Policysets[varLoopPolicysetsIndex].PolicyRules = make([]rsModelBasePolicyRule, 0, len(varLoopPolicysets.PolicyRules))
				for varLoopPolicyRulesIndex, varLoopPolicyRules := range varLoopPolicysets.PolicyRules {
					// add a new item
					state.Policysets[varLoopPolicysetsIndex].PolicyRules = append(state.Policysets[varLoopPolicysetsIndex].PolicyRules, rsModelBasePolicyRule{})
					// copy_to_state: state=state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=12
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
					// property: name=description, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
					// property: name=disabled, type=BOOLEAN macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Disabled = types.BoolPointerValue(varLoopPolicyRules.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].DisabledReason = types.StringPointerValue(varLoopPolicyRules.DisabledReason)
					// property: name=id, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Inactive = types.BoolPointerValue(varLoopPolicyRules.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].InactiveReason = types.StringPointerValue(varLoopPolicyRules.InactiveReason)
					// property: name=name, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
					// property: name=policyset_id, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].PolicysetId = types.StringPointerValue(varLoopPolicyRules.PolicysetId)
					// property: name=region, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Region = types.StringPointerValue(varLoopPolicyRules.Region)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
					varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
					resp.Diagnostics.Append(errTags.Errors()...)
				}
			}
			// property: name=region, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Region = types.StringPointerValue(varLoopPolicysets.Region)
			// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].SendToElement = types.BoolPointerValue(varLoopPolicysets.SendToElement)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicysets.Tags)
			state.Policysets[varLoopPolicysetsIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *pathPolicyStackResource) doPut(ctx context.Context, plan *rsModelNetworkPolicySetStack, state *rsModelNetworkPolicySetStack, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_path_policy_stack",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_path_policy_stack", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_path_policy_stack ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.ResourceType = "prismasdwan_path_policy_stack"
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.0/api/networkpolicysetstacks/{policy_set_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["policy_set_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.NetworkPolicySetStack{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=18
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=default_policysetstack, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.DefaultPolicysetstack = ValueBoolPointerFromPlanOrState(plan.DefaultPolicysetstack, state.DefaultPolicysetstack)
	} else {
		body.DefaultPolicysetstack = BoolValueOrNil(plan.DefaultPolicysetstack)
	}
	// property: name=defaultrule_policyset, type=REFERENCE macro=copy_from_plan_or_state
	if plan.DefaultrulePolicyset == nil {
		body.DefaultrulePolicyset = nil
	} else {
		body.DefaultrulePolicyset = &sdwan_schema.NetworkPolicySet{}
		// copy_from_plan_or_state: body=body.DefaultrulePolicyset prefix=rsModel state=state.DefaultrulePolicyset plan=plan.DefaultrulePolicyset properties=16
		// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.Etag = ValueInt64PointerFromPlanOrState(plan.DefaultrulePolicyset.Etag, state.DefaultrulePolicyset.Etag)
		} else {
			body.DefaultrulePolicyset.Etag = Int64ValueOrNil(plan.DefaultrulePolicyset.Etag)
		}
		// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.Schema = ValueInt64PointerFromPlanOrState(plan.DefaultrulePolicyset.Schema, state.DefaultrulePolicyset.Schema)
		} else {
			body.DefaultrulePolicyset.Schema = Int64ValueOrNil(plan.DefaultrulePolicyset.Schema)
		}
		// property: name=clone_from, type=STRING macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.CloneFrom = ValueStringPointerFromPlanOrState(plan.DefaultrulePolicyset.CloneFrom, state.DefaultrulePolicyset.CloneFrom)
		} else {
			body.DefaultrulePolicyset.CloneFrom = StringValueOrNil(plan.DefaultrulePolicyset.CloneFrom)
		}
		// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.DefaultrulePolicyset = ValueBoolPointerFromPlanOrState(plan.DefaultrulePolicyset.DefaultrulePolicyset, state.DefaultrulePolicyset.DefaultrulePolicyset)
		} else {
			body.DefaultrulePolicyset.DefaultrulePolicyset = BoolValueOrNil(plan.DefaultrulePolicyset.DefaultrulePolicyset)
		}
		// property: name=description, type=STRING macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.Description = ValueStringPointerFromPlanOrState(plan.DefaultrulePolicyset.Description, state.DefaultrulePolicyset.Description)
		} else {
			body.DefaultrulePolicyset.Description = StringValueOrNil(plan.DefaultrulePolicyset.Description)
		}
		// property: name=disabled, type=BOOLEAN macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.Disabled = ValueBoolPointerFromPlanOrState(plan.DefaultrulePolicyset.Disabled, state.DefaultrulePolicyset.Disabled)
		} else {
			body.DefaultrulePolicyset.Disabled = BoolValueOrNil(plan.DefaultrulePolicyset.Disabled)
		}
		// property: name=disabled_reason, type=STRING macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.DisabledReason = ValueStringPointerFromPlanOrState(plan.DefaultrulePolicyset.DisabledReason, state.DefaultrulePolicyset.DisabledReason)
		} else {
			body.DefaultrulePolicyset.DisabledReason = StringValueOrNil(plan.DefaultrulePolicyset.DisabledReason)
		}
		// property: name=id, type=STRING macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.Id = ValueStringPointerFromPlanOrState(plan.DefaultrulePolicyset.Id, state.DefaultrulePolicyset.Id)
		} else {
			body.DefaultrulePolicyset.Id = StringValueOrNil(plan.DefaultrulePolicyset.Id)
		}
		// property: name=inactive, type=BOOLEAN macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.Inactive = ValueBoolPointerFromPlanOrState(plan.DefaultrulePolicyset.Inactive, state.DefaultrulePolicyset.Inactive)
		} else {
			body.DefaultrulePolicyset.Inactive = BoolValueOrNil(plan.DefaultrulePolicyset.Inactive)
		}
		// property: name=inactive_reason, type=STRING macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.InactiveReason = ValueStringPointerFromPlanOrState(plan.DefaultrulePolicyset.InactiveReason, state.DefaultrulePolicyset.InactiveReason)
		} else {
			body.DefaultrulePolicyset.InactiveReason = StringValueOrNil(plan.DefaultrulePolicyset.InactiveReason)
		}
		// property: name=name, type=STRING macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.Name = ValueStringPointerFromPlanOrState(plan.DefaultrulePolicyset.Name, state.DefaultrulePolicyset.Name)
		} else {
			body.DefaultrulePolicyset.Name = StringValueOrNil(plan.DefaultrulePolicyset.Name)
		}
		// property: name=policy_req_version, type=STRING macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.PolicyReqVersion = ValueStringPointerFromPlanOrState(plan.DefaultrulePolicyset.PolicyReqVersion, state.DefaultrulePolicyset.PolicyReqVersion)
		} else {
			body.DefaultrulePolicyset.PolicyReqVersion = StringValueOrNil(plan.DefaultrulePolicyset.PolicyReqVersion)
		}
		// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
		if plan.DefaultrulePolicyset.PolicyRules == nil && (state.DefaultrulePolicyset == nil || state.DefaultrulePolicyset.PolicyRules == nil) {
			body.DefaultrulePolicyset.PolicyRules = nil
		} else if len(plan.DefaultrulePolicyset.PolicyRules) == 0 && (state.DefaultrulePolicyset == nil || len(state.DefaultrulePolicyset.PolicyRules) == 0) {
			body.DefaultrulePolicyset.PolicyRules = []sdwan_schema.NetworkPolicyRule{}
		} else if len(plan.DefaultrulePolicyset.PolicyRules) != 0 || (state.DefaultrulePolicyset != nil && len(state.DefaultrulePolicyset.PolicyRules) != 0) {
			PolicyRulesToUse := plan.DefaultrulePolicyset.PolicyRules
			if len(plan.DefaultrulePolicyset.PolicyRules) == 0 {
				PolicyRulesToUse = state.DefaultrulePolicyset.PolicyRules
			}
			body.DefaultrulePolicyset.PolicyRules = make([]sdwan_schema.NetworkPolicyRule, 0, len(PolicyRulesToUse))
			for varLoopPolicyRulesIndex, varLoopPolicyRules := range PolicyRulesToUse {
				// add a new item
				body.DefaultrulePolicyset.PolicyRules = append(body.DefaultrulePolicyset.PolicyRules, sdwan_schema.NetworkPolicyRule{})
				// since we have chosen to stick with either the plan or state, we need to simply copy child properties
				// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel plan=varLoopPolicyRules properties=14
				// property: name=_etag, type=INTEGER macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Etag = Int64ValueOrNil(varLoopPolicyRules.Etag)
				// property: name=_schema, type=INTEGER macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Schema = Int64ValueOrNil(varLoopPolicyRules.Schema)
				// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].AppDefIds = ListStringValueOrNil(ctx, varLoopPolicyRules.AppDefIds)
				// property: name=description, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Description = StringValueOrNil(varLoopPolicyRules.Description)
				// property: name=destination_prefixes_id, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = StringValueOrNil(varLoopPolicyRules.DestinationPrefixesId)
				// property: name=enabled, type=BOOLEAN macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Enabled = BoolValueOrNil(varLoopPolicyRules.Enabled)
				// property: name=id, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Id = StringValueOrNil(varLoopPolicyRules.Id)
				// property: name=name, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Name = StringValueOrNil(varLoopPolicyRules.Name)
				// property: name=network_context_id, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].NetworkContextId = StringValueOrNil(varLoopPolicyRules.NetworkContextId)
				// property: name=order_number, type=INTEGER macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].OrderNumber = Int64ValueOrNil(varLoopPolicyRules.OrderNumber)
				// property: name=paths_allowed, type=REFERENCE macro=copy_from_plan
				if varLoopPolicyRules.PathsAllowed != nil {
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed = &sdwan_schema.PathsAllowed{}
					// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed prefix=rsModel plan=varLoopPolicyRules.PathsAllowed properties=3
					// property: name=active_paths, type=ARRAY_REFERENCE macro=copy_from_plan
					if varLoopPolicyRules.PathsAllowed.ActivePaths == nil {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.ActivePaths) == 0 {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = []sdwan_schema.WANPath{}
					} else {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = make([]sdwan_schema.WANPath, 0, len(varLoopPolicyRules.PathsAllowed.ActivePaths))
						for varLoopActivePathsIndex, varLoopActivePaths := range varLoopPolicyRules.PathsAllowed.ActivePaths {
							// add a new item
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = append(body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths, sdwan_schema.WANPath{})
							// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex] prefix=rsModel plan=varLoopActivePaths properties=2
							// property: name=label, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].Label = StringValueOrNil(varLoopActivePaths.Label)
							// property: name=path_type, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].PathType = StringValueOrNil(varLoopActivePaths.PathType)
						}
					}
					// property: name=backup_paths, type=ARRAY_REFERENCE macro=copy_from_plan
					if varLoopPolicyRules.PathsAllowed.BackupPaths == nil {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.BackupPaths) == 0 {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = []sdwan_schema.WANPath{}
					} else {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = make([]sdwan_schema.WANPath, 0, len(varLoopPolicyRules.PathsAllowed.BackupPaths))
						for varLoopBackupPathsIndex, varLoopBackupPaths := range varLoopPolicyRules.PathsAllowed.BackupPaths {
							// add a new item
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = append(body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths, sdwan_schema.WANPath{})
							// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex] prefix=rsModel plan=varLoopBackupPaths properties=2
							// property: name=label, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].Label = StringValueOrNil(varLoopBackupPaths.Label)
							// property: name=path_type, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].PathType = StringValueOrNil(varLoopBackupPaths.PathType)
						}
					}
					// property: name=l3_failure_paths, type=ARRAY_REFERENCE macro=copy_from_plan
					if varLoopPolicyRules.PathsAllowed.L3FailurePaths == nil {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.L3FailurePaths) == 0 {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = []sdwan_schema.WANPath{}
					} else {
						body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = make([]sdwan_schema.WANPath, 0, len(varLoopPolicyRules.PathsAllowed.L3FailurePaths))
						for varLoopL3FailurePathsIndex, varLoopL3FailurePaths := range varLoopPolicyRules.PathsAllowed.L3FailurePaths {
							// add a new item
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = append(body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths, sdwan_schema.WANPath{})
							// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex] prefix=rsModel plan=varLoopL3FailurePaths properties=2
							// property: name=label, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].Label = StringValueOrNil(varLoopL3FailurePaths.Label)
							// property: name=path_type, type=STRING macro=copy_from_plan
							body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].PathType = StringValueOrNil(varLoopL3FailurePaths.PathType)
						}
					}
				}
				// property: name=service_context, type=REFERENCE macro=copy_from_plan
				if varLoopPolicyRules.ServiceContext != nil {
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext = &sdwan_schema.ServiceContext{}
					// copy_from_plan: body=body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext prefix=rsModel plan=varLoopPolicyRules.ServiceContext properties=5
					// property: name=active_service_label_id, type=STRING macro=copy_from_plan
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelId = StringValueOrNil(varLoopPolicyRules.ServiceContext.ActiveServiceLabelId)
					// property: name=active_service_label_type, type=STRING macro=copy_from_plan
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelType = StringValueOrNil(varLoopPolicyRules.ServiceContext.ActiveServiceLabelType)
					// property: name=backup_service_label_id, type=STRING macro=copy_from_plan
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelId = StringValueOrNil(varLoopPolicyRules.ServiceContext.BackupServiceLabelId)
					// property: name=backup_service_label_type, type=STRING macro=copy_from_plan
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelType = StringValueOrNil(varLoopPolicyRules.ServiceContext.BackupServiceLabelType)
					// property: name=type, type=STRING macro=copy_from_plan
					body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.Type = StringValueOrNil(varLoopPolicyRules.ServiceContext.Type)
				}
				// property: name=source_prefixes_id, type=STRING macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = StringValueOrNil(varLoopPolicyRules.SourcePrefixesId)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
				body.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.Tags)
			}
		}
		// property: name=region, type=STRING macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.Region = ValueStringPointerFromPlanOrState(plan.DefaultrulePolicyset.Region, state.DefaultrulePolicyset.Region)
		} else {
			body.DefaultrulePolicyset.Region = StringValueOrNil(plan.DefaultrulePolicyset.Region)
		}
		// property: name=send_to_element, type=BOOLEAN macro=copy_from_plan_or_state
		if state.DefaultrulePolicyset != nil {
			body.DefaultrulePolicyset.SendToElement = ValueBoolPointerFromPlanOrState(plan.DefaultrulePolicyset.SendToElement, state.DefaultrulePolicyset.SendToElement)
		} else {
			body.DefaultrulePolicyset.SendToElement = BoolValueOrNil(plan.DefaultrulePolicyset.SendToElement)
		}
		// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
		body.DefaultrulePolicyset.Tags = SetStringValueOrNil(ctx, plan.DefaultrulePolicyset.Tags)
	}
	// property: name=defaultrule_policyset_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.DefaultrulePolicysetId = ValueStringPointerFromPlanOrState(plan.DefaultrulePolicysetId, state.DefaultrulePolicysetId)
	} else {
		body.DefaultrulePolicysetId = StringValueOrNil(plan.DefaultrulePolicysetId)
	}
	// property: name=description, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)
	} else {
		body.Description = StringValueOrNil(plan.Description)
	}
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Disabled = ValueBoolPointerFromPlanOrState(plan.Disabled, state.Disabled)
	} else {
		body.Disabled = BoolValueOrNil(plan.Disabled)
	}
	// property: name=disabled_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.DisabledReason = ValueStringPointerFromPlanOrState(plan.DisabledReason, state.DisabledReason)
	} else {
		body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Inactive = ValueBoolPointerFromPlanOrState(plan.Inactive, state.Inactive)
	} else {
		body.Inactive = BoolValueOrNil(plan.Inactive)
	}
	// property: name=inactive_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.InactiveReason = ValueStringPointerFromPlanOrState(plan.InactiveReason, state.InactiveReason)
	} else {
		body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	}
	// property: name=legacy_policystack, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.LegacyPolicystack = ValueBoolPointerFromPlanOrState(plan.LegacyPolicystack, state.LegacyPolicystack)
	} else {
		body.LegacyPolicystack = BoolValueOrNil(plan.LegacyPolicystack)
	}
	// property: name=name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Name = ValueStringPointerFromPlanOrState(plan.Name, state.Name)
	} else {
		body.Name = StringValueOrNil(plan.Name)
	}
	// property: name=policyset_ids, type=ARRAY_PRIMITIVE macro=copy_from_plan_or_state
	body.PolicysetIds = ListStringValueOrNil(ctx, plan.PolicysetIds)
	// property: name=policyset_ids_update, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.PolicysetIdsUpdate = ValueBoolPointerFromPlanOrState(plan.PolicysetIdsUpdate, state.PolicysetIdsUpdate)
	} else {
		body.PolicysetIdsUpdate = BoolValueOrNil(plan.PolicysetIdsUpdate)
	}
	// property: name=policysets, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.Policysets == nil && (state == nil || state.Policysets == nil) {
		body.Policysets = nil
	} else if len(plan.Policysets) == 0 && (state == nil || len(state.Policysets) == 0) {
		body.Policysets = []sdwan_schema.BasePolicySet{}
	} else if len(plan.Policysets) != 0 || (state != nil && len(state.Policysets) != 0) {
		PolicysetsToUse := plan.Policysets
		if len(plan.Policysets) == 0 {
			PolicysetsToUse = state.Policysets
		}
		body.Policysets = make([]sdwan_schema.BasePolicySet, 0, len(PolicysetsToUse))
		for varLoopPolicysetsIndex, varLoopPolicysets := range PolicysetsToUse {
			// add a new item
			body.Policysets = append(body.Policysets, sdwan_schema.BasePolicySet{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.Policysets[varLoopPolicysetsIndex] prefix=rsModel plan=varLoopPolicysets properties=14
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Etag = Int64ValueOrNil(varLoopPolicysets.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Schema = Int64ValueOrNil(varLoopPolicysets.Schema)
			// property: name=clone_from, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].CloneFrom = StringValueOrNil(varLoopPolicysets.CloneFrom)
			// property: name=description, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Description = StringValueOrNil(varLoopPolicysets.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Disabled = BoolValueOrNil(varLoopPolicysets.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].DisabledReason = StringValueOrNil(varLoopPolicysets.DisabledReason)
			// property: name=id, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Id = StringValueOrNil(varLoopPolicysets.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Inactive = BoolValueOrNil(varLoopPolicysets.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].InactiveReason = StringValueOrNil(varLoopPolicysets.InactiveReason)
			// property: name=name, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Name = StringValueOrNil(varLoopPolicysets.Name)
			// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPolicysets.PolicyRules == nil {
				body.Policysets[varLoopPolicysetsIndex].PolicyRules = nil
			} else if len(varLoopPolicysets.PolicyRules) == 0 {
				body.Policysets[varLoopPolicysetsIndex].PolicyRules = []sdwan_schema.BasePolicyRule{}
			} else {
				body.Policysets[varLoopPolicysetsIndex].PolicyRules = make([]sdwan_schema.BasePolicyRule, 0, len(varLoopPolicysets.PolicyRules))
				for varLoopPolicyRulesIndex, varLoopPolicyRules := range varLoopPolicysets.PolicyRules {
					// add a new item
					body.Policysets[varLoopPolicysetsIndex].PolicyRules = append(body.Policysets[varLoopPolicysetsIndex].PolicyRules, sdwan_schema.BasePolicyRule{})
					// copy_from_plan: body=body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel plan=varLoopPolicyRules properties=12
					// property: name=_etag, type=INTEGER macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Etag = Int64ValueOrNil(varLoopPolicyRules.Etag)
					// property: name=_schema, type=INTEGER macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Schema = Int64ValueOrNil(varLoopPolicyRules.Schema)
					// property: name=description, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Description = StringValueOrNil(varLoopPolicyRules.Description)
					// property: name=disabled, type=BOOLEAN macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Disabled = BoolValueOrNil(varLoopPolicyRules.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].DisabledReason = StringValueOrNil(varLoopPolicyRules.DisabledReason)
					// property: name=id, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Id = StringValueOrNil(varLoopPolicyRules.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Inactive = BoolValueOrNil(varLoopPolicyRules.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].InactiveReason = StringValueOrNil(varLoopPolicyRules.InactiveReason)
					// property: name=name, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Name = StringValueOrNil(varLoopPolicyRules.Name)
					// property: name=policyset_id, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].PolicysetId = StringValueOrNil(varLoopPolicyRules.PolicysetId)
					// property: name=region, type=STRING macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Region = StringValueOrNil(varLoopPolicyRules.Region)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
					body.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Tags = SetStringValueOrNil(ctx, varLoopPolicyRules.Tags)
				}
			}
			// property: name=region, type=STRING macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Region = StringValueOrNil(varLoopPolicysets.Region)
			// property: name=send_to_element, type=BOOLEAN macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].SendToElement = BoolValueOrNil(varLoopPolicysets.SendToElement)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan
			body.Policysets[varLoopPolicysetsIndex].Tags = SetStringValueOrNil(ctx, varLoopPolicysets.Tags)
		}
	}
	// property: name=region, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Region = ValueStringPointerFromPlanOrState(plan.Region, state.Region)
	} else {
		body.Region = StringValueOrNil(plan.Region)
	}
	// property: name=tags, type=SET_PRIMITIVE macro=copy_from_plan_or_state
	body.Tags = SetStringValueOrNil(ctx, plan.Tags)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct NetworkPolicySetStack to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_req_version")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "send_to_element")
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "disabled")
	request_body_string, _ = sjson.Delete(request_body_string, "disabled_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive")
	request_body_string, _ = sjson.Delete(request_body_string, "inactive_reason")
	request_body_string, _ = sjson.Delete(request_body_string, "region")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_req_version")
	request_body_string, _ = sjson.Delete(request_body_string, "policy_rules")
	request_body_string, _ = sjson.Delete(request_body_string, "send_to_element")
	request_body_string, _ = sjson.Delete(request_body_string, "defaultrule_policyset")
	request_body_string, _ = sjson.Delete(request_body_string, "legacy_policystack")
	request_body_string, _ = sjson.Delete(request_body_string, "policyset_ids_update")
	request_body_string, _ = sjson.Delete(request_body_string, "policysets")
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_path_policy_stack", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_path_policy_stack",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_path_policy_stack", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_path_policy_stack",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_path_policy_stack", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.NetworkPolicySetStack
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NetworkPolicySetStack in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=NetworkPolicySetStack
	// copy_to_state: state=state prefix=rsModel ans=ans properties=18
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=default_policysetstack, type=BOOLEAN macro=copy_to_state
	state.DefaultPolicysetstack = types.BoolPointerValue(ans.DefaultPolicysetstack)
	// property: name=defaultrule_policyset, type=REFERENCE macro=copy_to_state
	if ans.DefaultrulePolicyset == nil {
		state.DefaultrulePolicyset = nil
	} else {
		state.DefaultrulePolicyset = &rsModelNetworkPolicySet{}
		// copy_to_state: state=state.DefaultrulePolicyset prefix=rsModel ans=ans.DefaultrulePolicyset properties=16
		// property: name=_etag, type=INTEGER macro=copy_to_state
		state.DefaultrulePolicyset.Etag = types.Int64PointerValue(ans.DefaultrulePolicyset.Etag)
		// property: name=_schema, type=INTEGER macro=copy_to_state
		state.DefaultrulePolicyset.Schema = types.Int64PointerValue(ans.DefaultrulePolicyset.Schema)
		// property: name=clone_from, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.CloneFrom = types.StringPointerValue(ans.DefaultrulePolicyset.CloneFrom)
		// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.DefaultrulePolicyset = types.BoolPointerValue(ans.DefaultrulePolicyset.DefaultrulePolicyset)
		// property: name=description, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Description = types.StringPointerValue(ans.DefaultrulePolicyset.Description)
		// property: name=disabled, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.Disabled = types.BoolPointerValue(ans.DefaultrulePolicyset.Disabled)
		// property: name=disabled_reason, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.DisabledReason = types.StringPointerValue(ans.DefaultrulePolicyset.DisabledReason)
		// property: name=id, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Id = types.StringPointerValue(ans.DefaultrulePolicyset.Id)
		// property: name=inactive, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.Inactive = types.BoolPointerValue(ans.DefaultrulePolicyset.Inactive)
		// property: name=inactive_reason, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.InactiveReason = types.StringPointerValue(ans.DefaultrulePolicyset.InactiveReason)
		// property: name=name, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Name = types.StringPointerValue(ans.DefaultrulePolicyset.Name)
		// property: name=policy_req_version, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.PolicyReqVersion = types.StringPointerValue(ans.DefaultrulePolicyset.PolicyReqVersion)
		// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
		if ans.DefaultrulePolicyset.PolicyRules == nil {
			state.DefaultrulePolicyset.PolicyRules = nil
		} else if len(ans.DefaultrulePolicyset.PolicyRules) == 0 {
			state.DefaultrulePolicyset.PolicyRules = []rsModelNetworkPolicyRule{}
		} else {
			state.DefaultrulePolicyset.PolicyRules = make([]rsModelNetworkPolicyRule, 0, len(ans.DefaultrulePolicyset.PolicyRules))
			for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.DefaultrulePolicyset.PolicyRules {
				// add a new item
				state.DefaultrulePolicyset.PolicyRules = append(state.DefaultrulePolicyset.PolicyRules, rsModelNetworkPolicyRule{})
				// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=14
				// property: name=_etag, type=INTEGER macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
				// property: name=_schema, type=INTEGER macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
				// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
				varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.AppDefIds)
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].AppDefIds = varAppDefIds
				resp.Diagnostics.Append(errAppDefIds.Errors()...)
				// property: name=description, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
				// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixesId)
				// property: name=enabled, type=BOOLEAN macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Enabled = types.BoolPointerValue(varLoopPolicyRules.Enabled)
				// property: name=id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
				// property: name=name, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
				// property: name=network_context_id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].NetworkContextId = types.StringPointerValue(varLoopPolicyRules.NetworkContextId)
				// property: name=order_number, type=INTEGER macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].OrderNumber = types.Int64PointerValue(varLoopPolicyRules.OrderNumber)
				// property: name=paths_allowed, type=REFERENCE macro=copy_to_state
				if varLoopPolicyRules.PathsAllowed == nil {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed = nil
				} else {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed = &rsModelPathsAllowed{}
					// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed prefix=rsModel ans=varLoopPolicyRules.PathsAllowed properties=3
					// property: name=active_paths, type=ARRAY_REFERENCE macro=copy_to_state
					if varLoopPolicyRules.PathsAllowed.ActivePaths == nil {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.ActivePaths) == 0 {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = []rsModelWANPath{}
					} else {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = make([]rsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.ActivePaths))
						for varLoopActivePathsIndex, varLoopActivePaths := range varLoopPolicyRules.PathsAllowed.ActivePaths {
							// add a new item
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = append(state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths, rsModelWANPath{})
							// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex] prefix=rsModel ans=varLoopActivePaths properties=2
							// property: name=label, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].Label = types.StringPointerValue(varLoopActivePaths.Label)
							// property: name=path_type, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].PathType = types.StringPointerValue(varLoopActivePaths.PathType)
						}
					}
					// property: name=backup_paths, type=ARRAY_REFERENCE macro=copy_to_state
					if varLoopPolicyRules.PathsAllowed.BackupPaths == nil {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.BackupPaths) == 0 {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = []rsModelWANPath{}
					} else {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = make([]rsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.BackupPaths))
						for varLoopBackupPathsIndex, varLoopBackupPaths := range varLoopPolicyRules.PathsAllowed.BackupPaths {
							// add a new item
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = append(state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths, rsModelWANPath{})
							// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex] prefix=rsModel ans=varLoopBackupPaths properties=2
							// property: name=label, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].Label = types.StringPointerValue(varLoopBackupPaths.Label)
							// property: name=path_type, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].PathType = types.StringPointerValue(varLoopBackupPaths.PathType)
						}
					}
					// property: name=l3_failure_paths, type=ARRAY_REFERENCE macro=copy_to_state
					if varLoopPolicyRules.PathsAllowed.L3FailurePaths == nil {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = nil
					} else if len(varLoopPolicyRules.PathsAllowed.L3FailurePaths) == 0 {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = []rsModelWANPath{}
					} else {
						state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = make([]rsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.L3FailurePaths))
						for varLoopL3FailurePathsIndex, varLoopL3FailurePaths := range varLoopPolicyRules.PathsAllowed.L3FailurePaths {
							// add a new item
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = append(state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths, rsModelWANPath{})
							// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex] prefix=rsModel ans=varLoopL3FailurePaths properties=2
							// property: name=label, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].Label = types.StringPointerValue(varLoopL3FailurePaths.Label)
							// property: name=path_type, type=STRING macro=copy_to_state
							state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].PathType = types.StringPointerValue(varLoopL3FailurePaths.PathType)
						}
					}
				}
				// property: name=service_context, type=REFERENCE macro=copy_to_state
				if varLoopPolicyRules.ServiceContext == nil {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext = nil
				} else {
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext = &rsModelServiceContext{}
					// copy_to_state: state=state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext prefix=rsModel ans=varLoopPolicyRules.ServiceContext properties=5
					// property: name=active_service_label_id, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelId = types.StringPointerValue(varLoopPolicyRules.ServiceContext.ActiveServiceLabelId)
					// property: name=active_service_label_type, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelType = types.StringPointerValue(varLoopPolicyRules.ServiceContext.ActiveServiceLabelType)
					// property: name=backup_service_label_id, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelId = types.StringPointerValue(varLoopPolicyRules.ServiceContext.BackupServiceLabelId)
					// property: name=backup_service_label_type, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelType = types.StringPointerValue(varLoopPolicyRules.ServiceContext.BackupServiceLabelType)
					// property: name=type, type=STRING macro=copy_to_state
					state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.Type = types.StringPointerValue(varLoopPolicyRules.ServiceContext.Type)
				}
				// property: name=source_prefixes_id, type=STRING macro=copy_to_state
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = types.StringPointerValue(varLoopPolicyRules.SourcePrefixesId)
				// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
				varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
				state.DefaultrulePolicyset.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
				resp.Diagnostics.Append(errTags.Errors()...)
			}
		}
		// property: name=region, type=STRING macro=copy_to_state
		state.DefaultrulePolicyset.Region = types.StringPointerValue(ans.DefaultrulePolicyset.Region)
		// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
		state.DefaultrulePolicyset.SendToElement = types.BoolPointerValue(ans.DefaultrulePolicyset.SendToElement)
		// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
		varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.DefaultrulePolicyset.Tags)
		state.DefaultrulePolicyset.Tags = varTags
		resp.Diagnostics.Append(errTags.Errors()...)
	}
	// property: name=defaultrule_policyset_id, type=STRING macro=copy_to_state
	state.DefaultrulePolicysetId = types.StringPointerValue(ans.DefaultrulePolicysetId)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=legacy_policystack, type=BOOLEAN macro=copy_to_state
	state.LegacyPolicystack = types.BoolPointerValue(ans.LegacyPolicystack)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policyset_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
	varPolicysetIds, errPolicysetIds := types.ListValueFrom(ctx, types.StringType, ans.PolicysetIds)
	state.PolicysetIds = varPolicysetIds
	resp.Diagnostics.Append(errPolicysetIds.Errors()...)
	// property: name=policyset_ids_update, type=BOOLEAN macro=copy_to_state
	state.PolicysetIdsUpdate = types.BoolPointerValue(ans.PolicysetIdsUpdate)
	// property: name=policysets, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Policysets == nil {
		state.Policysets = nil
	} else if len(ans.Policysets) == 0 {
		state.Policysets = []rsModelBasePolicySet{}
	} else {
		state.Policysets = make([]rsModelBasePolicySet, 0, len(ans.Policysets))
		for varLoopPolicysetsIndex, varLoopPolicysets := range ans.Policysets {
			// add a new item
			state.Policysets = append(state.Policysets, rsModelBasePolicySet{})
			// copy_to_state: state=state.Policysets[varLoopPolicysetsIndex] prefix=rsModel ans=varLoopPolicysets properties=14
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Etag = types.Int64PointerValue(varLoopPolicysets.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Schema = types.Int64PointerValue(varLoopPolicysets.Schema)
			// property: name=clone_from, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].CloneFrom = types.StringPointerValue(varLoopPolicysets.CloneFrom)
			// property: name=description, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Description = types.StringPointerValue(varLoopPolicysets.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Disabled = types.BoolPointerValue(varLoopPolicysets.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].DisabledReason = types.StringPointerValue(varLoopPolicysets.DisabledReason)
			// property: name=id, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Id = types.StringPointerValue(varLoopPolicysets.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Inactive = types.BoolPointerValue(varLoopPolicysets.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].InactiveReason = types.StringPointerValue(varLoopPolicysets.InactiveReason)
			// property: name=name, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Name = types.StringPointerValue(varLoopPolicysets.Name)
			// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPolicysets.PolicyRules == nil {
				state.Policysets[varLoopPolicysetsIndex].PolicyRules = nil
			} else if len(varLoopPolicysets.PolicyRules) == 0 {
				state.Policysets[varLoopPolicysetsIndex].PolicyRules = []rsModelBasePolicyRule{}
			} else {
				state.Policysets[varLoopPolicysetsIndex].PolicyRules = make([]rsModelBasePolicyRule, 0, len(varLoopPolicysets.PolicyRules))
				for varLoopPolicyRulesIndex, varLoopPolicyRules := range varLoopPolicysets.PolicyRules {
					// add a new item
					state.Policysets[varLoopPolicysetsIndex].PolicyRules = append(state.Policysets[varLoopPolicysetsIndex].PolicyRules, rsModelBasePolicyRule{})
					// copy_to_state: state=state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex] prefix=rsModel ans=varLoopPolicyRules properties=12
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
					// property: name=description, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
					// property: name=disabled, type=BOOLEAN macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Disabled = types.BoolPointerValue(varLoopPolicyRules.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].DisabledReason = types.StringPointerValue(varLoopPolicyRules.DisabledReason)
					// property: name=id, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Inactive = types.BoolPointerValue(varLoopPolicyRules.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].InactiveReason = types.StringPointerValue(varLoopPolicyRules.InactiveReason)
					// property: name=name, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
					// property: name=policyset_id, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].PolicysetId = types.StringPointerValue(varLoopPolicyRules.PolicysetId)
					// property: name=region, type=STRING macro=copy_to_state
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Region = types.StringPointerValue(varLoopPolicyRules.Region)
					// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
					varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
					state.Policysets[varLoopPolicysetsIndex].PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
					resp.Diagnostics.Append(errTags.Errors()...)
				}
			}
			// property: name=region, type=STRING macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].Region = types.StringPointerValue(varLoopPolicysets.Region)
			// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
			state.Policysets[varLoopPolicysetsIndex].SendToElement = types.BoolPointerValue(varLoopPolicysets.SendToElement)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicysets.Tags)
			state.Policysets[varLoopPolicysetsIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	return true
}

func (r *pathPolicyStackResource) doDelete(ctx context.Context, state *rsModelNetworkPolicySetStack, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_path_policy_stack",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_path_policy_stack ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.ResourceType = "prismasdwan_path_policy_stack"
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.0/api/networkpolicysetstacks/{policy_set_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["policy_set_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_path_policy_stack", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *pathPolicyStackResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_path_policy_stack")
	var plan rsModelNetworkPolicySetStack
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelNetworkPolicySetStack
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *pathPolicyStackResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_path_policy_stack")
	var savestate, state rsModelNetworkPolicySetStack
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *pathPolicyStackResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_path_policy_stack")
	var plan, state rsModelNetworkPolicySetStack
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *pathPolicyStackResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_path_policy_stack")
	var state rsModelNetworkPolicySetStack
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *pathPolicyStackResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
