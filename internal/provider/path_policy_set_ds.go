package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=5)
// | Computed Resource Name=networkpolicysets
// +-----------------------------------------------------------------
// | WANPath HasID=false
// | PathsAllowed HasID=false
// | ServiceContext HasID=false
// | NetworkPolicyRule HasID=true
// | NetworkPolicySet HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &pathPolicySetDataSource{}
	_ datasource.DataSourceWithConfigure = &pathPolicySetDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewPathPolicySetDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewPathPolicySetDataSource() datasource.DataSource {
	return &pathPolicySetDataSource{}
}

type pathPolicySetDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *pathPolicySetDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_path_policy_set"
}

// Schema defines the schema for this data source.
func (d *pathPolicySetDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=NetworkPolicySet
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=clone_from, type=STRING macro=rss_schema
			"clone_from": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=clone_from, type=STRING macro=rss_schema
			// property: name=defaultrule_policyset, type=BOOLEAN macro=rss_schema
			"defaultrule_policyset": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=defaultrule_policyset, type=BOOLEAN macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=policy_req_version, type=STRING macro=rss_schema
			"policy_req_version": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=policy_req_version, type=STRING macro=rss_schema
			// property: name=policy_rules, type=ARRAY_REFERENCE macro=rss_schema
			"policy_rules": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": dsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						"app_def_ids": dsschema.ListAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=app_def_ids, type=ARRAY_PRIMITIVE macro=rss_schema
						// property: name=description, type=STRING macro=rss_schema
						"description": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=description, type=STRING macro=rss_schema
						// property: name=destination_prefixes_id, type=STRING macro=rss_schema
						"destination_prefixes_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=destination_prefixes_id, type=STRING macro=rss_schema
						// property: name=enabled, type=BOOLEAN macro=rss_schema
						"enabled": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": dsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=network_context_id, type=STRING macro=rss_schema
						"network_context_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=network_context_id, type=STRING macro=rss_schema
						// property: name=order_number, type=INTEGER macro=rss_schema
						"order_number": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=order_number, type=INTEGER macro=rss_schema
						// property: name=paths_allowed, type=REFERENCE macro=rss_schema
						"paths_allowed": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// property: name=active_paths, type=ARRAY_REFERENCE macro=rss_schema
								"active_paths": dsschema.ListNestedAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// property: name=label, type=STRING macro=rss_schema
											"label": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=label, type=STRING macro=rss_schema
											// property: name=path_type, type=STRING macro=rss_schema
											"path_type": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
										},
									},
								},
								// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
								// property: name=backup_paths, type=ARRAY_REFERENCE macro=rss_schema
								"backup_paths": dsschema.ListNestedAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// property: name=label, type=STRING macro=rss_schema
											"label": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=label, type=STRING macro=rss_schema
											// property: name=path_type, type=STRING macro=rss_schema
											"path_type": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
										},
									},
								},
								// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
								// property: name=l3_failure_paths, type=ARRAY_REFERENCE macro=rss_schema
								"l3_failure_paths": dsschema.ListNestedAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// property: name=label, type=STRING macro=rss_schema
											"label": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=label, type=STRING macro=rss_schema
											// property: name=path_type, type=STRING macro=rss_schema
											"path_type": dsschema.StringAttribute{
												Required:  false,
												Computed:  false,
												Optional:  true,
												Sensitive: false,
											},
											// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
										},
									},
								},
								// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
							},
						},
						// key name holder for attribute: name=path_type, type=STRING macro=rss_schema
						// property: name=service_context, type=REFERENCE macro=rss_schema
						"service_context": dsschema.SingleNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							Attributes: map[string]dsschema.Attribute{
								// property: name=active_service_label_id, type=STRING macro=rss_schema
								"active_service_label_id": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=active_service_label_id, type=STRING macro=rss_schema
								// property: name=active_service_label_type, type=STRING macro=rss_schema
								"active_service_label_type": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=active_service_label_type, type=STRING macro=rss_schema
								// property: name=backup_service_label_id, type=STRING macro=rss_schema
								"backup_service_label_id": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=backup_service_label_id, type=STRING macro=rss_schema
								// property: name=backup_service_label_type, type=STRING macro=rss_schema
								"backup_service_label_type": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=backup_service_label_type, type=STRING macro=rss_schema
								// property: name=type, type=STRING macro=rss_schema
								"type": dsschema.StringAttribute{
									Required:  false,
									Computed:  false,
									Optional:  true,
									Sensitive: false,
								},
								// key name holder for attribute: name=type, type=STRING macro=rss_schema
							},
						},
						// key name holder for attribute: name=type, type=STRING macro=rss_schema
						// property: name=source_prefixes_id, type=STRING macro=rss_schema
						"source_prefixes_id": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=source_prefixes_id, type=STRING macro=rss_schema
						// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
						"tags": dsschema.SetAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ElementType: types.StringType,
						},
						// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=send_to_element, type=BOOLEAN macro=rss_schema
			"send_to_element": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=send_to_element, type=BOOLEAN macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *pathPolicySetDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *pathPolicySetDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelNetworkPolicySet
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_path_policy_set",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) < 1 {
		resp.Diagnostics.AddError("error in prismasdwan_path_policy_set ID format", "Expected 1 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/networkpolicysets/{policy_set_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["policy_set_id"] = &tokens[0]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_path_policy_set", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.NetworkPolicySet
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to NetworkPolicySet", json_err.Error())
		return
	}

	// lets copy all items into state schema=NetworkPolicySet
	// copy_to_state: state=state prefix=dsModel ans=ans properties=16
	tflog.Debug(ctx, "copy_to_state state=state prefix=dsModel ans=ans")
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=clone_from, type=STRING macro=copy_to_state
	state.CloneFrom = types.StringPointerValue(ans.CloneFrom)
	// property: name=defaultrule_policyset, type=BOOLEAN macro=copy_to_state
	state.DefaultrulePolicyset = types.BoolPointerValue(ans.DefaultrulePolicyset)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=policy_req_version, type=STRING macro=copy_to_state
	state.PolicyReqVersion = types.StringPointerValue(ans.PolicyReqVersion)
	// property: name=policy_rules, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PolicyRules == nil {
		state.PolicyRules = nil
	} else if len(ans.PolicyRules) == 0 {
		state.PolicyRules = []dsModelNetworkPolicyRule{}
	} else {
		state.PolicyRules = make([]dsModelNetworkPolicyRule, 0, len(ans.PolicyRules))
		for varLoopPolicyRulesIndex, varLoopPolicyRules := range ans.PolicyRules {
			// add a new item
			state.PolicyRules = append(state.PolicyRules, dsModelNetworkPolicyRule{})
			// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=dsModel ans=varLoopPolicyRules properties=14
			tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex] prefix=dsModel ans=varLoopPolicyRules")
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Etag = types.Int64PointerValue(varLoopPolicyRules.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Schema = types.Int64PointerValue(varLoopPolicyRules.Schema)
			// property: name=app_def_ids, type=ARRAY_PRIMITIVE macro=copy_to_state
			varAppDefIds, errAppDefIds := types.ListValueFrom(ctx, types.StringType, varLoopPolicyRules.AppDefIds)
			state.PolicyRules[varLoopPolicyRulesIndex].AppDefIds = varAppDefIds
			resp.Diagnostics.Append(errAppDefIds.Errors()...)
			// property: name=description, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Description = types.StringPointerValue(varLoopPolicyRules.Description)
			// property: name=destination_prefixes_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].DestinationPrefixesId = types.StringPointerValue(varLoopPolicyRules.DestinationPrefixesId)
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Enabled = types.BoolPointerValue(varLoopPolicyRules.Enabled)
			// property: name=id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Id = types.StringPointerValue(varLoopPolicyRules.Id)
			// property: name=name, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].Name = types.StringPointerValue(varLoopPolicyRules.Name)
			// property: name=network_context_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].NetworkContextId = types.StringPointerValue(varLoopPolicyRules.NetworkContextId)
			// property: name=order_number, type=INTEGER macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].OrderNumber = types.Int64PointerValue(varLoopPolicyRules.OrderNumber)
			// property: name=paths_allowed, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.PathsAllowed == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed = &dsModelPathsAllowed{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed prefix=dsModel ans=varLoopPolicyRules.PathsAllowed properties=3
				tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed prefix=dsModel ans=varLoopPolicyRules.PathsAllowed")
				// property: name=active_paths, type=ARRAY_REFERENCE macro=copy_to_state
				if varLoopPolicyRules.PathsAllowed.ActivePaths == nil {
					state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = nil
				} else if len(varLoopPolicyRules.PathsAllowed.ActivePaths) == 0 {
					state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = []dsModelWANPath{}
				} else {
					state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = make([]dsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.ActivePaths))
					for varLoopActivePathsIndex, varLoopActivePaths := range varLoopPolicyRules.PathsAllowed.ActivePaths {
						// add a new item
						state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths = append(state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths, dsModelWANPath{})
						// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex] prefix=dsModel ans=varLoopActivePaths properties=2
						tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex] prefix=dsModel ans=varLoopActivePaths")
						// property: name=label, type=STRING macro=copy_to_state
						state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].Label = types.StringPointerValue(varLoopActivePaths.Label)
						// property: name=path_type, type=STRING macro=copy_to_state
						state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.ActivePaths[varLoopActivePathsIndex].PathType = types.StringPointerValue(varLoopActivePaths.PathType)
					}
				}
				// property: name=backup_paths, type=ARRAY_REFERENCE macro=copy_to_state
				if varLoopPolicyRules.PathsAllowed.BackupPaths == nil {
					state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = nil
				} else if len(varLoopPolicyRules.PathsAllowed.BackupPaths) == 0 {
					state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = []dsModelWANPath{}
				} else {
					state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = make([]dsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.BackupPaths))
					for varLoopBackupPathsIndex, varLoopBackupPaths := range varLoopPolicyRules.PathsAllowed.BackupPaths {
						// add a new item
						state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths = append(state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths, dsModelWANPath{})
						// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex] prefix=dsModel ans=varLoopBackupPaths properties=2
						tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex] prefix=dsModel ans=varLoopBackupPaths")
						// property: name=label, type=STRING macro=copy_to_state
						state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].Label = types.StringPointerValue(varLoopBackupPaths.Label)
						// property: name=path_type, type=STRING macro=copy_to_state
						state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.BackupPaths[varLoopBackupPathsIndex].PathType = types.StringPointerValue(varLoopBackupPaths.PathType)
					}
				}
				// property: name=l3_failure_paths, type=ARRAY_REFERENCE macro=copy_to_state
				if varLoopPolicyRules.PathsAllowed.L3FailurePaths == nil {
					state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = nil
				} else if len(varLoopPolicyRules.PathsAllowed.L3FailurePaths) == 0 {
					state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = []dsModelWANPath{}
				} else {
					state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = make([]dsModelWANPath, 0, len(varLoopPolicyRules.PathsAllowed.L3FailurePaths))
					for varLoopL3FailurePathsIndex, varLoopL3FailurePaths := range varLoopPolicyRules.PathsAllowed.L3FailurePaths {
						// add a new item
						state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths = append(state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths, dsModelWANPath{})
						// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex] prefix=dsModel ans=varLoopL3FailurePaths properties=2
						tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex] prefix=dsModel ans=varLoopL3FailurePaths")
						// property: name=label, type=STRING macro=copy_to_state
						state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].Label = types.StringPointerValue(varLoopL3FailurePaths.Label)
						// property: name=path_type, type=STRING macro=copy_to_state
						state.PolicyRules[varLoopPolicyRulesIndex].PathsAllowed.L3FailurePaths[varLoopL3FailurePathsIndex].PathType = types.StringPointerValue(varLoopL3FailurePaths.PathType)
					}
				}
			}
			// property: name=service_context, type=REFERENCE macro=copy_to_state
			if varLoopPolicyRules.ServiceContext == nil {
				state.PolicyRules[varLoopPolicyRulesIndex].ServiceContext = nil
			} else {
				state.PolicyRules[varLoopPolicyRulesIndex].ServiceContext = &dsModelServiceContext{}
				// copy_to_state: state=state.PolicyRules[varLoopPolicyRulesIndex].ServiceContext prefix=dsModel ans=varLoopPolicyRules.ServiceContext properties=5
				tflog.Debug(ctx, "copy_to_state state=state.PolicyRules[varLoopPolicyRulesIndex].ServiceContext prefix=dsModel ans=varLoopPolicyRules.ServiceContext")
				// property: name=active_service_label_id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelId = types.StringPointerValue(varLoopPolicyRules.ServiceContext.ActiveServiceLabelId)
				// property: name=active_service_label_type, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.ActiveServiceLabelType = types.StringPointerValue(varLoopPolicyRules.ServiceContext.ActiveServiceLabelType)
				// property: name=backup_service_label_id, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelId = types.StringPointerValue(varLoopPolicyRules.ServiceContext.BackupServiceLabelId)
				// property: name=backup_service_label_type, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.BackupServiceLabelType = types.StringPointerValue(varLoopPolicyRules.ServiceContext.BackupServiceLabelType)
				// property: name=type, type=STRING macro=copy_to_state
				state.PolicyRules[varLoopPolicyRulesIndex].ServiceContext.Type = types.StringPointerValue(varLoopPolicyRules.ServiceContext.Type)
			}
			// property: name=source_prefixes_id, type=STRING macro=copy_to_state
			state.PolicyRules[varLoopPolicyRulesIndex].SourcePrefixesId = types.StringPointerValue(varLoopPolicyRules.SourcePrefixesId)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, varLoopPolicyRules.Tags)
			state.PolicyRules[varLoopPolicyRulesIndex].Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=send_to_element, type=BOOLEAN macro=copy_to_state
	state.SendToElement = types.BoolPointerValue(ans.SendToElement)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
