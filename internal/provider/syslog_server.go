package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	xlJKoIe "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/syslog/server/screen/v2/n2"
	cKzmQTd "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v22/api/sites/siteid/elements/elementid/syslogservers"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &syslogServerListDataSource{}
	_ datasource.DataSourceWithConfigure = &syslogServerListDataSource{}
)

func NewSyslogServerListDataSource() datasource.DataSource {
	return &syslogServerListDataSource{}
}

type syslogServerListDataSource struct {
	client *sdwan.Client
}

// syslogServerListDsModel is the model.
type syslogServerListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ElementId types.String `tfsdk:"element_id"`
	SiteId    types.String `tfsdk:"site_id"`

	// Output.
	Items      []syslogServerListDsModel_xlJKoIe_Config `tfsdk:"items"`
	TotalItems types.Int64                              `tfsdk:"total_items"`
}

type syslogServerListDsModel_xlJKoIe_Config struct {
	Description         types.String `tfsdk:"description"`
	EnableFlowLogging   types.Bool   `tfsdk:"enable_flow_logging"`
	Enabled             types.Bool   `tfsdk:"enabled"`
	Etag                types.Int64  `tfsdk:"etag"`
	Id                  types.String `tfsdk:"id"`
	Name                types.String `tfsdk:"name"`
	Protocol            types.String `tfsdk:"protocol"`
	RemoteCaCertificate types.String `tfsdk:"remote_ca_certificate"`
	ServerFqdn          types.String `tfsdk:"server_fqdn"`
	ServerIp            types.String `tfsdk:"server_ip"`
	ServerPort          types.Int64  `tfsdk:"server_port"`
	SeverityLevel       types.String `tfsdk:"severity_level"`
	SourceInterface     types.String `tfsdk:"source_interface"`
	SyslogProfileId     types.String `tfsdk:"syslog_profile_id"`
	Tags                types.List   `tfsdk:"tags"`
}

// Metadata returns the data source type name.
func (d *syslogServerListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_syslog_server_list"
}

// Schema defines the schema for this listing data source.
func (d *syslogServerListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"element_id":true, "site_id":true} outputs:map[string]bool{"items":true, "tfid":true, "total_items":true} forceNew:map[string]bool{"element_id":true, "site_id":true}
			"element_id": dsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
			},
			"items": dsschema.ListNestedAttribute{
				Description: "The Items param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "enable_flow_logging":true, "enabled":true, "etag":true, "id":true, "name":true, "protocol":true, "remote_ca_certificate":true, "server_fqdn":true, "server_ip":true, "server_port":true, "severity_level":true, "source_interface":true, "syslog_profile_id":true, "tags":true} forceNew:map[string]bool(nil)
						"description": dsschema.StringAttribute{
							Description: "Description: Size(max = 1024, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
							Computed:    true,
						},
						"enable_flow_logging": dsschema.BoolAttribute{
							Description: "Enable Flow Logging.",
							Computed:    true,
						},
						"enabled": dsschema.BoolAttribute{
							Description: "Enabled.",
							Computed:    true,
						},
						"etag": dsschema.Int64Attribute{
							Description: "Entity tag for the resource.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "Id.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Name: Required(error = NAME_REQD: Please provide resource name.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
							Computed:    true,
						},
						"protocol": dsschema.StringAttribute{
							Description: "Protocol.",
							Computed:    true,
						},
						"remote_ca_certificate": dsschema.StringAttribute{
							Description: "Remote Ca Certificate.",
							Computed:    true,
						},
						"server_fqdn": dsschema.StringAttribute{
							Description: "Server Fqdn.",
							Computed:    true,
						},
						"server_ip": dsschema.StringAttribute{
							Description: "Server Ip: IPAddress(allowEmpty = true, allowLinkLocal = false, allowNull = true, bcast = DENY, defaultRoute = false, dnsCheck = false, error = SYSLOGSERVER_CONFIG_INVALID_IP: Invalid IP address for syslog server, type = IP) .",
							Computed:    true,
						},
						"server_port": dsschema.Int64Attribute{
							Description: "Server Port: Range(max = 65535L, error = SYSLOGSERVER_CONFIG_INVALID_RANGE: Invalid port range.Should be between 1-65535., min = 1L) .",
							Computed:    true,
						},
						"severity_level": dsschema.StringAttribute{
							Description: "Severity Level.",
							Computed:    true,
						},
						"source_interface": dsschema.StringAttribute{
							Description: "Source Interface.",
							Computed:    true,
						},
						"syslog_profile_id": dsschema.StringAttribute{
							Description: "Syslog Profile Id.",
							Computed:    true,
						},
						"tags": dsschema.ListAttribute{
							Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 1024, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total_items": dsschema.Int64Attribute{
				Description: "The TotalItems param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *syslogServerListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *syslogServerListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state syslogServerListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "prismasdwan_syslog_server_list",
		"terraform_provider_function": "Read",
		"site_id":                     state.SiteId.ValueString(),
		"element_id":                  state.ElementId.ValueString(),
	})

	// Prepare to run the command.
	svc := cKzmQTd.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.ListInput{}

	input.SiteId = StringValue(state.SiteId)

	input.ElementId = StringValue(state.ElementId)

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.ElementId)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Items) == 0 {
		state.Items = nil
	} else {
		state.Items = make([]syslogServerListDsModel_xlJKoIe_Config, 0, len(ans.Items))
		for _, var0 := range ans.Items {
			var1 := syslogServerListDsModel_xlJKoIe_Config{}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.EnableFlowLogging = types.BoolPointerValue(var0.EnableFlowLogging)

			var1.Enabled = types.BoolPointerValue(var0.Enabled)

			var1.Etag = types.Int64PointerValue(var0.Etag)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.Protocol = types.StringPointerValue(var0.Protocol)

			var1.RemoteCaCertificate = types.StringPointerValue(var0.RemoteCaCertificate)

			var1.ServerFqdn = types.StringPointerValue(var0.ServerFqdn)

			var1.ServerIp = types.StringPointerValue(var0.ServerIp)

			var1.ServerPort = types.Int64PointerValue(var0.ServerPort)

			var1.SeverityLevel = types.StringPointerValue(var0.SeverityLevel)

			var1.SourceInterface = types.StringPointerValue(var0.SourceInterface)

			var1.SyslogProfileId = types.StringPointerValue(var0.SyslogProfileId)

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var2
			resp.Diagnostics.Append(var3.Errors()...)
			state.Items = append(state.Items, var1)
		}
	}

	state.TotalItems = types.Int64PointerValue(ans.TotalItems)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &syslogServerDataSource{}
	_ datasource.DataSourceWithConfigure = &syslogServerDataSource{}
)

func NewSyslogServerDataSource() datasource.DataSource {
	return &syslogServerDataSource{}
}

type syslogServerDataSource struct {
	client *sdwan.Client
}

// syslogServerDsModel is the model.
type syslogServerDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ElementId      types.String `tfsdk:"element_id"`
	SiteId         types.String `tfsdk:"site_id"`
	SyslogserverId types.String `tfsdk:"syslogserver_id"`

	// Output.
	Description         types.String `tfsdk:"description"`
	EnableFlowLogging   types.Bool   `tfsdk:"enable_flow_logging"`
	Enabled             types.Bool   `tfsdk:"enabled"`
	Etag                types.Int64  `tfsdk:"etag"`
	Id                  types.String `tfsdk:"id"`
	Name                types.String `tfsdk:"name"`
	Protocol            types.String `tfsdk:"protocol"`
	RemoteCaCertificate types.String `tfsdk:"remote_ca_certificate"`
	ServerFqdn          types.String `tfsdk:"server_fqdn"`
	ServerIp            types.String `tfsdk:"server_ip"`
	ServerPort          types.Int64  `tfsdk:"server_port"`
	SeverityLevel       types.String `tfsdk:"severity_level"`
	SourceInterface     types.String `tfsdk:"source_interface"`
	SyslogProfileId     types.String `tfsdk:"syslog_profile_id"`
	Tags                types.List   `tfsdk:"tags"`
}

// Metadata returns the data source type name.
func (d *syslogServerDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_syslog_server"
}

// Schema defines the schema for this data source.
func (d *syslogServerDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"element_id":true, "site_id":true, "syslogserver_id":true} outputs:map[string]bool{"description":true, "enable_flow_logging":true, "enabled":true, "etag":true, "id":true, "name":true, "protocol":true, "remote_ca_certificate":true, "server_fqdn":true, "server_ip":true, "server_port":true, "severity_level":true, "source_interface":true, "syslog_profile_id":true, "tags":true, "tfid":true} forceNew:map[string]bool{"element_id":true, "site_id":true, "syslogserver_id":true}
			"description": dsschema.StringAttribute{
				Description: "Description: Size(max = 1024, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Computed:    true,
			},
			"element_id": dsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
			},
			"enable_flow_logging": dsschema.BoolAttribute{
				Description: "Enable Flow Logging.",
				Computed:    true,
			},
			"enabled": dsschema.BoolAttribute{
				Description: "Enabled.",
				Computed:    true,
			},
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Name: Required(error = NAME_REQD: Please provide resource name.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Computed:    true,
			},
			"protocol": dsschema.StringAttribute{
				Description: "Protocol.",
				Computed:    true,
			},
			"remote_ca_certificate": dsschema.StringAttribute{
				Description: "Remote Ca Certificate.",
				Computed:    true,
			},
			"server_fqdn": dsschema.StringAttribute{
				Description: "Server Fqdn.",
				Computed:    true,
			},
			"server_ip": dsschema.StringAttribute{
				Description: "Server Ip: IPAddress(allowEmpty = true, allowLinkLocal = false, allowNull = true, bcast = DENY, defaultRoute = false, dnsCheck = false, error = SYSLOGSERVER_CONFIG_INVALID_IP: Invalid IP address for syslog server, type = IP) .",
				Computed:    true,
			},
			"server_port": dsschema.Int64Attribute{
				Description: "Server Port: Range(max = 65535L, error = SYSLOGSERVER_CONFIG_INVALID_RANGE: Invalid port range.Should be between 1-65535., min = 1L) .",
				Computed:    true,
			},
			"severity_level": dsschema.StringAttribute{
				Description: "Severity Level.",
				Computed:    true,
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
			},
			"source_interface": dsschema.StringAttribute{
				Description: "Source Interface.",
				Computed:    true,
			},
			"syslog_profile_id": dsschema.StringAttribute{
				Description: "Syslog Profile Id.",
				Computed:    true,
			},
			"syslogserver_id": dsschema.StringAttribute{
				Description: "Syslogserver Id.",
				Required:    true,
			},
			"tags": dsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 1024, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *syslogServerDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *syslogServerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state syslogServerDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_syslog_server",
		"terraform_provider_function": "Read",
		"site_id":                     state.SiteId.ValueString(),
		"element_id":                  state.ElementId.ValueString(),
		"syslogserver_id":             state.SyslogserverId.ValueString(),
	})

	// Prepare to run the command.
	svc := cKzmQTd.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.ReadInput{}

	input.SiteId = StringValue(state.SiteId)

	input.ElementId = StringValue(state.ElementId)

	input.SyslogserverId = StringValue(state.SyslogserverId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.ElementId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.SyslogserverId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.EnableFlowLogging = types.BoolPointerValue(ans.EnableFlowLogging)

	state.Enabled = types.BoolPointerValue(ans.Enabled)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Protocol = types.StringPointerValue(ans.Protocol)

	state.RemoteCaCertificate = types.StringPointerValue(ans.RemoteCaCertificate)

	state.ServerFqdn = types.StringPointerValue(ans.ServerFqdn)

	state.ServerIp = types.StringPointerValue(ans.ServerIp)

	state.ServerPort = types.Int64PointerValue(ans.ServerPort)

	state.SeverityLevel = types.StringPointerValue(ans.SeverityLevel)

	state.SourceInterface = types.StringPointerValue(ans.SourceInterface)

	state.SyslogProfileId = types.StringPointerValue(ans.SyslogProfileId)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var0
	resp.Diagnostics.Append(var1.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &syslogServerResource{}
	_ resource.ResourceWithConfigure   = &syslogServerResource{}
	_ resource.ResourceWithImportState = &syslogServerResource{}
)

func NewSyslogServerResource() resource.Resource {
	return &syslogServerResource{}
}

type syslogServerResource struct {
	client *sdwan.Client
}

// syslogServerRsModel is the model.
type syslogServerRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Description         types.String `tfsdk:"description"`
	ElementId           types.String `tfsdk:"element_id"`
	EnableFlowLogging   types.Bool   `tfsdk:"enable_flow_logging"`
	Enabled             types.Bool   `tfsdk:"enabled"`
	Etag                types.Int64  `tfsdk:"etag"`
	Id                  types.String `tfsdk:"id"`
	Name                types.String `tfsdk:"name"`
	Protocol            types.String `tfsdk:"protocol"`
	RemoteCaCertificate types.String `tfsdk:"remote_ca_certificate"`
	ServerFqdn          types.String `tfsdk:"server_fqdn"`
	ServerIp            types.String `tfsdk:"server_ip"`
	ServerPort          types.Int64  `tfsdk:"server_port"`
	SeverityLevel       types.String `tfsdk:"severity_level"`
	SiteId              types.String `tfsdk:"site_id"`
	SourceInterface     types.String `tfsdk:"source_interface"`
	SyslogProfileId     types.String `tfsdk:"syslog_profile_id"`
	Tags                types.List   `tfsdk:"tags"`

	// Output.
	// omit input: description
	// omit input: enable_flow_logging
	// omit input: enabled
	// omit input: etag
	// omit input: id
	// omit input: name
	// omit input: protocol
	// omit input: remote_ca_certificate
	// omit input: server_fqdn
	// omit input: server_ip
	// omit input: server_port
	// omit input: severity_level
	// omit input: source_interface
	// omit input: syslog_profile_id
	// omit input: tags
}

// Metadata returns the data source type name.
func (r *syslogServerResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_syslog_server"
}

// Schema defines the schema for this data source.
func (r *syslogServerResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"description":true, "element_id":true, "enable_flow_logging":true, "enabled":true, "etag":true, "id":true, "name":true, "protocol":true, "remote_ca_certificate":true, "server_fqdn":true, "server_ip":true, "server_port":true, "severity_level":true, "site_id":true, "source_interface":true, "syslog_profile_id":true, "tags":true} outputs:map[string]bool{"description":true, "enable_flow_logging":true, "enabled":true, "etag":true, "id":true, "name":true, "protocol":true, "remote_ca_certificate":true, "server_fqdn":true, "server_ip":true, "server_port":true, "severity_level":true, "source_interface":true, "syslog_profile_id":true, "tags":true, "tfid":true} forceNew:map[string]bool{"element_id":true, "site_id":true}
			"description": rsschema.StringAttribute{
				Description: "Description: Size(max = 1024, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Optional:    true,
			},
			"element_id": rsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"enable_flow_logging": rsschema.BoolAttribute{
				Description: "Enable Flow Logging.",
				Optional:    true,
			},
			"enabled": rsschema.BoolAttribute{
				Description: "Enabled.",
				Optional:    true,
			},
			"etag": rsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Optional:    true,
				Computed:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Name: Required(error = NAME_REQD: Please provide resource name.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource exceeds limit., min = 0) .",
				Required:    true,
			},
			"protocol": rsschema.StringAttribute{
				Description: "Protocol.",
				Optional:    true,
			},
			"remote_ca_certificate": rsschema.StringAttribute{
				Description: "Remote Ca Certificate.",
				Optional:    true,
			},
			"server_fqdn": rsschema.StringAttribute{
				Description: "Server Fqdn.",
				Optional:    true,
			},
			"server_ip": rsschema.StringAttribute{
				Description: "Server Ip: IPAddress(allowEmpty = true, allowLinkLocal = false, allowNull = true, bcast = DENY, defaultRoute = false, dnsCheck = false, error = SYSLOGSERVER_CONFIG_INVALID_IP: Invalid IP address for syslog server, type = IP) .",
				Optional:    true,
			},
			"server_port": rsschema.Int64Attribute{
				Description: "Server Port: Range(max = 65535L, error = SYSLOGSERVER_CONFIG_INVALID_RANGE: Invalid port range.Should be between 1-65535., min = 1L) .",
				Optional:    true,
			},
			"severity_level": rsschema.StringAttribute{
				Description: "Severity Level.",
				Optional:    true,
			},
			"site_id": rsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"source_interface": rsschema.StringAttribute{
				Description: "Source Interface.",
				Optional:    true,
			},
			"syslog_profile_id": rsschema.StringAttribute{
				Description: "Syslog Profile Id.",
				Optional:    true,
			},
			"tags": rsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 1024, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *syslogServerResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sdwan.Client)
}

// Create resource.
func (r *syslogServerResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state syslogServerRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_syslog_server",
		"terraform_provider_function": "Create",
		"site_id":                     state.SiteId.ValueString(),
		"element_id":                  state.ElementId.ValueString(),
	})

	// Prepare to create the config.
	svc := cKzmQTd.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.CreateInput{}

	input.SiteId = StringValue(state.SiteId)

	input.ElementId = StringValue(state.ElementId)
	input.Request = &xlJKoIe.Config{}

	input.Request.Description = StringValueOrNil(state.Description)

	input.Request.EnableFlowLogging = BoolValueOrNil(state.EnableFlowLogging)

	input.Request.Enabled = BoolValueOrNil(state.Enabled)

	input.Request.Etag = Int64ValueOrNil(state.Etag)

	input.Request.Name = StringValue(state.Name)

	input.Request.Protocol = StringValueOrNil(state.Protocol)

	input.Request.RemoteCaCertificate = StringValueOrNil(state.RemoteCaCertificate)

	input.Request.ServerFqdn = StringValueOrNil(state.ServerFqdn)

	input.Request.ServerIp = StringValueOrNil(state.ServerIp)

	input.Request.ServerPort = Int64ValueOrNil(state.ServerPort)

	input.Request.SeverityLevel = StringValueOrNil(state.SeverityLevel)

	input.Request.SourceInterface = StringValueOrNil(state.SourceInterface)

	input.Request.SyslogProfileId = StringValueOrNil(state.SyslogProfileId)

	input.Request.Tags = ListStringValueOrNil(ctx, state.Tags)

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.ElementId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.EnableFlowLogging = types.BoolPointerValue(ans.EnableFlowLogging)

	state.Enabled = types.BoolPointerValue(ans.Enabled)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Protocol = types.StringPointerValue(ans.Protocol)

	state.RemoteCaCertificate = types.StringPointerValue(ans.RemoteCaCertificate)

	state.ServerFqdn = types.StringPointerValue(ans.ServerFqdn)

	state.ServerIp = types.StringPointerValue(ans.ServerIp)

	state.ServerPort = types.Int64PointerValue(ans.ServerPort)

	state.SeverityLevel = types.StringPointerValue(ans.SeverityLevel)

	state.SourceInterface = types.StringPointerValue(ans.SourceInterface)

	state.SyslogProfileId = types.StringPointerValue(ans.SyslogProfileId)

	var1, var2 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var1
	resp.Diagnostics.Append(var2.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *syslogServerResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state syslogServerRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_syslog_server",
		"locMap":                      map[string]int{"element_id": 1, "site_id": 0, "syslogserver_id": 2},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := cKzmQTd.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.ReadInput{}

	input.SiteId = tokens[0]

	input.ElementId = tokens[1]

	input.SyslogserverId = tokens[2]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.SiteId = types.StringNull()
	} else {
		state.SiteId = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.ElementId = types.StringNull()
	} else {
		state.ElementId = types.StringValue(tokens[1])
	}
	state.Tfid = savestate.Tfid

	state.Description = types.StringPointerValue(ans.Description)

	state.EnableFlowLogging = types.BoolPointerValue(ans.EnableFlowLogging)

	state.Enabled = types.BoolPointerValue(ans.Enabled)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Protocol = types.StringPointerValue(ans.Protocol)

	state.RemoteCaCertificate = types.StringPointerValue(ans.RemoteCaCertificate)

	state.ServerFqdn = types.StringPointerValue(ans.ServerFqdn)

	state.ServerIp = types.StringPointerValue(ans.ServerIp)

	state.ServerPort = types.Int64PointerValue(ans.ServerPort)

	state.SeverityLevel = types.StringPointerValue(ans.SeverityLevel)

	state.SourceInterface = types.StringPointerValue(ans.SourceInterface)

	state.SyslogProfileId = types.StringPointerValue(ans.SyslogProfileId)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var0
	resp.Diagnostics.Append(var1.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *syslogServerResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state syslogServerRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_syslog_server",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := cKzmQTd.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.UpdateInput{}

	if tokens[0] != "" {
		input.SiteId = tokens[0]
	}

	if tokens[1] != "" {
		input.ElementId = tokens[1]
	}

	if tokens[2] != "" {
		input.SyslogserverId = tokens[2]
	}
	input.Request = &xlJKoIe.Config{}

	input.Request.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)

	input.Request.EnableFlowLogging = ValueBoolPointerFromPlanOrState(plan.EnableFlowLogging, state.EnableFlowLogging)

	input.Request.Enabled = ValueBoolPointerFromPlanOrState(plan.Enabled, state.Enabled)

	input.Request.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)

	input.Request.Name = ValueStringFromPlanOrState(plan.Name, state.Name)

	input.Request.Protocol = ValueStringPointerFromPlanOrState(plan.Protocol, state.Protocol)

	input.Request.RemoteCaCertificate = ValueStringPointerFromPlanOrState(plan.RemoteCaCertificate, state.RemoteCaCertificate)

	input.Request.ServerFqdn = ValueStringPointerFromPlanOrState(plan.ServerFqdn, state.ServerFqdn)

	input.Request.ServerIp = ValueStringPointerFromPlanOrState(plan.ServerIp, state.ServerIp)

	input.Request.ServerPort = ValueInt64PointerFromPlanOrState(plan.ServerPort, state.ServerPort)

	input.Request.SeverityLevel = ValueStringPointerFromPlanOrState(plan.SeverityLevel, state.SeverityLevel)

	input.Request.SourceInterface = ValueStringPointerFromPlanOrState(plan.SourceInterface, state.SourceInterface)

	input.Request.SyslogProfileId = ValueStringPointerFromPlanOrState(plan.SyslogProfileId, state.SyslogProfileId)

	input.Request.Tags = ListStringValueOrNil(ctx, plan.Tags)

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Description = types.StringPointerValue(ans.Description)

	state.EnableFlowLogging = types.BoolPointerValue(ans.EnableFlowLogging)

	state.Enabled = types.BoolPointerValue(ans.Enabled)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Protocol = types.StringPointerValue(ans.Protocol)

	state.RemoteCaCertificate = types.StringPointerValue(ans.RemoteCaCertificate)

	state.ServerFqdn = types.StringPointerValue(ans.ServerFqdn)

	state.ServerIp = types.StringPointerValue(ans.ServerIp)

	state.ServerPort = types.Int64PointerValue(ans.ServerPort)

	state.SeverityLevel = types.StringPointerValue(ans.SeverityLevel)

	state.SourceInterface = types.StringPointerValue(ans.SourceInterface)

	state.SyslogProfileId = types.StringPointerValue(ans.SyslogProfileId)

	var1, var2 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var1
	resp.Diagnostics.Append(var2.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *syslogServerResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_syslog_server",
		"locMap":                      map[string]int{"element_id": 1, "site_id": 0, "syslogserver_id": 2},
		"tokens":                      tokens,
	})

	svc := cKzmQTd.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.DeleteInput{}

	input.SiteId = tokens[0]

	input.ElementId = tokens[1]

	input.SyslogserverId = tokens[2]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *syslogServerResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
