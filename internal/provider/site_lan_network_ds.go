package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=9)
// | Computed Resource Name=sites_lannetworks
// +-----------------------------------------------------------------
// | LanNetworkIPv6Config HasID=false
// | BaseCustomDHCPOptions HasID=false
// | StaticMapping HasID=false
// | IPRange HasID=false
// | DHCPServer HasID=true
// | DHCPRelayOption82 HasID=false
// | DHCPRelay HasID=false
// | LanNetworkIPv4Config HasID=false
// | LANNetworkScreenV3N3 HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &siteLanNetworkDataSource{}
	_ datasource.DataSourceWithConfigure = &siteLanNetworkDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewSiteLanNetworkDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewSiteLanNetworkDataSource() datasource.DataSource {
	return &siteLanNetworkDataSource{}
}

type siteLanNetworkDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *siteLanNetworkDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_site_lan_network"
}

// Schema defines the schema for this data source.
func (d *siteLanNetworkDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=LANNetworkScreenV3N3
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=ipv4_config, type=REFERENCE macro=rss_schema
			"ipv4_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=default_routers, type=ARRAY_PRIMITIVE macro=rss_schema
					"default_routers": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=default_routers, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=dhcp_relay, type=REFERENCE macro=rss_schema
					"dhcp_relay": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// property: name=enabled, type=BOOLEAN macro=rss_schema
							"enabled": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
							// property: name=option_82, type=REFERENCE macro=rss_schema
							"option_82": dsschema.SingleNestedAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
								Attributes: map[string]dsschema.Attribute{
									// property: name=circuit_id, type=STRING macro=rss_schema
									"circuit_id": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=circuit_id, type=STRING macro=rss_schema
									// property: name=enabled, type=BOOLEAN macro=rss_schema
									"enabled": dsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=enabled, type=BOOLEAN macro=rss_schema
									// property: name=reforwarding_policy, type=STRING macro=rss_schema
									"reforwarding_policy": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=reforwarding_policy, type=STRING macro=rss_schema
									// property: name=remote_id, type=STRING macro=rss_schema
									"remote_id": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=remote_id, type=STRING macro=rss_schema
								},
							},
							// key name holder for attribute: name=remote_id, type=STRING macro=rss_schema
							// property: name=server_ips, type=ARRAY_PRIMITIVE macro=rss_schema
							"server_ips": dsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=server_ips, type=ARRAY_PRIMITIVE macro=rss_schema
							// property: name=source_interface, type=STRING macro=rss_schema
							"source_interface": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=source_interface, type=STRING macro=rss_schema
						},
					},
					// key name holder for attribute: name=source_interface, type=STRING macro=rss_schema
					// property: name=dhcp_server, type=REFERENCE macro=rss_schema
					"dhcp_server": dsschema.SingleNestedAttribute{
						Required:  false,
						Computed:  false,
						Optional:  true,
						Sensitive: false,
						Attributes: map[string]dsschema.Attribute{
							// generic x_parameters is added to accomodate path parameters
							"x_parameters": dsschema.MapAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								ElementType: types.StringType,
							},
							// property: name=_etag, type=INTEGER macro=rss_schema
							"x_etag": dsschema.Int64Attribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
							// property: name=_schema, type=INTEGER macro=rss_schema
							"x_schema": dsschema.Int64Attribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
							// property: name=broadcast_address, type=STRING macro=rss_schema
							"broadcast_address": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=broadcast_address, type=STRING macro=rss_schema
							// property: name=custom_options, type=ARRAY_REFERENCE macro=rss_schema
							"custom_options": dsschema.ListNestedAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
								NestedObject: dsschema.NestedAttributeObject{
									Attributes: map[string]dsschema.Attribute{
										// property: name=option_definition, type=STRING macro=rss_schema
										"option_definition": dsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=option_definition, type=STRING macro=rss_schema
										// property: name=option_value, type=STRING macro=rss_schema
										"option_value": dsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=option_value, type=STRING macro=rss_schema
									},
								},
							},
							// key name holder for attribute: name=option_value, type=STRING macro=rss_schema
							// property: name=default_lease_time, type=INTEGER macro=rss_schema
							"default_lease_time": dsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=default_lease_time, type=INTEGER macro=rss_schema
							// property: name=description, type=STRING macro=rss_schema
							"description": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=description, type=STRING macro=rss_schema
							// property: name=disabled, type=BOOLEAN macro=rss_schema
							"disabled": dsschema.BoolAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
							// property: name=dns_servers, type=ARRAY_PRIMITIVE macro=rss_schema
							"dns_servers": dsschema.ListAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=dns_servers, type=ARRAY_PRIMITIVE macro=rss_schema
							// property: name=domain_name, type=STRING macro=rss_schema
							"domain_name": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=domain_name, type=STRING macro=rss_schema
							// property: name=gateway, type=STRING macro=rss_schema
							"gateway": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=gateway, type=STRING macro=rss_schema
							// property: name=id, type=STRING macro=rss_schema
							"id": dsschema.StringAttribute{
								Required:  false,
								Computed:  true,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=id, type=STRING macro=rss_schema
							// property: name=ip_ranges, type=ARRAY_REFERENCE macro=rss_schema
							"ip_ranges": dsschema.ListNestedAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
								NestedObject: dsschema.NestedAttributeObject{
									Attributes: map[string]dsschema.Attribute{
										// property: name=end_ip, type=STRING macro=rss_schema
										"end_ip": dsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=end_ip, type=STRING macro=rss_schema
										// property: name=start_ip, type=STRING macro=rss_schema
										"start_ip": dsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=start_ip, type=STRING macro=rss_schema
									},
								},
							},
							// key name holder for attribute: name=start_ip, type=STRING macro=rss_schema
							// property: name=max_lease_time, type=INTEGER macro=rss_schema
							"max_lease_time": dsschema.Int64Attribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=max_lease_time, type=INTEGER macro=rss_schema
							// property: name=network_context_id, type=STRING macro=rss_schema
							"network_context_id": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=network_context_id, type=STRING macro=rss_schema
							// property: name=static_mappings, type=ARRAY_REFERENCE macro=rss_schema
							"static_mappings": dsschema.ListNestedAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
								NestedObject: dsschema.NestedAttributeObject{
									Attributes: map[string]dsschema.Attribute{
										// property: name=ip_address, type=STRING macro=rss_schema
										"ip_address": dsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=ip_address, type=STRING macro=rss_schema
										// property: name=mac, type=STRING macro=rss_schema
										"mac": dsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=mac, type=STRING macro=rss_schema
										// property: name=name, type=STRING macro=rss_schema
										"name": dsschema.StringAttribute{
											Required:  false,
											Computed:  false,
											Optional:  true,
											Sensitive: false,
										},
										// key name holder for attribute: name=name, type=STRING macro=rss_schema
									},
								},
							},
							// key name holder for attribute: name=name, type=STRING macro=rss_schema
							// property: name=subnet, type=STRING macro=rss_schema
							"subnet": dsschema.StringAttribute{
								Required:  false,
								Computed:  false,
								Optional:  true,
								Sensitive: false,
							},
							// key name holder for attribute: name=subnet, type=STRING macro=rss_schema
							// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
							"tags": dsschema.SetAttribute{
								Required:    false,
								Computed:    false,
								Optional:    true,
								Sensitive:   false,
								ElementType: types.StringType,
							},
							// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
						},
					},
					// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
					// property: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"prefixes": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=ipv6_config, type=REFERENCE macro=rss_schema
			"ipv6_config": dsschema.SingleNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				Attributes: map[string]dsschema.Attribute{
					// property: name=default_routers, type=ARRAY_PRIMITIVE macro=rss_schema
					"default_routers": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=default_routers, type=ARRAY_PRIMITIVE macro=rss_schema
					// property: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
					"prefixes": dsschema.ListAttribute{
						Required:    false,
						Computed:    false,
						Optional:    true,
						Sensitive:   false,
						ElementType: types.StringType,
					},
					// key name holder for attribute: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
				},
			},
			// key name holder for attribute: name=prefixes, type=ARRAY_PRIMITIVE macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=network_context_id, type=STRING macro=rss_schema
			"network_context_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=network_context_id, type=STRING macro=rss_schema
			// property: name=scope, type=STRING macro=rss_schema
			"scope": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=scope, type=STRING macro=rss_schema
			// property: name=tags, type=SET_PRIMITIVE macro=rss_schema
			"tags": dsschema.SetAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
			// key name holder for attribute: name=tags, type=SET_PRIMITIVE macro=rss_schema
			// property: name=vrf_context_id, type=STRING macro=rss_schema
			"vrf_context_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=vrf_context_id, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *siteLanNetworkDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *siteLanNetworkDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelLANNetworkScreenV3N3
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_site_lan_network",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_site_lan_network ID format", "Expected 2 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v3.3/api/sites/{site_id}/lannetworks/{lannetwork_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["site_id"] = &tokens[0]
	params["lannetwork_id"] = &tokens[1]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_site_lan_network", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.LANNetworkScreenV3N3
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to LANNetworkScreenV3N3", json_err.Error())
		return
	}

	// lets copy all items into state schema=LANNetworkScreenV3N3
	// copy_to_state: state=state prefix=dsModel ans=ans properties=11
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ipv4_config, type=REFERENCE macro=copy_to_state
	if ans.Ipv4Config == nil {
		state.Ipv4Config = nil
	} else {
		state.Ipv4Config = &dsModelLanNetworkIPv4Config{}
		// copy_to_state: state=state.Ipv4Config prefix=dsModel ans=ans.Ipv4Config properties=4
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_to_state
		varDefaultRouters, errDefaultRouters := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DefaultRouters)
		state.Ipv4Config.DefaultRouters = varDefaultRouters
		resp.Diagnostics.Append(errDefaultRouters.Errors()...)
		// property: name=dhcp_relay, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.DhcpRelay == nil {
			state.Ipv4Config.DhcpRelay = nil
		} else {
			state.Ipv4Config.DhcpRelay = &dsModelDHCPRelay{}
			// copy_to_state: state=state.Ipv4Config.DhcpRelay prefix=dsModel ans=ans.Ipv4Config.DhcpRelay properties=4
			// property: name=enabled, type=BOOLEAN macro=copy_to_state
			state.Ipv4Config.DhcpRelay.Enabled = types.BoolPointerValue(ans.Ipv4Config.DhcpRelay.Enabled)
			// property: name=option_82, type=REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpRelay.Option82 == nil {
				state.Ipv4Config.DhcpRelay.Option82 = nil
			} else {
				state.Ipv4Config.DhcpRelay.Option82 = &dsModelDHCPRelayOption82{}
				// copy_to_state: state=state.Ipv4Config.DhcpRelay.Option82 prefix=dsModel ans=ans.Ipv4Config.DhcpRelay.Option82 properties=4
				// property: name=circuit_id, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.CircuitId = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.CircuitId)
				// property: name=enabled, type=BOOLEAN macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.Enabled = types.BoolPointerValue(ans.Ipv4Config.DhcpRelay.Option82.Enabled)
				// property: name=reforwarding_policy, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.ReforwardingPolicy)
				// property: name=remote_id, type=STRING macro=copy_to_state
				state.Ipv4Config.DhcpRelay.Option82.RemoteId = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.Option82.RemoteId)
			}
			// property: name=server_ips, type=ARRAY_PRIMITIVE macro=copy_to_state
			varServerIps, errServerIps := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpRelay.ServerIps)
			state.Ipv4Config.DhcpRelay.ServerIps = varServerIps
			resp.Diagnostics.Append(errServerIps.Errors()...)
			// property: name=source_interface, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpRelay.SourceInterface = types.StringPointerValue(ans.Ipv4Config.DhcpRelay.SourceInterface)
		}
		// property: name=dhcp_server, type=REFERENCE macro=copy_to_state
		if ans.Ipv4Config.DhcpServer == nil {
			state.Ipv4Config.DhcpServer = nil
		} else {
			state.Ipv4Config.DhcpServer = &dsModelDHCPServer{}
			// copy_to_state: state=state.Ipv4Config.DhcpServer prefix=dsModel ans=ans.Ipv4Config.DhcpServer properties=17
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.Etag = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.Schema = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.Schema)
			// property: name=broadcast_address, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.BroadcastAddress = types.StringPointerValue(ans.Ipv4Config.DhcpServer.BroadcastAddress)
			// property: name=custom_options, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.CustomOptions == nil {
				state.Ipv4Config.DhcpServer.CustomOptions = nil
			} else if len(ans.Ipv4Config.DhcpServer.CustomOptions) == 0 {
				state.Ipv4Config.DhcpServer.CustomOptions = []dsModelBaseCustomDHCPOptions{}
			} else {
				state.Ipv4Config.DhcpServer.CustomOptions = make([]dsModelBaseCustomDHCPOptions, 0, len(ans.Ipv4Config.DhcpServer.CustomOptions))
				for varLoopCustomOptionsIndex, varLoopCustomOptions := range ans.Ipv4Config.DhcpServer.CustomOptions {
					// add a new item
					state.Ipv4Config.DhcpServer.CustomOptions = append(state.Ipv4Config.DhcpServer.CustomOptions, dsModelBaseCustomDHCPOptions{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex] prefix=dsModel ans=varLoopCustomOptions properties=2
					// property: name=option_definition, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionDefinition = types.StringPointerValue(varLoopCustomOptions.OptionDefinition)
					// property: name=option_value, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.CustomOptions[varLoopCustomOptionsIndex].OptionValue = types.StringPointerValue(varLoopCustomOptions.OptionValue)
				}
			}
			// property: name=default_lease_time, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.DefaultLeaseTime = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.DefaultLeaseTime)
			// property: name=description, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Description = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.Ipv4Config.DhcpServer.Disabled = types.BoolPointerValue(ans.Ipv4Config.DhcpServer.Disabled)
			// property: name=dns_servers, type=ARRAY_PRIMITIVE macro=copy_to_state
			varDnsServers, errDnsServers := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpServer.DnsServers)
			state.Ipv4Config.DhcpServer.DnsServers = varDnsServers
			resp.Diagnostics.Append(errDnsServers.Errors()...)
			// property: name=domain_name, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.DomainName = types.StringPointerValue(ans.Ipv4Config.DhcpServer.DomainName)
			// property: name=gateway, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Gateway = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Gateway)
			// property: name=id, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Id = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Id)
			// property: name=ip_ranges, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.IpRanges == nil {
				state.Ipv4Config.DhcpServer.IpRanges = nil
			} else if len(ans.Ipv4Config.DhcpServer.IpRanges) == 0 {
				state.Ipv4Config.DhcpServer.IpRanges = []dsModelIPRange{}
			} else {
				state.Ipv4Config.DhcpServer.IpRanges = make([]dsModelIPRange, 0, len(ans.Ipv4Config.DhcpServer.IpRanges))
				for varLoopIpRangesIndex, varLoopIpRanges := range ans.Ipv4Config.DhcpServer.IpRanges {
					// add a new item
					state.Ipv4Config.DhcpServer.IpRanges = append(state.Ipv4Config.DhcpServer.IpRanges, dsModelIPRange{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex] prefix=dsModel ans=varLoopIpRanges properties=2
					// property: name=end_ip, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].EndIp = types.StringPointerValue(varLoopIpRanges.EndIp)
					// property: name=start_ip, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.IpRanges[varLoopIpRangesIndex].StartIp = types.StringPointerValue(varLoopIpRanges.StartIp)
				}
			}
			// property: name=max_lease_time, type=INTEGER macro=copy_to_state
			state.Ipv4Config.DhcpServer.MaxLeaseTime = types.Int64PointerValue(ans.Ipv4Config.DhcpServer.MaxLeaseTime)
			// property: name=network_context_id, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.NetworkContextId = types.StringPointerValue(ans.Ipv4Config.DhcpServer.NetworkContextId)
			// property: name=static_mappings, type=ARRAY_REFERENCE macro=copy_to_state
			if ans.Ipv4Config.DhcpServer.StaticMappings == nil {
				state.Ipv4Config.DhcpServer.StaticMappings = nil
			} else if len(ans.Ipv4Config.DhcpServer.StaticMappings) == 0 {
				state.Ipv4Config.DhcpServer.StaticMappings = []dsModelStaticMapping{}
			} else {
				state.Ipv4Config.DhcpServer.StaticMappings = make([]dsModelStaticMapping, 0, len(ans.Ipv4Config.DhcpServer.StaticMappings))
				for varLoopStaticMappingsIndex, varLoopStaticMappings := range ans.Ipv4Config.DhcpServer.StaticMappings {
					// add a new item
					state.Ipv4Config.DhcpServer.StaticMappings = append(state.Ipv4Config.DhcpServer.StaticMappings, dsModelStaticMapping{})
					// copy_to_state: state=state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex] prefix=dsModel ans=varLoopStaticMappings properties=3
					// property: name=ip_address, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].IpAddress = types.StringPointerValue(varLoopStaticMappings.IpAddress)
					// property: name=mac, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Mac = types.StringPointerValue(varLoopStaticMappings.Mac)
					// property: name=name, type=STRING macro=copy_to_state
					state.Ipv4Config.DhcpServer.StaticMappings[varLoopStaticMappingsIndex].Name = types.StringPointerValue(varLoopStaticMappings.Name)
				}
			}
			// property: name=subnet, type=STRING macro=copy_to_state
			state.Ipv4Config.DhcpServer.Subnet = types.StringPointerValue(ans.Ipv4Config.DhcpServer.Subnet)
			// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
			varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Ipv4Config.DhcpServer.Tags)
			state.Ipv4Config.DhcpServer.Tags = varTags
			resp.Diagnostics.Append(errTags.Errors()...)
		}
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varPrefixes, errPrefixes := types.ListValueFrom(ctx, types.StringType, ans.Ipv4Config.Prefixes)
		state.Ipv4Config.Prefixes = varPrefixes
		resp.Diagnostics.Append(errPrefixes.Errors()...)
	}
	// property: name=ipv6_config, type=REFERENCE macro=copy_to_state
	if ans.Ipv6Config == nil {
		state.Ipv6Config = nil
	} else {
		state.Ipv6Config = &dsModelLanNetworkIPv6Config{}
		// copy_to_state: state=state.Ipv6Config prefix=dsModel ans=ans.Ipv6Config properties=2
		// property: name=default_routers, type=ARRAY_PRIMITIVE macro=copy_to_state
		varDefaultRouters, errDefaultRouters := types.ListValueFrom(ctx, types.StringType, ans.Ipv6Config.DefaultRouters)
		state.Ipv6Config.DefaultRouters = varDefaultRouters
		resp.Diagnostics.Append(errDefaultRouters.Errors()...)
		// property: name=prefixes, type=ARRAY_PRIMITIVE macro=copy_to_state
		varPrefixes, errPrefixes := types.ListValueFrom(ctx, types.StringType, ans.Ipv6Config.Prefixes)
		state.Ipv6Config.Prefixes = varPrefixes
		resp.Diagnostics.Append(errPrefixes.Errors()...)
	}
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=network_context_id, type=STRING macro=copy_to_state
	state.NetworkContextId = types.StringPointerValue(ans.NetworkContextId)
	// property: name=scope, type=STRING macro=copy_to_state
	state.Scope = types.StringPointerValue(ans.Scope)
	// property: name=tags, type=SET_PRIMITIVE macro=copy_to_state
	varTags, errTags := types.SetValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = varTags
	resp.Diagnostics.Append(errTags.Errors()...)
	// property: name=vrf_context_id, type=STRING macro=copy_to_state
	state.VrfContextId = types.StringPointerValue(ans.VrfContextId)

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
