package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	uzXNpRw "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/snmptrap"
	qhaCvMo "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/snmpuser/access"
	nusywCy "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/snmpv2/config"
	eTfarzd "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas/snmpv3/config"
	zAHtTyI "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services/sdwan/v20/api/sites/siteid/elements/elementid/snmptraps"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &snmpTrapListDataSource{}
	_ datasource.DataSourceWithConfigure = &snmpTrapListDataSource{}
)

func NewSnmpTrapListDataSource() datasource.DataSource {
	return &snmpTrapListDataSource{}
}

type snmpTrapListDataSource struct {
	client *sdwan.Client
}

// snmpTrapListDsModel is the model.
type snmpTrapListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ElementId types.String `tfsdk:"element_id"`
	SiteId    types.String `tfsdk:"site_id"`

	// Output.
	Items      []snmpTrapListDsModel_uzXNpRw_Config `tfsdk:"items"`
	TotalItems types.Int64                          `tfsdk:"total_items"`
}

type snmpTrapListDsModel_uzXNpRw_Config struct {
	Description     types.String                        `tfsdk:"description"`
	Enabled         types.Bool                          `tfsdk:"enabled"`
	Etag            types.Int64                         `tfsdk:"etag"`
	Id              types.String                        `tfsdk:"id"`
	ServerIp        types.String                        `tfsdk:"server_ip"`
	SourceInterface types.String                        `tfsdk:"source_interface"`
	Tags            types.List                          `tfsdk:"tags"`
	V2Config        *snmpTrapListDsModel_nusywCy_Config `tfsdk:"v2_config"`
	V3Config        *snmpTrapListDsModel_eTfarzd_Config `tfsdk:"v3_config"`
	Version         types.String                        `tfsdk:"version"`
}

type snmpTrapListDsModel_nusywCy_Config struct {
	Community types.String `tfsdk:"community"`
}

type snmpTrapListDsModel_eTfarzd_Config struct {
	UserAccess *snmpTrapListDsModel_qhaCvMo_Config `tfsdk:"user_access"`
}

type snmpTrapListDsModel_qhaCvMo_Config struct {
	AuthPhrase    types.String `tfsdk:"auth_phrase"`
	AuthType      types.String `tfsdk:"auth_type"`
	EncPhrase     types.String `tfsdk:"enc_phrase"`
	EncType       types.String `tfsdk:"enc_type"`
	EngineId      types.String `tfsdk:"engine_id"`
	SecurityLevel types.String `tfsdk:"security_level"`
	UserName      types.String `tfsdk:"user_name"`
}

// Metadata returns the data source type name.
func (d *snmpTrapListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_snmp_trap_list"
}

// Schema defines the schema for this listing data source.
func (d *snmpTrapListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"element_id":true, "site_id":true} outputs:map[string]bool{"items":true, "tfid":true, "total_items":true} forceNew:map[string]bool{"element_id":true, "site_id":true}
			"element_id": dsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
			},
			"items": dsschema.ListNestedAttribute{
				Description: "The Items param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "enabled":true, "etag":true, "id":true, "server_ip":true, "source_interface":true, "tags":true, "v2_config":true, "v3_config":true, "version":true} forceNew:map[string]bool(nil)
						"description": dsschema.StringAttribute{
							Description: "Description: Size(max = 256, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
							Computed:    true,
						},
						"enabled": dsschema.BoolAttribute{
							Description: "Enabled.",
							Computed:    true,
						},
						"etag": dsschema.Int64Attribute{
							Description: "Entity tag for the resource.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "Id.",
							Computed:    true,
						},
						"server_ip": dsschema.StringAttribute{
							Description: "Server Ip: NotNull(error = SNMPTRAP_CONFIG_SERVER_IP_MISSING: SNMP Server ip cannot be null) IPAddress(allowEmpty = true, allowLinkLocal = false, allowNull = true, bcast = DENY, defaultRoute = false, dnsCheck = false, INVALID_IP_ADDRESS_001, type = IP) .",
							Computed:    true,
						},
						"source_interface": dsschema.StringAttribute{
							Description: "Source Interface.",
							Computed:    true,
						},
						"tags": dsschema.ListAttribute{
							Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
							Computed:    true,
							ElementType: types.StringType,
						},
						"v2_config": dsschema.SingleNestedAttribute{
							Description: "The V2Config param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"community":true} forceNew:map[string]bool(nil)
								"community": dsschema.StringAttribute{
									Description: "Community: NotNull(SNMPTRAP_CONFIG_COMMUNITY_IS_NULL) Pattern(error = SNMPCONFIG_UNSUPPORTED_COMMUNITY_NAME: White spaces not allowed in community name, regexp = ^\\\\S+$) Size(max = 32, error = SNMPCONFIG_COMMUNITY_LEN_EXCEEDS_LIMIT: Community length exceeds maximum limit, min = 0) .",
									Computed:    true,
								},
							},
						},
						"v3_config": dsschema.SingleNestedAttribute{
							Description: "The V3Config param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"user_access":true} forceNew:map[string]bool(nil)
								"user_access": dsschema.SingleNestedAttribute{
									Description: "The UserAccess param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"auth_phrase":true, "auth_type":true, "enc_phrase":true, "enc_type":true, "engine_id":true, "security_level":true, "user_name":true} forceNew:map[string]bool(nil)
										"auth_phrase": dsschema.StringAttribute{
											Description: "Auth Phrase: Pattern(error = SNMPCONFIG_UNSUPPORTED_AUTH_PHRASE: White spaces not allowed in auth phrase, regexp = ^\\\\S+$) Size(max = 256, error = SNMPCONFIG_INVALID_AUTH_PHRASE_LEN: Auth phrase length should be between 8 and 256, min = 8) .",
											Computed:    true,
										},
										"auth_type": dsschema.StringAttribute{
											Description: "Auth Type: ValidateEnum(enumClass = classOf[SNMPAuthType], error = SNMPCONFIG_INVALID_AUTH_TYPE: Unsupported snmp auth type specified, nullAllowed = false) . String must be one of these: `\"NONE\"`, `\"MD5\"`, `\"SHA\"`.",
											Computed:    true,
										},
										"enc_phrase": dsschema.StringAttribute{
											Description: "Enc Phrase: Pattern(error = SNMPCONFIG_UNSUPPORTED_ENC_PHRASE: White spaces not allowed in enc phrase, regexp = ^\\\\S+$) Size(max = 256, error = SNMPCONFIG_INVALID_ENC_PHRASE_LEN: Enc phrase length should be between 8 and 256, min = 8) .",
											Computed:    true,
										},
										"enc_type": dsschema.StringAttribute{
											Description: "Enc Type: ValidateEnum(enumClass = classOf[SNMPEncType], error = SNMPCONFIG_INVALID_ENC_TYPE: Unsupported snmp enc type specified, nullAllowed = false) . String must be one of these: `\"NONE\"`, `\"AES\"`, `\"DES\"`.",
											Computed:    true,
										},
										"engine_id": dsschema.StringAttribute{
											Description: "Engine Id: Pattern(error = SNMPCONFIG_UNSUPPORTED_ENGINE_ID: hexadecimal value should be in pairs (multiple of two) with minimum length 10 and maximum length 256 for engine id., regexp = ^((?:0[xX])?(?=.{10,256}$)[0-9a-fA-F]{2}(?:[0-9a-fA-F]{2})*)$) .",
											Computed:    true,
										},
										"security_level": dsschema.StringAttribute{
											Description: "Security Level: ValidateEnum(enumClass = classOf[SNMPSecurityLevel], error = SNMPCONFIG_INVALID_SECURITY_LEVEL: Unsupported snmp security level specified, nullAllowed = false) . String must be one of these: `\"NOAUTH\"`, `\"AUTH\"`, `\"PRIVATE\"`.",
											Computed:    true,
										},
										"user_name": dsschema.StringAttribute{
											Description: "User Name: NotNull(error = SNMPCONFIG_USER_NAME_MISSING: User name cannot be null) Pattern(error = SNMPCONFIG_UNSUPPORTED_USER_NAME: White spaces not allowed in user name, regexp = ^\\\\S+$) Size(max = 256, error = SNMPCONFIG_INVALID_USER_NAME_LEN: User name length should be between 4 and 256, min = 4) .",
											Computed:    true,
										},
									},
								},
							},
						},
						"version": dsschema.StringAttribute{
							Description: "Version: ValidateEnum(enumClass = classOf[SNMPVersion], error = SNMPTRAP_CONFIG_INVALID_VERSION: Unsupported snmp version specified, nullAllowed = false) .",
							Computed:    true,
						},
					},
				},
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total_items": dsschema.Int64Attribute{
				Description: "The TotalItems param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *snmpTrapListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *snmpTrapListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state snmpTrapListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "prismasdwan_snmp_trap_list",
		"terraform_provider_function": "Read",
		"site_id":                     state.SiteId.ValueString(),
		"element_id":                  state.ElementId.ValueString(),
	})

	// Prepare to run the command.
	svc := zAHtTyI.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := zAHtTyI.ListInput{}

	input.SiteId = StringValue(state.SiteId)

	input.ElementId = StringValue(state.ElementId)

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.ElementId)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Items) == 0 {
		state.Items = nil
	} else {
		state.Items = make([]snmpTrapListDsModel_uzXNpRw_Config, 0, len(ans.Items))
		for _, var0 := range ans.Items {
			var1 := snmpTrapListDsModel_uzXNpRw_Config{}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Enabled = types.BoolPointerValue(var0.Enabled)

			var1.Etag = types.Int64PointerValue(var0.Etag)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.ServerIp = types.StringValue(var0.ServerIp)

			var1.SourceInterface = types.StringPointerValue(var0.SourceInterface)

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var2
			resp.Diagnostics.Append(var3.Errors()...)

			if var0.V2Config == nil {
				var1.V2Config = nil
			} else {
				var1.V2Config = &snmpTrapListDsModel_nusywCy_Config{}

				var1.V2Config.Community = types.StringValue(var0.V2Config.Community)
			}

			if var0.V3Config == nil {
				var1.V3Config = nil
			} else {
				var1.V3Config = &snmpTrapListDsModel_eTfarzd_Config{}

				if var0.V3Config.UserAccess == nil {
					var1.V3Config.UserAccess = nil
				} else {
					var1.V3Config.UserAccess = &snmpTrapListDsModel_qhaCvMo_Config{}

					var1.V3Config.UserAccess.AuthPhrase = types.StringPointerValue(var0.V3Config.UserAccess.AuthPhrase)

					var1.V3Config.UserAccess.AuthType = types.StringValue(var0.V3Config.UserAccess.AuthType)

					var1.V3Config.UserAccess.EncPhrase = types.StringPointerValue(var0.V3Config.UserAccess.EncPhrase)

					var1.V3Config.UserAccess.EncType = types.StringValue(var0.V3Config.UserAccess.EncType)

					var1.V3Config.UserAccess.EngineId = types.StringPointerValue(var0.V3Config.UserAccess.EngineId)

					var1.V3Config.UserAccess.SecurityLevel = types.StringValue(var0.V3Config.UserAccess.SecurityLevel)

					var1.V3Config.UserAccess.UserName = types.StringValue(var0.V3Config.UserAccess.UserName)
				}
			}

			var1.Version = types.StringValue(var0.Version)
			state.Items = append(state.Items, var1)
		}
	}

	state.TotalItems = types.Int64PointerValue(ans.TotalItems)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &snmpTrapDataSource{}
	_ datasource.DataSourceWithConfigure = &snmpTrapDataSource{}
)

func NewSnmpTrapDataSource() datasource.DataSource {
	return &snmpTrapDataSource{}
}

type snmpTrapDataSource struct {
	client *sdwan.Client
}

// snmpTrapDsModel is the model.
type snmpTrapDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ElementId  types.String `tfsdk:"element_id"`
	SiteId     types.String `tfsdk:"site_id"`
	SnmptrapId types.String `tfsdk:"snmptrap_id"`

	// Output.
	Description     types.String                    `tfsdk:"description"`
	Enabled         types.Bool                      `tfsdk:"enabled"`
	Etag            types.Int64                     `tfsdk:"etag"`
	Id              types.String                    `tfsdk:"id"`
	ServerIp        types.String                    `tfsdk:"server_ip"`
	SourceInterface types.String                    `tfsdk:"source_interface"`
	Tags            types.List                      `tfsdk:"tags"`
	V2Config        *snmpTrapDsModel_nusywCy_Config `tfsdk:"v2_config"`
	V3Config        *snmpTrapDsModel_eTfarzd_Config `tfsdk:"v3_config"`
	Version         types.String                    `tfsdk:"version"`
}

type snmpTrapDsModel_nusywCy_Config struct {
	Community types.String `tfsdk:"community"`
}

type snmpTrapDsModel_eTfarzd_Config struct {
	UserAccess *snmpTrapDsModel_qhaCvMo_Config `tfsdk:"user_access"`
}

type snmpTrapDsModel_qhaCvMo_Config struct {
	AuthPhrase    types.String `tfsdk:"auth_phrase"`
	AuthType      types.String `tfsdk:"auth_type"`
	EncPhrase     types.String `tfsdk:"enc_phrase"`
	EncType       types.String `tfsdk:"enc_type"`
	EngineId      types.String `tfsdk:"engine_id"`
	SecurityLevel types.String `tfsdk:"security_level"`
	UserName      types.String `tfsdk:"user_name"`
}

// Metadata returns the data source type name.
func (d *snmpTrapDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_snmp_trap"
}

// Schema defines the schema for this data source.
func (d *snmpTrapDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"element_id":true, "site_id":true, "snmptrap_id":true} outputs:map[string]bool{"description":true, "enabled":true, "etag":true, "id":true, "server_ip":true, "source_interface":true, "tags":true, "tfid":true, "v2_config":true, "v3_config":true, "version":true} forceNew:map[string]bool{"element_id":true, "site_id":true, "snmptrap_id":true}
			"description": dsschema.StringAttribute{
				Description: "Description: Size(max = 256, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Computed:    true,
			},
			"element_id": dsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
			},
			"enabled": dsschema.BoolAttribute{
				Description: "Enabled.",
				Computed:    true,
			},
			"etag": dsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
			},
			"server_ip": dsschema.StringAttribute{
				Description: "Server Ip: NotNull(error = SNMPTRAP_CONFIG_SERVER_IP_MISSING: SNMP Server ip cannot be null) IPAddress(allowEmpty = true, allowLinkLocal = false, allowNull = true, bcast = DENY, defaultRoute = false, dnsCheck = false, INVALID_IP_ADDRESS_001, type = IP) .",
				Computed:    true,
			},
			"site_id": dsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
			},
			"snmptrap_id": dsschema.StringAttribute{
				Description: "Snmptrap Id.",
				Required:    true,
			},
			"source_interface": dsschema.StringAttribute{
				Description: "Source Interface.",
				Computed:    true,
			},
			"tags": dsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"v2_config": dsschema.SingleNestedAttribute{
				Description: "The V2Config param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"community":true} forceNew:map[string]bool(nil)
					"community": dsschema.StringAttribute{
						Description: "Community: NotNull(SNMPTRAP_CONFIG_COMMUNITY_IS_NULL) Pattern(error = SNMPCONFIG_UNSUPPORTED_COMMUNITY_NAME: White spaces not allowed in community name, regexp = ^\\\\S+$) Size(max = 32, error = SNMPCONFIG_COMMUNITY_LEN_EXCEEDS_LIMIT: Community length exceeds maximum limit, min = 0) .",
						Computed:    true,
					},
				},
			},
			"v3_config": dsschema.SingleNestedAttribute{
				Description: "The V3Config param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"user_access":true} forceNew:map[string]bool(nil)
					"user_access": dsschema.SingleNestedAttribute{
						Description: "The UserAccess param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"auth_phrase":true, "auth_type":true, "enc_phrase":true, "enc_type":true, "engine_id":true, "security_level":true, "user_name":true} forceNew:map[string]bool(nil)
							"auth_phrase": dsschema.StringAttribute{
								Description: "Auth Phrase: Pattern(error = SNMPCONFIG_UNSUPPORTED_AUTH_PHRASE: White spaces not allowed in auth phrase, regexp = ^\\\\S+$) Size(max = 256, error = SNMPCONFIG_INVALID_AUTH_PHRASE_LEN: Auth phrase length should be between 8 and 256, min = 8) .",
								Computed:    true,
							},
							"auth_type": dsschema.StringAttribute{
								Description: "Auth Type: ValidateEnum(enumClass = classOf[SNMPAuthType], error = SNMPCONFIG_INVALID_AUTH_TYPE: Unsupported snmp auth type specified, nullAllowed = false) . String must be one of these: `\"NONE\"`, `\"MD5\"`, `\"SHA\"`.",
								Computed:    true,
							},
							"enc_phrase": dsschema.StringAttribute{
								Description: "Enc Phrase: Pattern(error = SNMPCONFIG_UNSUPPORTED_ENC_PHRASE: White spaces not allowed in enc phrase, regexp = ^\\\\S+$) Size(max = 256, error = SNMPCONFIG_INVALID_ENC_PHRASE_LEN: Enc phrase length should be between 8 and 256, min = 8) .",
								Computed:    true,
							},
							"enc_type": dsschema.StringAttribute{
								Description: "Enc Type: ValidateEnum(enumClass = classOf[SNMPEncType], error = SNMPCONFIG_INVALID_ENC_TYPE: Unsupported snmp enc type specified, nullAllowed = false) . String must be one of these: `\"NONE\"`, `\"AES\"`, `\"DES\"`.",
								Computed:    true,
							},
							"engine_id": dsschema.StringAttribute{
								Description: "Engine Id: Pattern(error = SNMPCONFIG_UNSUPPORTED_ENGINE_ID: hexadecimal value should be in pairs (multiple of two) with minimum length 10 and maximum length 256 for engine id., regexp = ^((?:0[xX])?(?=.{10,256}$)[0-9a-fA-F]{2}(?:[0-9a-fA-F]{2})*)$) .",
								Computed:    true,
							},
							"security_level": dsschema.StringAttribute{
								Description: "Security Level: ValidateEnum(enumClass = classOf[SNMPSecurityLevel], error = SNMPCONFIG_INVALID_SECURITY_LEVEL: Unsupported snmp security level specified, nullAllowed = false) . String must be one of these: `\"NOAUTH\"`, `\"AUTH\"`, `\"PRIVATE\"`.",
								Computed:    true,
							},
							"user_name": dsschema.StringAttribute{
								Description: "User Name: NotNull(error = SNMPCONFIG_USER_NAME_MISSING: User name cannot be null) Pattern(error = SNMPCONFIG_UNSUPPORTED_USER_NAME: White spaces not allowed in user name, regexp = ^\\\\S+$) Size(max = 256, error = SNMPCONFIG_INVALID_USER_NAME_LEN: User name length should be between 4 and 256, min = 4) .",
								Computed:    true,
							},
						},
					},
				},
			},
			"version": dsschema.StringAttribute{
				Description: "Version: ValidateEnum(enumClass = classOf[SNMPVersion], error = SNMPTRAP_CONFIG_INVALID_VERSION: Unsupported snmp version specified, nullAllowed = false) .",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *snmpTrapDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *snmpTrapDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state snmpTrapDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "prismasdwan_snmp_trap",
		"terraform_provider_function": "Read",
		"site_id":                     state.SiteId.ValueString(),
		"element_id":                  state.ElementId.ValueString(),
		"snmptrap_id":                 state.SnmptrapId.ValueString(),
	})

	// Prepare to run the command.
	svc := zAHtTyI.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := zAHtTyI.ReadInput{}

	input.SiteId = StringValue(state.SiteId)

	input.ElementId = StringValue(state.ElementId)

	input.SnmptrapId = StringValue(state.SnmptrapId)

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.ElementId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.SnmptrapId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Enabled = types.BoolPointerValue(ans.Enabled)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.ServerIp = types.StringValue(ans.ServerIp)

	state.SourceInterface = types.StringPointerValue(ans.SourceInterface)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var0
	resp.Diagnostics.Append(var1.Errors()...)

	if ans.V2Config == nil {
		state.V2Config = nil
	} else {
		state.V2Config = &snmpTrapDsModel_nusywCy_Config{}

		state.V2Config.Community = types.StringValue(ans.V2Config.Community)
	}

	if ans.V3Config == nil {
		state.V3Config = nil
	} else {
		state.V3Config = &snmpTrapDsModel_eTfarzd_Config{}

		if ans.V3Config.UserAccess == nil {
			state.V3Config.UserAccess = nil
		} else {
			state.V3Config.UserAccess = &snmpTrapDsModel_qhaCvMo_Config{}

			state.V3Config.UserAccess.AuthPhrase = types.StringPointerValue(ans.V3Config.UserAccess.AuthPhrase)

			state.V3Config.UserAccess.AuthType = types.StringValue(ans.V3Config.UserAccess.AuthType)

			state.V3Config.UserAccess.EncPhrase = types.StringPointerValue(ans.V3Config.UserAccess.EncPhrase)

			state.V3Config.UserAccess.EncType = types.StringValue(ans.V3Config.UserAccess.EncType)

			state.V3Config.UserAccess.EngineId = types.StringPointerValue(ans.V3Config.UserAccess.EngineId)

			state.V3Config.UserAccess.SecurityLevel = types.StringValue(ans.V3Config.UserAccess.SecurityLevel)

			state.V3Config.UserAccess.UserName = types.StringValue(ans.V3Config.UserAccess.UserName)
		}
	}

	state.Version = types.StringValue(ans.Version)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &snmpTrapResource{}
	_ resource.ResourceWithConfigure   = &snmpTrapResource{}
	_ resource.ResourceWithImportState = &snmpTrapResource{}
)

func NewSnmpTrapResource() resource.Resource {
	return &snmpTrapResource{}
}

type snmpTrapResource struct {
	client *sdwan.Client
}

// snmpTrapRsModel is the model.
type snmpTrapRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Description     types.String                    `tfsdk:"description"`
	ElementId       types.String                    `tfsdk:"element_id"`
	Enabled         types.Bool                      `tfsdk:"enabled"`
	Etag            types.Int64                     `tfsdk:"etag"`
	Id              types.String                    `tfsdk:"id"`
	ServerIp        types.String                    `tfsdk:"server_ip"`
	SiteId          types.String                    `tfsdk:"site_id"`
	SourceInterface types.String                    `tfsdk:"source_interface"`
	Tags            types.List                      `tfsdk:"tags"`
	V2Config        *snmpTrapRsModel_nusywCy_Config `tfsdk:"v2_config"`
	V3Config        *snmpTrapRsModel_eTfarzd_Config `tfsdk:"v3_config"`
	Version         types.String                    `tfsdk:"version"`

	// Output.
	// omit input: description
	// omit input: enabled
	// omit input: etag
	// omit input: id
	// omit input: server_ip
	// omit input: source_interface
	// omit input: tags
	// omit input: v2_config
	// omit input: v3_config
	// omit input: version
}

type snmpTrapRsModel_nusywCy_Config struct {
	Community types.String `tfsdk:"community"`
}

type snmpTrapRsModel_eTfarzd_Config struct {
	UserAccess *snmpTrapRsModel_qhaCvMo_Config `tfsdk:"user_access"`
}

type snmpTrapRsModel_qhaCvMo_Config struct {
	AuthPhrase    types.String `tfsdk:"auth_phrase"`
	AuthType      types.String `tfsdk:"auth_type"`
	EncPhrase     types.String `tfsdk:"enc_phrase"`
	EncType       types.String `tfsdk:"enc_type"`
	EngineId      types.String `tfsdk:"engine_id"`
	SecurityLevel types.String `tfsdk:"security_level"`
	UserName      types.String `tfsdk:"user_name"`
}

// Metadata returns the data source type name.
func (r *snmpTrapResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_snmp_trap"
}

// Schema defines the schema for this data source.
func (r *snmpTrapResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"description":true, "element_id":true, "enabled":true, "etag":true, "id":true, "server_ip":true, "site_id":true, "source_interface":true, "tags":true, "v2_config":true, "v3_config":true, "version":true} outputs:map[string]bool{"description":true, "enabled":true, "etag":true, "id":true, "server_ip":true, "source_interface":true, "tags":true, "tfid":true, "v2_config":true, "v3_config":true, "version":true} forceNew:map[string]bool{"element_id":true, "site_id":true}
			"description": rsschema.StringAttribute{
				Description: "Description: Size(max = 256, error = DESCRIPTION_EXCEEDS_LIMIT: Description length exceeds limit, min = 0) .",
				Optional:    true,
			},
			"element_id": rsschema.StringAttribute{
				Description: "Element Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"enabled": rsschema.BoolAttribute{
				Description: "Enabled.",
				Optional:    true,
			},
			"etag": rsschema.Int64Attribute{
				Description: "Entity tag for the resource.",
				Optional:    true,
				Computed:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "Id.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"server_ip": rsschema.StringAttribute{
				Description: "Server Ip: NotNull(error = SNMPTRAP_CONFIG_SERVER_IP_MISSING: SNMP Server ip cannot be null) IPAddress(allowEmpty = true, allowLinkLocal = false, allowNull = true, bcast = DENY, defaultRoute = false, dnsCheck = false, INVALID_IP_ADDRESS_001, type = IP) .",
				Required:    true,
			},
			"site_id": rsschema.StringAttribute{
				Description: "Site Id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"source_interface": rsschema.StringAttribute{
				Description: "Source Interface.",
				Optional:    true,
			},
			"tags": rsschema.ListAttribute{
				Description: "Tags: ListString(allowDuplicate = false, allowEmpty = true, allowNull = true, length = 128, listMaxSize = 10, error = INVALID_TAG: Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false, regex = [^,\\\\s]+, required = false) .",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"v2_config": rsschema.SingleNestedAttribute{
				Description: "The V2Config param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"community":true} outputs:map[string]bool{"community":true} forceNew:map[string]bool(nil)
					"community": rsschema.StringAttribute{
						Description: "Community: NotNull(SNMPTRAP_CONFIG_COMMUNITY_IS_NULL) Pattern(error = SNMPCONFIG_UNSUPPORTED_COMMUNITY_NAME: White spaces not allowed in community name, regexp = ^\\\\S+$) Size(max = 32, error = SNMPCONFIG_COMMUNITY_LEN_EXCEEDS_LIMIT: Community length exceeds maximum limit, min = 0) .",
						Required:    true,
					},
				},
			},
			"v3_config": rsschema.SingleNestedAttribute{
				Description: "The V3Config param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"user_access":true} outputs:map[string]bool{"user_access":true} forceNew:map[string]bool(nil)
					"user_access": rsschema.SingleNestedAttribute{
						Description: "The UserAccess param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"auth_phrase":true, "auth_type":true, "enc_phrase":true, "enc_type":true, "engine_id":true, "security_level":true, "user_name":true} outputs:map[string]bool{"auth_phrase":true, "auth_type":true, "enc_phrase":true, "enc_type":true, "engine_id":true, "security_level":true, "user_name":true} forceNew:map[string]bool(nil)
							"auth_phrase": rsschema.StringAttribute{
								Description: "Auth Phrase: Pattern(error = SNMPCONFIG_UNSUPPORTED_AUTH_PHRASE: White spaces not allowed in auth phrase, regexp = ^\\\\S+$) Size(max = 256, error = SNMPCONFIG_INVALID_AUTH_PHRASE_LEN: Auth phrase length should be between 8 and 256, min = 8) .",
								Optional:    true,
							},
							"auth_type": rsschema.StringAttribute{
								Description: "Auth Type: ValidateEnum(enumClass = classOf[SNMPAuthType], error = SNMPCONFIG_INVALID_AUTH_TYPE: Unsupported snmp auth type specified, nullAllowed = false) . String must be one of these: `\"NONE\"`, `\"MD5\"`, `\"SHA\"`.",
								Required:    true,
								Validators: []validator.String{
									stringvalidator.OneOf("NONE", "MD5", "SHA"),
								},
							},
							"enc_phrase": rsschema.StringAttribute{
								Description: "Enc Phrase: Pattern(error = SNMPCONFIG_UNSUPPORTED_ENC_PHRASE: White spaces not allowed in enc phrase, regexp = ^\\\\S+$) Size(max = 256, error = SNMPCONFIG_INVALID_ENC_PHRASE_LEN: Enc phrase length should be between 8 and 256, min = 8) .",
								Optional:    true,
							},
							"enc_type": rsschema.StringAttribute{
								Description: "Enc Type: ValidateEnum(enumClass = classOf[SNMPEncType], error = SNMPCONFIG_INVALID_ENC_TYPE: Unsupported snmp enc type specified, nullAllowed = false) . String must be one of these: `\"NONE\"`, `\"AES\"`, `\"DES\"`.",
								Required:    true,
								Validators: []validator.String{
									stringvalidator.OneOf("NONE", "AES", "DES"),
								},
							},
							"engine_id": rsschema.StringAttribute{
								Description: "Engine Id: Pattern(error = SNMPCONFIG_UNSUPPORTED_ENGINE_ID: hexadecimal value should be in pairs (multiple of two) with minimum length 10 and maximum length 256 for engine id., regexp = ^((?:0[xX])?(?=.{10,256}$)[0-9a-fA-F]{2}(?:[0-9a-fA-F]{2})*)$) .",
								Optional:    true,
							},
							"security_level": rsschema.StringAttribute{
								Description: "Security Level: ValidateEnum(enumClass = classOf[SNMPSecurityLevel], error = SNMPCONFIG_INVALID_SECURITY_LEVEL: Unsupported snmp security level specified, nullAllowed = false) . String must be one of these: `\"NOAUTH\"`, `\"AUTH\"`, `\"PRIVATE\"`.",
								Required:    true,
								Validators: []validator.String{
									stringvalidator.OneOf("NOAUTH", "AUTH", "PRIVATE"),
								},
							},
							"user_name": rsschema.StringAttribute{
								Description: "User Name: NotNull(error = SNMPCONFIG_USER_NAME_MISSING: User name cannot be null) Pattern(error = SNMPCONFIG_UNSUPPORTED_USER_NAME: White spaces not allowed in user name, regexp = ^\\\\S+$) Size(max = 256, error = SNMPCONFIG_INVALID_USER_NAME_LEN: User name length should be between 4 and 256, min = 4) .",
								Required:    true,
							},
						},
					},
				},
			},
			"version": rsschema.StringAttribute{
				Description: "Version: ValidateEnum(enumClass = classOf[SNMPVersion], error = SNMPTRAP_CONFIG_INVALID_VERSION: Unsupported snmp version specified, nullAllowed = false) .",
				Required:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (r *snmpTrapResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sdwan.Client)
}

// Create resource.
func (r *snmpTrapResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state snmpTrapRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_snmp_trap",
		"terraform_provider_function": "Create",
		"site_id":                     state.SiteId.ValueString(),
		"element_id":                  state.ElementId.ValueString(),
	})

	// Prepare to create the config.
	svc := zAHtTyI.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := zAHtTyI.CreateInput{}

	input.SiteId = StringValue(state.SiteId)

	input.ElementId = StringValue(state.ElementId)
	input.Request = &uzXNpRw.Config{}

	input.Request.Description = StringValueOrNil(state.Description)

	input.Request.Enabled = BoolValueOrNil(state.Enabled)

	input.Request.Etag = Int64ValueOrNil(state.Etag)

	input.Request.ServerIp = StringValue(state.ServerIp)

	input.Request.SourceInterface = StringValueOrNil(state.SourceInterface)

	input.Request.Tags = ListStringValueOrNil(ctx, state.Tags)

	if state.V2Config != nil {
		input.Request.V2Config = &nusywCy.Config{}

		input.Request.V2Config.Community = StringValue(state.V2Config.Community)
	}

	if state.V3Config != nil {
		input.Request.V3Config = &eTfarzd.Config{}

		if state.V3Config.UserAccess != nil {
			input.Request.V3Config.UserAccess = &qhaCvMo.Config{}

			input.Request.V3Config.UserAccess.AuthPhrase = StringValueOrNil(state.V3Config.UserAccess.AuthPhrase)

			input.Request.V3Config.UserAccess.AuthType = StringValue(state.V3Config.UserAccess.AuthType)

			input.Request.V3Config.UserAccess.EncPhrase = StringValueOrNil(state.V3Config.UserAccess.EncPhrase)

			input.Request.V3Config.UserAccess.EncType = StringValue(state.V3Config.UserAccess.EncType)

			input.Request.V3Config.UserAccess.EngineId = StringValueOrNil(state.V3Config.UserAccess.EngineId)

			input.Request.V3Config.UserAccess.SecurityLevel = StringValue(state.V3Config.UserAccess.SecurityLevel)

			input.Request.V3Config.UserAccess.UserName = StringValue(state.V3Config.UserAccess.UserName)
		}
	}

	input.Request.Version = StringValue(state.Version)

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.SiteId)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.ElementId)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Enabled = types.BoolPointerValue(ans.Enabled)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.ServerIp = types.StringValue(ans.ServerIp)

	state.SourceInterface = types.StringPointerValue(ans.SourceInterface)

	var1, var2 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var1
	resp.Diagnostics.Append(var2.Errors()...)

	if ans.V2Config == nil {
		state.V2Config = nil
	} else {
		state.V2Config = &snmpTrapRsModel_nusywCy_Config{}

		state.V2Config.Community = types.StringValue(ans.V2Config.Community)
	}

	if ans.V3Config == nil {
		state.V3Config = nil
	} else {
		state.V3Config = &snmpTrapRsModel_eTfarzd_Config{}

		if ans.V3Config.UserAccess == nil {
			state.V3Config.UserAccess = nil
		} else {
			state.V3Config.UserAccess = &snmpTrapRsModel_qhaCvMo_Config{}

			state.V3Config.UserAccess.AuthPhrase = types.StringPointerValue(ans.V3Config.UserAccess.AuthPhrase)

			state.V3Config.UserAccess.AuthType = types.StringValue(ans.V3Config.UserAccess.AuthType)

			state.V3Config.UserAccess.EncPhrase = types.StringPointerValue(ans.V3Config.UserAccess.EncPhrase)

			state.V3Config.UserAccess.EncType = types.StringValue(ans.V3Config.UserAccess.EncType)

			state.V3Config.UserAccess.EngineId = types.StringPointerValue(ans.V3Config.UserAccess.EngineId)

			state.V3Config.UserAccess.SecurityLevel = types.StringValue(ans.V3Config.UserAccess.SecurityLevel)

			state.V3Config.UserAccess.UserName = types.StringValue(ans.V3Config.UserAccess.UserName)
		}
	}

	state.Version = types.StringValue(ans.Version)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *snmpTrapResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state snmpTrapRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_snmp_trap",
		"locMap":                      map[string]int{"element_id": 1, "site_id": 0, "snmptrap_id": 2},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := zAHtTyI.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := zAHtTyI.ReadInput{}

	input.SiteId = tokens[0]

	input.ElementId = tokens[1]

	input.SnmptrapId = tokens[2]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.SiteId = types.StringNull()
	} else {
		state.SiteId = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.ElementId = types.StringNull()
	} else {
		state.ElementId = types.StringValue(tokens[1])
	}
	state.Tfid = savestate.Tfid

	state.Description = types.StringPointerValue(ans.Description)

	state.Enabled = types.BoolPointerValue(ans.Enabled)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.ServerIp = types.StringValue(ans.ServerIp)

	state.SourceInterface = types.StringPointerValue(ans.SourceInterface)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var0
	resp.Diagnostics.Append(var1.Errors()...)

	if ans.V2Config == nil {
		state.V2Config = nil
	} else {
		state.V2Config = &snmpTrapRsModel_nusywCy_Config{}

		state.V2Config.Community = types.StringValue(ans.V2Config.Community)
	}

	if ans.V3Config == nil {
		state.V3Config = nil
	} else {
		state.V3Config = &snmpTrapRsModel_eTfarzd_Config{}

		if ans.V3Config.UserAccess == nil {
			state.V3Config.UserAccess = nil
		} else {
			state.V3Config.UserAccess = &snmpTrapRsModel_qhaCvMo_Config{}

			state.V3Config.UserAccess.AuthPhrase = types.StringPointerValue(ans.V3Config.UserAccess.AuthPhrase)

			state.V3Config.UserAccess.AuthType = types.StringValue(ans.V3Config.UserAccess.AuthType)

			state.V3Config.UserAccess.EncPhrase = types.StringPointerValue(ans.V3Config.UserAccess.EncPhrase)

			state.V3Config.UserAccess.EncType = types.StringValue(ans.V3Config.UserAccess.EncType)

			state.V3Config.UserAccess.EngineId = types.StringPointerValue(ans.V3Config.UserAccess.EngineId)

			state.V3Config.UserAccess.SecurityLevel = types.StringValue(ans.V3Config.UserAccess.SecurityLevel)

			state.V3Config.UserAccess.UserName = types.StringValue(ans.V3Config.UserAccess.UserName)
		}
	}

	state.Version = types.StringValue(ans.Version)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *snmpTrapResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state snmpTrapRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_snmp_trap",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := zAHtTyI.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := zAHtTyI.UpdateInput{}

	if tokens[0] != "" {
		input.SiteId = tokens[0]
	}

	if tokens[1] != "" {
		input.ElementId = tokens[1]
	}

	if tokens[2] != "" {
		input.SnmptrapId = tokens[2]
	}
	input.Request = &uzXNpRw.Config{}

	input.Request.Description = ValueStringPointerFromPlanOrState(plan.Description, state.Description)

	input.Request.Enabled = ValueBoolPointerFromPlanOrState(plan.Enabled, state.Enabled)

	input.Request.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)

	input.Request.ServerIp = ValueStringFromPlanOrState(plan.ServerIp, state.ServerIp)

	input.Request.SourceInterface = ValueStringPointerFromPlanOrState(plan.SourceInterface, state.SourceInterface)

	input.Request.Tags = ListStringValueOrNil(ctx, plan.Tags)

	if plan.V2Config != nil {
		input.Request.V2Config = &nusywCy.Config{}

		input.Request.V2Config.Community = ValueStringFromPlanOrState(plan.V2Config.Community, state.V2Config.Community)
	}

	if plan.V3Config != nil {
		input.Request.V3Config = &eTfarzd.Config{}

		if plan.V3Config.UserAccess != nil {
			input.Request.V3Config.UserAccess = &qhaCvMo.Config{}

			input.Request.V3Config.UserAccess.AuthPhrase = ValueStringPointerFromPlanOrState(plan.V3Config.UserAccess.AuthPhrase, state.V3Config.UserAccess.AuthPhrase)

			input.Request.V3Config.UserAccess.AuthType = ValueStringFromPlanOrState(plan.V3Config.UserAccess.AuthType, state.V3Config.UserAccess.AuthType)

			input.Request.V3Config.UserAccess.EncPhrase = ValueStringPointerFromPlanOrState(plan.V3Config.UserAccess.EncPhrase, state.V3Config.UserAccess.EncPhrase)

			input.Request.V3Config.UserAccess.EncType = ValueStringFromPlanOrState(plan.V3Config.UserAccess.EncType, state.V3Config.UserAccess.EncType)

			input.Request.V3Config.UserAccess.EngineId = ValueStringPointerFromPlanOrState(plan.V3Config.UserAccess.EngineId, state.V3Config.UserAccess.EngineId)

			input.Request.V3Config.UserAccess.SecurityLevel = ValueStringFromPlanOrState(plan.V3Config.UserAccess.SecurityLevel, state.V3Config.UserAccess.SecurityLevel)

			input.Request.V3Config.UserAccess.UserName = ValueStringFromPlanOrState(plan.V3Config.UserAccess.UserName, state.V3Config.UserAccess.UserName)
		}
	}

	input.Request.Version = ValueStringFromPlanOrState(plan.Version, state.Version)

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Description = types.StringPointerValue(ans.Description)

	state.Enabled = types.BoolPointerValue(ans.Enabled)

	state.Etag = types.Int64PointerValue(ans.Etag)

	state.Id = types.StringPointerValue(ans.Id)

	state.ServerIp = types.StringValue(ans.ServerIp)

	state.SourceInterface = types.StringPointerValue(ans.SourceInterface)

	var1, var2 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var1
	resp.Diagnostics.Append(var2.Errors()...)

	if ans.V2Config == nil {
		state.V2Config = nil
	} else {
		state.V2Config = &snmpTrapRsModel_nusywCy_Config{}

		state.V2Config.Community = types.StringValue(ans.V2Config.Community)
	}

	if ans.V3Config == nil {
		state.V3Config = nil
	} else {
		state.V3Config = &snmpTrapRsModel_eTfarzd_Config{}

		if ans.V3Config.UserAccess == nil {
			state.V3Config.UserAccess = nil
		} else {
			state.V3Config.UserAccess = &snmpTrapRsModel_qhaCvMo_Config{}

			state.V3Config.UserAccess.AuthPhrase = types.StringPointerValue(ans.V3Config.UserAccess.AuthPhrase)

			state.V3Config.UserAccess.AuthType = types.StringValue(ans.V3Config.UserAccess.AuthType)

			state.V3Config.UserAccess.EncPhrase = types.StringPointerValue(ans.V3Config.UserAccess.EncPhrase)

			state.V3Config.UserAccess.EncType = types.StringValue(ans.V3Config.UserAccess.EncType)

			state.V3Config.UserAccess.EngineId = types.StringPointerValue(ans.V3Config.UserAccess.EngineId)

			state.V3Config.UserAccess.SecurityLevel = types.StringValue(ans.V3Config.UserAccess.SecurityLevel)

			state.V3Config.UserAccess.UserName = types.StringValue(ans.V3Config.UserAccess.UserName)
		}
	}

	state.Version = types.StringValue(ans.Version)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *snmpTrapResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 3 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 3 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_snmp_trap",
		"locMap":                      map[string]int{"element_id": 1, "site_id": 0, "snmptrap_id": 2},
		"tokens":                      tokens,
	})

	svc := zAHtTyI.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := zAHtTyI.DeleteInput{}

	input.SiteId = tokens[0]

	input.ElementId = tokens[1]

	input.SnmptrapId = tokens[2]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *snmpTrapResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
