package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=1)
// | Computed Resource Name=vfflicenses_tokens
// +-----------------------------------------------------------------
// | VffTokenScreen HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &vfflicensesTokensResource{}
	_ resource.ResourceWithConfigure   = &vfflicensesTokensResource{}
	_ resource.ResourceWithImportState = &vfflicensesTokensResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewVfflicensesTokensResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewVfflicensesTokensResource() resource.Resource {
	return &vfflicensesTokensResource{}
}

type vfflicensesTokensResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *vfflicensesTokensResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_vfflicenses_tokens"
}

// Schema defines the schema for this data source.
func (r *vfflicensesTokensResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=VffTokenScreen
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=ion_key, type=STRING macro=rss_schema
			"ion_key": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: true,
			},
			// key name holder for attribute: name=ion_key, type=STRING macro=rss_schema
			"ion_key_internal_key_name": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// property: name=is_expired, type=BOOLEAN macro=rss_schema
			"is_expired": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_expired, type=BOOLEAN macro=rss_schema
			// property: name=is_multiuse, type=BOOLEAN macro=rss_schema
			"is_multiuse": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_multiuse, type=BOOLEAN macro=rss_schema
			// property: name=is_revoked, type=BOOLEAN macro=rss_schema
			"is_revoked": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_revoked, type=BOOLEAN macro=rss_schema
			// property: name=is_used, type=BOOLEAN macro=rss_schema
			"is_used": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_used, type=BOOLEAN macro=rss_schema
			// property: name=secret_key, type=STRING macro=rss_schema
			"secret_key": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: true,
			},
			// key name holder for attribute: name=secret_key, type=STRING macro=rss_schema
			"secret_key_internal_key_name": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// property: name=valid_till_secs, type=INTEGER macro=rss_schema
			"valid_till_secs": rsschema.Int64Attribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=valid_till_secs, type=INTEGER macro=rss_schema
			// property: name=vfflicense_id, type=STRING macro=rss_schema
			"vfflicense_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=vfflicense_id, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *vfflicensesTokensResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *vfflicensesTokensResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *vfflicensesTokensResource) doPost(ctx context.Context, plan *rsModelVffTokenScreen, state *rsModelVffTokenScreen, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_vfflicenses_tokens")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_vfflicenses_tokens",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.0/api/vfflicenses/{license_id}/tokens"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, plan.TfParameters)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.VffTokenScreen{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=11
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=ion_key, type=STRING macro=copy_from_plan
	body.IonKey = StringValueOrNil(plan.IonKey)
	// property: name=is_expired, type=BOOLEAN macro=copy_from_plan
	body.IsExpired = BoolValueOrNil(plan.IsExpired)
	// property: name=is_multiuse, type=BOOLEAN macro=copy_from_plan
	body.IsMultiuse = BoolValueOrNil(plan.IsMultiuse)
	// property: name=is_revoked, type=BOOLEAN macro=copy_from_plan
	body.IsRevoked = BoolValueOrNil(plan.IsRevoked)
	// property: name=is_used, type=BOOLEAN macro=copy_from_plan
	body.IsUsed = BoolValueOrNil(plan.IsUsed)
	// property: name=secret_key, type=STRING macro=copy_from_plan
	body.SecretKey = StringValueOrNil(plan.SecretKey)
	// property: name=valid_till_secs, type=INTEGER macro=copy_from_plan
	body.ValidTillSecs = Int64ValueOrNil(plan.ValidTillSecs)
	// property: name=vfflicense_id, type=STRING macro=copy_from_plan
	body.VfflicenseId = StringValueOrNil(plan.VfflicenseId)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct VffTokenScreen to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_vfflicenses_tokens", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_vfflicenses_tokens",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_vfflicenses_tokens", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_vfflicenses_tokens",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_vfflicenses_tokens", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.VffTokenScreen
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to VffTokenScreen in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_vfflicenses_tokens with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=VffTokenScreen
	// copy_to_state: state=state prefix=rsModel ans=ans properties=11
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ion_key, type=STRING macro=copy_to_state
	state.IonKey = types.StringPointerValue(plan.IonKey.ValueStringPointer())
	// this property is sensitive and will be stored in the state's internal key name
	state.IonKeyInternalKeyName = types.StringValue(GenerateRandomString(16))
	// store value if needed
	if !state.IonKey.IsNull() {
		encryptedIonKey, _ := Encrypt([]byte(state.IonKey.String()))
		resp.Private.SetKey(ctx, state.IonKeyInternalKeyName.String(), []byte(encryptedIonKey))
	}
	// property: name=is_expired, type=BOOLEAN macro=copy_to_state
	state.IsExpired = types.BoolPointerValue(ans.IsExpired)
	// property: name=is_multiuse, type=BOOLEAN macro=copy_to_state
	state.IsMultiuse = types.BoolPointerValue(ans.IsMultiuse)
	// property: name=is_revoked, type=BOOLEAN macro=copy_to_state
	state.IsRevoked = types.BoolPointerValue(ans.IsRevoked)
	// property: name=is_used, type=BOOLEAN macro=copy_to_state
	state.IsUsed = types.BoolPointerValue(ans.IsUsed)
	// property: name=secret_key, type=STRING macro=copy_to_state
	state.SecretKey = types.StringPointerValue(plan.SecretKey.ValueStringPointer())
	// this property is sensitive and will be stored in the state's internal key name
	state.SecretKeyInternalKeyName = types.StringValue(GenerateRandomString(16))
	// store value if needed
	if !state.SecretKey.IsNull() {
		encryptedSecretKey, _ := Encrypt([]byte(state.SecretKey.String()))
		resp.Private.SetKey(ctx, state.SecretKeyInternalKeyName.String(), []byte(encryptedSecretKey))
	}
	// property: name=valid_till_secs, type=INTEGER macro=copy_to_state
	state.ValidTillSecs = types.Int64PointerValue(ans.ValidTillSecs)
	// property: name=vfflicense_id, type=STRING macro=copy_to_state
	state.VfflicenseId = types.StringPointerValue(ans.VfflicenseId)
	return true
}

func (r *vfflicensesTokensResource) doGet(ctx context.Context, state *rsModelVffTokenScreen, savestate *rsModelVffTokenScreen, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_vfflicenses_tokens",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_vfflicenses_tokens ID format", "Expected 2 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.0/api/vfflicenses/{license_id}/tokens/{token_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["token_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_vfflicenses_tokens", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_vfflicenses_tokens",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_vfflicenses_tokens from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=VffTokenScreen
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.VffTokenScreen
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to VffTokenScreen in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=11
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ion_key, type=STRING macro=copy_to_state
	encryptedIonKeyKeyName := state.IonKeyInternalKeyName.String()
	encryptedIonKeyValueBytes, _ := resp.Private.GetKey(ctx, encryptedIonKeyKeyName)
	if encryptedIonKeyValueBytes != nil {
		decryptedIonKey, _ := Decrypt(string(encryptedIonKeyValueBytes))
		state.IonKey = types.StringValue(decryptedIonKey)
	}
	// property: name=is_expired, type=BOOLEAN macro=copy_to_state
	state.IsExpired = types.BoolPointerValue(ans.IsExpired)
	// property: name=is_multiuse, type=BOOLEAN macro=copy_to_state
	state.IsMultiuse = types.BoolPointerValue(ans.IsMultiuse)
	// property: name=is_revoked, type=BOOLEAN macro=copy_to_state
	state.IsRevoked = types.BoolPointerValue(ans.IsRevoked)
	// property: name=is_used, type=BOOLEAN macro=copy_to_state
	state.IsUsed = types.BoolPointerValue(ans.IsUsed)
	// property: name=secret_key, type=STRING macro=copy_to_state
	encryptedSecretKeyKeyName := state.SecretKeyInternalKeyName.String()
	encryptedSecretKeyValueBytes, _ := resp.Private.GetKey(ctx, encryptedSecretKeyKeyName)
	if encryptedSecretKeyValueBytes != nil {
		decryptedSecretKey, _ := Decrypt(string(encryptedSecretKeyValueBytes))
		state.SecretKey = types.StringValue(decryptedSecretKey)
	}
	// property: name=valid_till_secs, type=INTEGER macro=copy_to_state
	state.ValidTillSecs = types.Int64PointerValue(ans.ValidTillSecs)
	// property: name=vfflicense_id, type=STRING macro=copy_to_state
	state.VfflicenseId = types.StringPointerValue(ans.VfflicenseId)
	return true
}

func (r *vfflicensesTokensResource) doPut(ctx context.Context, plan *rsModelVffTokenScreen, state *rsModelVffTokenScreen, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_vfflicenses_tokens",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_vfflicenses_tokens", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("error in prismasdwan_vfflicenses_tokens ID format", "Expected 2 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.0/api/vfflicenses/{license_id}/tokens/{token_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["token_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.VffTokenScreen{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=11
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=ion_key, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.IonKey = ValueStringPointerFromPlanOrState(plan.IonKey, state.IonKey)
	} else {
		body.IonKey = StringValueOrNil(plan.IonKey)
	}
	// property: name=is_expired, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.IsExpired = ValueBoolPointerFromPlanOrState(plan.IsExpired, state.IsExpired)
	} else {
		body.IsExpired = BoolValueOrNil(plan.IsExpired)
	}
	// property: name=is_multiuse, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.IsMultiuse = ValueBoolPointerFromPlanOrState(plan.IsMultiuse, state.IsMultiuse)
	} else {
		body.IsMultiuse = BoolValueOrNil(plan.IsMultiuse)
	}
	// property: name=is_revoked, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.IsRevoked = ValueBoolPointerFromPlanOrState(plan.IsRevoked, state.IsRevoked)
	} else {
		body.IsRevoked = BoolValueOrNil(plan.IsRevoked)
	}
	// property: name=is_used, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.IsUsed = ValueBoolPointerFromPlanOrState(plan.IsUsed, state.IsUsed)
	} else {
		body.IsUsed = BoolValueOrNil(plan.IsUsed)
	}
	// property: name=secret_key, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.SecretKey = ValueStringPointerFromPlanOrState(plan.SecretKey, state.SecretKey)
	} else {
		body.SecretKey = StringValueOrNil(plan.SecretKey)
	}
	// property: name=valid_till_secs, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.ValidTillSecs = ValueInt64PointerFromPlanOrState(plan.ValidTillSecs, state.ValidTillSecs)
	} else {
		body.ValidTillSecs = Int64ValueOrNil(plan.ValidTillSecs)
	}
	// property: name=vfflicense_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.VfflicenseId = ValueStringPointerFromPlanOrState(plan.VfflicenseId, state.VfflicenseId)
	} else {
		body.VfflicenseId = StringValueOrNil(plan.VfflicenseId)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct VffTokenScreen to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_vfflicenses_tokens", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_vfflicenses_tokens",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_vfflicenses_tokens", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_vfflicenses_tokens",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_vfflicenses_tokens", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.VffTokenScreen
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to VffTokenScreen in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=VffTokenScreen
	// copy_to_state: state=state prefix=rsModel ans=ans properties=11
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=ion_key, type=STRING macro=copy_to_state
	state.IonKey = types.StringPointerValue(plan.IonKey.ValueStringPointer())
	// this property is sensitive and will be stored in the state's internal key name
	state.IonKeyInternalKeyName = types.StringValue(GenerateRandomString(16))
	// store value if needed
	if !state.IonKey.IsNull() {
		encryptedIonKey, _ := Encrypt([]byte(state.IonKey.String()))
		resp.Private.SetKey(ctx, state.IonKeyInternalKeyName.String(), []byte(encryptedIonKey))
	}
	// property: name=is_expired, type=BOOLEAN macro=copy_to_state
	state.IsExpired = types.BoolPointerValue(ans.IsExpired)
	// property: name=is_multiuse, type=BOOLEAN macro=copy_to_state
	state.IsMultiuse = types.BoolPointerValue(ans.IsMultiuse)
	// property: name=is_revoked, type=BOOLEAN macro=copy_to_state
	state.IsRevoked = types.BoolPointerValue(ans.IsRevoked)
	// property: name=is_used, type=BOOLEAN macro=copy_to_state
	state.IsUsed = types.BoolPointerValue(ans.IsUsed)
	// property: name=secret_key, type=STRING macro=copy_to_state
	state.SecretKey = types.StringPointerValue(plan.SecretKey.ValueStringPointer())
	// this property is sensitive and will be stored in the state's internal key name
	state.SecretKeyInternalKeyName = types.StringValue(GenerateRandomString(16))
	// store value if needed
	if !state.SecretKey.IsNull() {
		encryptedSecretKey, _ := Encrypt([]byte(state.SecretKey.String()))
		resp.Private.SetKey(ctx, state.SecretKeyInternalKeyName.String(), []byte(encryptedSecretKey))
	}
	// property: name=valid_till_secs, type=INTEGER macro=copy_to_state
	state.ValidTillSecs = types.Int64PointerValue(ans.ValidTillSecs)
	// property: name=vfflicense_id, type=STRING macro=copy_to_state
	state.VfflicenseId = types.StringPointerValue(ans.VfflicenseId)
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *vfflicensesTokensResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_vfflicenses_tokens")
	var plan rsModelVffTokenScreen
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelVffTokenScreen
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *vfflicensesTokensResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_vfflicenses_tokens")
	var savestate, state rsModelVffTokenScreen
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *vfflicensesTokensResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_vfflicenses_tokens")
	var plan, state rsModelVffTokenScreen
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *vfflicensesTokensResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_vfflicenses_tokens")
	// some resources are auto deleted
	resp.State.RemoveResource(ctx)
}

func (r *vfflicensesTokensResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
