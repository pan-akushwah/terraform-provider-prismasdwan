package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=4)
// | Computed Resource Name=roles
// +-----------------------------------------------------------------
// | CustomPermission HasID=true
// | AuthPermission HasID=false
// | AuthRole HasID=false
// | CustomRoleV2N1 HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &rolesDataSource{}
	_ datasource.DataSourceWithConfigure = &rolesDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewRolesDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewRolesDataSource() datasource.DataSource {
	return &rolesDataSource{}
}

type rolesDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *rolesDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_roles"
}

// Schema defines the schema for this data source.
func (d *rolesDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=CustomRoleV2N1
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=custom_permissions, type=ARRAY_REFERENCE macro=rss_schema
			"custom_permissions": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": dsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=allowed_after_ms, type=INTEGER macro=rss_schema
						"allowed_after_ms": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=allowed_after_ms, type=INTEGER macro=rss_schema
						// property: name=allowed_before_ms, type=INTEGER macro=rss_schema
						"allowed_before_ms": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=allowed_before_ms, type=INTEGER macro=rss_schema
						// property: name=disabled, type=BOOLEAN macro=rss_schema
						"disabled": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
						// property: name=disabled_reason, type=STRING macro=rss_schema
						"disabled_reason": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
						// property: name=disallow_permission, type=BOOLEAN macro=rss_schema
						"disallow_permission": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disallow_permission, type=BOOLEAN macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": dsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=inactive, type=BOOLEAN macro=rss_schema
						"inactive": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
						// property: name=inactive_reason, type=STRING macro=rss_schema
						"inactive_reason": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
						// property: name=region, type=STRING macro=rss_schema
						"region": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=region, type=STRING macro=rss_schema
						// property: name=value, type=STRING macro=rss_schema
						"value": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=value, type=STRING macro=rss_schema
			// property: name=description, type=STRING macro=rss_schema
			"description": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=description, type=STRING macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=disallow_permissions, type=ARRAY_REFERENCE macro=rss_schema
			"disallow_permissions": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=value, type=STRING macro=rss_schema
						"value": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=value, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=is_system_owned, type=BOOLEAN macro=rss_schema
			"is_system_owned": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_system_owned, type=BOOLEAN macro=rss_schema
			// property: name=name, type=STRING macro=rss_schema
			"name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=permissions, type=ARRAY_REFERENCE macro=rss_schema
			"permissions": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=value, type=STRING macro=rss_schema
						"value": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=value, type=STRING macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=roles, type=ARRAY_REFERENCE macro=rss_schema
			"roles": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=name, type=STRING macro=rss_schema
						"name": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *rolesDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *rolesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelCustomRoleV2N1
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_roles",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_roles ID format", "Expected 1 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.1/api/roles/{role_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["role_id"] = &tokens[0]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_roles", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.CustomRoleV2N1
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to CustomRoleV2N1", json_err.Error())
		return
	}

	// lets copy all items into state schema=CustomRoleV2N1
	// copy_to_state: state=state prefix=dsModel ans=ans properties=15
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=custom_permissions, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.CustomPermissions == nil {
		state.CustomPermissions = nil
	} else if len(ans.CustomPermissions) == 0 {
		state.CustomPermissions = []dsModelCustomPermission{}
	} else {
		state.CustomPermissions = make([]dsModelCustomPermission, 0, len(ans.CustomPermissions))
		for varLoopCustomPermissionsIndex, varLoopCustomPermissions := range ans.CustomPermissions {
			// add a new item
			state.CustomPermissions = append(state.CustomPermissions, dsModelCustomPermission{})
			// copy_to_state: state=state.CustomPermissions[varLoopCustomPermissionsIndex] prefix=dsModel ans=varLoopCustomPermissions properties=12
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].Etag = types.Int64PointerValue(varLoopCustomPermissions.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].Schema = types.Int64PointerValue(varLoopCustomPermissions.Schema)
			// property: name=allowed_after_ms, type=INTEGER macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].AllowedAfterMs = types.Int64PointerValue(varLoopCustomPermissions.AllowedAfterMs)
			// property: name=allowed_before_ms, type=INTEGER macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].AllowedBeforeMs = types.Int64PointerValue(varLoopCustomPermissions.AllowedBeforeMs)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].Disabled = types.BoolPointerValue(varLoopCustomPermissions.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].DisabledReason = types.StringPointerValue(varLoopCustomPermissions.DisabledReason)
			// property: name=disallow_permission, type=BOOLEAN macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].DisallowPermission = types.BoolPointerValue(varLoopCustomPermissions.DisallowPermission)
			// property: name=id, type=STRING macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].Id = types.StringPointerValue(varLoopCustomPermissions.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].Inactive = types.BoolPointerValue(varLoopCustomPermissions.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].InactiveReason = types.StringPointerValue(varLoopCustomPermissions.InactiveReason)
			// property: name=region, type=STRING macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].Region = types.StringPointerValue(varLoopCustomPermissions.Region)
			// property: name=value, type=STRING macro=copy_to_state
			state.CustomPermissions[varLoopCustomPermissionsIndex].Value = types.StringPointerValue(varLoopCustomPermissions.Value)
		}
	}
	// property: name=description, type=STRING macro=copy_to_state
	state.Description = types.StringPointerValue(ans.Description)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=disallow_permissions, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.DisallowPermissions == nil {
		state.DisallowPermissions = nil
	} else if len(ans.DisallowPermissions) == 0 {
		state.DisallowPermissions = []dsModelAuthPermission{}
	} else {
		state.DisallowPermissions = make([]dsModelAuthPermission, 0, len(ans.DisallowPermissions))
		for varLoopDisallowPermissionsIndex, varLoopDisallowPermissions := range ans.DisallowPermissions {
			// add a new item
			state.DisallowPermissions = append(state.DisallowPermissions, dsModelAuthPermission{})
			// copy_to_state: state=state.DisallowPermissions[varLoopDisallowPermissionsIndex] prefix=dsModel ans=varLoopDisallowPermissions properties=1
			// property: name=value, type=STRING macro=copy_to_state
			state.DisallowPermissions[varLoopDisallowPermissionsIndex].Value = types.StringPointerValue(varLoopDisallowPermissions.Value)
		}
	}
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=is_system_owned, type=BOOLEAN macro=copy_to_state
	state.IsSystemOwned = types.BoolPointerValue(ans.IsSystemOwned)
	// property: name=name, type=STRING macro=copy_to_state
	state.Name = types.StringPointerValue(ans.Name)
	// property: name=permissions, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Permissions == nil {
		state.Permissions = nil
	} else if len(ans.Permissions) == 0 {
		state.Permissions = []dsModelAuthPermission{}
	} else {
		state.Permissions = make([]dsModelAuthPermission, 0, len(ans.Permissions))
		for varLoopPermissionsIndex, varLoopPermissions := range ans.Permissions {
			// add a new item
			state.Permissions = append(state.Permissions, dsModelAuthPermission{})
			// copy_to_state: state=state.Permissions[varLoopPermissionsIndex] prefix=dsModel ans=varLoopPermissions properties=1
			// property: name=value, type=STRING macro=copy_to_state
			state.Permissions[varLoopPermissionsIndex].Value = types.StringPointerValue(varLoopPermissions.Value)
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=roles, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Roles == nil {
		state.Roles = nil
	} else if len(ans.Roles) == 0 {
		state.Roles = []dsModelAuthRole{}
	} else {
		state.Roles = make([]dsModelAuthRole, 0, len(ans.Roles))
		for varLoopRolesIndex, varLoopRoles := range ans.Roles {
			// add a new item
			state.Roles = append(state.Roles, dsModelAuthRole{})
			// copy_to_state: state=state.Roles[varLoopRolesIndex] prefix=dsModel ans=varLoopRoles properties=1
			// property: name=name, type=STRING macro=copy_to_state
			state.Roles[varLoopRolesIndex].Name = types.StringPointerValue(varLoopRoles.Name)
		}
	}

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
