package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=11)
// | Computed Resource Name=operators
// +-----------------------------------------------------------------
// | IPv4Address HasID=false
// | Type HasID=false
// | PhoneNumber HasID=false
// | Address HasID=false
// | LinkedAccount HasID=true
// | CustomPermission HasID=true
// | AuthPermission HasID=false
// | AuthRole HasID=false
// | CustomRoleV2N1 HasID=true
// | Email HasID=false
// | OperatorV2N2 HasID=true
// +-----------------------------------------------------------------

// Data source.
var (
	_ datasource.DataSource              = &operatorsDataSource{}
	_ datasource.DataSourceWithConfigure = &operatorsDataSource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) DataSources(_ context.Context) []func() datasource.DataSource {
//	  	return []func() datasource.DataSource{
//	     ... <other existing data sources>
//	     NewOperatorsDataSource,
//	     // -- append next datasource above -- //
//	     }
//	  }
func NewOperatorsDataSource() datasource.DataSource {
	return &operatorsDataSource{}
}

type operatorsDataSource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (d *operatorsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "prismasdwan_operators"
}

// Schema defines the schema for this data source.
func (d *operatorsDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			"tfid": dsschema.StringAttribute{
				Computed: true,
			},
			// rest all properties to be read from GET API Schema schema=OperatorV2N2
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": dsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": dsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=addresses, type=ARRAY_REFERENCE macro=rss_schema
			"addresses": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=city, type=STRING macro=rss_schema
						"city": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=city, type=STRING macro=rss_schema
						// property: name=country, type=STRING macro=rss_schema
						"country": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=country, type=STRING macro=rss_schema
						// property: name=post_code, type=STRING macro=rss_schema
						"post_code": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=post_code, type=STRING macro=rss_schema
						// property: name=state, type=STRING macro=rss_schema
						"state": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=state, type=STRING macro=rss_schema
						// property: name=street, type=STRING macro=rss_schema
						"street": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=street, type=STRING macro=rss_schema
						// property: name=street2, type=STRING macro=rss_schema
						"street2": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=street2, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=street2, type=STRING macro=rss_schema
			// property: name=custom_roles, type=ARRAY_REFERENCE macro=rss_schema
			"custom_roles": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": dsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=custom_permissions, type=ARRAY_REFERENCE macro=rss_schema
						"custom_permissions": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// generic x_parameters is added to accomodate path parameters
									"x_parameters": dsschema.MapAttribute{
										Required:    false,
										Computed:    false,
										Optional:    true,
										ElementType: types.StringType,
									},
									// property: name=_etag, type=INTEGER macro=rss_schema
									"x_etag": dsschema.Int64Attribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
									// property: name=_schema, type=INTEGER macro=rss_schema
									"x_schema": dsschema.Int64Attribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
									// property: name=allowed_after_ms, type=INTEGER macro=rss_schema
									"allowed_after_ms": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=allowed_after_ms, type=INTEGER macro=rss_schema
									// property: name=allowed_before_ms, type=INTEGER macro=rss_schema
									"allowed_before_ms": dsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=allowed_before_ms, type=INTEGER macro=rss_schema
									// property: name=disabled, type=BOOLEAN macro=rss_schema
									"disabled": dsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
									// property: name=disabled_reason, type=STRING macro=rss_schema
									"disabled_reason": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
									// property: name=disallow_permission, type=BOOLEAN macro=rss_schema
									"disallow_permission": dsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=disallow_permission, type=BOOLEAN macro=rss_schema
									// property: name=id, type=STRING macro=rss_schema
									"id": dsschema.StringAttribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=id, type=STRING macro=rss_schema
									// property: name=inactive, type=BOOLEAN macro=rss_schema
									"inactive": dsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
									// property: name=inactive_reason, type=STRING macro=rss_schema
									"inactive_reason": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
									// property: name=region, type=STRING macro=rss_schema
									"region": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=region, type=STRING macro=rss_schema
									// property: name=value, type=STRING macro=rss_schema
									"value": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=value, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
						// property: name=description, type=STRING macro=rss_schema
						"description": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=description, type=STRING macro=rss_schema
						// property: name=disabled, type=BOOLEAN macro=rss_schema
						"disabled": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
						// property: name=disabled_reason, type=STRING macro=rss_schema
						"disabled_reason": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
						// property: name=disallow_permissions, type=ARRAY_REFERENCE macro=rss_schema
						"disallow_permissions": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=value, type=STRING macro=rss_schema
									"value": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=value, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": dsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=inactive, type=BOOLEAN macro=rss_schema
						"inactive": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
						// property: name=inactive_reason, type=STRING macro=rss_schema
						"inactive_reason": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
						// property: name=is_system_owned, type=BOOLEAN macro=rss_schema
						"is_system_owned": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=is_system_owned, type=BOOLEAN macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=permissions, type=ARRAY_REFERENCE macro=rss_schema
						"permissions": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=value, type=STRING macro=rss_schema
									"value": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=value, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
						// property: name=region, type=STRING macro=rss_schema
						"region": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=region, type=STRING macro=rss_schema
						// property: name=roles, type=ARRAY_REFERENCE macro=rss_schema
						"roles": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=name, type=STRING macro=rss_schema
									"name": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=name, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=disable_idp_login, type=BOOLEAN macro=rss_schema
			"disable_idp_login": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disable_idp_login, type=BOOLEAN macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=email, type=STRING macro=rss_schema
			"email": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=email, type=STRING macro=rss_schema
			// property: name=email_iam, type=STRING macro=rss_schema
			"email_iam": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=email_iam, type=STRING macro=rss_schema
			// property: name=email_validated, type=BOOLEAN macro=rss_schema
			"email_validated": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=email_validated, type=BOOLEAN macro=rss_schema
			// property: name=enable_session_ip_lock, type=BOOLEAN macro=rss_schema
			"enable_session_ip_lock": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=enable_session_ip_lock, type=BOOLEAN macro=rss_schema
			// property: name=first_name, type=STRING macro=rss_schema
			"first_name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=first_name, type=STRING macro=rss_schema
			// property: name=from_esp, type=BOOLEAN macro=rss_schema
			"from_esp": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=from_esp, type=BOOLEAN macro=rss_schema
			// property: name=from_esp_name, type=STRING macro=rss_schema
			"from_esp_name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=from_esp_name, type=STRING macro=rss_schema
			// property: name=from_esp_tenant_id, type=STRING macro=rss_schema
			"from_esp_tenant_id": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=from_esp_tenant_id, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": dsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=ipv4_list, type=ARRAY_REFERENCE macro=rss_schema
			"ipv4_list": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=ipv4, type=STRING macro=rss_schema
						"ipv4": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=ipv4, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=ipv4, type=STRING macro=rss_schema
			// property: name=is_locked, type=BOOLEAN macro=rss_schema
			"is_locked": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_locked, type=BOOLEAN macro=rss_schema
			// property: name=is_system_owned, type=BOOLEAN macro=rss_schema
			"is_system_owned": dsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_system_owned, type=BOOLEAN macro=rss_schema
			// property: name=last_login, type=STRING macro=rss_schema
			"last_login": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=last_login, type=STRING macro=rss_schema
			// property: name=last_name, type=STRING macro=rss_schema
			"last_name": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=last_name, type=STRING macro=rss_schema
			// property: name=linked_accounts, type=ARRAY_REFERENCE macro=rss_schema
			"linked_accounts": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": dsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": dsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=disabled, type=BOOLEAN macro=rss_schema
						"disabled": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
						// property: name=disabled_reason, type=STRING macro=rss_schema
						"disabled_reason": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
						// property: name=failed_login_attempts, type=INTEGER macro=rss_schema
						"failed_login_attempts": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=failed_login_attempts, type=INTEGER macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": dsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=inactive, type=BOOLEAN macro=rss_schema
						"inactive": dsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
						// property: name=inactive_reason, type=STRING macro=rss_schema
						"inactive_reason": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
						// property: name=provider_key, type=STRING macro=rss_schema
						"provider_key": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: true,
						},
						// key name holder for attribute: name=provider_key, type=STRING macro=rss_schema
						"provider_key_internal_key_name": dsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// property: name=provider_value, type=STRING macro=rss_schema
						"provider_value": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=provider_value, type=STRING macro=rss_schema
						// property: name=provider_value_updated_on, type=INTEGER macro=rss_schema
						"provider_value_updated_on": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=provider_value_updated_on, type=INTEGER macro=rss_schema
						// property: name=region, type=STRING macro=rss_schema
						"region": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=region, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=migration_state, type=STRING macro=rss_schema
			"migration_state": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=migration_state, type=STRING macro=rss_schema
			// property: name=phone_numbers, type=ARRAY_REFERENCE macro=rss_schema
			"phone_numbers": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=country_code, type=INTEGER macro=rss_schema
						"country_code": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=country_code, type=INTEGER macro=rss_schema
						// property: name=local_extension, type=INTEGER macro=rss_schema
						"local_extension": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=local_extension, type=INTEGER macro=rss_schema
						// property: name=number, type=INTEGER macro=rss_schema
						"number": dsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=number, type=INTEGER macro=rss_schema
						// property: name=types, type=ARRAY_REFERENCE macro=rss_schema
						"types": dsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// property: name=value, type=STRING macro=rss_schema
									"value": dsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=value, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=value, type=STRING macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=roles, type=ARRAY_REFERENCE macro=rss_schema
			"roles": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=name, type=STRING macro=rss_schema
						"name": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=secondary_emails, type=ARRAY_REFERENCE macro=rss_schema
			"secondary_emails": dsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// property: name=email, type=STRING macro=rss_schema
						"email": dsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=email, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=email, type=STRING macro=rss_schema
			// property: name=settings, type=STRING macro=rss_schema
			"settings": dsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=settings, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (d *operatorsDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.client = req.ProviderData.(*sdwan.Client)
}

// Read performs Read for the struct.
func (d *operatorsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dsModelOperatorV2N2
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// pointers
	diagnostics := &resp.Diagnostics

	// Basic logging.
	tflog.Info(ctx, "performing datasource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_operators",
	})

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_operators ID format", "Expected 1 tokens")
		return
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(d.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.2/api/operators/{operator_id}"

	// handle parameters
	params := make(map[string]*string)
	read_request.PathParameters = &params
	params["operator_id"] = &tokens[0]

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("error reading prismasdwan_operators", (*read_request.ResponseErr).Error())
		}
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.
	state.Tfid = types.StringValue(idBuilder.String())
	// start copying attributes
	var ans sdwan_schema.OperatorV2N2
	// copy from json response
	json_err := json.Unmarshal(*read_request.ResponseBytes, &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to OperatorV2N2", json_err.Error())
		return
	}

	// lets copy all items into state schema=OperatorV2N2
	// copy_to_state: state=state prefix=dsModel ans=ans properties=30
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=addresses, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Addresses == nil {
		state.Addresses = nil
	} else if len(ans.Addresses) == 0 {
		state.Addresses = []dsModelAddress{}
	} else {
		state.Addresses = make([]dsModelAddress, 0, len(ans.Addresses))
		for varLoopAddressesIndex, varLoopAddresses := range ans.Addresses {
			// add a new item
			state.Addresses = append(state.Addresses, dsModelAddress{})
			// copy_to_state: state=state.Addresses[varLoopAddressesIndex] prefix=dsModel ans=varLoopAddresses properties=6
			// property: name=city, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].City = types.StringPointerValue(varLoopAddresses.City)
			// property: name=country, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Country = types.StringPointerValue(varLoopAddresses.Country)
			// property: name=post_code, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].PostCode = types.StringPointerValue(varLoopAddresses.PostCode)
			// property: name=state, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].State = types.StringPointerValue(varLoopAddresses.State)
			// property: name=street, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Street = types.StringPointerValue(varLoopAddresses.Street)
			// property: name=street2, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Street2 = types.StringPointerValue(varLoopAddresses.Street2)
		}
	}
	// property: name=custom_roles, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.CustomRoles == nil {
		state.CustomRoles = nil
	} else if len(ans.CustomRoles) == 0 {
		state.CustomRoles = []dsModelCustomRoleV2N1{}
	} else {
		state.CustomRoles = make([]dsModelCustomRoleV2N1, 0, len(ans.CustomRoles))
		for varLoopCustomRolesIndex, varLoopCustomRoles := range ans.CustomRoles {
			// add a new item
			state.CustomRoles = append(state.CustomRoles, dsModelCustomRoleV2N1{})
			// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex] prefix=dsModel ans=varLoopCustomRoles properties=15
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Etag = types.Int64PointerValue(varLoopCustomRoles.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Schema = types.Int64PointerValue(varLoopCustomRoles.Schema)
			// property: name=custom_permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.CustomPermissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = nil
			} else if len(varLoopCustomRoles.CustomPermissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = []dsModelCustomPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = make([]dsModelCustomPermission, 0, len(varLoopCustomRoles.CustomPermissions))
				for varLoopCustomPermissionsIndex, varLoopCustomPermissions := range varLoopCustomRoles.CustomPermissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = append(state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions, dsModelCustomPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex] prefix=dsModel ans=varLoopCustomPermissions properties=12
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Etag = types.Int64PointerValue(varLoopCustomPermissions.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Schema = types.Int64PointerValue(varLoopCustomPermissions.Schema)
					// property: name=allowed_after_ms, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedAfterMs = types.Int64PointerValue(varLoopCustomPermissions.AllowedAfterMs)
					// property: name=allowed_before_ms, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedBeforeMs = types.Int64PointerValue(varLoopCustomPermissions.AllowedBeforeMs)
					// property: name=disabled, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Disabled = types.BoolPointerValue(varLoopCustomPermissions.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisabledReason = types.StringPointerValue(varLoopCustomPermissions.DisabledReason)
					// property: name=disallow_permission, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisallowPermission = types.BoolPointerValue(varLoopCustomPermissions.DisallowPermission)
					// property: name=id, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Id = types.StringPointerValue(varLoopCustomPermissions.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Inactive = types.BoolPointerValue(varLoopCustomPermissions.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].InactiveReason = types.StringPointerValue(varLoopCustomPermissions.InactiveReason)
					// property: name=region, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Region = types.StringPointerValue(varLoopCustomPermissions.Region)
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Value = types.StringPointerValue(varLoopCustomPermissions.Value)
				}
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Description = types.StringPointerValue(varLoopCustomRoles.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Disabled = types.BoolPointerValue(varLoopCustomRoles.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].DisabledReason = types.StringPointerValue(varLoopCustomRoles.DisabledReason)
			// property: name=disallow_permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.DisallowPermissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = nil
			} else if len(varLoopCustomRoles.DisallowPermissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = []dsModelAuthPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = make([]dsModelAuthPermission, 0, len(varLoopCustomRoles.DisallowPermissions))
				for varLoopDisallowPermissionsIndex, varLoopDisallowPermissions := range varLoopCustomRoles.DisallowPermissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = append(state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions, dsModelAuthPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex] prefix=dsModel ans=varLoopDisallowPermissions properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex].Value = types.StringPointerValue(varLoopDisallowPermissions.Value)
				}
			}
			// property: name=id, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Id = types.StringPointerValue(varLoopCustomRoles.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Inactive = types.BoolPointerValue(varLoopCustomRoles.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].InactiveReason = types.StringPointerValue(varLoopCustomRoles.InactiveReason)
			// property: name=is_system_owned, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].IsSystemOwned = types.BoolPointerValue(varLoopCustomRoles.IsSystemOwned)
			// property: name=name, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Name = types.StringPointerValue(varLoopCustomRoles.Name)
			// property: name=permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.Permissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = nil
			} else if len(varLoopCustomRoles.Permissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = []dsModelAuthPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = make([]dsModelAuthPermission, 0, len(varLoopCustomRoles.Permissions))
				for varLoopPermissionsIndex, varLoopPermissions := range varLoopCustomRoles.Permissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].Permissions = append(state.CustomRoles[varLoopCustomRolesIndex].Permissions, dsModelAuthPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex] prefix=dsModel ans=varLoopPermissions properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex].Value = types.StringPointerValue(varLoopPermissions.Value)
				}
			}
			// property: name=region, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Region = types.StringPointerValue(varLoopCustomRoles.Region)
			// property: name=roles, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.Roles == nil {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = nil
			} else if len(varLoopCustomRoles.Roles) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = []dsModelAuthRole{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = make([]dsModelAuthRole, 0, len(varLoopCustomRoles.Roles))
				for varLoopRolesIndex, varLoopRoles := range varLoopCustomRoles.Roles {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].Roles = append(state.CustomRoles[varLoopCustomRolesIndex].Roles, dsModelAuthRole{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex] prefix=dsModel ans=varLoopRoles properties=1
					// property: name=name, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex].Name = types.StringPointerValue(varLoopRoles.Name)
				}
			}
		}
	}
	// property: name=disable_idp_login, type=BOOLEAN macro=copy_to_state
	state.DisableIdpLogin = types.BoolPointerValue(ans.DisableIdpLogin)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=email, type=STRING macro=copy_to_state
	state.Email = types.StringPointerValue(ans.Email)
	// property: name=email_iam, type=STRING macro=copy_to_state
	state.EmailIam = types.StringPointerValue(ans.EmailIam)
	// property: name=email_validated, type=BOOLEAN macro=copy_to_state
	state.EmailValidated = types.BoolPointerValue(ans.EmailValidated)
	// property: name=enable_session_ip_lock, type=BOOLEAN macro=copy_to_state
	state.EnableSessionIpLock = types.BoolPointerValue(ans.EnableSessionIpLock)
	// property: name=first_name, type=STRING macro=copy_to_state
	state.FirstName = types.StringPointerValue(ans.FirstName)
	// property: name=from_esp, type=BOOLEAN macro=copy_to_state
	state.FromEsp = types.BoolPointerValue(ans.FromEsp)
	// property: name=from_esp_name, type=STRING macro=copy_to_state
	state.FromEspName = types.StringPointerValue(ans.FromEspName)
	// property: name=from_esp_tenant_id, type=STRING macro=copy_to_state
	state.FromEspTenantId = types.StringPointerValue(ans.FromEspTenantId)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=ipv4_list, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Ipv4List == nil {
		state.Ipv4List = nil
	} else if len(ans.Ipv4List) == 0 {
		state.Ipv4List = []dsModelIPv4Address{}
	} else {
		state.Ipv4List = make([]dsModelIPv4Address, 0, len(ans.Ipv4List))
		for varLoopIpv4ListIndex, varLoopIpv4List := range ans.Ipv4List {
			// add a new item
			state.Ipv4List = append(state.Ipv4List, dsModelIPv4Address{})
			// copy_to_state: state=state.Ipv4List[varLoopIpv4ListIndex] prefix=dsModel ans=varLoopIpv4List properties=1
			// property: name=ipv4, type=STRING macro=copy_to_state
			state.Ipv4List[varLoopIpv4ListIndex].Ipv4 = types.StringPointerValue(varLoopIpv4List.Ipv4)
		}
	}
	// property: name=is_locked, type=BOOLEAN macro=copy_to_state
	state.IsLocked = types.BoolPointerValue(ans.IsLocked)
	// property: name=is_system_owned, type=BOOLEAN macro=copy_to_state
	state.IsSystemOwned = types.BoolPointerValue(ans.IsSystemOwned)
	// property: name=last_login, type=STRING macro=copy_to_state
	state.LastLogin = types.StringPointerValue(ans.LastLogin)
	// property: name=last_name, type=STRING macro=copy_to_state
	state.LastName = types.StringPointerValue(ans.LastName)
	// property: name=linked_accounts, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.LinkedAccounts == nil {
		state.LinkedAccounts = nil
	} else if len(ans.LinkedAccounts) == 0 {
		state.LinkedAccounts = []dsModelLinkedAccount{}
	} else {
		state.LinkedAccounts = make([]dsModelLinkedAccount, 0, len(ans.LinkedAccounts))
		for varLoopLinkedAccountsIndex, varLoopLinkedAccounts := range ans.LinkedAccounts {
			// add a new item
			state.LinkedAccounts = append(state.LinkedAccounts, dsModelLinkedAccount{})
			// copy_to_state: state=state.LinkedAccounts[varLoopLinkedAccountsIndex] prefix=dsModel ans=varLoopLinkedAccounts properties=12
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Etag = types.Int64PointerValue(varLoopLinkedAccounts.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Schema = types.Int64PointerValue(varLoopLinkedAccounts.Schema)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Disabled = types.BoolPointerValue(varLoopLinkedAccounts.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].DisabledReason = types.StringPointerValue(varLoopLinkedAccounts.DisabledReason)
			// property: name=failed_login_attempts, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].FailedLoginAttempts = types.Int64PointerValue(varLoopLinkedAccounts.FailedLoginAttempts)
			// property: name=id, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Id = types.StringPointerValue(varLoopLinkedAccounts.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Inactive = types.BoolPointerValue(varLoopLinkedAccounts.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].InactiveReason = types.StringPointerValue(varLoopLinkedAccounts.InactiveReason)
			// property: name=provider_key, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderKey = types.StringPointerValue(varLoopLinkedAccounts.ProviderKey)
			// property: name=provider_value, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValue = types.StringPointerValue(varLoopLinkedAccounts.ProviderValue)
			// property: name=provider_value_updated_on, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValueUpdatedOn = types.Int64PointerValue(varLoopLinkedAccounts.ProviderValueUpdatedOn)
			// property: name=region, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Region = types.StringPointerValue(varLoopLinkedAccounts.Region)
		}
	}
	// property: name=migration_state, type=STRING macro=copy_to_state
	state.MigrationState = types.StringPointerValue(ans.MigrationState)
	// property: name=phone_numbers, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PhoneNumbers == nil {
		state.PhoneNumbers = nil
	} else if len(ans.PhoneNumbers) == 0 {
		state.PhoneNumbers = []dsModelPhoneNumber{}
	} else {
		state.PhoneNumbers = make([]dsModelPhoneNumber, 0, len(ans.PhoneNumbers))
		for varLoopPhoneNumbersIndex, varLoopPhoneNumbers := range ans.PhoneNumbers {
			// add a new item
			state.PhoneNumbers = append(state.PhoneNumbers, dsModelPhoneNumber{})
			// copy_to_state: state=state.PhoneNumbers[varLoopPhoneNumbersIndex] prefix=dsModel ans=varLoopPhoneNumbers properties=4
			// property: name=country_code, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].CountryCode = types.Int64PointerValue(varLoopPhoneNumbers.CountryCode)
			// property: name=local_extension, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].LocalExtension = types.Int64PointerValue(varLoopPhoneNumbers.LocalExtension)
			// property: name=number, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].Number = types.Int64PointerValue(varLoopPhoneNumbers.Number)
			// property: name=types, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPhoneNumbers.Types == nil {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = nil
			} else if len(varLoopPhoneNumbers.Types) == 0 {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = []dsModelType{}
			} else {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = make([]dsModelType, 0, len(varLoopPhoneNumbers.Types))
				for varLoopTypesIndex, varLoopTypes := range varLoopPhoneNumbers.Types {
					// add a new item
					state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = append(state.PhoneNumbers[varLoopPhoneNumbersIndex].Types, dsModelType{})
					// copy_to_state: state=state.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex] prefix=dsModel ans=varLoopTypes properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex].Value = types.StringPointerValue(varLoopTypes.Value)
				}
			}
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=roles, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Roles == nil {
		state.Roles = nil
	} else if len(ans.Roles) == 0 {
		state.Roles = []dsModelAuthRole{}
	} else {
		state.Roles = make([]dsModelAuthRole, 0, len(ans.Roles))
		for varLoopRolesIndex, varLoopRoles := range ans.Roles {
			// add a new item
			state.Roles = append(state.Roles, dsModelAuthRole{})
			// copy_to_state: state=state.Roles[varLoopRolesIndex] prefix=dsModel ans=varLoopRoles properties=1
			// property: name=name, type=STRING macro=copy_to_state
			state.Roles[varLoopRolesIndex].Name = types.StringPointerValue(varLoopRoles.Name)
		}
	}
	// property: name=secondary_emails, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.SecondaryEmails == nil {
		state.SecondaryEmails = nil
	} else if len(ans.SecondaryEmails) == 0 {
		state.SecondaryEmails = []dsModelEmail{}
	} else {
		state.SecondaryEmails = make([]dsModelEmail, 0, len(ans.SecondaryEmails))
		for varLoopSecondaryEmailsIndex, varLoopSecondaryEmails := range ans.SecondaryEmails {
			// add a new item
			state.SecondaryEmails = append(state.SecondaryEmails, dsModelEmail{})
			// copy_to_state: state=state.SecondaryEmails[varLoopSecondaryEmailsIndex] prefix=dsModel ans=varLoopSecondaryEmails properties=1
			// property: name=email, type=STRING macro=copy_to_state
			state.SecondaryEmails[varLoopSecondaryEmailsIndex].Email = types.StringPointerValue(varLoopSecondaryEmails.Email)
		}
	}
	// property: name=settings, type=STRING macro=copy_to_state
	state.Settings = types.StringPointerValue(ans.Settings)

	// Done.
	diagnostics.Append(resp.State.Set(ctx, &state)...)
}
