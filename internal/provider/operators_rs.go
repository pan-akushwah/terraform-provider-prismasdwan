package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"strings"

	sdwan "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk"
	sdwan_schema "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/schemas"
	sdwan_client "github.com/paloaltonetworks/terraform-provider-prismasdwan/sdk/sdwan/services"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tidwall/sjson"
)

// +-----------------------------------------------------------------
// | Schema Map Summary (size=goLangStructMap=11)
// | Computed Resource Name=operators
// +-----------------------------------------------------------------
// | IPv4Address HasID=false
// | Type HasID=false
// | PhoneNumber HasID=false
// | Address HasID=false
// | LinkedAccount HasID=true
// | CustomPermission HasID=true
// | AuthPermission HasID=false
// | AuthRole HasID=false
// | CustomRoleV2N1 HasID=true
// | Email HasID=false
// | OperatorV2N2 HasID=true
// +-----------------------------------------------------------------

// Resource.
var (
	_ resource.Resource                = &operatorsResource{}
	_ resource.ResourceWithConfigure   = &operatorsResource{}
	_ resource.ResourceWithImportState = &operatorsResource{}
)

// To enable this data source for TF Provider, go to `provider.go` and inject this into the function
// as below:
//
//	func (p *SdwanProvider) Resources(_ context.Context) []func() resource.Resource {
//	  	return []func() resource.Resource{
//	     ... <other existing resources>
//	     NewOperatorsResource,
//	     // -- append next resource above -- //
//	     }
//	  }
func NewOperatorsResource() resource.Resource {
	return &operatorsResource{}
}

type operatorsResource struct {
	client *sdwan.Client
}

// Metadata returns the data source type name.
func (r *operatorsResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "prismasdwan_operators"
}

// Schema defines the schema for this data source.
func (r *operatorsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",
		Attributes: map[string]rsschema.Attribute{
			"tfid": rsschema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			// rest all properties to be read from GET API Schema schema=OperatorV2N2
			// generic x_parameters is added to accomodate path parameters
			"x_parameters": rsschema.MapAttribute{
				Required:    false,
				Computed:    false,
				Optional:    true,
				ElementType: types.StringType,
			},
			// property: name=_etag, type=INTEGER macro=rss_schema
			"x_etag": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
			// property: name=_schema, type=INTEGER macro=rss_schema
			"x_schema": rsschema.Int64Attribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
			// property: name=addresses, type=ARRAY_REFERENCE macro=rss_schema
			"addresses": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=city, type=STRING macro=rss_schema
						"city": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=city, type=STRING macro=rss_schema
						// property: name=country, type=STRING macro=rss_schema
						"country": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=country, type=STRING macro=rss_schema
						// property: name=post_code, type=STRING macro=rss_schema
						"post_code": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=post_code, type=STRING macro=rss_schema
						// property: name=state, type=STRING macro=rss_schema
						"state": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=state, type=STRING macro=rss_schema
						// property: name=street, type=STRING macro=rss_schema
						"street": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=street, type=STRING macro=rss_schema
						// property: name=street2, type=STRING macro=rss_schema
						"street2": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=street2, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=street2, type=STRING macro=rss_schema
			// property: name=custom_roles, type=ARRAY_REFERENCE macro=rss_schema
			"custom_roles": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": rsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=custom_permissions, type=ARRAY_REFERENCE macro=rss_schema
						"custom_permissions": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// generic x_parameters is added to accomodate path parameters
									"x_parameters": rsschema.MapAttribute{
										Required:    false,
										Computed:    false,
										Optional:    true,
										ElementType: types.StringType,
									},
									// property: name=_etag, type=INTEGER macro=rss_schema
									"x_etag": rsschema.Int64Attribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
									// property: name=_schema, type=INTEGER macro=rss_schema
									"x_schema": rsschema.Int64Attribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
									// property: name=allowed_after_ms, type=INTEGER macro=rss_schema
									"allowed_after_ms": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=allowed_after_ms, type=INTEGER macro=rss_schema
									// property: name=allowed_before_ms, type=INTEGER macro=rss_schema
									"allowed_before_ms": rsschema.Int64Attribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=allowed_before_ms, type=INTEGER macro=rss_schema
									// property: name=disabled, type=BOOLEAN macro=rss_schema
									"disabled": rsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
									// property: name=disabled_reason, type=STRING macro=rss_schema
									"disabled_reason": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
									// property: name=disallow_permission, type=BOOLEAN macro=rss_schema
									"disallow_permission": rsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=disallow_permission, type=BOOLEAN macro=rss_schema
									// property: name=id, type=STRING macro=rss_schema
									"id": rsschema.StringAttribute{
										Required:  false,
										Computed:  true,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=id, type=STRING macro=rss_schema
									// property: name=inactive, type=BOOLEAN macro=rss_schema
									"inactive": rsschema.BoolAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
									// property: name=inactive_reason, type=STRING macro=rss_schema
									"inactive_reason": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
									// property: name=region, type=STRING macro=rss_schema
									"region": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=region, type=STRING macro=rss_schema
									// property: name=value, type=STRING macro=rss_schema
									"value": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=value, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
						// property: name=description, type=STRING macro=rss_schema
						"description": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=description, type=STRING macro=rss_schema
						// property: name=disabled, type=BOOLEAN macro=rss_schema
						"disabled": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
						// property: name=disabled_reason, type=STRING macro=rss_schema
						"disabled_reason": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
						// property: name=disallow_permissions, type=ARRAY_REFERENCE macro=rss_schema
						"disallow_permissions": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=value, type=STRING macro=rss_schema
									"value": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=value, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": rsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=inactive, type=BOOLEAN macro=rss_schema
						"inactive": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
						// property: name=inactive_reason, type=STRING macro=rss_schema
						"inactive_reason": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
						// property: name=is_system_owned, type=BOOLEAN macro=rss_schema
						"is_system_owned": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=is_system_owned, type=BOOLEAN macro=rss_schema
						// property: name=name, type=STRING macro=rss_schema
						"name": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
						// property: name=permissions, type=ARRAY_REFERENCE macro=rss_schema
						"permissions": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=value, type=STRING macro=rss_schema
									"value": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=value, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
						// property: name=region, type=STRING macro=rss_schema
						"region": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=region, type=STRING macro=rss_schema
						// property: name=roles, type=ARRAY_REFERENCE macro=rss_schema
						"roles": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=name, type=STRING macro=rss_schema
									"name": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=name, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=disable_idp_login, type=BOOLEAN macro=rss_schema
			"disable_idp_login": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disable_idp_login, type=BOOLEAN macro=rss_schema
			// property: name=disabled, type=BOOLEAN macro=rss_schema
			"disabled": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
			// property: name=disabled_reason, type=STRING macro=rss_schema
			"disabled_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
			// property: name=email, type=STRING macro=rss_schema
			"email": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=email, type=STRING macro=rss_schema
			// property: name=email_iam, type=STRING macro=rss_schema
			"email_iam": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=email_iam, type=STRING macro=rss_schema
			// property: name=email_validated, type=BOOLEAN macro=rss_schema
			"email_validated": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=email_validated, type=BOOLEAN macro=rss_schema
			// property: name=enable_session_ip_lock, type=BOOLEAN macro=rss_schema
			"enable_session_ip_lock": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=enable_session_ip_lock, type=BOOLEAN macro=rss_schema
			// property: name=first_name, type=STRING macro=rss_schema
			"first_name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=first_name, type=STRING macro=rss_schema
			// property: name=from_esp, type=BOOLEAN macro=rss_schema
			"from_esp": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=from_esp, type=BOOLEAN macro=rss_schema
			// property: name=from_esp_name, type=STRING macro=rss_schema
			"from_esp_name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=from_esp_name, type=STRING macro=rss_schema
			// property: name=from_esp_tenant_id, type=STRING macro=rss_schema
			"from_esp_tenant_id": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=from_esp_tenant_id, type=STRING macro=rss_schema
			// property: name=id, type=STRING macro=rss_schema
			"id": rsschema.StringAttribute{
				Required:  false,
				Computed:  true,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=id, type=STRING macro=rss_schema
			// property: name=inactive, type=BOOLEAN macro=rss_schema
			"inactive": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
			// property: name=inactive_reason, type=STRING macro=rss_schema
			"inactive_reason": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
			// property: name=ipv4_list, type=ARRAY_REFERENCE macro=rss_schema
			"ipv4_list": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=ipv4, type=STRING macro=rss_schema
						"ipv4": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=ipv4, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=ipv4, type=STRING macro=rss_schema
			// property: name=is_locked, type=BOOLEAN macro=rss_schema
			"is_locked": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_locked, type=BOOLEAN macro=rss_schema
			// property: name=is_system_owned, type=BOOLEAN macro=rss_schema
			"is_system_owned": rsschema.BoolAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=is_system_owned, type=BOOLEAN macro=rss_schema
			// property: name=last_login, type=STRING macro=rss_schema
			"last_login": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=last_login, type=STRING macro=rss_schema
			// property: name=last_name, type=STRING macro=rss_schema
			"last_name": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=last_name, type=STRING macro=rss_schema
			// property: name=linked_accounts, type=ARRAY_REFERENCE macro=rss_schema
			"linked_accounts": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// generic x_parameters is added to accomodate path parameters
						"x_parameters": rsschema.MapAttribute{
							Required:    false,
							Computed:    false,
							Optional:    true,
							ElementType: types.StringType,
						},
						// property: name=_etag, type=INTEGER macro=rss_schema
						"x_etag": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_etag, type=INTEGER macro=rss_schema
						// property: name=_schema, type=INTEGER macro=rss_schema
						"x_schema": rsschema.Int64Attribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=_schema, type=INTEGER macro=rss_schema
						// property: name=disabled, type=BOOLEAN macro=rss_schema
						"disabled": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled, type=BOOLEAN macro=rss_schema
						// property: name=disabled_reason, type=STRING macro=rss_schema
						"disabled_reason": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=disabled_reason, type=STRING macro=rss_schema
						// property: name=failed_login_attempts, type=INTEGER macro=rss_schema
						"failed_login_attempts": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=failed_login_attempts, type=INTEGER macro=rss_schema
						// property: name=id, type=STRING macro=rss_schema
						"id": rsschema.StringAttribute{
							Required:  false,
							Computed:  true,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=id, type=STRING macro=rss_schema
						// property: name=inactive, type=BOOLEAN macro=rss_schema
						"inactive": rsschema.BoolAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive, type=BOOLEAN macro=rss_schema
						// property: name=inactive_reason, type=STRING macro=rss_schema
						"inactive_reason": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=inactive_reason, type=STRING macro=rss_schema
						// property: name=provider_key, type=STRING macro=rss_schema
						"provider_key": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=provider_key, type=STRING macro=rss_schema
						// property: name=provider_value, type=STRING macro=rss_schema
						"provider_value": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=provider_value, type=STRING macro=rss_schema
						// property: name=provider_value_updated_on, type=INTEGER macro=rss_schema
						"provider_value_updated_on": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=provider_value_updated_on, type=INTEGER macro=rss_schema
						// property: name=region, type=STRING macro=rss_schema
						"region": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=region, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=migration_state, type=STRING macro=rss_schema
			"migration_state": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=migration_state, type=STRING macro=rss_schema
			// property: name=phone_numbers, type=ARRAY_REFERENCE macro=rss_schema
			"phone_numbers": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=country_code, type=INTEGER macro=rss_schema
						"country_code": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=country_code, type=INTEGER macro=rss_schema
						// property: name=local_extension, type=INTEGER macro=rss_schema
						"local_extension": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=local_extension, type=INTEGER macro=rss_schema
						// property: name=number, type=INTEGER macro=rss_schema
						"number": rsschema.Int64Attribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=number, type=INTEGER macro=rss_schema
						// property: name=types, type=ARRAY_REFERENCE macro=rss_schema
						"types": rsschema.ListNestedAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// property: name=value, type=STRING macro=rss_schema
									"value": rsschema.StringAttribute{
										Required:  false,
										Computed:  false,
										Optional:  true,
										Sensitive: false,
									},
									// key name holder for attribute: name=value, type=STRING macro=rss_schema
								},
							},
						},
						// key name holder for attribute: name=value, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=value, type=STRING macro=rss_schema
			// property: name=region, type=STRING macro=rss_schema
			"region": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=region, type=STRING macro=rss_schema
			// property: name=roles, type=ARRAY_REFERENCE macro=rss_schema
			"roles": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=name, type=STRING macro=rss_schema
						"name": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=name, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=name, type=STRING macro=rss_schema
			// property: name=secondary_emails, type=ARRAY_REFERENCE macro=rss_schema
			"secondary_emails": rsschema.ListNestedAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// property: name=email, type=STRING macro=rss_schema
						"email": rsschema.StringAttribute{
							Required:  false,
							Computed:  false,
							Optional:  true,
							Sensitive: false,
						},
						// key name holder for attribute: name=email, type=STRING macro=rss_schema
					},
				},
			},
			// key name holder for attribute: name=email, type=STRING macro=rss_schema
			// property: name=settings, type=STRING macro=rss_schema
			"settings": rsschema.StringAttribute{
				Required:  false,
				Computed:  false,
				Optional:  true,
				Sensitive: false,
			},
			// key name holder for attribute: name=settings, type=STRING macro=rss_schema
		},
	}
}

// Configure prepares the struct.
func (r *operatorsResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.client = req.ProviderData.(*sdwan.Client)
}

// in some apis the status code is not consistent and hence we may have to act upon
// specific error codes instead
func (r *operatorsResource) GetHttpStatusCode(request *sdwan_client.SdwanClientRequestResponse) int {
	if request.ResponseErrorCode == nil {
		return request.ResponseStatusCode
	}
	switch *request.ResponseErrorCode {
	case "OBJECT_NOT_FOUND":
		return 404
	default:
		return request.ResponseStatusCode
	}
}

func (r *operatorsResource) doPost(ctx context.Context, plan *rsModelOperatorV2N2, state *rsModelOperatorV2N2, resp *resource.CreateResponse) bool {
	tflog.Info(ctx, "executing http post for prismasdwan_operators")
	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "prismasdwan_operators",
		"terraform_provider_function": "Create",
	})

	// Prepare input for the API endpoint.
	create_request := &sdwan_client.SdwanClientRequestResponse{}
	create_request.Method = "POST"
	create_request.Path = "/sdwan/v2.2/api/operators"

	// copy parameters from plan always
	params := make(map[string]*string)
	create_request.PathParameters = &params

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.OperatorV2N2{}

	// copy from plan to body
	// copy_from_plan: body=body prefix=rsModel plan=plan properties=30
	// property: name=_etag, type=INTEGER macro=copy_from_plan
	body.Etag = Int64ValueOrNil(plan.Etag)
	// property: name=_schema, type=INTEGER macro=copy_from_plan
	body.Schema = Int64ValueOrNil(plan.Schema)
	// property: name=addresses, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.Addresses == nil {
		body.Addresses = nil
	} else if len(plan.Addresses) == 0 {
		body.Addresses = []sdwan_schema.Address{}
	} else {
		body.Addresses = make([]sdwan_schema.Address, 0, len(plan.Addresses))
		for varLoopAddressesIndex, varLoopAddresses := range plan.Addresses {
			// add a new item
			body.Addresses = append(body.Addresses, sdwan_schema.Address{})
			// copy_from_plan: body=body.Addresses[varLoopAddressesIndex] prefix=rsModel plan=varLoopAddresses properties=6
			// property: name=city, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].City = StringValueOrNil(varLoopAddresses.City)
			// property: name=country, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].Country = StringValueOrNil(varLoopAddresses.Country)
			// property: name=post_code, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].PostCode = StringValueOrNil(varLoopAddresses.PostCode)
			// property: name=state, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].State = StringValueOrNil(varLoopAddresses.State)
			// property: name=street, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].Street = StringValueOrNil(varLoopAddresses.Street)
			// property: name=street2, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].Street2 = StringValueOrNil(varLoopAddresses.Street2)
		}
	}
	// property: name=custom_roles, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.CustomRoles == nil {
		body.CustomRoles = nil
	} else if len(plan.CustomRoles) == 0 {
		body.CustomRoles = []sdwan_schema.CustomRoleV2N1{}
	} else {
		body.CustomRoles = make([]sdwan_schema.CustomRoleV2N1, 0, len(plan.CustomRoles))
		for varLoopCustomRolesIndex, varLoopCustomRoles := range plan.CustomRoles {
			// add a new item
			body.CustomRoles = append(body.CustomRoles, sdwan_schema.CustomRoleV2N1{})
			// copy_from_plan: body=body.CustomRoles[varLoopCustomRolesIndex] prefix=rsModel plan=varLoopCustomRoles properties=15
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Etag = Int64ValueOrNil(varLoopCustomRoles.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Schema = Int64ValueOrNil(varLoopCustomRoles.Schema)
			// property: name=custom_permissions, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopCustomRoles.CustomPermissions == nil {
				body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = nil
			} else if len(varLoopCustomRoles.CustomPermissions) == 0 {
				body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = []sdwan_schema.CustomPermission{}
			} else {
				body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = make([]sdwan_schema.CustomPermission, 0, len(varLoopCustomRoles.CustomPermissions))
				for varLoopCustomPermissionsIndex, varLoopCustomPermissions := range varLoopCustomRoles.CustomPermissions {
					// add a new item
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = append(body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions, sdwan_schema.CustomPermission{})
					// copy_from_plan: body=body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex] prefix=rsModel plan=varLoopCustomPermissions properties=12
					// property: name=_etag, type=INTEGER macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Etag = Int64ValueOrNil(varLoopCustomPermissions.Etag)
					// property: name=_schema, type=INTEGER macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Schema = Int64ValueOrNil(varLoopCustomPermissions.Schema)
					// property: name=allowed_after_ms, type=INTEGER macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedAfterMs = Int64ValueOrNil(varLoopCustomPermissions.AllowedAfterMs)
					// property: name=allowed_before_ms, type=INTEGER macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedBeforeMs = Int64ValueOrNil(varLoopCustomPermissions.AllowedBeforeMs)
					// property: name=disabled, type=BOOLEAN macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Disabled = BoolValueOrNil(varLoopCustomPermissions.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisabledReason = StringValueOrNil(varLoopCustomPermissions.DisabledReason)
					// property: name=disallow_permission, type=BOOLEAN macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisallowPermission = BoolValueOrNil(varLoopCustomPermissions.DisallowPermission)
					// property: name=id, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Id = StringValueOrNil(varLoopCustomPermissions.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Inactive = BoolValueOrNil(varLoopCustomPermissions.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].InactiveReason = StringValueOrNil(varLoopCustomPermissions.InactiveReason)
					// property: name=region, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Region = StringValueOrNil(varLoopCustomPermissions.Region)
					// property: name=value, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Value = StringValueOrNil(varLoopCustomPermissions.Value)
				}
			}
			// property: name=description, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Description = StringValueOrNil(varLoopCustomRoles.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Disabled = BoolValueOrNil(varLoopCustomRoles.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].DisabledReason = StringValueOrNil(varLoopCustomRoles.DisabledReason)
			// property: name=disallow_permissions, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopCustomRoles.DisallowPermissions == nil {
				body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = nil
			} else if len(varLoopCustomRoles.DisallowPermissions) == 0 {
				body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = []sdwan_schema.AuthPermission{}
			} else {
				body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = make([]sdwan_schema.AuthPermission, 0, len(varLoopCustomRoles.DisallowPermissions))
				for varLoopDisallowPermissionsIndex, varLoopDisallowPermissions := range varLoopCustomRoles.DisallowPermissions {
					// add a new item
					body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = append(body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions, sdwan_schema.AuthPermission{})
					// copy_from_plan: body=body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex] prefix=rsModel plan=varLoopDisallowPermissions properties=1
					// property: name=value, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex].Value = StringValueOrNil(varLoopDisallowPermissions.Value)
				}
			}
			// property: name=id, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Id = StringValueOrNil(varLoopCustomRoles.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Inactive = BoolValueOrNil(varLoopCustomRoles.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].InactiveReason = StringValueOrNil(varLoopCustomRoles.InactiveReason)
			// property: name=is_system_owned, type=BOOLEAN macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].IsSystemOwned = BoolValueOrNil(varLoopCustomRoles.IsSystemOwned)
			// property: name=name, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Name = StringValueOrNil(varLoopCustomRoles.Name)
			// property: name=permissions, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopCustomRoles.Permissions == nil {
				body.CustomRoles[varLoopCustomRolesIndex].Permissions = nil
			} else if len(varLoopCustomRoles.Permissions) == 0 {
				body.CustomRoles[varLoopCustomRolesIndex].Permissions = []sdwan_schema.AuthPermission{}
			} else {
				body.CustomRoles[varLoopCustomRolesIndex].Permissions = make([]sdwan_schema.AuthPermission, 0, len(varLoopCustomRoles.Permissions))
				for varLoopPermissionsIndex, varLoopPermissions := range varLoopCustomRoles.Permissions {
					// add a new item
					body.CustomRoles[varLoopCustomRolesIndex].Permissions = append(body.CustomRoles[varLoopCustomRolesIndex].Permissions, sdwan_schema.AuthPermission{})
					// copy_from_plan: body=body.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex] prefix=rsModel plan=varLoopPermissions properties=1
					// property: name=value, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex].Value = StringValueOrNil(varLoopPermissions.Value)
				}
			}
			// property: name=region, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Region = StringValueOrNil(varLoopCustomRoles.Region)
			// property: name=roles, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopCustomRoles.Roles == nil {
				body.CustomRoles[varLoopCustomRolesIndex].Roles = nil
			} else if len(varLoopCustomRoles.Roles) == 0 {
				body.CustomRoles[varLoopCustomRolesIndex].Roles = []sdwan_schema.AuthRole{}
			} else {
				body.CustomRoles[varLoopCustomRolesIndex].Roles = make([]sdwan_schema.AuthRole, 0, len(varLoopCustomRoles.Roles))
				for varLoopRolesIndex, varLoopRoles := range varLoopCustomRoles.Roles {
					// add a new item
					body.CustomRoles[varLoopCustomRolesIndex].Roles = append(body.CustomRoles[varLoopCustomRolesIndex].Roles, sdwan_schema.AuthRole{})
					// copy_from_plan: body=body.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex] prefix=rsModel plan=varLoopRoles properties=1
					// property: name=name, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex].Name = StringValueOrNil(varLoopRoles.Name)
				}
			}
		}
	}
	// property: name=disable_idp_login, type=BOOLEAN macro=copy_from_plan
	body.DisableIdpLogin = BoolValueOrNil(plan.DisableIdpLogin)
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan
	body.Disabled = BoolValueOrNil(plan.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_from_plan
	body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	// property: name=email, type=STRING macro=copy_from_plan
	body.Email = StringValueOrNil(plan.Email)
	// property: name=email_iam, type=STRING macro=copy_from_plan
	body.EmailIam = StringValueOrNil(plan.EmailIam)
	// property: name=email_validated, type=BOOLEAN macro=copy_from_plan
	body.EmailValidated = BoolValueOrNil(plan.EmailValidated)
	// property: name=enable_session_ip_lock, type=BOOLEAN macro=copy_from_plan
	body.EnableSessionIpLock = BoolValueOrNil(plan.EnableSessionIpLock)
	// property: name=first_name, type=STRING macro=copy_from_plan
	body.FirstName = StringValueOrNil(plan.FirstName)
	// property: name=from_esp, type=BOOLEAN macro=copy_from_plan
	body.FromEsp = BoolValueOrNil(plan.FromEsp)
	// property: name=from_esp_name, type=STRING macro=copy_from_plan
	body.FromEspName = StringValueOrNil(plan.FromEspName)
	// property: name=from_esp_tenant_id, type=STRING macro=copy_from_plan
	body.FromEspTenantId = StringValueOrNil(plan.FromEspTenantId)
	// property: name=id, type=STRING macro=copy_from_plan
	body.Id = StringValueOrNil(plan.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan
	body.Inactive = BoolValueOrNil(plan.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_from_plan
	body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	// property: name=ipv4_list, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.Ipv4List == nil {
		body.Ipv4List = nil
	} else if len(plan.Ipv4List) == 0 {
		body.Ipv4List = []sdwan_schema.IPv4Address{}
	} else {
		body.Ipv4List = make([]sdwan_schema.IPv4Address, 0, len(plan.Ipv4List))
		for varLoopIpv4ListIndex, varLoopIpv4List := range plan.Ipv4List {
			// add a new item
			body.Ipv4List = append(body.Ipv4List, sdwan_schema.IPv4Address{})
			// copy_from_plan: body=body.Ipv4List[varLoopIpv4ListIndex] prefix=rsModel plan=varLoopIpv4List properties=1
			// property: name=ipv4, type=STRING macro=copy_from_plan
			body.Ipv4List[varLoopIpv4ListIndex].Ipv4 = StringValueOrNil(varLoopIpv4List.Ipv4)
		}
	}
	// property: name=is_locked, type=BOOLEAN macro=copy_from_plan
	body.IsLocked = BoolValueOrNil(plan.IsLocked)
	// property: name=is_system_owned, type=BOOLEAN macro=copy_from_plan
	body.IsSystemOwned = BoolValueOrNil(plan.IsSystemOwned)
	// property: name=last_login, type=STRING macro=copy_from_plan
	body.LastLogin = StringValueOrNil(plan.LastLogin)
	// property: name=last_name, type=STRING macro=copy_from_plan
	body.LastName = StringValueOrNil(plan.LastName)
	// property: name=linked_accounts, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.LinkedAccounts == nil {
		body.LinkedAccounts = nil
	} else if len(plan.LinkedAccounts) == 0 {
		body.LinkedAccounts = []sdwan_schema.LinkedAccount{}
	} else {
		body.LinkedAccounts = make([]sdwan_schema.LinkedAccount, 0, len(plan.LinkedAccounts))
		for varLoopLinkedAccountsIndex, varLoopLinkedAccounts := range plan.LinkedAccounts {
			// add a new item
			body.LinkedAccounts = append(body.LinkedAccounts, sdwan_schema.LinkedAccount{})
			// copy_from_plan: body=body.LinkedAccounts[varLoopLinkedAccountsIndex] prefix=rsModel plan=varLoopLinkedAccounts properties=12
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Etag = Int64ValueOrNil(varLoopLinkedAccounts.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Schema = Int64ValueOrNil(varLoopLinkedAccounts.Schema)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Disabled = BoolValueOrNil(varLoopLinkedAccounts.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].DisabledReason = StringValueOrNil(varLoopLinkedAccounts.DisabledReason)
			// property: name=failed_login_attempts, type=INTEGER macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].FailedLoginAttempts = Int64ValueOrNil(varLoopLinkedAccounts.FailedLoginAttempts)
			// property: name=id, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Id = StringValueOrNil(varLoopLinkedAccounts.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Inactive = BoolValueOrNil(varLoopLinkedAccounts.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].InactiveReason = StringValueOrNil(varLoopLinkedAccounts.InactiveReason)
			// property: name=provider_key, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderKey = StringValueOrNil(varLoopLinkedAccounts.ProviderKey)
			// property: name=provider_value, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValue = StringValueOrNil(varLoopLinkedAccounts.ProviderValue)
			// property: name=provider_value_updated_on, type=INTEGER macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValueUpdatedOn = Int64ValueOrNil(varLoopLinkedAccounts.ProviderValueUpdatedOn)
			// property: name=region, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Region = StringValueOrNil(varLoopLinkedAccounts.Region)
		}
	}
	// property: name=migration_state, type=STRING macro=copy_from_plan
	body.MigrationState = StringValueOrNil(plan.MigrationState)
	// property: name=phone_numbers, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.PhoneNumbers == nil {
		body.PhoneNumbers = nil
	} else if len(plan.PhoneNumbers) == 0 {
		body.PhoneNumbers = []sdwan_schema.PhoneNumber{}
	} else {
		body.PhoneNumbers = make([]sdwan_schema.PhoneNumber, 0, len(plan.PhoneNumbers))
		for varLoopPhoneNumbersIndex, varLoopPhoneNumbers := range plan.PhoneNumbers {
			// add a new item
			body.PhoneNumbers = append(body.PhoneNumbers, sdwan_schema.PhoneNumber{})
			// copy_from_plan: body=body.PhoneNumbers[varLoopPhoneNumbersIndex] prefix=rsModel plan=varLoopPhoneNumbers properties=4
			// property: name=country_code, type=INTEGER macro=copy_from_plan
			body.PhoneNumbers[varLoopPhoneNumbersIndex].CountryCode = Int64ValueOrNil(varLoopPhoneNumbers.CountryCode)
			// property: name=local_extension, type=INTEGER macro=copy_from_plan
			body.PhoneNumbers[varLoopPhoneNumbersIndex].LocalExtension = Int64ValueOrNil(varLoopPhoneNumbers.LocalExtension)
			// property: name=number, type=INTEGER macro=copy_from_plan
			body.PhoneNumbers[varLoopPhoneNumbersIndex].Number = Int64ValueOrNil(varLoopPhoneNumbers.Number)
			// property: name=types, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPhoneNumbers.Types == nil {
				body.PhoneNumbers[varLoopPhoneNumbersIndex].Types = nil
			} else if len(varLoopPhoneNumbers.Types) == 0 {
				body.PhoneNumbers[varLoopPhoneNumbersIndex].Types = []sdwan_schema.Type{}
			} else {
				body.PhoneNumbers[varLoopPhoneNumbersIndex].Types = make([]sdwan_schema.Type, 0, len(varLoopPhoneNumbers.Types))
				for varLoopTypesIndex, varLoopTypes := range varLoopPhoneNumbers.Types {
					// add a new item
					body.PhoneNumbers[varLoopPhoneNumbersIndex].Types = append(body.PhoneNumbers[varLoopPhoneNumbersIndex].Types, sdwan_schema.Type{})
					// copy_from_plan: body=body.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex] prefix=rsModel plan=varLoopTypes properties=1
					// property: name=value, type=STRING macro=copy_from_plan
					body.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex].Value = StringValueOrNil(varLoopTypes.Value)
				}
			}
		}
	}
	// property: name=region, type=STRING macro=copy_from_plan
	body.Region = StringValueOrNil(plan.Region)
	// property: name=roles, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.Roles == nil {
		body.Roles = nil
	} else if len(plan.Roles) == 0 {
		body.Roles = []sdwan_schema.AuthRole{}
	} else {
		body.Roles = make([]sdwan_schema.AuthRole, 0, len(plan.Roles))
		for varLoopRolesIndex, varLoopRoles := range plan.Roles {
			// add a new item
			body.Roles = append(body.Roles, sdwan_schema.AuthRole{})
			// copy_from_plan: body=body.Roles[varLoopRolesIndex] prefix=rsModel plan=varLoopRoles properties=1
			// property: name=name, type=STRING macro=copy_from_plan
			body.Roles[varLoopRolesIndex].Name = StringValueOrNil(varLoopRoles.Name)
		}
	}
	// property: name=secondary_emails, type=ARRAY_REFERENCE macro=copy_from_plan
	if plan.SecondaryEmails == nil {
		body.SecondaryEmails = nil
	} else if len(plan.SecondaryEmails) == 0 {
		body.SecondaryEmails = []sdwan_schema.Email{}
	} else {
		body.SecondaryEmails = make([]sdwan_schema.Email, 0, len(plan.SecondaryEmails))
		for varLoopSecondaryEmailsIndex, varLoopSecondaryEmails := range plan.SecondaryEmails {
			// add a new item
			body.SecondaryEmails = append(body.SecondaryEmails, sdwan_schema.Email{})
			// copy_from_plan: body=body.SecondaryEmails[varLoopSecondaryEmailsIndex] prefix=rsModel plan=varLoopSecondaryEmails properties=1
			// property: name=email, type=STRING macro=copy_from_plan
			body.SecondaryEmails[varLoopSecondaryEmailsIndex].Email = StringValueOrNil(varLoopSecondaryEmails.Email)
		}
	}
	// property: name=settings, type=STRING macro=copy_from_plan
	body.Settings = StringValueOrNil(plan.Settings)

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct OperatorV2N2 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// inject overrides
	request_body_string, _ = sjson.Delete(request_body_string, "id")
	request_body_string, _ = sjson.Delete(request_body_string, "_etag")
	request_body_string, _ = sjson.Set(request_body_string, "_schema", 0)
	// copy pointer
	create_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, create_request)
	if create_request.ResponseErr != nil {
		tflog.Info(ctx, "create request failed for prismasdwan_operators", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_operators",
			"path":                        create_request.FinalPath,
		})
		tflog.Debug(ctx, "create request failed for prismasdwan_operators", map[string]any{
			"terraform_provider_function": "Create",
			"resource_name":               "prismasdwan_operators",
			"path":                        create_request.FinalPath,
			"request":                     create_request.ToString(),
		})
		resp.Diagnostics.AddError("error creating prismasdwan_operators", (*create_request.ResponseErr).Error())
		return false
	}

	// process http json path
	response_body_string := string(*create_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.OperatorV2N2
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to OperatorV2N2 in create", json_err.Error())
		return false
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return false
	}
	// ID Format: Id:Param1=Value1:Param2=Value2:...:ParamN=ValueN
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
		for p, v := range *create_request.PathParameters {
			idBuilder.WriteString(IdSeparator)
			idBuilder.WriteString(p)
			idBuilder.WriteString("=")
			idBuilder.WriteString(*v)
		}
	}
	// set the tf id for the resource created
	state.Tfid = types.StringValue(idBuilder.String())
	state.TfParameters = plan.TfParameters
	tflog.Info(ctx, "created prismasdwan_operators with ID", map[string]any{"tfid": state.Tfid.ValueString()})

	// Store the answer to state. schema=OperatorV2N2
	// copy_to_state: state=state prefix=rsModel ans=ans properties=30
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=addresses, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Addresses == nil {
		state.Addresses = nil
	} else if len(ans.Addresses) == 0 {
		state.Addresses = []rsModelAddress{}
	} else {
		state.Addresses = make([]rsModelAddress, 0, len(ans.Addresses))
		for varLoopAddressesIndex, varLoopAddresses := range ans.Addresses {
			// add a new item
			state.Addresses = append(state.Addresses, rsModelAddress{})
			// copy_to_state: state=state.Addresses[varLoopAddressesIndex] prefix=rsModel ans=varLoopAddresses properties=6
			// property: name=city, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].City = types.StringPointerValue(varLoopAddresses.City)
			// property: name=country, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Country = types.StringPointerValue(varLoopAddresses.Country)
			// property: name=post_code, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].PostCode = types.StringPointerValue(varLoopAddresses.PostCode)
			// property: name=state, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].State = types.StringPointerValue(varLoopAddresses.State)
			// property: name=street, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Street = types.StringPointerValue(varLoopAddresses.Street)
			// property: name=street2, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Street2 = types.StringPointerValue(varLoopAddresses.Street2)
		}
	}
	// property: name=custom_roles, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.CustomRoles == nil {
		state.CustomRoles = nil
	} else if len(ans.CustomRoles) == 0 {
		state.CustomRoles = []rsModelCustomRoleV2N1{}
	} else {
		state.CustomRoles = make([]rsModelCustomRoleV2N1, 0, len(ans.CustomRoles))
		for varLoopCustomRolesIndex, varLoopCustomRoles := range ans.CustomRoles {
			// add a new item
			state.CustomRoles = append(state.CustomRoles, rsModelCustomRoleV2N1{})
			// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex] prefix=rsModel ans=varLoopCustomRoles properties=15
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Etag = types.Int64PointerValue(varLoopCustomRoles.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Schema = types.Int64PointerValue(varLoopCustomRoles.Schema)
			// property: name=custom_permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.CustomPermissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = nil
			} else if len(varLoopCustomRoles.CustomPermissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = []rsModelCustomPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = make([]rsModelCustomPermission, 0, len(varLoopCustomRoles.CustomPermissions))
				for varLoopCustomPermissionsIndex, varLoopCustomPermissions := range varLoopCustomRoles.CustomPermissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = append(state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions, rsModelCustomPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex] prefix=rsModel ans=varLoopCustomPermissions properties=12
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Etag = types.Int64PointerValue(varLoopCustomPermissions.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Schema = types.Int64PointerValue(varLoopCustomPermissions.Schema)
					// property: name=allowed_after_ms, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedAfterMs = types.Int64PointerValue(varLoopCustomPermissions.AllowedAfterMs)
					// property: name=allowed_before_ms, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedBeforeMs = types.Int64PointerValue(varLoopCustomPermissions.AllowedBeforeMs)
					// property: name=disabled, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Disabled = types.BoolPointerValue(varLoopCustomPermissions.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisabledReason = types.StringPointerValue(varLoopCustomPermissions.DisabledReason)
					// property: name=disallow_permission, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisallowPermission = types.BoolPointerValue(varLoopCustomPermissions.DisallowPermission)
					// property: name=id, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Id = types.StringPointerValue(varLoopCustomPermissions.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Inactive = types.BoolPointerValue(varLoopCustomPermissions.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].InactiveReason = types.StringPointerValue(varLoopCustomPermissions.InactiveReason)
					// property: name=region, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Region = types.StringPointerValue(varLoopCustomPermissions.Region)
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Value = types.StringPointerValue(varLoopCustomPermissions.Value)
				}
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Description = types.StringPointerValue(varLoopCustomRoles.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Disabled = types.BoolPointerValue(varLoopCustomRoles.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].DisabledReason = types.StringPointerValue(varLoopCustomRoles.DisabledReason)
			// property: name=disallow_permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.DisallowPermissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = nil
			} else if len(varLoopCustomRoles.DisallowPermissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = []rsModelAuthPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = make([]rsModelAuthPermission, 0, len(varLoopCustomRoles.DisallowPermissions))
				for varLoopDisallowPermissionsIndex, varLoopDisallowPermissions := range varLoopCustomRoles.DisallowPermissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = append(state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions, rsModelAuthPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex] prefix=rsModel ans=varLoopDisallowPermissions properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex].Value = types.StringPointerValue(varLoopDisallowPermissions.Value)
				}
			}
			// property: name=id, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Id = types.StringPointerValue(varLoopCustomRoles.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Inactive = types.BoolPointerValue(varLoopCustomRoles.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].InactiveReason = types.StringPointerValue(varLoopCustomRoles.InactiveReason)
			// property: name=is_system_owned, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].IsSystemOwned = types.BoolPointerValue(varLoopCustomRoles.IsSystemOwned)
			// property: name=name, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Name = types.StringPointerValue(varLoopCustomRoles.Name)
			// property: name=permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.Permissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = nil
			} else if len(varLoopCustomRoles.Permissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = []rsModelAuthPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = make([]rsModelAuthPermission, 0, len(varLoopCustomRoles.Permissions))
				for varLoopPermissionsIndex, varLoopPermissions := range varLoopCustomRoles.Permissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].Permissions = append(state.CustomRoles[varLoopCustomRolesIndex].Permissions, rsModelAuthPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex] prefix=rsModel ans=varLoopPermissions properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex].Value = types.StringPointerValue(varLoopPermissions.Value)
				}
			}
			// property: name=region, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Region = types.StringPointerValue(varLoopCustomRoles.Region)
			// property: name=roles, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.Roles == nil {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = nil
			} else if len(varLoopCustomRoles.Roles) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = []rsModelAuthRole{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = make([]rsModelAuthRole, 0, len(varLoopCustomRoles.Roles))
				for varLoopRolesIndex, varLoopRoles := range varLoopCustomRoles.Roles {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].Roles = append(state.CustomRoles[varLoopCustomRolesIndex].Roles, rsModelAuthRole{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex] prefix=rsModel ans=varLoopRoles properties=1
					// property: name=name, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex].Name = types.StringPointerValue(varLoopRoles.Name)
				}
			}
		}
	}
	// property: name=disable_idp_login, type=BOOLEAN macro=copy_to_state
	state.DisableIdpLogin = types.BoolPointerValue(ans.DisableIdpLogin)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=email, type=STRING macro=copy_to_state
	state.Email = types.StringPointerValue(ans.Email)
	// property: name=email_iam, type=STRING macro=copy_to_state
	state.EmailIam = types.StringPointerValue(ans.EmailIam)
	// property: name=email_validated, type=BOOLEAN macro=copy_to_state
	state.EmailValidated = types.BoolPointerValue(ans.EmailValidated)
	// property: name=enable_session_ip_lock, type=BOOLEAN macro=copy_to_state
	state.EnableSessionIpLock = types.BoolPointerValue(ans.EnableSessionIpLock)
	// property: name=first_name, type=STRING macro=copy_to_state
	state.FirstName = types.StringPointerValue(ans.FirstName)
	// property: name=from_esp, type=BOOLEAN macro=copy_to_state
	state.FromEsp = types.BoolPointerValue(ans.FromEsp)
	// property: name=from_esp_name, type=STRING macro=copy_to_state
	state.FromEspName = types.StringPointerValue(ans.FromEspName)
	// property: name=from_esp_tenant_id, type=STRING macro=copy_to_state
	state.FromEspTenantId = types.StringPointerValue(ans.FromEspTenantId)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=ipv4_list, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Ipv4List == nil {
		state.Ipv4List = nil
	} else if len(ans.Ipv4List) == 0 {
		state.Ipv4List = []rsModelIPv4Address{}
	} else {
		state.Ipv4List = make([]rsModelIPv4Address, 0, len(ans.Ipv4List))
		for varLoopIpv4ListIndex, varLoopIpv4List := range ans.Ipv4List {
			// add a new item
			state.Ipv4List = append(state.Ipv4List, rsModelIPv4Address{})
			// copy_to_state: state=state.Ipv4List[varLoopIpv4ListIndex] prefix=rsModel ans=varLoopIpv4List properties=1
			// property: name=ipv4, type=STRING macro=copy_to_state
			state.Ipv4List[varLoopIpv4ListIndex].Ipv4 = types.StringPointerValue(varLoopIpv4List.Ipv4)
		}
	}
	// property: name=is_locked, type=BOOLEAN macro=copy_to_state
	state.IsLocked = types.BoolPointerValue(ans.IsLocked)
	// property: name=is_system_owned, type=BOOLEAN macro=copy_to_state
	state.IsSystemOwned = types.BoolPointerValue(ans.IsSystemOwned)
	// property: name=last_login, type=STRING macro=copy_to_state
	state.LastLogin = types.StringPointerValue(ans.LastLogin)
	// property: name=last_name, type=STRING macro=copy_to_state
	state.LastName = types.StringPointerValue(ans.LastName)
	// property: name=linked_accounts, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.LinkedAccounts == nil {
		state.LinkedAccounts = nil
	} else if len(ans.LinkedAccounts) == 0 {
		state.LinkedAccounts = []rsModelLinkedAccount{}
	} else {
		state.LinkedAccounts = make([]rsModelLinkedAccount, 0, len(ans.LinkedAccounts))
		for varLoopLinkedAccountsIndex, varLoopLinkedAccounts := range ans.LinkedAccounts {
			// add a new item
			state.LinkedAccounts = append(state.LinkedAccounts, rsModelLinkedAccount{})
			// copy_to_state: state=state.LinkedAccounts[varLoopLinkedAccountsIndex] prefix=rsModel ans=varLoopLinkedAccounts properties=12
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Etag = types.Int64PointerValue(varLoopLinkedAccounts.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Schema = types.Int64PointerValue(varLoopLinkedAccounts.Schema)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Disabled = types.BoolPointerValue(varLoopLinkedAccounts.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].DisabledReason = types.StringPointerValue(varLoopLinkedAccounts.DisabledReason)
			// property: name=failed_login_attempts, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].FailedLoginAttempts = types.Int64PointerValue(varLoopLinkedAccounts.FailedLoginAttempts)
			// property: name=id, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Id = types.StringPointerValue(varLoopLinkedAccounts.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Inactive = types.BoolPointerValue(varLoopLinkedAccounts.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].InactiveReason = types.StringPointerValue(varLoopLinkedAccounts.InactiveReason)
			// property: name=provider_key, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderKey = types.StringPointerValue(varLoopLinkedAccounts.ProviderKey)
			// property: name=provider_value, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValue = types.StringPointerValue(varLoopLinkedAccounts.ProviderValue)
			// property: name=provider_value_updated_on, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValueUpdatedOn = types.Int64PointerValue(varLoopLinkedAccounts.ProviderValueUpdatedOn)
			// property: name=region, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Region = types.StringPointerValue(varLoopLinkedAccounts.Region)
		}
	}
	// property: name=migration_state, type=STRING macro=copy_to_state
	state.MigrationState = types.StringPointerValue(ans.MigrationState)
	// property: name=phone_numbers, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PhoneNumbers == nil {
		state.PhoneNumbers = nil
	} else if len(ans.PhoneNumbers) == 0 {
		state.PhoneNumbers = []rsModelPhoneNumber{}
	} else {
		state.PhoneNumbers = make([]rsModelPhoneNumber, 0, len(ans.PhoneNumbers))
		for varLoopPhoneNumbersIndex, varLoopPhoneNumbers := range ans.PhoneNumbers {
			// add a new item
			state.PhoneNumbers = append(state.PhoneNumbers, rsModelPhoneNumber{})
			// copy_to_state: state=state.PhoneNumbers[varLoopPhoneNumbersIndex] prefix=rsModel ans=varLoopPhoneNumbers properties=4
			// property: name=country_code, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].CountryCode = types.Int64PointerValue(varLoopPhoneNumbers.CountryCode)
			// property: name=local_extension, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].LocalExtension = types.Int64PointerValue(varLoopPhoneNumbers.LocalExtension)
			// property: name=number, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].Number = types.Int64PointerValue(varLoopPhoneNumbers.Number)
			// property: name=types, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPhoneNumbers.Types == nil {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = nil
			} else if len(varLoopPhoneNumbers.Types) == 0 {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = []rsModelType{}
			} else {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = make([]rsModelType, 0, len(varLoopPhoneNumbers.Types))
				for varLoopTypesIndex, varLoopTypes := range varLoopPhoneNumbers.Types {
					// add a new item
					state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = append(state.PhoneNumbers[varLoopPhoneNumbersIndex].Types, rsModelType{})
					// copy_to_state: state=state.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex] prefix=rsModel ans=varLoopTypes properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex].Value = types.StringPointerValue(varLoopTypes.Value)
				}
			}
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=roles, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Roles == nil {
		state.Roles = nil
	} else if len(ans.Roles) == 0 {
		state.Roles = []rsModelAuthRole{}
	} else {
		state.Roles = make([]rsModelAuthRole, 0, len(ans.Roles))
		for varLoopRolesIndex, varLoopRoles := range ans.Roles {
			// add a new item
			state.Roles = append(state.Roles, rsModelAuthRole{})
			// copy_to_state: state=state.Roles[varLoopRolesIndex] prefix=rsModel ans=varLoopRoles properties=1
			// property: name=name, type=STRING macro=copy_to_state
			state.Roles[varLoopRolesIndex].Name = types.StringPointerValue(varLoopRoles.Name)
		}
	}
	// property: name=secondary_emails, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.SecondaryEmails == nil {
		state.SecondaryEmails = nil
	} else if len(ans.SecondaryEmails) == 0 {
		state.SecondaryEmails = []rsModelEmail{}
	} else {
		state.SecondaryEmails = make([]rsModelEmail, 0, len(ans.SecondaryEmails))
		for varLoopSecondaryEmailsIndex, varLoopSecondaryEmails := range ans.SecondaryEmails {
			// add a new item
			state.SecondaryEmails = append(state.SecondaryEmails, rsModelEmail{})
			// copy_to_state: state=state.SecondaryEmails[varLoopSecondaryEmailsIndex] prefix=rsModel ans=varLoopSecondaryEmails properties=1
			// property: name=email, type=STRING macro=copy_to_state
			state.SecondaryEmails[varLoopSecondaryEmailsIndex].Email = types.StringPointerValue(varLoopSecondaryEmails.Email)
		}
	}
	// property: name=settings, type=STRING macro=copy_to_state
	state.Settings = types.StringPointerValue(ans.Settings)
	return true
}

func (r *operatorsResource) doGet(ctx context.Context, state *rsModelOperatorV2N2, savestate *rsModelOperatorV2N2, State *tfsdk.State, resp *resource.ReadResponse) bool {
	// Basic logging.
	tfid := savestate.Tfid.ValueString()
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "prismasdwan_operators",
		"tfid":                        tfid,
	})

	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_operators ID format", "Expected 1 tokens")
		return false
	}

	// Prepare to read the config.
	svc := sdwan_client.NewClient(r.client)

	// Prepare input for the API endpoint.
	read_request := &sdwan_client.SdwanClientRequestResponse{}
	read_request.Method = "GET"
	read_request.Path = "/sdwan/v2.2/api/operators/{operator_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, savestate.TfParameters)
	read_request.PathParameters = &params
	// add last parameter as ObjectID
	(*read_request.PathParameters)["operator_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*read_request.PathParameters)[param[0]] = &param[1]
	}

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, read_request)
	if read_request.ResponseErr != nil {
		if IsObjectNotFound(*read_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(read_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "read request failed for prismasdwan_operators", map[string]any{
				"terraform_provider_function": "Read",
				"resource_name":               "prismasdwan_operators",
				"path":                        read_request.FinalPath,
				"request":                     read_request.ToString(),
			})
			resp.Diagnostics.AddError("error reading prismasdwan_operators from sdwan servers", (*read_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*read_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// Store the answer to state. schema=OperatorV2N2
	state.Tfid = savestate.Tfid
	// copy parameters from savestate as they are
	if savestate.TfParameters.IsNull() {
		state.TfParameters = types.MapNull(types.StringType)
	} else {
		state.TfParameters = savestate.TfParameters
	}
	// start copying attributes
	var ans sdwan_schema.OperatorV2N2
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to OperatorV2N2 in read", json_err.Error())
		return false
	}
	// lets copy all items into state
	// copy_to_state: state=state prefix=rsModel ans=ans properties=30
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=addresses, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Addresses == nil {
		state.Addresses = nil
	} else if len(ans.Addresses) == 0 {
		state.Addresses = []rsModelAddress{}
	} else {
		state.Addresses = make([]rsModelAddress, 0, len(ans.Addresses))
		for varLoopAddressesIndex, varLoopAddresses := range ans.Addresses {
			// add a new item
			state.Addresses = append(state.Addresses, rsModelAddress{})
			// copy_to_state: state=state.Addresses[varLoopAddressesIndex] prefix=rsModel ans=varLoopAddresses properties=6
			// property: name=city, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].City = types.StringPointerValue(varLoopAddresses.City)
			// property: name=country, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Country = types.StringPointerValue(varLoopAddresses.Country)
			// property: name=post_code, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].PostCode = types.StringPointerValue(varLoopAddresses.PostCode)
			// property: name=state, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].State = types.StringPointerValue(varLoopAddresses.State)
			// property: name=street, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Street = types.StringPointerValue(varLoopAddresses.Street)
			// property: name=street2, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Street2 = types.StringPointerValue(varLoopAddresses.Street2)
		}
	}
	// property: name=custom_roles, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.CustomRoles == nil {
		state.CustomRoles = nil
	} else if len(ans.CustomRoles) == 0 {
		state.CustomRoles = []rsModelCustomRoleV2N1{}
	} else {
		state.CustomRoles = make([]rsModelCustomRoleV2N1, 0, len(ans.CustomRoles))
		for varLoopCustomRolesIndex, varLoopCustomRoles := range ans.CustomRoles {
			// add a new item
			state.CustomRoles = append(state.CustomRoles, rsModelCustomRoleV2N1{})
			// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex] prefix=rsModel ans=varLoopCustomRoles properties=15
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Etag = types.Int64PointerValue(varLoopCustomRoles.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Schema = types.Int64PointerValue(varLoopCustomRoles.Schema)
			// property: name=custom_permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.CustomPermissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = nil
			} else if len(varLoopCustomRoles.CustomPermissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = []rsModelCustomPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = make([]rsModelCustomPermission, 0, len(varLoopCustomRoles.CustomPermissions))
				for varLoopCustomPermissionsIndex, varLoopCustomPermissions := range varLoopCustomRoles.CustomPermissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = append(state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions, rsModelCustomPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex] prefix=rsModel ans=varLoopCustomPermissions properties=12
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Etag = types.Int64PointerValue(varLoopCustomPermissions.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Schema = types.Int64PointerValue(varLoopCustomPermissions.Schema)
					// property: name=allowed_after_ms, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedAfterMs = types.Int64PointerValue(varLoopCustomPermissions.AllowedAfterMs)
					// property: name=allowed_before_ms, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedBeforeMs = types.Int64PointerValue(varLoopCustomPermissions.AllowedBeforeMs)
					// property: name=disabled, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Disabled = types.BoolPointerValue(varLoopCustomPermissions.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisabledReason = types.StringPointerValue(varLoopCustomPermissions.DisabledReason)
					// property: name=disallow_permission, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisallowPermission = types.BoolPointerValue(varLoopCustomPermissions.DisallowPermission)
					// property: name=id, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Id = types.StringPointerValue(varLoopCustomPermissions.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Inactive = types.BoolPointerValue(varLoopCustomPermissions.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].InactiveReason = types.StringPointerValue(varLoopCustomPermissions.InactiveReason)
					// property: name=region, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Region = types.StringPointerValue(varLoopCustomPermissions.Region)
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Value = types.StringPointerValue(varLoopCustomPermissions.Value)
				}
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Description = types.StringPointerValue(varLoopCustomRoles.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Disabled = types.BoolPointerValue(varLoopCustomRoles.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].DisabledReason = types.StringPointerValue(varLoopCustomRoles.DisabledReason)
			// property: name=disallow_permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.DisallowPermissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = nil
			} else if len(varLoopCustomRoles.DisallowPermissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = []rsModelAuthPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = make([]rsModelAuthPermission, 0, len(varLoopCustomRoles.DisallowPermissions))
				for varLoopDisallowPermissionsIndex, varLoopDisallowPermissions := range varLoopCustomRoles.DisallowPermissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = append(state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions, rsModelAuthPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex] prefix=rsModel ans=varLoopDisallowPermissions properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex].Value = types.StringPointerValue(varLoopDisallowPermissions.Value)
				}
			}
			// property: name=id, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Id = types.StringPointerValue(varLoopCustomRoles.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Inactive = types.BoolPointerValue(varLoopCustomRoles.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].InactiveReason = types.StringPointerValue(varLoopCustomRoles.InactiveReason)
			// property: name=is_system_owned, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].IsSystemOwned = types.BoolPointerValue(varLoopCustomRoles.IsSystemOwned)
			// property: name=name, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Name = types.StringPointerValue(varLoopCustomRoles.Name)
			// property: name=permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.Permissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = nil
			} else if len(varLoopCustomRoles.Permissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = []rsModelAuthPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = make([]rsModelAuthPermission, 0, len(varLoopCustomRoles.Permissions))
				for varLoopPermissionsIndex, varLoopPermissions := range varLoopCustomRoles.Permissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].Permissions = append(state.CustomRoles[varLoopCustomRolesIndex].Permissions, rsModelAuthPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex] prefix=rsModel ans=varLoopPermissions properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex].Value = types.StringPointerValue(varLoopPermissions.Value)
				}
			}
			// property: name=region, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Region = types.StringPointerValue(varLoopCustomRoles.Region)
			// property: name=roles, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.Roles == nil {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = nil
			} else if len(varLoopCustomRoles.Roles) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = []rsModelAuthRole{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = make([]rsModelAuthRole, 0, len(varLoopCustomRoles.Roles))
				for varLoopRolesIndex, varLoopRoles := range varLoopCustomRoles.Roles {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].Roles = append(state.CustomRoles[varLoopCustomRolesIndex].Roles, rsModelAuthRole{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex] prefix=rsModel ans=varLoopRoles properties=1
					// property: name=name, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex].Name = types.StringPointerValue(varLoopRoles.Name)
				}
			}
		}
	}
	// property: name=disable_idp_login, type=BOOLEAN macro=copy_to_state
	state.DisableIdpLogin = types.BoolPointerValue(ans.DisableIdpLogin)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=email, type=STRING macro=copy_to_state
	state.Email = types.StringPointerValue(ans.Email)
	// property: name=email_iam, type=STRING macro=copy_to_state
	state.EmailIam = types.StringPointerValue(ans.EmailIam)
	// property: name=email_validated, type=BOOLEAN macro=copy_to_state
	state.EmailValidated = types.BoolPointerValue(ans.EmailValidated)
	// property: name=enable_session_ip_lock, type=BOOLEAN macro=copy_to_state
	state.EnableSessionIpLock = types.BoolPointerValue(ans.EnableSessionIpLock)
	// property: name=first_name, type=STRING macro=copy_to_state
	state.FirstName = types.StringPointerValue(ans.FirstName)
	// property: name=from_esp, type=BOOLEAN macro=copy_to_state
	state.FromEsp = types.BoolPointerValue(ans.FromEsp)
	// property: name=from_esp_name, type=STRING macro=copy_to_state
	state.FromEspName = types.StringPointerValue(ans.FromEspName)
	// property: name=from_esp_tenant_id, type=STRING macro=copy_to_state
	state.FromEspTenantId = types.StringPointerValue(ans.FromEspTenantId)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=ipv4_list, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Ipv4List == nil {
		state.Ipv4List = nil
	} else if len(ans.Ipv4List) == 0 {
		state.Ipv4List = []rsModelIPv4Address{}
	} else {
		state.Ipv4List = make([]rsModelIPv4Address, 0, len(ans.Ipv4List))
		for varLoopIpv4ListIndex, varLoopIpv4List := range ans.Ipv4List {
			// add a new item
			state.Ipv4List = append(state.Ipv4List, rsModelIPv4Address{})
			// copy_to_state: state=state.Ipv4List[varLoopIpv4ListIndex] prefix=rsModel ans=varLoopIpv4List properties=1
			// property: name=ipv4, type=STRING macro=copy_to_state
			state.Ipv4List[varLoopIpv4ListIndex].Ipv4 = types.StringPointerValue(varLoopIpv4List.Ipv4)
		}
	}
	// property: name=is_locked, type=BOOLEAN macro=copy_to_state
	state.IsLocked = types.BoolPointerValue(ans.IsLocked)
	// property: name=is_system_owned, type=BOOLEAN macro=copy_to_state
	state.IsSystemOwned = types.BoolPointerValue(ans.IsSystemOwned)
	// property: name=last_login, type=STRING macro=copy_to_state
	state.LastLogin = types.StringPointerValue(ans.LastLogin)
	// property: name=last_name, type=STRING macro=copy_to_state
	state.LastName = types.StringPointerValue(ans.LastName)
	// property: name=linked_accounts, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.LinkedAccounts == nil {
		state.LinkedAccounts = nil
	} else if len(ans.LinkedAccounts) == 0 {
		state.LinkedAccounts = []rsModelLinkedAccount{}
	} else {
		state.LinkedAccounts = make([]rsModelLinkedAccount, 0, len(ans.LinkedAccounts))
		for varLoopLinkedAccountsIndex, varLoopLinkedAccounts := range ans.LinkedAccounts {
			// add a new item
			state.LinkedAccounts = append(state.LinkedAccounts, rsModelLinkedAccount{})
			// copy_to_state: state=state.LinkedAccounts[varLoopLinkedAccountsIndex] prefix=rsModel ans=varLoopLinkedAccounts properties=12
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Etag = types.Int64PointerValue(varLoopLinkedAccounts.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Schema = types.Int64PointerValue(varLoopLinkedAccounts.Schema)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Disabled = types.BoolPointerValue(varLoopLinkedAccounts.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].DisabledReason = types.StringPointerValue(varLoopLinkedAccounts.DisabledReason)
			// property: name=failed_login_attempts, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].FailedLoginAttempts = types.Int64PointerValue(varLoopLinkedAccounts.FailedLoginAttempts)
			// property: name=id, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Id = types.StringPointerValue(varLoopLinkedAccounts.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Inactive = types.BoolPointerValue(varLoopLinkedAccounts.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].InactiveReason = types.StringPointerValue(varLoopLinkedAccounts.InactiveReason)
			// property: name=provider_key, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderKey = types.StringPointerValue(varLoopLinkedAccounts.ProviderKey)
			// property: name=provider_value, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValue = types.StringPointerValue(varLoopLinkedAccounts.ProviderValue)
			// property: name=provider_value_updated_on, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValueUpdatedOn = types.Int64PointerValue(varLoopLinkedAccounts.ProviderValueUpdatedOn)
			// property: name=region, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Region = types.StringPointerValue(varLoopLinkedAccounts.Region)
		}
	}
	// property: name=migration_state, type=STRING macro=copy_to_state
	state.MigrationState = types.StringPointerValue(ans.MigrationState)
	// property: name=phone_numbers, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PhoneNumbers == nil {
		state.PhoneNumbers = nil
	} else if len(ans.PhoneNumbers) == 0 {
		state.PhoneNumbers = []rsModelPhoneNumber{}
	} else {
		state.PhoneNumbers = make([]rsModelPhoneNumber, 0, len(ans.PhoneNumbers))
		for varLoopPhoneNumbersIndex, varLoopPhoneNumbers := range ans.PhoneNumbers {
			// add a new item
			state.PhoneNumbers = append(state.PhoneNumbers, rsModelPhoneNumber{})
			// copy_to_state: state=state.PhoneNumbers[varLoopPhoneNumbersIndex] prefix=rsModel ans=varLoopPhoneNumbers properties=4
			// property: name=country_code, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].CountryCode = types.Int64PointerValue(varLoopPhoneNumbers.CountryCode)
			// property: name=local_extension, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].LocalExtension = types.Int64PointerValue(varLoopPhoneNumbers.LocalExtension)
			// property: name=number, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].Number = types.Int64PointerValue(varLoopPhoneNumbers.Number)
			// property: name=types, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPhoneNumbers.Types == nil {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = nil
			} else if len(varLoopPhoneNumbers.Types) == 0 {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = []rsModelType{}
			} else {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = make([]rsModelType, 0, len(varLoopPhoneNumbers.Types))
				for varLoopTypesIndex, varLoopTypes := range varLoopPhoneNumbers.Types {
					// add a new item
					state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = append(state.PhoneNumbers[varLoopPhoneNumbersIndex].Types, rsModelType{})
					// copy_to_state: state=state.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex] prefix=rsModel ans=varLoopTypes properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex].Value = types.StringPointerValue(varLoopTypes.Value)
				}
			}
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=roles, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Roles == nil {
		state.Roles = nil
	} else if len(ans.Roles) == 0 {
		state.Roles = []rsModelAuthRole{}
	} else {
		state.Roles = make([]rsModelAuthRole, 0, len(ans.Roles))
		for varLoopRolesIndex, varLoopRoles := range ans.Roles {
			// add a new item
			state.Roles = append(state.Roles, rsModelAuthRole{})
			// copy_to_state: state=state.Roles[varLoopRolesIndex] prefix=rsModel ans=varLoopRoles properties=1
			// property: name=name, type=STRING macro=copy_to_state
			state.Roles[varLoopRolesIndex].Name = types.StringPointerValue(varLoopRoles.Name)
		}
	}
	// property: name=secondary_emails, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.SecondaryEmails == nil {
		state.SecondaryEmails = nil
	} else if len(ans.SecondaryEmails) == 0 {
		state.SecondaryEmails = []rsModelEmail{}
	} else {
		state.SecondaryEmails = make([]rsModelEmail, 0, len(ans.SecondaryEmails))
		for varLoopSecondaryEmailsIndex, varLoopSecondaryEmails := range ans.SecondaryEmails {
			// add a new item
			state.SecondaryEmails = append(state.SecondaryEmails, rsModelEmail{})
			// copy_to_state: state=state.SecondaryEmails[varLoopSecondaryEmailsIndex] prefix=rsModel ans=varLoopSecondaryEmails properties=1
			// property: name=email, type=STRING macro=copy_to_state
			state.SecondaryEmails[varLoopSecondaryEmailsIndex].Email = types.StringPointerValue(varLoopSecondaryEmails.Email)
		}
	}
	// property: name=settings, type=STRING macro=copy_to_state
	state.Settings = types.StringPointerValue(ans.Settings)
	return true
}

func (r *operatorsResource) doPut(ctx context.Context, plan *rsModelOperatorV2N2, state *rsModelOperatorV2N2, State *tfsdk.State, resp *resource.UpdateResponse) bool {
	state_tfid := state.Tfid.ValueString()
	plan_tfid := plan.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "prismasdwan_operators",
		"state_tfid":                  state_tfid,
		"plan_tfid":                   plan_tfid,
	})

	// both TFID must be SAME!!!
	if state_tfid != plan_tfid {
		resp.Diagnostics.AddError("error updating prismasdwan_operators", "state and plan TFID do not match")
		return false
	}

	// split tokens
	tokens := strings.Split(state_tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_operators ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	put_request := &sdwan_client.SdwanClientRequestResponse{}
	put_request.Method = "PUT"
	put_request.Path = "/sdwan/v2.2/api/operators/{operator_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	put_request.PathParameters = &params
	// add last parameter as ObjectID
	(*put_request.PathParameters)["operator_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*put_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// prepare request from state
	var body = &sdwan_schema.OperatorV2N2{}

	// now we create the JSON request from the state/plan created by TF
	// below copy code generated from macro copy_from_plan_or_state
	// copy_from_plan_or_state: body=body prefix=rsModel state=state plan=plan properties=30
	// property: name=_etag, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Etag = ValueInt64PointerFromPlanOrState(plan.Etag, state.Etag)
	} else {
		body.Etag = Int64ValueOrNil(plan.Etag)
	}
	// property: name=_schema, type=INTEGER macro=copy_from_plan_or_state
	if state != nil {
		body.Schema = ValueInt64PointerFromPlanOrState(plan.Schema, state.Schema)
	} else {
		body.Schema = Int64ValueOrNil(plan.Schema)
	}
	// property: name=addresses, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.Addresses == nil && (state == nil || state.Addresses == nil) {
		body.Addresses = nil
	} else if len(plan.Addresses) == 0 && (state == nil || len(state.Addresses) == 0) {
		body.Addresses = []sdwan_schema.Address{}
	} else if len(plan.Addresses) != 0 || (state != nil && len(state.Addresses) != 0) {
		AddressesToUse := plan.Addresses
		if len(plan.Addresses) == 0 {
			AddressesToUse = state.Addresses
		}
		body.Addresses = make([]sdwan_schema.Address, 0, len(AddressesToUse))
		for varLoopAddressesIndex, varLoopAddresses := range AddressesToUse {
			// add a new item
			body.Addresses = append(body.Addresses, sdwan_schema.Address{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.Addresses[varLoopAddressesIndex] prefix=rsModel plan=varLoopAddresses properties=6
			// property: name=city, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].City = StringValueOrNil(varLoopAddresses.City)
			// property: name=country, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].Country = StringValueOrNil(varLoopAddresses.Country)
			// property: name=post_code, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].PostCode = StringValueOrNil(varLoopAddresses.PostCode)
			// property: name=state, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].State = StringValueOrNil(varLoopAddresses.State)
			// property: name=street, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].Street = StringValueOrNil(varLoopAddresses.Street)
			// property: name=street2, type=STRING macro=copy_from_plan
			body.Addresses[varLoopAddressesIndex].Street2 = StringValueOrNil(varLoopAddresses.Street2)
		}
	}
	// property: name=custom_roles, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.CustomRoles == nil && (state == nil || state.CustomRoles == nil) {
		body.CustomRoles = nil
	} else if len(plan.CustomRoles) == 0 && (state == nil || len(state.CustomRoles) == 0) {
		body.CustomRoles = []sdwan_schema.CustomRoleV2N1{}
	} else if len(plan.CustomRoles) != 0 || (state != nil && len(state.CustomRoles) != 0) {
		CustomRolesToUse := plan.CustomRoles
		if len(plan.CustomRoles) == 0 {
			CustomRolesToUse = state.CustomRoles
		}
		body.CustomRoles = make([]sdwan_schema.CustomRoleV2N1, 0, len(CustomRolesToUse))
		for varLoopCustomRolesIndex, varLoopCustomRoles := range CustomRolesToUse {
			// add a new item
			body.CustomRoles = append(body.CustomRoles, sdwan_schema.CustomRoleV2N1{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.CustomRoles[varLoopCustomRolesIndex] prefix=rsModel plan=varLoopCustomRoles properties=15
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Etag = Int64ValueOrNil(varLoopCustomRoles.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Schema = Int64ValueOrNil(varLoopCustomRoles.Schema)
			// property: name=custom_permissions, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopCustomRoles.CustomPermissions == nil {
				body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = nil
			} else if len(varLoopCustomRoles.CustomPermissions) == 0 {
				body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = []sdwan_schema.CustomPermission{}
			} else {
				body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = make([]sdwan_schema.CustomPermission, 0, len(varLoopCustomRoles.CustomPermissions))
				for varLoopCustomPermissionsIndex, varLoopCustomPermissions := range varLoopCustomRoles.CustomPermissions {
					// add a new item
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = append(body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions, sdwan_schema.CustomPermission{})
					// copy_from_plan: body=body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex] prefix=rsModel plan=varLoopCustomPermissions properties=12
					// property: name=_etag, type=INTEGER macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Etag = Int64ValueOrNil(varLoopCustomPermissions.Etag)
					// property: name=_schema, type=INTEGER macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Schema = Int64ValueOrNil(varLoopCustomPermissions.Schema)
					// property: name=allowed_after_ms, type=INTEGER macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedAfterMs = Int64ValueOrNil(varLoopCustomPermissions.AllowedAfterMs)
					// property: name=allowed_before_ms, type=INTEGER macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedBeforeMs = Int64ValueOrNil(varLoopCustomPermissions.AllowedBeforeMs)
					// property: name=disabled, type=BOOLEAN macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Disabled = BoolValueOrNil(varLoopCustomPermissions.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisabledReason = StringValueOrNil(varLoopCustomPermissions.DisabledReason)
					// property: name=disallow_permission, type=BOOLEAN macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisallowPermission = BoolValueOrNil(varLoopCustomPermissions.DisallowPermission)
					// property: name=id, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Id = StringValueOrNil(varLoopCustomPermissions.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Inactive = BoolValueOrNil(varLoopCustomPermissions.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].InactiveReason = StringValueOrNil(varLoopCustomPermissions.InactiveReason)
					// property: name=region, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Region = StringValueOrNil(varLoopCustomPermissions.Region)
					// property: name=value, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Value = StringValueOrNil(varLoopCustomPermissions.Value)
				}
			}
			// property: name=description, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Description = StringValueOrNil(varLoopCustomRoles.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Disabled = BoolValueOrNil(varLoopCustomRoles.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].DisabledReason = StringValueOrNil(varLoopCustomRoles.DisabledReason)
			// property: name=disallow_permissions, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopCustomRoles.DisallowPermissions == nil {
				body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = nil
			} else if len(varLoopCustomRoles.DisallowPermissions) == 0 {
				body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = []sdwan_schema.AuthPermission{}
			} else {
				body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = make([]sdwan_schema.AuthPermission, 0, len(varLoopCustomRoles.DisallowPermissions))
				for varLoopDisallowPermissionsIndex, varLoopDisallowPermissions := range varLoopCustomRoles.DisallowPermissions {
					// add a new item
					body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = append(body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions, sdwan_schema.AuthPermission{})
					// copy_from_plan: body=body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex] prefix=rsModel plan=varLoopDisallowPermissions properties=1
					// property: name=value, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex].Value = StringValueOrNil(varLoopDisallowPermissions.Value)
				}
			}
			// property: name=id, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Id = StringValueOrNil(varLoopCustomRoles.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Inactive = BoolValueOrNil(varLoopCustomRoles.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].InactiveReason = StringValueOrNil(varLoopCustomRoles.InactiveReason)
			// property: name=is_system_owned, type=BOOLEAN macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].IsSystemOwned = BoolValueOrNil(varLoopCustomRoles.IsSystemOwned)
			// property: name=name, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Name = StringValueOrNil(varLoopCustomRoles.Name)
			// property: name=permissions, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopCustomRoles.Permissions == nil {
				body.CustomRoles[varLoopCustomRolesIndex].Permissions = nil
			} else if len(varLoopCustomRoles.Permissions) == 0 {
				body.CustomRoles[varLoopCustomRolesIndex].Permissions = []sdwan_schema.AuthPermission{}
			} else {
				body.CustomRoles[varLoopCustomRolesIndex].Permissions = make([]sdwan_schema.AuthPermission, 0, len(varLoopCustomRoles.Permissions))
				for varLoopPermissionsIndex, varLoopPermissions := range varLoopCustomRoles.Permissions {
					// add a new item
					body.CustomRoles[varLoopCustomRolesIndex].Permissions = append(body.CustomRoles[varLoopCustomRolesIndex].Permissions, sdwan_schema.AuthPermission{})
					// copy_from_plan: body=body.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex] prefix=rsModel plan=varLoopPermissions properties=1
					// property: name=value, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex].Value = StringValueOrNil(varLoopPermissions.Value)
				}
			}
			// property: name=region, type=STRING macro=copy_from_plan
			body.CustomRoles[varLoopCustomRolesIndex].Region = StringValueOrNil(varLoopCustomRoles.Region)
			// property: name=roles, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopCustomRoles.Roles == nil {
				body.CustomRoles[varLoopCustomRolesIndex].Roles = nil
			} else if len(varLoopCustomRoles.Roles) == 0 {
				body.CustomRoles[varLoopCustomRolesIndex].Roles = []sdwan_schema.AuthRole{}
			} else {
				body.CustomRoles[varLoopCustomRolesIndex].Roles = make([]sdwan_schema.AuthRole, 0, len(varLoopCustomRoles.Roles))
				for varLoopRolesIndex, varLoopRoles := range varLoopCustomRoles.Roles {
					// add a new item
					body.CustomRoles[varLoopCustomRolesIndex].Roles = append(body.CustomRoles[varLoopCustomRolesIndex].Roles, sdwan_schema.AuthRole{})
					// copy_from_plan: body=body.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex] prefix=rsModel plan=varLoopRoles properties=1
					// property: name=name, type=STRING macro=copy_from_plan
					body.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex].Name = StringValueOrNil(varLoopRoles.Name)
				}
			}
		}
	}
	// property: name=disable_idp_login, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.DisableIdpLogin = ValueBoolPointerFromPlanOrState(plan.DisableIdpLogin, state.DisableIdpLogin)
	} else {
		body.DisableIdpLogin = BoolValueOrNil(plan.DisableIdpLogin)
	}
	// property: name=disabled, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Disabled = ValueBoolPointerFromPlanOrState(plan.Disabled, state.Disabled)
	} else {
		body.Disabled = BoolValueOrNil(plan.Disabled)
	}
	// property: name=disabled_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.DisabledReason = ValueStringPointerFromPlanOrState(plan.DisabledReason, state.DisabledReason)
	} else {
		body.DisabledReason = StringValueOrNil(plan.DisabledReason)
	}
	// property: name=email, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Email = ValueStringPointerFromPlanOrState(plan.Email, state.Email)
	} else {
		body.Email = StringValueOrNil(plan.Email)
	}
	// property: name=email_iam, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.EmailIam = ValueStringPointerFromPlanOrState(plan.EmailIam, state.EmailIam)
	} else {
		body.EmailIam = StringValueOrNil(plan.EmailIam)
	}
	// property: name=email_validated, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.EmailValidated = ValueBoolPointerFromPlanOrState(plan.EmailValidated, state.EmailValidated)
	} else {
		body.EmailValidated = BoolValueOrNil(plan.EmailValidated)
	}
	// property: name=enable_session_ip_lock, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.EnableSessionIpLock = ValueBoolPointerFromPlanOrState(plan.EnableSessionIpLock, state.EnableSessionIpLock)
	} else {
		body.EnableSessionIpLock = BoolValueOrNil(plan.EnableSessionIpLock)
	}
	// property: name=first_name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.FirstName = ValueStringPointerFromPlanOrState(plan.FirstName, state.FirstName)
	} else {
		body.FirstName = StringValueOrNil(plan.FirstName)
	}
	// property: name=from_esp, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.FromEsp = ValueBoolPointerFromPlanOrState(plan.FromEsp, state.FromEsp)
	} else {
		body.FromEsp = BoolValueOrNil(plan.FromEsp)
	}
	// property: name=from_esp_name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.FromEspName = ValueStringPointerFromPlanOrState(plan.FromEspName, state.FromEspName)
	} else {
		body.FromEspName = StringValueOrNil(plan.FromEspName)
	}
	// property: name=from_esp_tenant_id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.FromEspTenantId = ValueStringPointerFromPlanOrState(plan.FromEspTenantId, state.FromEspTenantId)
	} else {
		body.FromEspTenantId = StringValueOrNil(plan.FromEspTenantId)
	}
	// property: name=id, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Id = ValueStringPointerFromPlanOrState(plan.Id, state.Id)
	} else {
		body.Id = StringValueOrNil(plan.Id)
	}
	// property: name=inactive, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.Inactive = ValueBoolPointerFromPlanOrState(plan.Inactive, state.Inactive)
	} else {
		body.Inactive = BoolValueOrNil(plan.Inactive)
	}
	// property: name=inactive_reason, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.InactiveReason = ValueStringPointerFromPlanOrState(plan.InactiveReason, state.InactiveReason)
	} else {
		body.InactiveReason = StringValueOrNil(plan.InactiveReason)
	}
	// property: name=ipv4_list, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.Ipv4List == nil && (state == nil || state.Ipv4List == nil) {
		body.Ipv4List = nil
	} else if len(plan.Ipv4List) == 0 && (state == nil || len(state.Ipv4List) == 0) {
		body.Ipv4List = []sdwan_schema.IPv4Address{}
	} else if len(plan.Ipv4List) != 0 || (state != nil && len(state.Ipv4List) != 0) {
		Ipv4ListToUse := plan.Ipv4List
		if len(plan.Ipv4List) == 0 {
			Ipv4ListToUse = state.Ipv4List
		}
		body.Ipv4List = make([]sdwan_schema.IPv4Address, 0, len(Ipv4ListToUse))
		for varLoopIpv4ListIndex, varLoopIpv4List := range Ipv4ListToUse {
			// add a new item
			body.Ipv4List = append(body.Ipv4List, sdwan_schema.IPv4Address{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.Ipv4List[varLoopIpv4ListIndex] prefix=rsModel plan=varLoopIpv4List properties=1
			// property: name=ipv4, type=STRING macro=copy_from_plan
			body.Ipv4List[varLoopIpv4ListIndex].Ipv4 = StringValueOrNil(varLoopIpv4List.Ipv4)
		}
	}
	// property: name=is_locked, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.IsLocked = ValueBoolPointerFromPlanOrState(plan.IsLocked, state.IsLocked)
	} else {
		body.IsLocked = BoolValueOrNil(plan.IsLocked)
	}
	// property: name=is_system_owned, type=BOOLEAN macro=copy_from_plan_or_state
	if state != nil {
		body.IsSystemOwned = ValueBoolPointerFromPlanOrState(plan.IsSystemOwned, state.IsSystemOwned)
	} else {
		body.IsSystemOwned = BoolValueOrNil(plan.IsSystemOwned)
	}
	// property: name=last_login, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.LastLogin = ValueStringPointerFromPlanOrState(plan.LastLogin, state.LastLogin)
	} else {
		body.LastLogin = StringValueOrNil(plan.LastLogin)
	}
	// property: name=last_name, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.LastName = ValueStringPointerFromPlanOrState(plan.LastName, state.LastName)
	} else {
		body.LastName = StringValueOrNil(plan.LastName)
	}
	// property: name=linked_accounts, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.LinkedAccounts == nil && (state == nil || state.LinkedAccounts == nil) {
		body.LinkedAccounts = nil
	} else if len(plan.LinkedAccounts) == 0 && (state == nil || len(state.LinkedAccounts) == 0) {
		body.LinkedAccounts = []sdwan_schema.LinkedAccount{}
	} else if len(plan.LinkedAccounts) != 0 || (state != nil && len(state.LinkedAccounts) != 0) {
		LinkedAccountsToUse := plan.LinkedAccounts
		if len(plan.LinkedAccounts) == 0 {
			LinkedAccountsToUse = state.LinkedAccounts
		}
		body.LinkedAccounts = make([]sdwan_schema.LinkedAccount, 0, len(LinkedAccountsToUse))
		for varLoopLinkedAccountsIndex, varLoopLinkedAccounts := range LinkedAccountsToUse {
			// add a new item
			body.LinkedAccounts = append(body.LinkedAccounts, sdwan_schema.LinkedAccount{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.LinkedAccounts[varLoopLinkedAccountsIndex] prefix=rsModel plan=varLoopLinkedAccounts properties=12
			// property: name=_etag, type=INTEGER macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Etag = Int64ValueOrNil(varLoopLinkedAccounts.Etag)
			// property: name=_schema, type=INTEGER macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Schema = Int64ValueOrNil(varLoopLinkedAccounts.Schema)
			// property: name=disabled, type=BOOLEAN macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Disabled = BoolValueOrNil(varLoopLinkedAccounts.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].DisabledReason = StringValueOrNil(varLoopLinkedAccounts.DisabledReason)
			// property: name=failed_login_attempts, type=INTEGER macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].FailedLoginAttempts = Int64ValueOrNil(varLoopLinkedAccounts.FailedLoginAttempts)
			// property: name=id, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Id = StringValueOrNil(varLoopLinkedAccounts.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Inactive = BoolValueOrNil(varLoopLinkedAccounts.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].InactiveReason = StringValueOrNil(varLoopLinkedAccounts.InactiveReason)
			// property: name=provider_key, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderKey = StringValueOrNil(varLoopLinkedAccounts.ProviderKey)
			// property: name=provider_value, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValue = StringValueOrNil(varLoopLinkedAccounts.ProviderValue)
			// property: name=provider_value_updated_on, type=INTEGER macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValueUpdatedOn = Int64ValueOrNil(varLoopLinkedAccounts.ProviderValueUpdatedOn)
			// property: name=region, type=STRING macro=copy_from_plan
			body.LinkedAccounts[varLoopLinkedAccountsIndex].Region = StringValueOrNil(varLoopLinkedAccounts.Region)
		}
	}
	// property: name=migration_state, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.MigrationState = ValueStringPointerFromPlanOrState(plan.MigrationState, state.MigrationState)
	} else {
		body.MigrationState = StringValueOrNil(plan.MigrationState)
	}
	// property: name=phone_numbers, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.PhoneNumbers == nil && (state == nil || state.PhoneNumbers == nil) {
		body.PhoneNumbers = nil
	} else if len(plan.PhoneNumbers) == 0 && (state == nil || len(state.PhoneNumbers) == 0) {
		body.PhoneNumbers = []sdwan_schema.PhoneNumber{}
	} else if len(plan.PhoneNumbers) != 0 || (state != nil && len(state.PhoneNumbers) != 0) {
		PhoneNumbersToUse := plan.PhoneNumbers
		if len(plan.PhoneNumbers) == 0 {
			PhoneNumbersToUse = state.PhoneNumbers
		}
		body.PhoneNumbers = make([]sdwan_schema.PhoneNumber, 0, len(PhoneNumbersToUse))
		for varLoopPhoneNumbersIndex, varLoopPhoneNumbers := range PhoneNumbersToUse {
			// add a new item
			body.PhoneNumbers = append(body.PhoneNumbers, sdwan_schema.PhoneNumber{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.PhoneNumbers[varLoopPhoneNumbersIndex] prefix=rsModel plan=varLoopPhoneNumbers properties=4
			// property: name=country_code, type=INTEGER macro=copy_from_plan
			body.PhoneNumbers[varLoopPhoneNumbersIndex].CountryCode = Int64ValueOrNil(varLoopPhoneNumbers.CountryCode)
			// property: name=local_extension, type=INTEGER macro=copy_from_plan
			body.PhoneNumbers[varLoopPhoneNumbersIndex].LocalExtension = Int64ValueOrNil(varLoopPhoneNumbers.LocalExtension)
			// property: name=number, type=INTEGER macro=copy_from_plan
			body.PhoneNumbers[varLoopPhoneNumbersIndex].Number = Int64ValueOrNil(varLoopPhoneNumbers.Number)
			// property: name=types, type=ARRAY_REFERENCE macro=copy_from_plan
			if varLoopPhoneNumbers.Types == nil {
				body.PhoneNumbers[varLoopPhoneNumbersIndex].Types = nil
			} else if len(varLoopPhoneNumbers.Types) == 0 {
				body.PhoneNumbers[varLoopPhoneNumbersIndex].Types = []sdwan_schema.Type{}
			} else {
				body.PhoneNumbers[varLoopPhoneNumbersIndex].Types = make([]sdwan_schema.Type, 0, len(varLoopPhoneNumbers.Types))
				for varLoopTypesIndex, varLoopTypes := range varLoopPhoneNumbers.Types {
					// add a new item
					body.PhoneNumbers[varLoopPhoneNumbersIndex].Types = append(body.PhoneNumbers[varLoopPhoneNumbersIndex].Types, sdwan_schema.Type{})
					// copy_from_plan: body=body.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex] prefix=rsModel plan=varLoopTypes properties=1
					// property: name=value, type=STRING macro=copy_from_plan
					body.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex].Value = StringValueOrNil(varLoopTypes.Value)
				}
			}
		}
	}
	// property: name=region, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Region = ValueStringPointerFromPlanOrState(plan.Region, state.Region)
	} else {
		body.Region = StringValueOrNil(plan.Region)
	}
	// property: name=roles, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.Roles == nil && (state == nil || state.Roles == nil) {
		body.Roles = nil
	} else if len(plan.Roles) == 0 && (state == nil || len(state.Roles) == 0) {
		body.Roles = []sdwan_schema.AuthRole{}
	} else if len(plan.Roles) != 0 || (state != nil && len(state.Roles) != 0) {
		RolesToUse := plan.Roles
		if len(plan.Roles) == 0 {
			RolesToUse = state.Roles
		}
		body.Roles = make([]sdwan_schema.AuthRole, 0, len(RolesToUse))
		for varLoopRolesIndex, varLoopRoles := range RolesToUse {
			// add a new item
			body.Roles = append(body.Roles, sdwan_schema.AuthRole{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.Roles[varLoopRolesIndex] prefix=rsModel plan=varLoopRoles properties=1
			// property: name=name, type=STRING macro=copy_from_plan
			body.Roles[varLoopRolesIndex].Name = StringValueOrNil(varLoopRoles.Name)
		}
	}
	// property: name=secondary_emails, type=ARRAY_REFERENCE macro=copy_from_plan_or_state
	if plan.SecondaryEmails == nil && (state == nil || state.SecondaryEmails == nil) {
		body.SecondaryEmails = nil
	} else if len(plan.SecondaryEmails) == 0 && (state == nil || len(state.SecondaryEmails) == 0) {
		body.SecondaryEmails = []sdwan_schema.Email{}
	} else if len(plan.SecondaryEmails) != 0 || (state != nil && len(state.SecondaryEmails) != 0) {
		SecondaryEmailsToUse := plan.SecondaryEmails
		if len(plan.SecondaryEmails) == 0 {
			SecondaryEmailsToUse = state.SecondaryEmails
		}
		body.SecondaryEmails = make([]sdwan_schema.Email, 0, len(SecondaryEmailsToUse))
		for varLoopSecondaryEmailsIndex, varLoopSecondaryEmails := range SecondaryEmailsToUse {
			// add a new item
			body.SecondaryEmails = append(body.SecondaryEmails, sdwan_schema.Email{})
			// since we have chosen to stick with either the plan or state, we need to simply copy child properties
			// copy_from_plan: body=body.SecondaryEmails[varLoopSecondaryEmailsIndex] prefix=rsModel plan=varLoopSecondaryEmails properties=1
			// property: name=email, type=STRING macro=copy_from_plan
			body.SecondaryEmails[varLoopSecondaryEmailsIndex].Email = StringValueOrNil(varLoopSecondaryEmails.Email)
		}
	}
	// property: name=settings, type=STRING macro=copy_from_plan_or_state
	if state != nil {
		body.Settings = ValueStringPointerFromPlanOrState(plan.Settings, state.Settings)
	} else {
		body.Settings = StringValueOrNil(plan.Settings)
	}

	// convert body to map
	json_body, err := json.Marshal(body)
	if err != nil {
		resp.Diagnostics.AddError("error marshaling struct OperatorV2N2 to JSON:", err.Error())
		return false
	}

	// process http json path
	request_body_string := string(json_body)
	// copy pointer
	put_request.RequestBody = &request_body_string

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, put_request)
	if put_request.ResponseErr != nil {
		if IsObjectNotFound(*put_request.ResponseErr) {
			State.RemoveResource(ctx)
		} else if r.GetHttpStatusCode(put_request) == 404 {
			State.RemoveResource(ctx)
		} else {
			tflog.Info(ctx, "update request failed for prismasdwan_operators", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_operators",
				"path":                        put_request.FinalPath,
			})
			tflog.Debug(ctx, "update request failed for prismasdwan_operators", map[string]any{
				"terraform_provider_function": "Update",
				"resource_name":               "prismasdwan_operators",
				"path":                        put_request.FinalPath,
				"request":                     put_request.ToString(),
			})
			resp.Diagnostics.AddError("error updating prismasdwan_operators", (*put_request.ResponseErr).Error())
		}
		return false
	}

	// process http json path
	response_body_string := string(*put_request.ResponseBytes)
	// inject overrides
	response_body_string, _ = sjson.Delete(response_body_string, "_created_on_utc")
	response_body_string, _ = sjson.Set(response_body_string, "_schema", 0)

	// start copying attributes
	var ans sdwan_schema.OperatorV2N2
	// copy from json response
	json_err := json.Unmarshal([]byte(response_body_string), &ans)
	// if found, exit
	if json_err != nil {
		resp.Diagnostics.AddError("error in json unmarshal to OperatorV2N2 in update", json_err.Error())
		return false
	}

	// Store the answer to state. schema=OperatorV2N2
	// copy_to_state: state=state prefix=rsModel ans=ans properties=30
	// property: name=_etag, type=INTEGER macro=copy_to_state
	state.Etag = types.Int64PointerValue(ans.Etag)
	// property: name=_schema, type=INTEGER macro=copy_to_state
	state.Schema = types.Int64PointerValue(ans.Schema)
	// property: name=addresses, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Addresses == nil {
		state.Addresses = nil
	} else if len(ans.Addresses) == 0 {
		state.Addresses = []rsModelAddress{}
	} else {
		state.Addresses = make([]rsModelAddress, 0, len(ans.Addresses))
		for varLoopAddressesIndex, varLoopAddresses := range ans.Addresses {
			// add a new item
			state.Addresses = append(state.Addresses, rsModelAddress{})
			// copy_to_state: state=state.Addresses[varLoopAddressesIndex] prefix=rsModel ans=varLoopAddresses properties=6
			// property: name=city, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].City = types.StringPointerValue(varLoopAddresses.City)
			// property: name=country, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Country = types.StringPointerValue(varLoopAddresses.Country)
			// property: name=post_code, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].PostCode = types.StringPointerValue(varLoopAddresses.PostCode)
			// property: name=state, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].State = types.StringPointerValue(varLoopAddresses.State)
			// property: name=street, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Street = types.StringPointerValue(varLoopAddresses.Street)
			// property: name=street2, type=STRING macro=copy_to_state
			state.Addresses[varLoopAddressesIndex].Street2 = types.StringPointerValue(varLoopAddresses.Street2)
		}
	}
	// property: name=custom_roles, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.CustomRoles == nil {
		state.CustomRoles = nil
	} else if len(ans.CustomRoles) == 0 {
		state.CustomRoles = []rsModelCustomRoleV2N1{}
	} else {
		state.CustomRoles = make([]rsModelCustomRoleV2N1, 0, len(ans.CustomRoles))
		for varLoopCustomRolesIndex, varLoopCustomRoles := range ans.CustomRoles {
			// add a new item
			state.CustomRoles = append(state.CustomRoles, rsModelCustomRoleV2N1{})
			// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex] prefix=rsModel ans=varLoopCustomRoles properties=15
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Etag = types.Int64PointerValue(varLoopCustomRoles.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Schema = types.Int64PointerValue(varLoopCustomRoles.Schema)
			// property: name=custom_permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.CustomPermissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = nil
			} else if len(varLoopCustomRoles.CustomPermissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = []rsModelCustomPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = make([]rsModelCustomPermission, 0, len(varLoopCustomRoles.CustomPermissions))
				for varLoopCustomPermissionsIndex, varLoopCustomPermissions := range varLoopCustomRoles.CustomPermissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions = append(state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions, rsModelCustomPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex] prefix=rsModel ans=varLoopCustomPermissions properties=12
					// property: name=_etag, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Etag = types.Int64PointerValue(varLoopCustomPermissions.Etag)
					// property: name=_schema, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Schema = types.Int64PointerValue(varLoopCustomPermissions.Schema)
					// property: name=allowed_after_ms, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedAfterMs = types.Int64PointerValue(varLoopCustomPermissions.AllowedAfterMs)
					// property: name=allowed_before_ms, type=INTEGER macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].AllowedBeforeMs = types.Int64PointerValue(varLoopCustomPermissions.AllowedBeforeMs)
					// property: name=disabled, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Disabled = types.BoolPointerValue(varLoopCustomPermissions.Disabled)
					// property: name=disabled_reason, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisabledReason = types.StringPointerValue(varLoopCustomPermissions.DisabledReason)
					// property: name=disallow_permission, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].DisallowPermission = types.BoolPointerValue(varLoopCustomPermissions.DisallowPermission)
					// property: name=id, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Id = types.StringPointerValue(varLoopCustomPermissions.Id)
					// property: name=inactive, type=BOOLEAN macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Inactive = types.BoolPointerValue(varLoopCustomPermissions.Inactive)
					// property: name=inactive_reason, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].InactiveReason = types.StringPointerValue(varLoopCustomPermissions.InactiveReason)
					// property: name=region, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Region = types.StringPointerValue(varLoopCustomPermissions.Region)
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].CustomPermissions[varLoopCustomPermissionsIndex].Value = types.StringPointerValue(varLoopCustomPermissions.Value)
				}
			}
			// property: name=description, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Description = types.StringPointerValue(varLoopCustomRoles.Description)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Disabled = types.BoolPointerValue(varLoopCustomRoles.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].DisabledReason = types.StringPointerValue(varLoopCustomRoles.DisabledReason)
			// property: name=disallow_permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.DisallowPermissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = nil
			} else if len(varLoopCustomRoles.DisallowPermissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = []rsModelAuthPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = make([]rsModelAuthPermission, 0, len(varLoopCustomRoles.DisallowPermissions))
				for varLoopDisallowPermissionsIndex, varLoopDisallowPermissions := range varLoopCustomRoles.DisallowPermissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions = append(state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions, rsModelAuthPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex] prefix=rsModel ans=varLoopDisallowPermissions properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].DisallowPermissions[varLoopDisallowPermissionsIndex].Value = types.StringPointerValue(varLoopDisallowPermissions.Value)
				}
			}
			// property: name=id, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Id = types.StringPointerValue(varLoopCustomRoles.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Inactive = types.BoolPointerValue(varLoopCustomRoles.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].InactiveReason = types.StringPointerValue(varLoopCustomRoles.InactiveReason)
			// property: name=is_system_owned, type=BOOLEAN macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].IsSystemOwned = types.BoolPointerValue(varLoopCustomRoles.IsSystemOwned)
			// property: name=name, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Name = types.StringPointerValue(varLoopCustomRoles.Name)
			// property: name=permissions, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.Permissions == nil {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = nil
			} else if len(varLoopCustomRoles.Permissions) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = []rsModelAuthPermission{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].Permissions = make([]rsModelAuthPermission, 0, len(varLoopCustomRoles.Permissions))
				for varLoopPermissionsIndex, varLoopPermissions := range varLoopCustomRoles.Permissions {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].Permissions = append(state.CustomRoles[varLoopCustomRolesIndex].Permissions, rsModelAuthPermission{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex] prefix=rsModel ans=varLoopPermissions properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].Permissions[varLoopPermissionsIndex].Value = types.StringPointerValue(varLoopPermissions.Value)
				}
			}
			// property: name=region, type=STRING macro=copy_to_state
			state.CustomRoles[varLoopCustomRolesIndex].Region = types.StringPointerValue(varLoopCustomRoles.Region)
			// property: name=roles, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopCustomRoles.Roles == nil {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = nil
			} else if len(varLoopCustomRoles.Roles) == 0 {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = []rsModelAuthRole{}
			} else {
				state.CustomRoles[varLoopCustomRolesIndex].Roles = make([]rsModelAuthRole, 0, len(varLoopCustomRoles.Roles))
				for varLoopRolesIndex, varLoopRoles := range varLoopCustomRoles.Roles {
					// add a new item
					state.CustomRoles[varLoopCustomRolesIndex].Roles = append(state.CustomRoles[varLoopCustomRolesIndex].Roles, rsModelAuthRole{})
					// copy_to_state: state=state.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex] prefix=rsModel ans=varLoopRoles properties=1
					// property: name=name, type=STRING macro=copy_to_state
					state.CustomRoles[varLoopCustomRolesIndex].Roles[varLoopRolesIndex].Name = types.StringPointerValue(varLoopRoles.Name)
				}
			}
		}
	}
	// property: name=disable_idp_login, type=BOOLEAN macro=copy_to_state
	state.DisableIdpLogin = types.BoolPointerValue(ans.DisableIdpLogin)
	// property: name=disabled, type=BOOLEAN macro=copy_to_state
	state.Disabled = types.BoolPointerValue(ans.Disabled)
	// property: name=disabled_reason, type=STRING macro=copy_to_state
	state.DisabledReason = types.StringPointerValue(ans.DisabledReason)
	// property: name=email, type=STRING macro=copy_to_state
	state.Email = types.StringPointerValue(ans.Email)
	// property: name=email_iam, type=STRING macro=copy_to_state
	state.EmailIam = types.StringPointerValue(ans.EmailIam)
	// property: name=email_validated, type=BOOLEAN macro=copy_to_state
	state.EmailValidated = types.BoolPointerValue(ans.EmailValidated)
	// property: name=enable_session_ip_lock, type=BOOLEAN macro=copy_to_state
	state.EnableSessionIpLock = types.BoolPointerValue(ans.EnableSessionIpLock)
	// property: name=first_name, type=STRING macro=copy_to_state
	state.FirstName = types.StringPointerValue(ans.FirstName)
	// property: name=from_esp, type=BOOLEAN macro=copy_to_state
	state.FromEsp = types.BoolPointerValue(ans.FromEsp)
	// property: name=from_esp_name, type=STRING macro=copy_to_state
	state.FromEspName = types.StringPointerValue(ans.FromEspName)
	// property: name=from_esp_tenant_id, type=STRING macro=copy_to_state
	state.FromEspTenantId = types.StringPointerValue(ans.FromEspTenantId)
	// property: name=id, type=STRING macro=copy_to_state
	state.Id = types.StringPointerValue(ans.Id)
	// property: name=inactive, type=BOOLEAN macro=copy_to_state
	state.Inactive = types.BoolPointerValue(ans.Inactive)
	// property: name=inactive_reason, type=STRING macro=copy_to_state
	state.InactiveReason = types.StringPointerValue(ans.InactiveReason)
	// property: name=ipv4_list, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Ipv4List == nil {
		state.Ipv4List = nil
	} else if len(ans.Ipv4List) == 0 {
		state.Ipv4List = []rsModelIPv4Address{}
	} else {
		state.Ipv4List = make([]rsModelIPv4Address, 0, len(ans.Ipv4List))
		for varLoopIpv4ListIndex, varLoopIpv4List := range ans.Ipv4List {
			// add a new item
			state.Ipv4List = append(state.Ipv4List, rsModelIPv4Address{})
			// copy_to_state: state=state.Ipv4List[varLoopIpv4ListIndex] prefix=rsModel ans=varLoopIpv4List properties=1
			// property: name=ipv4, type=STRING macro=copy_to_state
			state.Ipv4List[varLoopIpv4ListIndex].Ipv4 = types.StringPointerValue(varLoopIpv4List.Ipv4)
		}
	}
	// property: name=is_locked, type=BOOLEAN macro=copy_to_state
	state.IsLocked = types.BoolPointerValue(ans.IsLocked)
	// property: name=is_system_owned, type=BOOLEAN macro=copy_to_state
	state.IsSystemOwned = types.BoolPointerValue(ans.IsSystemOwned)
	// property: name=last_login, type=STRING macro=copy_to_state
	state.LastLogin = types.StringPointerValue(ans.LastLogin)
	// property: name=last_name, type=STRING macro=copy_to_state
	state.LastName = types.StringPointerValue(ans.LastName)
	// property: name=linked_accounts, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.LinkedAccounts == nil {
		state.LinkedAccounts = nil
	} else if len(ans.LinkedAccounts) == 0 {
		state.LinkedAccounts = []rsModelLinkedAccount{}
	} else {
		state.LinkedAccounts = make([]rsModelLinkedAccount, 0, len(ans.LinkedAccounts))
		for varLoopLinkedAccountsIndex, varLoopLinkedAccounts := range ans.LinkedAccounts {
			// add a new item
			state.LinkedAccounts = append(state.LinkedAccounts, rsModelLinkedAccount{})
			// copy_to_state: state=state.LinkedAccounts[varLoopLinkedAccountsIndex] prefix=rsModel ans=varLoopLinkedAccounts properties=12
			// property: name=_etag, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Etag = types.Int64PointerValue(varLoopLinkedAccounts.Etag)
			// property: name=_schema, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Schema = types.Int64PointerValue(varLoopLinkedAccounts.Schema)
			// property: name=disabled, type=BOOLEAN macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Disabled = types.BoolPointerValue(varLoopLinkedAccounts.Disabled)
			// property: name=disabled_reason, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].DisabledReason = types.StringPointerValue(varLoopLinkedAccounts.DisabledReason)
			// property: name=failed_login_attempts, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].FailedLoginAttempts = types.Int64PointerValue(varLoopLinkedAccounts.FailedLoginAttempts)
			// property: name=id, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Id = types.StringPointerValue(varLoopLinkedAccounts.Id)
			// property: name=inactive, type=BOOLEAN macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Inactive = types.BoolPointerValue(varLoopLinkedAccounts.Inactive)
			// property: name=inactive_reason, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].InactiveReason = types.StringPointerValue(varLoopLinkedAccounts.InactiveReason)
			// property: name=provider_key, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderKey = types.StringPointerValue(varLoopLinkedAccounts.ProviderKey)
			// property: name=provider_value, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValue = types.StringPointerValue(varLoopLinkedAccounts.ProviderValue)
			// property: name=provider_value_updated_on, type=INTEGER macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].ProviderValueUpdatedOn = types.Int64PointerValue(varLoopLinkedAccounts.ProviderValueUpdatedOn)
			// property: name=region, type=STRING macro=copy_to_state
			state.LinkedAccounts[varLoopLinkedAccountsIndex].Region = types.StringPointerValue(varLoopLinkedAccounts.Region)
		}
	}
	// property: name=migration_state, type=STRING macro=copy_to_state
	state.MigrationState = types.StringPointerValue(ans.MigrationState)
	// property: name=phone_numbers, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.PhoneNumbers == nil {
		state.PhoneNumbers = nil
	} else if len(ans.PhoneNumbers) == 0 {
		state.PhoneNumbers = []rsModelPhoneNumber{}
	} else {
		state.PhoneNumbers = make([]rsModelPhoneNumber, 0, len(ans.PhoneNumbers))
		for varLoopPhoneNumbersIndex, varLoopPhoneNumbers := range ans.PhoneNumbers {
			// add a new item
			state.PhoneNumbers = append(state.PhoneNumbers, rsModelPhoneNumber{})
			// copy_to_state: state=state.PhoneNumbers[varLoopPhoneNumbersIndex] prefix=rsModel ans=varLoopPhoneNumbers properties=4
			// property: name=country_code, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].CountryCode = types.Int64PointerValue(varLoopPhoneNumbers.CountryCode)
			// property: name=local_extension, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].LocalExtension = types.Int64PointerValue(varLoopPhoneNumbers.LocalExtension)
			// property: name=number, type=INTEGER macro=copy_to_state
			state.PhoneNumbers[varLoopPhoneNumbersIndex].Number = types.Int64PointerValue(varLoopPhoneNumbers.Number)
			// property: name=types, type=ARRAY_REFERENCE macro=copy_to_state
			if varLoopPhoneNumbers.Types == nil {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = nil
			} else if len(varLoopPhoneNumbers.Types) == 0 {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = []rsModelType{}
			} else {
				state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = make([]rsModelType, 0, len(varLoopPhoneNumbers.Types))
				for varLoopTypesIndex, varLoopTypes := range varLoopPhoneNumbers.Types {
					// add a new item
					state.PhoneNumbers[varLoopPhoneNumbersIndex].Types = append(state.PhoneNumbers[varLoopPhoneNumbersIndex].Types, rsModelType{})
					// copy_to_state: state=state.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex] prefix=rsModel ans=varLoopTypes properties=1
					// property: name=value, type=STRING macro=copy_to_state
					state.PhoneNumbers[varLoopPhoneNumbersIndex].Types[varLoopTypesIndex].Value = types.StringPointerValue(varLoopTypes.Value)
				}
			}
		}
	}
	// property: name=region, type=STRING macro=copy_to_state
	state.Region = types.StringPointerValue(ans.Region)
	// property: name=roles, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.Roles == nil {
		state.Roles = nil
	} else if len(ans.Roles) == 0 {
		state.Roles = []rsModelAuthRole{}
	} else {
		state.Roles = make([]rsModelAuthRole, 0, len(ans.Roles))
		for varLoopRolesIndex, varLoopRoles := range ans.Roles {
			// add a new item
			state.Roles = append(state.Roles, rsModelAuthRole{})
			// copy_to_state: state=state.Roles[varLoopRolesIndex] prefix=rsModel ans=varLoopRoles properties=1
			// property: name=name, type=STRING macro=copy_to_state
			state.Roles[varLoopRolesIndex].Name = types.StringPointerValue(varLoopRoles.Name)
		}
	}
	// property: name=secondary_emails, type=ARRAY_REFERENCE macro=copy_to_state
	if ans.SecondaryEmails == nil {
		state.SecondaryEmails = nil
	} else if len(ans.SecondaryEmails) == 0 {
		state.SecondaryEmails = []rsModelEmail{}
	} else {
		state.SecondaryEmails = make([]rsModelEmail, 0, len(ans.SecondaryEmails))
		for varLoopSecondaryEmailsIndex, varLoopSecondaryEmails := range ans.SecondaryEmails {
			// add a new item
			state.SecondaryEmails = append(state.SecondaryEmails, rsModelEmail{})
			// copy_to_state: state=state.SecondaryEmails[varLoopSecondaryEmailsIndex] prefix=rsModel ans=varLoopSecondaryEmails properties=1
			// property: name=email, type=STRING macro=copy_to_state
			state.SecondaryEmails[varLoopSecondaryEmailsIndex].Email = types.StringPointerValue(varLoopSecondaryEmails.Email)
		}
	}
	// property: name=settings, type=STRING macro=copy_to_state
	state.Settings = types.StringPointerValue(ans.Settings)
	return true
}

func (r *operatorsResource) doDelete(ctx context.Context, state *rsModelOperatorV2N2, resp *resource.DeleteResponse) bool {
	// read object id
	tfid := state.Tfid.ValueString()
	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "prismasdwan_operators",
		"locMap":                      map[string]int{"prefix_id": 0},
	})

	// tokens must match
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("error in prismasdwan_operators ID format", "Expected 1 tokens")
		return false
	}

	// Prepare input for the API endpoint.
	delete_request := &sdwan_client.SdwanClientRequestResponse{}
	delete_request.Method = "DELETE"
	delete_request.Path = "/sdwan/v2.2/api/operators/{operator_id}"

	// copy parameters from plan always
	params := MapStringValueOrNil(ctx, state.TfParameters)
	delete_request.PathParameters = &params
	// add last parameter as ObjectID
	(*delete_request.PathParameters)["operator_id"] = &tokens[0]
	// add other parameters by splitting on `=`
	for _, token := range tokens[1:] {
		param := strings.Split(token, "=")
		(*delete_request.PathParameters)[param[0]] = &param[1]
	}

	// Client that will perform the request.
	svc := sdwan_client.NewClient(r.client)

	// Perform the operation.
	svc.ExecuteSdwanRequest(ctx, delete_request)
	if delete_request.ResponseErr != nil {
		if !IsObjectNotFound(*delete_request.ResponseErr) {
			resp.Diagnostics.AddError("error deleting prismasdwan_operators", (*delete_request.ResponseErr).Error())
			return false
		}
	}
	return true
}

// Performs the Create(POST) Operation on the Resource
// TfID is pulled from plan to use in the creation request
// Path Parameters are encoded into TfID itself
func (r *operatorsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "executing resource create for prismasdwan_operators")
	var plan rsModelOperatorV2N2
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make post call
	var state rsModelOperatorV2N2
	if r.doPost(ctx, &plan, &state, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Read(GET) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
func (r *operatorsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	tflog.Info(ctx, "executing resource read for prismasdwan_operators")
	var savestate, state rsModelOperatorV2N2
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a get call
	if r.doGet(ctx, &state, &savestate, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Update(PUT) Operation on the Resource
// TfID is pulled from state to use in the read request
// Path Parameters are extracted TfID itself
// TfID must match in state and plan, else error is thrown
func (r *operatorsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	tflog.Info(ctx, "executing resource update for prismasdwan_operators")
	var plan, state rsModelOperatorV2N2
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// copy plan from TF
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a put call
	if r.doPut(ctx, &plan, &state, &resp.State, resp) {
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
	}
}

// Performs the Delete Operation on the Resource
// TfID is pulled from state to use in the deletion request
// Path Parameters are extracted from the TfID itself
func (r *operatorsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	tflog.Info(ctx, "executing resource delete for prismasdwan_operators")
	var state rsModelOperatorV2N2
	// copy state from TF
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// make a delete call
	if r.doDelete(ctx, &state, resp) {
		resp.State.RemoveResource(ctx)
	}
}

func (r *operatorsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
